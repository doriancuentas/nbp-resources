// $ANTLR 3.4 D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g 2015-06-11 15:15:44

package org.netbeans.modules.cnd.modelimpl.parser.generated;

import java.util.HashMap;
import org.netbeans.modules.cnd.modelimpl.parser.*;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

/**
 * Original C++ grammar.
 * @author Fedor Sergeev
 * C++ grammar. C++11 standard extensions.
 * @author Nikolay Krasilnikov (nnnnnk@netbeans.org)
 */
@SuppressWarnings({"all", "warnings", "unchecked", "cast", "fallthrough"})
public class CXXParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ELLIPSIS", "DOT", "ASSIGNEQUAL", "COLON", "COMMA", "QUESTIONMARK", "SEMICOLON", "POINTERTO", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "LCURLY", "RCURLY", "EQUAL", "NOTEQUAL", "LESSTHANOREQUALTO", "LESSTHAN", "GREATERTHANOREQUALTO", "GREATERTHAN", "DIVIDE", "DIVIDEEQUAL", "PLUS", "PLUSEQUAL", "PLUSPLUS", "MINUS", "MINUSEQUAL", "MINUSMINUS", "STAR", "TIMESEQUAL", "MOD", "MODEQUAL", "SHIFTRIGHT", "SHIFTRIGHTEQUAL", "SHIFTLEFT", "SHIFTLEFTEQUAL", "AND", "NOT", "OR", "AMPERSAND", "BITWISEANDEQUAL", "TILDE", "BITWISEOR", "BITWISEOREQUAL", "BITWISEXOR", "BITWISEXOREQUAL", "POINTERTOMBR", "DOTMBR", "SCOPE", "AT", "DOLLAR", "BACK_SLASH", "DEFINED", "DBL_SHARP", "SHARP", "FUN_LIKE_MACRO_LPAREN", "GRAVE_ACCENT", "END_PREPROC_DIRECTIVE", "LAST_CONST_TEXT_TOKEN", "FLOATONE", "FLOATTWO", "HEXADECIMALINT", "OCTALINT", "DECIMALINT", "Whitespace", "EndOfLine", "Skip", "PreProcComment", "PPLiterals", "Space", "PreProcBlockComment", "PreProcLineComment", "Comment", "CPPComment", "CHAR_LITERAL", "STRING_LITERAL", "InterStringWhitespace", "StringPart", "Escape", "Digit", "Decimal", "LongSuffix", "UnsignedSuffix", "FloatSuffix", "Exponent", "Vocabulary", "NUMBER", "IDENT", "BINARYINT", "INCLUDE_STRING", "SYS_INCLUDE_STRING", "INCLUDE", "INCLUDE_NEXT", "DEFINE", "UNDEF", "IFDEF", "IFNDEF", "IF", "ELIF", "ELSE", "ENDIF", "PRAGMA", "LINE", "ERROR", "PREPROC_DIRECTIVE", "FIRST_LITERAL_TOKEN", "LITERAL_OPERATOR", "LITERAL_alignof", "LITERAL___alignof__", "LITERAL_typeof", "LITERAL___typeof__", "LITERAL___typeof", "LITERAL_template", "LITERAL_typedef", "LITERAL_enum", "LITERAL_namespace", "LITERAL_extern", "LITERAL_inline", "LITERAL__inline", "LITERAL___inline__", "LITERAL___inline", "LITERAL_virtual", "LITERAL_explicit", "LITERAL_friend", "LITERAL__stdcall", "LITERAL___stdcall", "LITERAL_typename", "LITERAL_auto", "LITERAL_register", "LITERAL_static", "LITERAL_mutable", "LITERAL_const", "LITERAL___const__", "LITERAL___const", "LITERAL_const_cast", "LITERAL_volatile", "LITERAL___volatile__", "LITERAL___volatile", "LITERAL_char", "LITERAL_wchar_t", "LITERAL_bool", "LITERAL_short", "LITERAL_int", "LITERAL_long", "LITERAL_signed", "LITERAL___signed__", "LITERAL___signed", "LITERAL_unsigned", "LITERAL___unsigned__", "LITERAL_float", "LITERAL_double", "LITERAL_void", "LITERAL__declspec", "LITERAL___declspec", "LITERAL_class", "LITERAL_struct", "LITERAL_union", "LITERAL_this", "LITERAL_true", "LITERAL_false", "LITERAL_public", "LITERAL_protected", "LITERAL_private", "LITERAL_throw", "LITERAL_case", "LITERAL_default", "LITERAL_if", "LITERAL_else", "LITERAL_switch", "LITERAL_while", "LITERAL_do", "LITERAL_for", "LITERAL_goto", "LITERAL_continue", "LITERAL_break", "LITERAL_return", "LITERAL_try", "LITERAL_catch", "LITERAL_using", "LITERAL_export", "LITERAL_asm", "LITERAL__asm", "LITERAL___asm__", "LITERAL___asm", "LITERAL__endasm", "LITERAL_sizeof", "LITERAL_dynamic_cast", "LITERAL_static_cast", "LITERAL_reinterpret_cast", "LITERAL_new", "LITERAL__cdecl", "LITERAL___cdecl", "LITERAL__near", "LITERAL___near", "LITERAL__far", "LITERAL___far", "LITERAL___interrupt", "LITERAL_pascal", "LITERAL__pascal", "LITERAL___pascal", "LITERAL_delete", "LITERAL__int64", "LITERAL___int64", "LITERAL___w64", "LITERAL___extension__", "LITERAL___attribute__", "LITERAL_restrict", "LITERAL___restrict", "LITERAL___complex__", "LITERAL___imag", "LITERAL___real", "LITERAL___global", "LITERAL__Bool", "LITERAL__Complex", "LITERAL___thread", "LITERAL___attribute", "LITERAL__Imaginary", "LITERAL_bit", "LITERAL___symbolic", "LITERAL___hidden", "LITERAL_final", "LITERAL_override", "LITERAL_constexpr", "LITERAL_decltype", "LITERAL_nullptr", "LITERAL_thread_local", "LITERAL_static_assert", "LITERAL_alignas", "LITERAL_char16_t", "LITERAL_char32_t", "LITERAL_noexcept", "LITERAL___decltype", "LITERAL___complex", "LITERAL___forceinline", "LITERAL___clrcall", "LITERAL___try", "LITERAL___finally", "LITERAL___null", "LITERAL___alignof", "LITERAL___is_class", "LITERAL___is_enum", "LITERAL___is_pod", "LITERAL___is_base_of", "LITERAL___has_trivial_constructor", "LITERAL___restrict__", "LITERAL__Noreturn", "LITERAL___has_nothrow_assign", "LITERAL___has_nothrow_copy", "LITERAL___has_nothrow_constructor", "LITERAL___has_trivial_assign", "LITERAL___has_trivial_copy", "LITERAL___has_trivial_destructor", "LITERAL___has_virtual_destructor", "LITERAL___is_abstract", "LITERAL___is_empty", "LITERAL___is_literal_type", "LITERAL___is_polymorphic", "LITERAL___is_standard_layout", "LITERAL___is_trivial", "LITERAL___is_union", "LITERAL___underlying_type", "LITERAL___builtin_va_list", "LAST_LITERAL_TOKEN", "LITERAL__BUILT_IN_TYPE__", "LITERAL__TYPE_QUALIFIER__", "LITERAL__STORAGE_CLASS_SPECIFIER__", "T_CLOSE", "T_BLOCK", "T_GE", "T_CONTAINS", "T_ABSTRACT", "T_CLASS", "T_NOPASS", "T_UNFORMATTED", "T_LESSTHAN", "T_ENDSUBROUTINE", "T_GT", "T_IDENT", "T_INTERFACE", "T_RETURN", "T_XYZ", "T_EOF", "T_CALL", "T_EOS", "T_GO", "T_AND", "T_PERCENT", "T_PRINT", "T_ALLOCATE_STMT_1", "T_SUBROUTINE", "T_CONTROL_EDIT_DESC", "T_ENUMERATOR", "Alphanumeric_Character", "T_DEFINED_OP", "T_KIND", "T_STOP", "T_GREATERTHAN_EQ", "T_CHAR_STRING_EDIT_DESC", "T_ALLOCATABLE", "T_ENDINTERFACE", "T_END", "T_ASTERISK", "T_PRIVATE", "T_DOUBLEPRECISION", "T_CASE", "T_IMPLICIT", "T_IF", "T_THEN", "T_DIMENSION", "T_GOTO", "T_ENDMODULE", "T_IN", "T_WRITE", "T_FORMATTED", "WS", "T_DATA", "T_FALSE", "T_WHERE", "T_ENDIF", "T_SLASH", "SQ_Rep_Char", "T_GENERIC", "T_RECURSIVE", "DQ_Rep_Char", "T_ELSEIF", "T_BLOCKDATA", "OCTAL_CONSTANT", "T_SELECTTYPE", "T_MINUS", "T_SELECT", "T_FINAL", "T_UNDERSCORE", "T_IMPORT", "T_USE", "T_FILE", "T_RPAREN", "T_INTENT", "T_ENDBLOCK", "T_ASSIGNMENT_STMT", "T_PAUSE", "T_BACKSPACE", "T_ENDFILE", "T_EQUALS", "T_NON_INTRINSIC", "T_SELECTCASE", "T_DIGIT_STRING", "T_COLON_COLON", "T_NON_OVERRIDABLE", "Special_Character", "T_INCLUDE", "T_OPEN", "T_POWER", "T_ASSOCIATE", "T_CHAR_CONSTANT", "T_OPERATOR", "T_TO", "T_ENDASSOCIATE", "T_EQ", "T_GREATERTHAN", "T_DATA_EDIT_DESC", "T_INQUIRE_STMT_2", "T_EQV", "HEX_CONSTANT", "Digit_String", "T_ELEMENTAL", "T_CHARACTER", "PREPROCESS_LINE", "T_NULLIFY", "T_REWIND", "T_ARITHMETIC_IF_STMT", "T_FORALL_CONSTRUCT_STMT", "T_BIND", "T_ENDFORALL", "T_DO", "T_WHERE_STMT", "T_POINTER", "T_PROGRAM", "T_ENDTYPE", "T_WAIT", "T_ELSE", "T_IF_STMT", "T_RBRACKET", "T_LPAREN", "T_EXTENDS", "T_OPTIONAL", "T_DOUBLE", "T_MODULE", "T_READ", "T_ALLOCATE", "T_INTEGER", "T_OR", "T_EQUIVALENCE", "T_PERIOD", "T_ENTRY", "T_LABEL_DO_TERMINAL", "T_REAL", "T_CYCLE", "T_PROCEDURE", "T_EQ_EQ", "T_SLASH_EQ", "T_ENDSELECT", "T_PURE", "T_TRUE", "T_NE", "T_INTRINSIC", "T_PASS", "T_REAL_CONSTANT", "LINE_COMMENT", "T_PERIOD_EXPONENT", "T_ENDWHERE", "MISC_CHAR", "T_FORMAT", "T_DEFAULT", "T_SLASH_SLASH", "T_NONE", "T_NAMELIST", "T_SEQUENCE", "T_PRECISION", "T_ASYNCHRONOUS", "T_COMMA", "T_RESULT", "T_ENDBLOCKDATA", "T_LOGICAL", "T_VALUE", "Letter", "T_FORALL", "T_SAVE", "T_HOLLERITH", "T_FLUSH", "T_WHILE", "T_INQUIRE", "T_DEFERRED", "T_FORALL_STMT", "T_ASSIGN", "T_LBRACKET", "T_EXTERNAL", "T_VOLATILE", "T_OUT", "CONTINUE_CHAR", "T_COLON", "T_COMPLEX", "T_PLUS", "T_STMT_FUNCTION", "T_ONLY", "T_PROTECTED", "T_COMMON", "T_INOUT", "T_NEQV", "T_PUBLIC", "T_ENDDO", "T_ENDPROGRAM", "T_ENDFUNCTION", "T_WHERE_CONSTRUCT_STMT", "T_ELSEWHERE", "T_ENUM", "T_PARAMETER", "T_TARGET", "T_DOUBLECOMPLEX", "T_PTR_ASSIGNMENT_STMT", "T_TYPE", "T_LESSTHAN_EQ", "T_DEALLOCATE", "T_LT", "T_FUNCTION", "T_EQ_GT", "T_ENDENUM", "BINARY_CONSTANT", "T_LE", "T_LEN", "T_CONTINUE", "T_NOT", "Rep_Char", "T_ASSIGNMENT", "T_EXIT", "FORTRAN_COMMENT", "FIRST_ASSIGN", "FIRST_DIVIDE", "FIRST_STAR", "FIRST_MOD", "FIRST_NOT", "FIRST_AMPERSAND", "COMMENT", "CPP_COMMENT", "FIRST_OR", "FIRST_BITWISEXOR", "FIRST_COLON", "FIRST_LESS", "FIRST_GREATER", "FIRST_MINUS", "FIRST_PLUS", "FIRST_QUOTATION", "H_char_sequence", "Q_char_sequence", "DirectiveBody", "CHAR_LITERAL_BODY", "STRING_LITERAL_BODY", "RAW_STRING_LITERAL", "RAW_STRING_LITERAL_BODY", "Suffix", "ID_LIKE", "ID_DEFINED", "Identifier", "PostPPKwdChar", "PostInclChar", "PostIfChar", "LAST_LEXER_FAKE_RULE", "HAS_VIRT_DESTR", "IS_ABSTRACT", "IS_BASEOF", "IS_CLASS", "IS_EMPTY", "IS_ENUM", "IS_POD", "IS_POLYMORPH", "IS_UNION", "LITERAL_POINTERTO", "LITERAL___offsetof", "LITERAL_typeid"
    };

    public static final int EOF=-1;
    public static final int ELLIPSIS=4;
    public static final int DOT=5;
    public static final int ASSIGNEQUAL=6;
    public static final int COLON=7;
    public static final int COMMA=8;
    public static final int QUESTIONMARK=9;
    public static final int SEMICOLON=10;
    public static final int POINTERTO=11;
    public static final int LPAREN=12;
    public static final int RPAREN=13;
    public static final int LSQUARE=14;
    public static final int RSQUARE=15;
    public static final int LCURLY=16;
    public static final int RCURLY=17;
    public static final int EQUAL=18;
    public static final int NOTEQUAL=19;
    public static final int LESSTHANOREQUALTO=20;
    public static final int LESSTHAN=21;
    public static final int GREATERTHANOREQUALTO=22;
    public static final int GREATERTHAN=23;
    public static final int DIVIDE=24;
    public static final int DIVIDEEQUAL=25;
    public static final int PLUS=26;
    public static final int PLUSEQUAL=27;
    public static final int PLUSPLUS=28;
    public static final int MINUS=29;
    public static final int MINUSEQUAL=30;
    public static final int MINUSMINUS=31;
    public static final int STAR=32;
    public static final int TIMESEQUAL=33;
    public static final int MOD=34;
    public static final int MODEQUAL=35;
    public static final int SHIFTRIGHT=36;
    public static final int SHIFTRIGHTEQUAL=37;
    public static final int SHIFTLEFT=38;
    public static final int SHIFTLEFTEQUAL=39;
    public static final int AND=40;
    public static final int NOT=41;
    public static final int OR=42;
    public static final int AMPERSAND=43;
    public static final int BITWISEANDEQUAL=44;
    public static final int TILDE=45;
    public static final int BITWISEOR=46;
    public static final int BITWISEOREQUAL=47;
    public static final int BITWISEXOR=48;
    public static final int BITWISEXOREQUAL=49;
    public static final int POINTERTOMBR=50;
    public static final int DOTMBR=51;
    public static final int SCOPE=52;
    public static final int AT=53;
    public static final int DOLLAR=54;
    public static final int BACK_SLASH=55;
    public static final int DEFINED=56;
    public static final int DBL_SHARP=57;
    public static final int SHARP=58;
    public static final int FUN_LIKE_MACRO_LPAREN=59;
    public static final int GRAVE_ACCENT=60;
    public static final int END_PREPROC_DIRECTIVE=61;
    public static final int LAST_CONST_TEXT_TOKEN=62;
    public static final int FLOATONE=63;
    public static final int FLOATTWO=64;
    public static final int HEXADECIMALINT=65;
    public static final int OCTALINT=66;
    public static final int DECIMALINT=67;
    public static final int Whitespace=68;
    public static final int EndOfLine=69;
    public static final int Skip=70;
    public static final int PreProcComment=71;
    public static final int PPLiterals=72;
    public static final int Space=73;
    public static final int PreProcBlockComment=74;
    public static final int PreProcLineComment=75;
    public static final int Comment=76;
    public static final int CPPComment=77;
    public static final int CHAR_LITERAL=78;
    public static final int STRING_LITERAL=79;
    public static final int InterStringWhitespace=80;
    public static final int StringPart=81;
    public static final int Escape=82;
    public static final int Digit=83;
    public static final int Decimal=84;
    public static final int LongSuffix=85;
    public static final int UnsignedSuffix=86;
    public static final int FloatSuffix=87;
    public static final int Exponent=88;
    public static final int Vocabulary=89;
    public static final int NUMBER=90;
    public static final int IDENT=91;
    public static final int BINARYINT=92;
    public static final int INCLUDE_STRING=93;
    public static final int SYS_INCLUDE_STRING=94;
    public static final int INCLUDE=95;
    public static final int INCLUDE_NEXT=96;
    public static final int DEFINE=97;
    public static final int UNDEF=98;
    public static final int IFDEF=99;
    public static final int IFNDEF=100;
    public static final int IF=101;
    public static final int ELIF=102;
    public static final int ELSE=103;
    public static final int ENDIF=104;
    public static final int PRAGMA=105;
    public static final int LINE=106;
    public static final int ERROR=107;
    public static final int PREPROC_DIRECTIVE=108;
    public static final int FIRST_LITERAL_TOKEN=109;
    public static final int LITERAL_OPERATOR=110;
    public static final int LITERAL_alignof=111;
    public static final int LITERAL___alignof__=112;
    public static final int LITERAL_typeof=113;
    public static final int LITERAL___typeof__=114;
    public static final int LITERAL___typeof=115;
    public static final int LITERAL_template=116;
    public static final int LITERAL_typedef=117;
    public static final int LITERAL_enum=118;
    public static final int LITERAL_namespace=119;
    public static final int LITERAL_extern=120;
    public static final int LITERAL_inline=121;
    public static final int LITERAL__inline=122;
    public static final int LITERAL___inline__=123;
    public static final int LITERAL___inline=124;
    public static final int LITERAL_virtual=125;
    public static final int LITERAL_explicit=126;
    public static final int LITERAL_friend=127;
    public static final int LITERAL__stdcall=128;
    public static final int LITERAL___stdcall=129;
    public static final int LITERAL_typename=130;
    public static final int LITERAL_auto=131;
    public static final int LITERAL_register=132;
    public static final int LITERAL_static=133;
    public static final int LITERAL_mutable=134;
    public static final int LITERAL_const=135;
    public static final int LITERAL___const__=136;
    public static final int LITERAL___const=137;
    public static final int LITERAL_const_cast=138;
    public static final int LITERAL_volatile=139;
    public static final int LITERAL___volatile__=140;
    public static final int LITERAL___volatile=141;
    public static final int LITERAL_char=142;
    public static final int LITERAL_wchar_t=143;
    public static final int LITERAL_bool=144;
    public static final int LITERAL_short=145;
    public static final int LITERAL_int=146;
    public static final int LITERAL_long=147;
    public static final int LITERAL_signed=148;
    public static final int LITERAL___signed__=149;
    public static final int LITERAL___signed=150;
    public static final int LITERAL_unsigned=151;
    public static final int LITERAL___unsigned__=152;
    public static final int LITERAL_float=153;
    public static final int LITERAL_double=154;
    public static final int LITERAL_void=155;
    public static final int LITERAL__declspec=156;
    public static final int LITERAL___declspec=157;
    public static final int LITERAL_class=158;
    public static final int LITERAL_struct=159;
    public static final int LITERAL_union=160;
    public static final int LITERAL_this=161;
    public static final int LITERAL_true=162;
    public static final int LITERAL_false=163;
    public static final int LITERAL_public=164;
    public static final int LITERAL_protected=165;
    public static final int LITERAL_private=166;
    public static final int LITERAL_throw=167;
    public static final int LITERAL_case=168;
    public static final int LITERAL_default=169;
    public static final int LITERAL_if=170;
    public static final int LITERAL_else=171;
    public static final int LITERAL_switch=172;
    public static final int LITERAL_while=173;
    public static final int LITERAL_do=174;
    public static final int LITERAL_for=175;
    public static final int LITERAL_goto=176;
    public static final int LITERAL_continue=177;
    public static final int LITERAL_break=178;
    public static final int LITERAL_return=179;
    public static final int LITERAL_try=180;
    public static final int LITERAL_catch=181;
    public static final int LITERAL_using=182;
    public static final int LITERAL_export=183;
    public static final int LITERAL_asm=184;
    public static final int LITERAL__asm=185;
    public static final int LITERAL___asm__=186;
    public static final int LITERAL___asm=187;
    public static final int LITERAL__endasm=188;
    public static final int LITERAL_sizeof=189;
    public static final int LITERAL_dynamic_cast=190;
    public static final int LITERAL_static_cast=191;
    public static final int LITERAL_reinterpret_cast=192;
    public static final int LITERAL_new=193;
    public static final int LITERAL__cdecl=194;
    public static final int LITERAL___cdecl=195;
    public static final int LITERAL__near=196;
    public static final int LITERAL___near=197;
    public static final int LITERAL__far=198;
    public static final int LITERAL___far=199;
    public static final int LITERAL___interrupt=200;
    public static final int LITERAL_pascal=201;
    public static final int LITERAL__pascal=202;
    public static final int LITERAL___pascal=203;
    public static final int LITERAL_delete=204;
    public static final int LITERAL__int64=205;
    public static final int LITERAL___int64=206;
    public static final int LITERAL___w64=207;
    public static final int LITERAL___extension__=208;
    public static final int LITERAL___attribute__=209;
    public static final int LITERAL_restrict=210;
    public static final int LITERAL___restrict=211;
    public static final int LITERAL___complex__=212;
    public static final int LITERAL___imag=213;
    public static final int LITERAL___real=214;
    public static final int LITERAL___global=215;
    public static final int LITERAL__Bool=216;
    public static final int LITERAL__Complex=217;
    public static final int LITERAL___thread=218;
    public static final int LITERAL___attribute=219;
    public static final int LITERAL__Imaginary=220;
    public static final int LITERAL_bit=221;
    public static final int LITERAL___symbolic=222;
    public static final int LITERAL___hidden=223;
    public static final int LITERAL_final=224;
    public static final int LITERAL_override=225;
    public static final int LITERAL_constexpr=226;
    public static final int LITERAL_decltype=227;
    public static final int LITERAL_nullptr=228;
    public static final int LITERAL_thread_local=229;
    public static final int LITERAL_static_assert=230;
    public static final int LITERAL_alignas=231;
    public static final int LITERAL_char16_t=232;
    public static final int LITERAL_char32_t=233;
    public static final int LITERAL_noexcept=234;
    public static final int LITERAL___decltype=235;
    public static final int LITERAL___complex=236;
    public static final int LITERAL___forceinline=237;
    public static final int LITERAL___clrcall=238;
    public static final int LITERAL___try=239;
    public static final int LITERAL___finally=240;
    public static final int LITERAL___null=241;
    public static final int LITERAL___alignof=242;
    public static final int LITERAL___is_class=243;
    public static final int LITERAL___is_enum=244;
    public static final int LITERAL___is_pod=245;
    public static final int LITERAL___is_base_of=246;
    public static final int LITERAL___has_trivial_constructor=247;
    public static final int LITERAL___restrict__=248;
    public static final int LITERAL__Noreturn=249;
    public static final int LITERAL___has_nothrow_assign=250;
    public static final int LITERAL___has_nothrow_copy=251;
    public static final int LITERAL___has_nothrow_constructor=252;
    public static final int LITERAL___has_trivial_assign=253;
    public static final int LITERAL___has_trivial_copy=254;
    public static final int LITERAL___has_trivial_destructor=255;
    public static final int LITERAL___has_virtual_destructor=256;
    public static final int LITERAL___is_abstract=257;
    public static final int LITERAL___is_empty=258;
    public static final int LITERAL___is_literal_type=259;
    public static final int LITERAL___is_polymorphic=260;
    public static final int LITERAL___is_standard_layout=261;
    public static final int LITERAL___is_trivial=262;
    public static final int LITERAL___is_union=263;
    public static final int LITERAL___underlying_type=264;
    public static final int LITERAL___builtin_va_list=265;
    public static final int LAST_LITERAL_TOKEN=266;
    public static final int LITERAL__BUILT_IN_TYPE__=267;
    public static final int LITERAL__TYPE_QUALIFIER__=268;
    public static final int LITERAL__STORAGE_CLASS_SPECIFIER__=269;
    public static final int T_CLOSE=270;
    public static final int T_BLOCK=271;
    public static final int T_GE=272;
    public static final int T_CONTAINS=273;
    public static final int T_ABSTRACT=274;
    public static final int T_CLASS=275;
    public static final int T_NOPASS=276;
    public static final int T_UNFORMATTED=277;
    public static final int T_LESSTHAN=278;
    public static final int T_ENDSUBROUTINE=279;
    public static final int T_GT=280;
    public static final int T_IDENT=281;
    public static final int T_INTERFACE=282;
    public static final int T_RETURN=283;
    public static final int T_XYZ=284;
    public static final int T_EOF=285;
    public static final int T_CALL=286;
    public static final int T_EOS=287;
    public static final int T_GO=288;
    public static final int T_AND=289;
    public static final int T_PERCENT=290;
    public static final int T_PRINT=291;
    public static final int T_ALLOCATE_STMT_1=292;
    public static final int T_SUBROUTINE=293;
    public static final int T_CONTROL_EDIT_DESC=294;
    public static final int T_ENUMERATOR=295;
    public static final int Alphanumeric_Character=296;
    public static final int T_DEFINED_OP=297;
    public static final int T_KIND=298;
    public static final int T_STOP=299;
    public static final int T_GREATERTHAN_EQ=300;
    public static final int T_CHAR_STRING_EDIT_DESC=301;
    public static final int T_ALLOCATABLE=302;
    public static final int T_ENDINTERFACE=303;
    public static final int T_END=304;
    public static final int T_ASTERISK=305;
    public static final int T_PRIVATE=306;
    public static final int T_DOUBLEPRECISION=307;
    public static final int T_CASE=308;
    public static final int T_IMPLICIT=309;
    public static final int T_IF=310;
    public static final int T_THEN=311;
    public static final int T_DIMENSION=312;
    public static final int T_GOTO=313;
    public static final int T_ENDMODULE=314;
    public static final int T_IN=315;
    public static final int T_WRITE=316;
    public static final int T_FORMATTED=317;
    public static final int WS=318;
    public static final int T_DATA=319;
    public static final int T_FALSE=320;
    public static final int T_WHERE=321;
    public static final int T_ENDIF=322;
    public static final int T_SLASH=323;
    public static final int SQ_Rep_Char=324;
    public static final int T_GENERIC=325;
    public static final int T_RECURSIVE=326;
    public static final int DQ_Rep_Char=327;
    public static final int T_ELSEIF=328;
    public static final int T_BLOCKDATA=329;
    public static final int OCTAL_CONSTANT=330;
    public static final int T_SELECTTYPE=331;
    public static final int T_MINUS=332;
    public static final int T_SELECT=333;
    public static final int T_FINAL=334;
    public static final int T_UNDERSCORE=335;
    public static final int T_IMPORT=336;
    public static final int T_USE=337;
    public static final int T_FILE=338;
    public static final int T_RPAREN=339;
    public static final int T_INTENT=340;
    public static final int T_ENDBLOCK=341;
    public static final int T_ASSIGNMENT_STMT=342;
    public static final int T_PAUSE=343;
    public static final int T_BACKSPACE=344;
    public static final int T_ENDFILE=345;
    public static final int T_EQUALS=346;
    public static final int T_NON_INTRINSIC=347;
    public static final int T_SELECTCASE=348;
    public static final int T_DIGIT_STRING=349;
    public static final int T_COLON_COLON=350;
    public static final int T_NON_OVERRIDABLE=351;
    public static final int Special_Character=352;
    public static final int T_INCLUDE=353;
    public static final int T_OPEN=354;
    public static final int T_POWER=355;
    public static final int T_ASSOCIATE=356;
    public static final int T_CHAR_CONSTANT=357;
    public static final int T_OPERATOR=358;
    public static final int T_TO=359;
    public static final int T_ENDASSOCIATE=360;
    public static final int T_EQ=361;
    public static final int T_GREATERTHAN=362;
    public static final int T_DATA_EDIT_DESC=363;
    public static final int T_INQUIRE_STMT_2=364;
    public static final int T_EQV=365;
    public static final int HEX_CONSTANT=366;
    public static final int Digit_String=367;
    public static final int T_ELEMENTAL=368;
    public static final int T_CHARACTER=369;
    public static final int PREPROCESS_LINE=370;
    public static final int T_NULLIFY=371;
    public static final int T_REWIND=372;
    public static final int T_ARITHMETIC_IF_STMT=373;
    public static final int T_FORALL_CONSTRUCT_STMT=374;
    public static final int T_BIND=375;
    public static final int T_ENDFORALL=376;
    public static final int T_DO=377;
    public static final int T_WHERE_STMT=378;
    public static final int T_POINTER=379;
    public static final int T_PROGRAM=380;
    public static final int T_ENDTYPE=381;
    public static final int T_WAIT=382;
    public static final int T_ELSE=383;
    public static final int T_IF_STMT=384;
    public static final int T_RBRACKET=385;
    public static final int T_LPAREN=386;
    public static final int T_EXTENDS=387;
    public static final int T_OPTIONAL=388;
    public static final int T_DOUBLE=389;
    public static final int T_MODULE=390;
    public static final int T_READ=391;
    public static final int T_ALLOCATE=392;
    public static final int T_INTEGER=393;
    public static final int T_OR=394;
    public static final int T_EQUIVALENCE=395;
    public static final int T_PERIOD=396;
    public static final int T_ENTRY=397;
    public static final int T_LABEL_DO_TERMINAL=398;
    public static final int T_REAL=399;
    public static final int T_CYCLE=400;
    public static final int T_PROCEDURE=401;
    public static final int T_EQ_EQ=402;
    public static final int T_SLASH_EQ=403;
    public static final int T_ENDSELECT=404;
    public static final int T_PURE=405;
    public static final int T_TRUE=406;
    public static final int T_NE=407;
    public static final int T_INTRINSIC=408;
    public static final int T_PASS=409;
    public static final int T_REAL_CONSTANT=410;
    public static final int LINE_COMMENT=411;
    public static final int T_PERIOD_EXPONENT=412;
    public static final int T_ENDWHERE=413;
    public static final int MISC_CHAR=414;
    public static final int T_FORMAT=415;
    public static final int T_DEFAULT=416;
    public static final int T_SLASH_SLASH=417;
    public static final int T_NONE=418;
    public static final int T_NAMELIST=419;
    public static final int T_SEQUENCE=420;
    public static final int T_PRECISION=421;
    public static final int T_ASYNCHRONOUS=422;
    public static final int T_COMMA=423;
    public static final int T_RESULT=424;
    public static final int T_ENDBLOCKDATA=425;
    public static final int T_LOGICAL=426;
    public static final int T_VALUE=427;
    public static final int Letter=428;
    public static final int T_FORALL=429;
    public static final int T_SAVE=430;
    public static final int T_HOLLERITH=431;
    public static final int T_FLUSH=432;
    public static final int T_WHILE=433;
    public static final int T_INQUIRE=434;
    public static final int T_DEFERRED=435;
    public static final int T_FORALL_STMT=436;
    public static final int T_ASSIGN=437;
    public static final int T_LBRACKET=438;
    public static final int T_EXTERNAL=439;
    public static final int T_VOLATILE=440;
    public static final int T_OUT=441;
    public static final int CONTINUE_CHAR=442;
    public static final int T_COLON=443;
    public static final int T_COMPLEX=444;
    public static final int T_PLUS=445;
    public static final int T_STMT_FUNCTION=446;
    public static final int T_ONLY=447;
    public static final int T_PROTECTED=448;
    public static final int T_COMMON=449;
    public static final int T_INOUT=450;
    public static final int T_NEQV=451;
    public static final int T_PUBLIC=452;
    public static final int T_ENDDO=453;
    public static final int T_ENDPROGRAM=454;
    public static final int T_ENDFUNCTION=455;
    public static final int T_WHERE_CONSTRUCT_STMT=456;
    public static final int T_ELSEWHERE=457;
    public static final int T_ENUM=458;
    public static final int T_PARAMETER=459;
    public static final int T_TARGET=460;
    public static final int T_DOUBLECOMPLEX=461;
    public static final int T_PTR_ASSIGNMENT_STMT=462;
    public static final int T_TYPE=463;
    public static final int T_LESSTHAN_EQ=464;
    public static final int T_DEALLOCATE=465;
    public static final int T_LT=466;
    public static final int T_FUNCTION=467;
    public static final int T_EQ_GT=468;
    public static final int T_ENDENUM=469;
    public static final int BINARY_CONSTANT=470;
    public static final int T_LE=471;
    public static final int T_LEN=472;
    public static final int T_CONTINUE=473;
    public static final int T_NOT=474;
    public static final int Rep_Char=475;
    public static final int T_ASSIGNMENT=476;
    public static final int T_EXIT=477;
    public static final int FORTRAN_COMMENT=478;
    public static final int FIRST_ASSIGN=479;
    public static final int FIRST_DIVIDE=480;
    public static final int FIRST_STAR=481;
    public static final int FIRST_MOD=482;
    public static final int FIRST_NOT=483;
    public static final int FIRST_AMPERSAND=484;
    public static final int COMMENT=485;
    public static final int CPP_COMMENT=486;
    public static final int FIRST_OR=487;
    public static final int FIRST_BITWISEXOR=488;
    public static final int FIRST_COLON=489;
    public static final int FIRST_LESS=490;
    public static final int FIRST_GREATER=491;
    public static final int FIRST_MINUS=492;
    public static final int FIRST_PLUS=493;
    public static final int FIRST_QUOTATION=494;
    public static final int H_char_sequence=495;
    public static final int Q_char_sequence=496;
    public static final int DirectiveBody=497;
    public static final int CHAR_LITERAL_BODY=498;
    public static final int STRING_LITERAL_BODY=499;
    public static final int RAW_STRING_LITERAL=500;
    public static final int RAW_STRING_LITERAL_BODY=501;
    public static final int Suffix=502;
    public static final int ID_LIKE=503;
    public static final int ID_DEFINED=504;
    public static final int Identifier=505;
    public static final int PostPPKwdChar=506;
    public static final int PostInclChar=507;
    public static final int PostIfChar=508;
    public static final int LAST_LEXER_FAKE_RULE=509;
    public static final int HAS_VIRT_DESTR=510;
    public static final int IS_ABSTRACT=511;
    public static final int IS_BASEOF=512;
    public static final int IS_CLASS=513;
    public static final int IS_EMPTY=514;
    public static final int IS_ENUM=515;
    public static final int IS_POD=516;
    public static final int IS_POLYMORPH=517;
    public static final int IS_UNION=518;
    public static final int LITERAL_POINTERTO=519;
    public static final int LITERAL___offsetof=520;
    public static final int LITERAL_typeid=521;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators

    protected static class Declaration_scope {
        declarator_type_t declarator;
        declaration_specifiers_t decl_specifiers;
        int type_specifiers_count;
    }
    protected Stack Declaration_stack = new Stack();


    protected static class QualName_scope {
        int qual;
        int type;
    }
    protected Stack QualName_stack = new Stack();



    public CXXParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public CXXParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

    public String[] getTokenNames() { return CXXParser.tokenNames; }
    public String getGrammarFileName() { return "D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g"; }



        private /*final*/ CXXParserAction action;

        protected CXXParser(TokenStream input, CXXParserAction action) {
            super(input);
            assert action != null;
            this.action = action;
        }

        public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
            // do nothing
        }

        class pCXX_grammar {
        }

        decl_kind blockscope_decl = null;
        decl_kind tparm_decl = null;
        decl_kind parm_decl = null;
        decl_kind field_decl = null;
        decl_kind object_decl = null;

        Object NULL = null;
        class decl_kind{
        }
        class type_specifier_t{
        }
        class name_specifier_t{
        }
        class declarator_type_t{
            public void init() {
            }
            public boolean is_function() {
                return true;
            }
            public void set_ident() {
            }
            public void set_ref() {
            }
            public void set_ptr(Object o1, Object o2) {
            }
            public void apply_array(Object o1) {
            }
            public void apply_parameters(Object o1) {
            }
            public void apply_ptr(Object o1) {
            }
            public void set_constructor(Object o1) {
            }

        }
        class declaration_specifiers_t{
            public void init(Object o) {
            }
            public void add_type(Object o1, Object o2) {
            }
            public void apply_specifier(Object o1, Object o2) {
            }
        }
        class qualifier_t{
        }
        class parameters_and_qualifiers_t{
        }
        class expression_t{
        }

        void println(Object o) {
        }
        void println(Object o1,Object o2) {
        }
        
        protected void sync_declaration_impl() {
        }

        protected void sync_member_impl() {
        }

        protected void sync_parameter_impl() {
        }

        protected void sync_statement_impl() {
        }

        pCXX_grammar CTX;

        static int IDT_CLASS_NAME=1;
        static int IDT_ENUM_NAME=2;
        static int IDT_TYPEDEF_NAME=4;
        static int IDT_TEMPLATE_NAME=8;
        static int IDT_OBJECT_NAME = 16;

        void init_declaration(pCXX_grammar ctx, decl_kind kind)
        {
    //        ((Declaration_scope)Declaration_stack.peek()).declarator.init();
    //        ((Declaration_scope)Declaration_stack.peek()).decl_specifiers.init(kind);
    //        ((Declaration_scope)Declaration_stack.peek()).type_specifiers_count = 0;
        }

        boolean type_specifier_already_present(pCXX_grammar ctx)
        {
            boolean result = false;
    //        if (Declaration_stack->size(Declaration_stack) > 0) {
    //            result = ((Declaration_scope)Declaration_stack.peek()).type_specifiers_count != 0;
    //        }
    //        trace("type_specifier_already_present()=",result);
            return result;
        }
        boolean identifier_is(int x) {
    //        trace("identifier_is()=",true);
            return true;
        }
        boolean top_level_of_template_arguments() {
    //        trace("top_level_of_template_arguments()=",true);
            return true;
        }
        boolean operator_is_template() {
    //        trace("operator_is_template()=",true);
            return true;
        }

        void qual_setup() {
        }
        void qual_add_colon2() {
        }

        void store_type_specifier(type_specifier_t ts, pCXX_grammar ctx) {
    //        ((Declaration_scope)Declaration_stack.peek()).type_specifiers_count++;
    //        trace("store_type_specifier->", ((Declaration_scope)Declaration_stack.peek()).type_specifiers_count);
        }

        public boolean isTemplateTooDeep(int currentLevel, int maxLevel) {
            return isTemplateTooDeep(currentLevel, maxLevel, 0);
        }

        public static int TEMPLATE_PREVIEW_POS_LIMIT = 4096;
        public boolean isTemplateTooDeep(int currentLevel, int maxLevel, int startPos) {
            int level = currentLevel;
            int pos = startPos;            
            while(pos < TEMPLATE_PREVIEW_POS_LIMIT) {
                int token = input.LA(pos);
                pos++;
                if(token == EOF || token == 0) {
                    break;
                }
                if(token == LCURLY || token == RCURLY) {
                    break;
                }
                if(token == LESSTHAN) {
                    level++;
                } else if(token == GREATERTHAN) {
                    level--;
                } 
                if(level == 0) {
                    return false;
                }
                if(level >= maxLevel) {
                    return true;
                }
            }
            return false;
        }




    // $ANTLR start "compilation_unit"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:241:1: compilation_unit : translation_unit ;
    public final void compilation_unit() throws RecognitionException {
        traceIn("compilation_unit", 1);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:241:17: ( translation_unit )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:241:19: translation_unit
            {
            pushFollow(FOLLOW_translation_unit_in_compilation_unit70);
            translation_unit();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("compilation_unit", 1);
        }
        return ;
    }
    // $ANTLR end "compilation_unit"



    // $ANTLR start "translation_unit"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:247:1: translation_unit : sync_declaration ( declaration[object_decl] sync_declaration )* EOF ;
    public final void translation_unit() throws RecognitionException {
        traceIn("translation_unit", 2);
        if(state.backtracking == 0){action.translation_unit(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:249:5: ( sync_declaration ( declaration[object_decl] sync_declaration )* EOF )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:250:9: sync_declaration ( declaration[object_decl] sync_declaration )* EOF
            {
            pushFollow(FOLLOW_sync_declaration_in_translation_unit174);
            sync_declaration();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:251:9: ( declaration[object_decl] sync_declaration )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==ELLIPSIS||LA1_0==SEMICOLON||LA1_0==LPAREN||LA1_0==LSQUARE||LA1_0==STAR||LA1_0==AND||LA1_0==AMPERSAND||LA1_0==TILDE||LA1_0==SCOPE||LA1_0==IDENT||LA1_0==LITERAL_OPERATOR||(LA1_0 >= LITERAL_typeof && LA1_0 <= LITERAL_inline)||(LA1_0 >= LITERAL___inline && LA1_0 <= LITERAL_friend)||(LA1_0 >= LITERAL_typename && LA1_0 <= LITERAL___const)||LA1_0==LITERAL_volatile||(LA1_0 >= LITERAL_char && LA1_0 <= LITERAL_signed)||LA1_0==LITERAL_unsigned||(LA1_0 >= LITERAL_float && LA1_0 <= LITERAL_void)||(LA1_0 >= LITERAL_class && LA1_0 <= LITERAL_union)||(LA1_0 >= LITERAL_using && LA1_0 <= LITERAL___asm)||(LA1_0 >= LITERAL___extension__ && LA1_0 <= LITERAL___attribute__)||LA1_0==LITERAL___global||LA1_0==LITERAL___thread||(LA1_0 >= LITERAL___symbolic && LA1_0 <= LITERAL___hidden)||(LA1_0 >= LITERAL_constexpr && LA1_0 <= LITERAL_decltype)||(LA1_0 >= LITERAL_thread_local && LA1_0 <= LITERAL_char32_t)||LA1_0==LITERAL___decltype||LA1_0==LITERAL___builtin_va_list) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:252:13: declaration[object_decl] sync_declaration
            	    {
            	    pushFollow(FOLLOW_declaration_in_translation_unit199);
            	    declaration(object_decl);

            	    state._fsp--;
            	    if (state.failed) return ;

            	    pushFollow(FOLLOW_sync_declaration_in_translation_unit214);
            	    sync_declaration();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            match(input,EOF,FOLLOW_EOF_in_translation_unit228); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("translation_unit", 2);
            if(state.backtracking == 0){action.end_translation_unit(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "translation_unit"



    // $ANTLR start "statement"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:271:1: statement : ( attribute_specifiers )? ( labeled_statement | expression_or_declaration_statement | compound_statement[false] | selection_statement | iteration_statement | jump_statement | try_block ) ;
    public final void statement() throws RecognitionException {
        traceIn("statement", 3);
        if(state.backtracking == 0){action.statement(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:273:5: ( ( attribute_specifiers )? ( labeled_statement | expression_or_declaration_statement | compound_statement[false] | selection_statement | iteration_statement | jump_statement | try_block ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:276:9: ( attribute_specifiers )? ( labeled_statement | expression_or_declaration_statement | compound_statement[false] | selection_statement | iteration_statement | jump_statement | try_block )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:276:9: ( attribute_specifiers )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==LSQUARE) ) {
                int LA2_1 = input.LA(2);

                if ( (LA2_1==LSQUARE) ) {
                    alt2=1;
                }
            }
            else if ( ((LA2_0 >= LITERAL___extension__ && LA2_0 <= LITERAL___attribute__)||LA2_0==LITERAL_alignas) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:276:9: attribute_specifiers
                    {
                    pushFollow(FOLLOW_attribute_specifiers_in_statement429);
                    attribute_specifiers();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:277:9: ( labeled_statement | expression_or_declaration_statement | compound_statement[false] | selection_statement | iteration_statement | jump_statement | try_block )
            int alt3=7;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA3_1 = input.LA(2);

                if ( (LA3_1==COLON) ) {
                    alt3=1;
                }
                else if ( ((LA3_1 >= ELLIPSIS && LA3_1 <= ASSIGNEQUAL)||(LA3_1 >= COMMA && LA3_1 <= LPAREN)||LA3_1==LSQUARE||LA3_1==LCURLY||(LA3_1 >= EQUAL && LA3_1 <= AND)||(LA3_1 >= OR && LA3_1 <= SCOPE)||LA3_1==IDENT||LA3_1==LITERAL_OPERATOR||(LA3_1 >= LITERAL_typeof && LA3_1 <= LITERAL___typeof)||(LA3_1 >= LITERAL_typedef && LA3_1 <= LITERAL_enum)||(LA3_1 >= LITERAL_extern && LA3_1 <= LITERAL_inline)||(LA3_1 >= LITERAL___inline && LA3_1 <= LITERAL_friend)||(LA3_1 >= LITERAL_typename && LA3_1 <= LITERAL___const)||LA3_1==LITERAL_volatile||(LA3_1 >= LITERAL_char && LA3_1 <= LITERAL_signed)||LA3_1==LITERAL_unsigned||(LA3_1 >= LITERAL_float && LA3_1 <= LITERAL_void)||(LA3_1 >= LITERAL_class && LA3_1 <= LITERAL_union)||(LA3_1 >= LITERAL_asm && LA3_1 <= LITERAL___asm)||(LA3_1 >= LITERAL___extension__ && LA3_1 <= LITERAL___attribute__)||LA3_1==LITERAL___global||LA3_1==LITERAL___thread||(LA3_1 >= LITERAL___symbolic && LA3_1 <= LITERAL___hidden)||(LA3_1 >= LITERAL_constexpr && LA3_1 <= LITERAL_decltype)||LA3_1==LITERAL_thread_local||(LA3_1 >= LITERAL_alignas && LA3_1 <= LITERAL_char32_t)||LA3_1==LITERAL___decltype||LA3_1==LITERAL___builtin_va_list) ) {
                    alt3=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 3, 1, input);

                    throw nvae;

                }
                }
                break;
            case LITERAL_case:
            case LITERAL_default:
                {
                alt3=1;
                }
                break;
            case ELLIPSIS:
            case QUESTIONMARK:
            case SEMICOLON:
            case LPAREN:
            case LSQUARE:
            case PLUS:
            case PLUSPLUS:
            case MINUS:
            case MINUSMINUS:
            case STAR:
            case AND:
            case NOT:
            case AMPERSAND:
            case TILDE:
            case SCOPE:
            case FLOATONE:
            case HEXADECIMALINT:
            case OCTALINT:
            case DECIMALINT:
            case CHAR_LITERAL:
            case STRING_LITERAL:
            case NUMBER:
            case LITERAL_OPERATOR:
            case LITERAL_typeof:
            case LITERAL___typeof__:
            case LITERAL___typeof:
            case LITERAL_typedef:
            case LITERAL_enum:
            case LITERAL_namespace:
            case LITERAL_extern:
            case LITERAL_inline:
            case LITERAL___inline:
            case LITERAL_virtual:
            case LITERAL_explicit:
            case LITERAL_friend:
            case LITERAL_typename:
            case LITERAL_auto:
            case LITERAL_register:
            case LITERAL_static:
            case LITERAL_mutable:
            case LITERAL_const:
            case LITERAL___const__:
            case LITERAL___const:
            case LITERAL_const_cast:
            case LITERAL_volatile:
            case LITERAL_char:
            case LITERAL_wchar_t:
            case LITERAL_bool:
            case LITERAL_short:
            case LITERAL_int:
            case LITERAL_long:
            case LITERAL_signed:
            case LITERAL_unsigned:
            case LITERAL_float:
            case LITERAL_double:
            case LITERAL_void:
            case LITERAL_class:
            case LITERAL_struct:
            case LITERAL_union:
            case LITERAL_this:
            case LITERAL_true:
            case LITERAL_false:
            case LITERAL_throw:
            case LITERAL_using:
            case LITERAL_asm:
            case LITERAL__asm:
            case LITERAL___asm__:
            case LITERAL___asm:
            case LITERAL_sizeof:
            case LITERAL_dynamic_cast:
            case LITERAL_static_cast:
            case LITERAL_reinterpret_cast:
            case LITERAL_new:
            case LITERAL_delete:
            case LITERAL___global:
            case LITERAL___thread:
            case LITERAL___symbolic:
            case LITERAL___hidden:
            case LITERAL_constexpr:
            case LITERAL_decltype:
            case LITERAL_thread_local:
            case LITERAL_static_assert:
            case LITERAL_char16_t:
            case LITERAL_char32_t:
            case LITERAL_noexcept:
            case LITERAL___decltype:
            case LITERAL___null:
            case LITERAL___is_class:
            case LITERAL___is_pod:
            case LITERAL___has_nothrow_assign:
            case LITERAL___has_nothrow_copy:
            case LITERAL___has_nothrow_constructor:
            case LITERAL___has_trivial_assign:
            case LITERAL___has_trivial_copy:
            case LITERAL___has_trivial_destructor:
            case LITERAL___has_virtual_destructor:
            case LITERAL___is_abstract:
            case LITERAL___is_empty:
            case LITERAL___is_literal_type:
            case LITERAL___is_polymorphic:
            case LITERAL___is_standard_layout:
            case LITERAL___is_trivial:
            case LITERAL___is_union:
            case LITERAL___underlying_type:
            case LITERAL___builtin_va_list:
            case LITERAL_typeid:
                {
                alt3=2;
                }
                break;
            case LCURLY:
                {
                alt3=3;
                }
                break;
            case LITERAL_if:
            case LITERAL_switch:
                {
                alt3=4;
                }
                break;
            case LITERAL_while:
            case LITERAL_do:
            case LITERAL_for:
                {
                alt3=5;
                }
                break;
            case LITERAL_goto:
            case LITERAL_continue:
            case LITERAL_break:
            case LITERAL_return:
                {
                alt3=6;
                }
                break;
            case LITERAL_try:
                {
                alt3=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }

            switch (alt3) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:278:13: labeled_statement
                    {
                    pushFollow(FOLLOW_labeled_statement_in_statement454);
                    labeled_statement();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:280:13: expression_or_declaration_statement
                    {
                    pushFollow(FOLLOW_expression_or_declaration_statement_in_statement478);
                    expression_or_declaration_statement();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:282:13: compound_statement[false]
                    {
                    pushFollow(FOLLOW_compound_statement_in_statement502);
                    compound_statement(false);

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:284:13: selection_statement
                    {
                    pushFollow(FOLLOW_selection_statement_in_statement527);
                    selection_statement();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:286:13: iteration_statement
                    {
                    pushFollow(FOLLOW_iteration_statement_in_statement551);
                    iteration_statement();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:288:13: jump_statement
                    {
                    pushFollow(FOLLOW_jump_statement_in_statement575);
                    jump_statement();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:290:13: try_block
                    {
                    pushFollow(FOLLOW_try_block_in_statement599);
                    try_block();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("statement", 3);
            if(state.backtracking == 0){action.end_statement(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "statement"



    // $ANTLR start "labeled_statement"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:295:1: labeled_statement : ( IDENT COLON statement | LITERAL_case constant_expression COLON statement | LITERAL_default COLON statement ) ;
    public final void labeled_statement() throws RecognitionException {
        traceIn("labeled_statement", 4);
        Token IDENT1=null;
        Token LITERAL_case2=null;
        Token LITERAL_default3=null;

        if(state.backtracking == 0){action.labeled_statement(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:297:5: ( ( IDENT COLON statement | LITERAL_case constant_expression COLON statement | LITERAL_default COLON statement ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:298:5: ( IDENT COLON statement | LITERAL_case constant_expression COLON statement | LITERAL_default COLON statement )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:298:5: ( IDENT COLON statement | LITERAL_case constant_expression COLON statement | LITERAL_default COLON statement )
            int alt4=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt4=1;
                }
                break;
            case LITERAL_case:
                {
                alt4=2;
                }
                break;
            case LITERAL_default:
                {
                alt4=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;

            }

            switch (alt4) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:299:9: IDENT COLON statement
                    {
                    IDENT1=(Token)match(input,IDENT,FOLLOW_IDENT_in_labeled_statement870); if (state.failed) return ;

                    match(input,COLON,FOLLOW_COLON_in_labeled_statement872); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.labeled_statement(action.LABELED_STATEMENT__LABEL, IDENT1, input.LT(0));}

                    pushFollow(FOLLOW_statement_in_labeled_statement944);
                    statement();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:302:9: LITERAL_case constant_expression COLON statement
                    {
                    LITERAL_case2=(Token)match(input,LITERAL_case,FOLLOW_LITERAL_case_in_labeled_statement960); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.labeled_statement(action.LABELED_STATEMENT__CASE, LITERAL_case2);}

                    pushFollow(FOLLOW_constant_expression_in_labeled_statement1031);
                    constant_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,COLON,FOLLOW_COLON_in_labeled_statement1042); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.labeled_statement(action.LABELED_STATEMENT__CASE_COLON, input.LT(0));}

                    pushFollow(FOLLOW_statement_in_labeled_statement1120);
                    statement();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:307:9: LITERAL_default COLON statement
                    {
                    LITERAL_default3=(Token)match(input,LITERAL_default,FOLLOW_LITERAL_default_in_labeled_statement1136); if (state.failed) return ;

                    match(input,COLON,FOLLOW_COLON_in_labeled_statement1138); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.labeled_statement(action.LABELED_STATEMENT__DEFAULT, LITERAL_default3, input.LT(0));}

                    pushFollow(FOLLOW_statement_in_labeled_statement1200);
                    statement();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("labeled_statement", 4);
            if(state.backtracking == 0){action.end_labeled_statement(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "labeled_statement"



    // $ANTLR start "expression_statement"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:313:1: expression_statement : ( expression )? SEMICOLON ;
    public final void expression_statement() throws RecognitionException {
        traceIn("expression_statement", 5);
        if(state.backtracking == 0){action.expression_statement(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:315:5: ( ( expression )? SEMICOLON )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:316:9: ( expression )? SEMICOLON
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:316:9: ( expression )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==QUESTIONMARK||LA5_0==LPAREN||LA5_0==LSQUARE||LA5_0==PLUS||(LA5_0 >= PLUSPLUS && LA5_0 <= MINUS)||(LA5_0 >= MINUSMINUS && LA5_0 <= STAR)||LA5_0==NOT||LA5_0==AMPERSAND||LA5_0==TILDE||LA5_0==SCOPE||LA5_0==FLOATONE||(LA5_0 >= HEXADECIMALINT && LA5_0 <= DECIMALINT)||(LA5_0 >= CHAR_LITERAL && LA5_0 <= STRING_LITERAL)||(LA5_0 >= NUMBER && LA5_0 <= IDENT)||LA5_0==LITERAL_OPERATOR||(LA5_0 >= LITERAL_typeof && LA5_0 <= LITERAL___typeof)||(LA5_0 >= LITERAL_typename && LA5_0 <= LITERAL_auto)||LA5_0==LITERAL_const_cast||(LA5_0 >= LITERAL_char && LA5_0 <= LITERAL_signed)||LA5_0==LITERAL_unsigned||(LA5_0 >= LITERAL_float && LA5_0 <= LITERAL_void)||(LA5_0 >= LITERAL_this && LA5_0 <= LITERAL_false)||LA5_0==LITERAL_throw||(LA5_0 >= LITERAL_sizeof && LA5_0 <= LITERAL_new)||LA5_0==LITERAL_delete||LA5_0==LITERAL_decltype||(LA5_0 >= LITERAL_char16_t && LA5_0 <= LITERAL___decltype)||LA5_0==LITERAL___null||LA5_0==LITERAL___is_class||LA5_0==LITERAL___is_pod||(LA5_0 >= LITERAL___has_nothrow_assign && LA5_0 <= LITERAL___builtin_va_list)||LA5_0==LITERAL_typeid) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:316:9: expression
                    {
                    pushFollow(FOLLOW_expression_in_expression_statement1536);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_expression_statement1539); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("expression_statement", 5);
            if(state.backtracking == 0){action.end_expression_statement(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "expression_statement"



    // $ANTLR start "expression_or_declaration_statement"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:320:1: expression_or_declaration_statement : ( ( expression SEMICOLON )=> expression SEMICOLON | declaration_statement );
    public final void expression_or_declaration_statement() throws RecognitionException {
        traceIn("expression_or_declaration_statement", 6);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:321:5: ( ( expression SEMICOLON )=> expression SEMICOLON | declaration_statement )
            int alt6=2;
            alt6 = dfa6.predict(input);
            switch (alt6) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:322:9: ( expression SEMICOLON )=> expression SEMICOLON
                    {
                    if ( state.backtracking==0 ) {action.expression_statement(input.LT(1));}

                    pushFollow(FOLLOW_expression_in_expression_or_declaration_statement1790);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_expression_or_declaration_statement1792); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.end_expression_statement(input.LT(0));}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:327:9: declaration_statement
                    {
                    pushFollow(FOLLOW_declaration_statement_in_expression_or_declaration_statement1890);
                    declaration_statement();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("expression_or_declaration_statement", 6);
        }
        return ;
    }
    // $ANTLR end "expression_or_declaration_statement"



    // $ANTLR start "compound_statement"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:331:1: compound_statement[boolean lazy] : ({...}? skip_balanced_Curl | LCURLY sync_statement ( statement sync_statement )* RCURLY );
    public final void compound_statement(boolean lazy) throws RecognitionException {
        traceIn("compound_statement", 7);
        if(state.backtracking == 0){action.compound_statement(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:333:5: ({...}? skip_balanced_Curl | LCURLY sync_statement ( statement sync_statement )* RCURLY )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==LCURLY) ) {
                int LA8_1 = input.LA(2);

                if ( ((lazy)) ) {
                    alt8=1;
                }
                else if ( (true) ) {
                    alt8=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }
            switch (alt8) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:334:9: {...}? skip_balanced_Curl
                    {
                    if ( !((lazy)) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "compound_statement", "lazy");
                    }

                    pushFollow(FOLLOW_skip_balanced_Curl_in_compound_statement1998);
                    skip_balanced_Curl();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:336:9: LCURLY sync_statement ( statement sync_statement )* RCURLY
                    {
                    match(input,LCURLY,FOLLOW_LCURLY_in_compound_statement2014); if (state.failed) return ;

                    pushFollow(FOLLOW_sync_statement_in_compound_statement2025);
                    sync_statement();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:338:9: ( statement sync_statement )*
                    loop7:
                    do {
                        int alt7=2;
                        int LA7_0 = input.LA(1);

                        if ( (LA7_0==ELLIPSIS||(LA7_0 >= QUESTIONMARK && LA7_0 <= SEMICOLON)||LA7_0==LPAREN||LA7_0==LSQUARE||LA7_0==LCURLY||LA7_0==PLUS||(LA7_0 >= PLUSPLUS && LA7_0 <= MINUS)||(LA7_0 >= MINUSMINUS && LA7_0 <= STAR)||(LA7_0 >= AND && LA7_0 <= NOT)||LA7_0==AMPERSAND||LA7_0==TILDE||LA7_0==SCOPE||LA7_0==FLOATONE||(LA7_0 >= HEXADECIMALINT && LA7_0 <= DECIMALINT)||(LA7_0 >= CHAR_LITERAL && LA7_0 <= STRING_LITERAL)||(LA7_0 >= NUMBER && LA7_0 <= IDENT)||LA7_0==LITERAL_OPERATOR||(LA7_0 >= LITERAL_typeof && LA7_0 <= LITERAL___typeof)||(LA7_0 >= LITERAL_typedef && LA7_0 <= LITERAL_inline)||(LA7_0 >= LITERAL___inline && LA7_0 <= LITERAL_friend)||(LA7_0 >= LITERAL_typename && LA7_0 <= LITERAL_volatile)||(LA7_0 >= LITERAL_char && LA7_0 <= LITERAL_signed)||LA7_0==LITERAL_unsigned||(LA7_0 >= LITERAL_float && LA7_0 <= LITERAL_void)||(LA7_0 >= LITERAL_class && LA7_0 <= LITERAL_false)||(LA7_0 >= LITERAL_throw && LA7_0 <= LITERAL_if)||(LA7_0 >= LITERAL_switch && LA7_0 <= LITERAL_try)||LA7_0==LITERAL_using||(LA7_0 >= LITERAL_asm && LA7_0 <= LITERAL___asm)||(LA7_0 >= LITERAL_sizeof && LA7_0 <= LITERAL_new)||LA7_0==LITERAL_delete||(LA7_0 >= LITERAL___extension__ && LA7_0 <= LITERAL___attribute__)||LA7_0==LITERAL___global||LA7_0==LITERAL___thread||(LA7_0 >= LITERAL___symbolic && LA7_0 <= LITERAL___hidden)||(LA7_0 >= LITERAL_constexpr && LA7_0 <= LITERAL_decltype)||(LA7_0 >= LITERAL_thread_local && LA7_0 <= LITERAL___decltype)||LA7_0==LITERAL___null||LA7_0==LITERAL___is_class||LA7_0==LITERAL___is_pod||(LA7_0 >= LITERAL___has_nothrow_assign && LA7_0 <= LITERAL___builtin_va_list)||LA7_0==LITERAL_typeid) ) {
                            alt7=1;
                        }


                        switch (alt7) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:339:13: statement sync_statement
                    	    {
                    	    pushFollow(FOLLOW_statement_in_compound_statement2050);
                    	    statement();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    pushFollow(FOLLOW_sync_statement_in_compound_statement2064);
                    	    sync_statement();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop7;
                        }
                    } while (true);


                    match(input,RCURLY,FOLLOW_RCURLY_in_compound_statement2087); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("compound_statement", 7);
            if(state.backtracking == 0){action.end_compound_statement(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "compound_statement"



    // $ANTLR start "selection_statement"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:346:1: selection_statement : ( LITERAL_if LPAREN condition RPAREN statement ( ( LITERAL_else )=> LITERAL_else statement )? | LITERAL_switch LPAREN condition RPAREN statement ) ;
    public final void selection_statement() throws RecognitionException {
        traceIn("selection_statement", 8);
        if(state.backtracking == 0){action.selection_statement(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:348:5: ( ( LITERAL_if LPAREN condition RPAREN statement ( ( LITERAL_else )=> LITERAL_else statement )? | LITERAL_switch LPAREN condition RPAREN statement ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:349:5: ( LITERAL_if LPAREN condition RPAREN statement ( ( LITERAL_else )=> LITERAL_else statement )? | LITERAL_switch LPAREN condition RPAREN statement )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:349:5: ( LITERAL_if LPAREN condition RPAREN statement ( ( LITERAL_else )=> LITERAL_else statement )? | LITERAL_switch LPAREN condition RPAREN statement )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==LITERAL_if) ) {
                alt10=1;
            }
            else if ( (LA10_0==LITERAL_switch) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;

            }
            switch (alt10) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:350:9: LITERAL_if LPAREN condition RPAREN statement ( ( LITERAL_else )=> LITERAL_else statement )?
                    {
                    match(input,LITERAL_if,FOLLOW_LITERAL_if_in_selection_statement2348); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.selection_statement(action.SELECTION_STATEMENT__IF, input.LT(0));}

                    match(input,LPAREN,FOLLOW_LPAREN_in_selection_statement2421); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.selection_statement(action.SELECTION_STATEMENT__IF_LPAREN, input.LT(0));}

                    pushFollow(FOLLOW_condition_in_selection_statement2498);
                    condition();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RPAREN,FOLLOW_RPAREN_in_selection_statement2509); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.selection_statement(action.SELECTION_STATEMENT__IF_RPAREN, input.LT(0));}

                    pushFollow(FOLLOW_statement_in_selection_statement2586);
                    statement();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:355:9: ( ( LITERAL_else )=> LITERAL_else statement )?
                    int alt9=2;
                    int LA9_0 = input.LA(1);

                    if ( (LA9_0==LITERAL_else) ) {
                        int LA9_1 = input.LA(2);

                        if ( (synpred2_CXXParser()) ) {
                            alt9=1;
                        }
                    }
                    switch (alt9) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:355:11: ( LITERAL_else )=> LITERAL_else statement
                            {
                            match(input,LITERAL_else,FOLLOW_LITERAL_else_in_selection_statement2617); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.selection_statement(action.SELECTION_STATEMENT__ELSE, input.LT(0));}

                            pushFollow(FOLLOW_statement_in_selection_statement2688);
                            statement();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:360:9: LITERAL_switch LPAREN condition RPAREN statement
                    {
                    match(input,LITERAL_switch,FOLLOW_LITERAL_switch_in_selection_statement2716); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.selection_statement(action.SELECTION_STATEMENT__SWITCH, input.LT(0));}

                    match(input,LPAREN,FOLLOW_LPAREN_in_selection_statement2785); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.selection_statement(action.SELECTION_STATEMENT__SWITCH_LPAREN, input.LT(0));}

                    pushFollow(FOLLOW_condition_in_selection_statement2862);
                    condition();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RPAREN,FOLLOW_RPAREN_in_selection_statement2873); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.selection_statement(action.SELECTION_STATEMENT__SWITCH_RPAREN, input.LT(0));}

                    pushFollow(FOLLOW_statement_in_selection_statement2950);
                    statement();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("selection_statement", 8);
            if(state.backtracking == 0){action.end_selection_statement(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "selection_statement"



    // $ANTLR start "condition"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:372:1: condition : ( ( ( attribute_specifiers )? ( type_specifier )+ declarator EQUAL )=> condition_declaration | condition_expression ) ;
    public final void condition() throws RecognitionException {
        traceIn("condition", 9);
        Declaration_stack.push(new Declaration_scope());

        if(state.backtracking == 0){action.condition(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:375:5: ( ( ( ( attribute_specifiers )? ( type_specifier )+ declarator EQUAL )=> condition_declaration | condition_expression ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:376:5: ( ( ( attribute_specifiers )? ( type_specifier )+ declarator EQUAL )=> condition_declaration | condition_expression )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:376:5: ( ( ( attribute_specifiers )? ( type_specifier )+ declarator EQUAL )=> condition_declaration | condition_expression )
            int alt11=2;
            alt11 = dfa11.predict(input);
            switch (alt11) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:377:9: ( ( attribute_specifiers )? ( type_specifier )+ declarator EQUAL )=> condition_declaration
                    {
                    pushFollow(FOLLOW_condition_declaration_in_condition3324);
                    condition_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:380:9: condition_expression
                    {
                    pushFollow(FOLLOW_condition_expression_in_condition3340);
                    condition_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("condition", 9);
            Declaration_stack.pop();

            if(state.backtracking == 0){action.end_condition(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "condition"



    // $ANTLR start "condition_declaration"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:385:1: condition_declaration : ( attribute_specifiers )? ( type_specifier )+ declarator EQUAL assignment_expression ;
    public final void condition_declaration() throws RecognitionException {
        traceIn("condition_declaration", 10);
        if(state.backtracking == 0){action.condition_declaration(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:387:5: ( ( attribute_specifiers )? ( type_specifier )+ declarator EQUAL assignment_expression )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:388:9: ( attribute_specifiers )? ( type_specifier )+ declarator EQUAL assignment_expression
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:388:9: ( attribute_specifiers )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==LSQUARE||(LA12_0 >= LITERAL___extension__ && LA12_0 <= LITERAL___attribute__)||LA12_0==LITERAL_alignas) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:388:9: attribute_specifiers
                    {
                    pushFollow(FOLLOW_attribute_specifiers_in_condition_declaration3601);
                    attribute_specifiers();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:389:9: ( type_specifier )+
            int cnt13=0;
            loop13:
            do {
                int alt13=2;
                switch ( input.LA(1) ) {
                case SCOPE:
                    {
                    int LA13_4 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt13=1;
                    }


                    }
                    break;
                case IDENT:
                    {
                    int LA13_5 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt13=1;
                    }


                    }
                    break;
                case LITERAL_typeof:
                case LITERAL___typeof__:
                case LITERAL___typeof:
                case LITERAL_enum:
                case LITERAL_typename:
                case LITERAL_auto:
                case LITERAL_const:
                case LITERAL___const__:
                case LITERAL___const:
                case LITERAL_volatile:
                case LITERAL_char:
                case LITERAL_wchar_t:
                case LITERAL_bool:
                case LITERAL_short:
                case LITERAL_int:
                case LITERAL_long:
                case LITERAL_signed:
                case LITERAL_unsigned:
                case LITERAL_float:
                case LITERAL_double:
                case LITERAL_void:
                case LITERAL_class:
                case LITERAL_struct:
                case LITERAL_union:
                case LITERAL_decltype:
                case LITERAL_char16_t:
                case LITERAL_char32_t:
                case LITERAL___decltype:
                case LITERAL___builtin_va_list:
                    {
                    alt13=1;
                    }
                    break;

                }

                switch (alt13) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:389:9: type_specifier
            	    {
            	    pushFollow(FOLLOW_type_specifier_in_condition_declaration3612);
            	    type_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt13 >= 1 ) break loop13;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(13, input);
                        throw eee;
                }
                cnt13++;
            } while (true);


            pushFollow(FOLLOW_declarator_in_condition_declaration3615);
            declarator();

            state._fsp--;
            if (state.failed) return ;

            match(input,EQUAL,FOLLOW_EQUAL_in_condition_declaration3626); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.condition(action.CONDITION__EQUAL, input.LT(0));}

            pushFollow(FOLLOW_assignment_expression_in_condition_declaration3704);
            assignment_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("condition_declaration", 10);
            if(state.backtracking == 0){action.end_condition_declaration(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "condition_declaration"



    // $ANTLR start "condition_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:395:1: condition_expression : expression ;
    public final void condition_expression() throws RecognitionException {
        traceIn("condition_expression", 11);
        if(state.backtracking == 0){action.condition_expression(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:397:5: ( expression )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:398:9: expression
            {
            pushFollow(FOLLOW_expression_in_condition_expression3884);
            expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("condition_expression", 11);
            if(state.backtracking == 0){action.end_condition_expression(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "condition_expression"



    // $ANTLR start "iteration_statement"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:402:1: iteration_statement : ( LITERAL_while LPAREN condition RPAREN statement | LITERAL_do statement LITERAL_while LPAREN expression RPAREN SEMICOLON | LITERAL_for LPAREN ( ( for_range_declaration COLON )=> for_range_declaration COLON for_range_initializer | for_init_statement ( condition )? SEMICOLON ( expression )? ) RPAREN statement ) ;
    public final void iteration_statement() throws RecognitionException {
        traceIn("iteration_statement", 12);
        if(state.backtracking == 0){action.iteration_statement(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:404:5: ( ( LITERAL_while LPAREN condition RPAREN statement | LITERAL_do statement LITERAL_while LPAREN expression RPAREN SEMICOLON | LITERAL_for LPAREN ( ( for_range_declaration COLON )=> for_range_declaration COLON for_range_initializer | for_init_statement ( condition )? SEMICOLON ( expression )? ) RPAREN statement ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:405:5: ( LITERAL_while LPAREN condition RPAREN statement | LITERAL_do statement LITERAL_while LPAREN expression RPAREN SEMICOLON | LITERAL_for LPAREN ( ( for_range_declaration COLON )=> for_range_declaration COLON for_range_initializer | for_init_statement ( condition )? SEMICOLON ( expression )? ) RPAREN statement )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:405:5: ( LITERAL_while LPAREN condition RPAREN statement | LITERAL_do statement LITERAL_while LPAREN expression RPAREN SEMICOLON | LITERAL_for LPAREN ( ( for_range_declaration COLON )=> for_range_declaration COLON for_range_initializer | for_init_statement ( condition )? SEMICOLON ( expression )? ) RPAREN statement )
            int alt17=3;
            switch ( input.LA(1) ) {
            case LITERAL_while:
                {
                alt17=1;
                }
                break;
            case LITERAL_do:
                {
                alt17=2;
                }
                break;
            case LITERAL_for:
                {
                alt17=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }

            switch (alt17) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:406:9: LITERAL_while LPAREN condition RPAREN statement
                    {
                    match(input,LITERAL_while,FOLLOW_LITERAL_while_in_iteration_statement4145); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.iteration_statement(action.ITERATION_STATEMENT__WHILE, input.LT(0));}

                    match(input,LPAREN,FOLLOW_LPAREN_in_iteration_statement4215); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.iteration_statement(action.ITERATION_STATEMENT__WHILE_LPAREN, input.LT(0));}

                    pushFollow(FOLLOW_condition_in_iteration_statement4292);
                    condition();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RPAREN,FOLLOW_RPAREN_in_iteration_statement4302); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.iteration_statement(action.ITERATION_STATEMENT__WHILE_RPAREN, input.LT(0));}

                    pushFollow(FOLLOW_statement_in_iteration_statement4379);
                    statement();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:412:9: LITERAL_do statement LITERAL_while LPAREN expression RPAREN SEMICOLON
                    {
                    match(input,LITERAL_do,FOLLOW_LITERAL_do_in_iteration_statement4395); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.iteration_statement(action.ITERATION_STATEMENT__DO, input.LT(0));}

                    pushFollow(FOLLOW_statement_in_iteration_statement4468);
                    statement();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,LITERAL_while,FOLLOW_LITERAL_while_in_iteration_statement4479); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.iteration_statement(action.ITERATION_STATEMENT__DO_WHILE, input.LT(0));}

                    match(input,LPAREN,FOLLOW_LPAREN_in_iteration_statement4549); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.iteration_statement(action.ITERATION_STATEMENT__DO_WHILE_LPAREN, input.LT(0));}

                    pushFollow(FOLLOW_expression_in_iteration_statement4626);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RPAREN,FOLLOW_RPAREN_in_iteration_statement4637); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.iteration_statement(action.ITERATION_STATEMENT__DO_WHILE_RPAREN, input.LT(0));}

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_iteration_statement4714); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:420:9: LITERAL_for LPAREN ( ( for_range_declaration COLON )=> for_range_declaration COLON for_range_initializer | for_init_statement ( condition )? SEMICOLON ( expression )? ) RPAREN statement
                    {
                    match(input,LITERAL_for,FOLLOW_LITERAL_for_in_iteration_statement4730); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.iteration_statement(action.ITERATION_STATEMENT__FOR, input.LT(0));}

                    match(input,LPAREN,FOLLOW_LPAREN_in_iteration_statement4802); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.iteration_statement(action.ITERATION_STATEMENT__FOR_LPAREN, input.LT(0));}

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:422:9: ( ( for_range_declaration COLON )=> for_range_declaration COLON for_range_initializer | for_init_statement ( condition )? SEMICOLON ( expression )? )
                    int alt16=2;
                    alt16 = dfa16.predict(input);
                    switch (alt16) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:423:13: ( for_range_declaration COLON )=> for_range_declaration COLON for_range_initializer
                            {
                            pushFollow(FOLLOW_for_range_declaration_in_iteration_statement4913);
                            for_range_declaration();

                            state._fsp--;
                            if (state.failed) return ;

                            match(input,COLON,FOLLOW_COLON_in_iteration_statement4928); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.iteration_statement(action.ITERATION_STATEMENT__FOR_COLON, input.LT(0));}

                            pushFollow(FOLLOW_for_range_initializer_in_iteration_statement5006);
                            for_range_initializer();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:428:13: for_init_statement ( condition )? SEMICOLON ( expression )?
                            {
                            pushFollow(FOLLOW_for_init_statement_in_iteration_statement5030);
                            for_init_statement();

                            state._fsp--;
                            if (state.failed) return ;

                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:429:13: ( condition )?
                            int alt14=2;
                            int LA14_0 = input.LA(1);

                            if ( (LA14_0==QUESTIONMARK||LA14_0==LPAREN||LA14_0==LSQUARE||LA14_0==PLUS||(LA14_0 >= PLUSPLUS && LA14_0 <= MINUS)||(LA14_0 >= MINUSMINUS && LA14_0 <= STAR)||LA14_0==NOT||LA14_0==AMPERSAND||LA14_0==TILDE||LA14_0==SCOPE||LA14_0==FLOATONE||(LA14_0 >= HEXADECIMALINT && LA14_0 <= DECIMALINT)||(LA14_0 >= CHAR_LITERAL && LA14_0 <= STRING_LITERAL)||(LA14_0 >= NUMBER && LA14_0 <= IDENT)||LA14_0==LITERAL_OPERATOR||(LA14_0 >= LITERAL_typeof && LA14_0 <= LITERAL___typeof)||LA14_0==LITERAL_enum||(LA14_0 >= LITERAL_typename && LA14_0 <= LITERAL_auto)||(LA14_0 >= LITERAL_const && LA14_0 <= LITERAL_volatile)||(LA14_0 >= LITERAL_char && LA14_0 <= LITERAL_signed)||LA14_0==LITERAL_unsigned||(LA14_0 >= LITERAL_float && LA14_0 <= LITERAL_void)||(LA14_0 >= LITERAL_class && LA14_0 <= LITERAL_false)||LA14_0==LITERAL_throw||(LA14_0 >= LITERAL_sizeof && LA14_0 <= LITERAL_new)||LA14_0==LITERAL_delete||(LA14_0 >= LITERAL___extension__ && LA14_0 <= LITERAL___attribute__)||LA14_0==LITERAL_decltype||(LA14_0 >= LITERAL_alignas && LA14_0 <= LITERAL___decltype)||LA14_0==LITERAL___null||LA14_0==LITERAL___is_class||LA14_0==LITERAL___is_pod||(LA14_0 >= LITERAL___has_nothrow_assign && LA14_0 <= LITERAL___builtin_va_list)||LA14_0==LITERAL_typeid) ) {
                                alt14=1;
                            }
                            switch (alt14) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:429:13: condition
                                    {
                                    pushFollow(FOLLOW_condition_in_iteration_statement5045);
                                    condition();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }


                            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_iteration_statement5061); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.iteration_statement(action.ITERATION_STATEMENT__FOR_SEMICOLON, input.LT(0));}

                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:431:13: ( expression )?
                            int alt15=2;
                            int LA15_0 = input.LA(1);

                            if ( (LA15_0==QUESTIONMARK||LA15_0==LPAREN||LA15_0==LSQUARE||LA15_0==PLUS||(LA15_0 >= PLUSPLUS && LA15_0 <= MINUS)||(LA15_0 >= MINUSMINUS && LA15_0 <= STAR)||LA15_0==NOT||LA15_0==AMPERSAND||LA15_0==TILDE||LA15_0==SCOPE||LA15_0==FLOATONE||(LA15_0 >= HEXADECIMALINT && LA15_0 <= DECIMALINT)||(LA15_0 >= CHAR_LITERAL && LA15_0 <= STRING_LITERAL)||(LA15_0 >= NUMBER && LA15_0 <= IDENT)||LA15_0==LITERAL_OPERATOR||(LA15_0 >= LITERAL_typeof && LA15_0 <= LITERAL___typeof)||(LA15_0 >= LITERAL_typename && LA15_0 <= LITERAL_auto)||LA15_0==LITERAL_const_cast||(LA15_0 >= LITERAL_char && LA15_0 <= LITERAL_signed)||LA15_0==LITERAL_unsigned||(LA15_0 >= LITERAL_float && LA15_0 <= LITERAL_void)||(LA15_0 >= LITERAL_this && LA15_0 <= LITERAL_false)||LA15_0==LITERAL_throw||(LA15_0 >= LITERAL_sizeof && LA15_0 <= LITERAL_new)||LA15_0==LITERAL_delete||LA15_0==LITERAL_decltype||(LA15_0 >= LITERAL_char16_t && LA15_0 <= LITERAL___decltype)||LA15_0==LITERAL___null||LA15_0==LITERAL___is_class||LA15_0==LITERAL___is_pod||(LA15_0 >= LITERAL___has_nothrow_assign && LA15_0 <= LITERAL___builtin_va_list)||LA15_0==LITERAL_typeid) ) {
                                alt15=1;
                            }
                            switch (alt15) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:431:13: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_iteration_statement5135);
                                    expression();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    match(input,RPAREN,FOLLOW_RPAREN_in_iteration_statement5157); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.iteration_statement(action.ITERATION_STATEMENT__FOR_RPAREN, input.LT(0));}

                    pushFollow(FOLLOW_statement_in_iteration_statement5234);
                    statement();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("iteration_statement", 12);
            if(state.backtracking == 0){action.end_iteration_statement(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "iteration_statement"



    // $ANTLR start "for_init_statement"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:442:1: for_init_statement : ( ( simple_declaration[blockscope_decl] )=> simple_declaration[blockscope_decl] | expression_statement ) ;
    public final void for_init_statement() throws RecognitionException {
        traceIn("for_init_statement", 13);
        if(state.backtracking == 0){action.for_init_statement(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:444:5: ( ( ( simple_declaration[blockscope_decl] )=> simple_declaration[blockscope_decl] | expression_statement ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:445:5: ( ( simple_declaration[blockscope_decl] )=> simple_declaration[blockscope_decl] | expression_statement )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:445:5: ( ( simple_declaration[blockscope_decl] )=> simple_declaration[blockscope_decl] | expression_statement )
            int alt18=2;
            alt18 = dfa18.predict(input);
            switch (alt18) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:446:9: ( simple_declaration[blockscope_decl] )=> simple_declaration[blockscope_decl]
                    {
                    pushFollow(FOLLOW_simple_declaration_in_for_init_statement5596);
                    simple_declaration(blockscope_decl);

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:449:9: expression_statement
                    {
                    pushFollow(FOLLOW_expression_statement_in_for_init_statement5613);
                    expression_statement();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("for_init_statement", 13);
            if(state.backtracking == 0){action.end_for_init_statement(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "for_init_statement"



    // $ANTLR start "for_range_declaration"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:454:1: for_range_declaration : ( attribute_specifiers )? ( type_specifier )+ declarator ;
    public final void for_range_declaration() throws RecognitionException {
        traceIn("for_range_declaration", 14);
        if(state.backtracking == 0){action.for_range_declaration(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:456:5: ( ( attribute_specifiers )? ( type_specifier )+ declarator )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:457:5: ( attribute_specifiers )? ( type_specifier )+ declarator
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:457:5: ( attribute_specifiers )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==LSQUARE||(LA19_0 >= LITERAL___extension__ && LA19_0 <= LITERAL___attribute__)||LA19_0==LITERAL_alignas) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:457:5: attribute_specifiers
                    {
                    pushFollow(FOLLOW_attribute_specifiers_in_for_range_declaration5870);
                    attribute_specifiers();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:457:27: ( type_specifier )+
            int cnt20=0;
            loop20:
            do {
                int alt20=2;
                switch ( input.LA(1) ) {
                case SCOPE:
                    {
                    int LA20_4 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt20=1;
                    }


                    }
                    break;
                case IDENT:
                    {
                    int LA20_5 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt20=1;
                    }


                    }
                    break;
                case LITERAL_typeof:
                case LITERAL___typeof__:
                case LITERAL___typeof:
                case LITERAL_enum:
                case LITERAL_typename:
                case LITERAL_auto:
                case LITERAL_const:
                case LITERAL___const__:
                case LITERAL___const:
                case LITERAL_volatile:
                case LITERAL_char:
                case LITERAL_wchar_t:
                case LITERAL_bool:
                case LITERAL_short:
                case LITERAL_int:
                case LITERAL_long:
                case LITERAL_signed:
                case LITERAL_unsigned:
                case LITERAL_float:
                case LITERAL_double:
                case LITERAL_void:
                case LITERAL_class:
                case LITERAL_struct:
                case LITERAL_union:
                case LITERAL_decltype:
                case LITERAL_char16_t:
                case LITERAL_char32_t:
                case LITERAL___decltype:
                case LITERAL___builtin_va_list:
                    {
                    alt20=1;
                    }
                    break;

                }

                switch (alt20) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:457:27: type_specifier
            	    {
            	    pushFollow(FOLLOW_type_specifier_in_for_range_declaration5873);
            	    type_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt20 >= 1 ) break loop20;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(20, input);
                        throw eee;
                }
                cnt20++;
            } while (true);


            pushFollow(FOLLOW_declarator_in_for_range_declaration5876);
            declarator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("for_range_declaration", 14);
            if(state.backtracking == 0){action.end_for_range_declaration(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "for_range_declaration"



    // $ANTLR start "for_range_initializer"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:461:1: for_range_initializer : ( expression | braced_init_list ) ;
    public final void for_range_initializer() throws RecognitionException {
        traceIn("for_range_initializer", 15);
        if(state.backtracking == 0){action.for_range_initializer(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:463:5: ( ( expression | braced_init_list ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:464:5: ( expression | braced_init_list )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:464:5: ( expression | braced_init_list )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==QUESTIONMARK||LA21_0==LPAREN||LA21_0==LSQUARE||LA21_0==PLUS||(LA21_0 >= PLUSPLUS && LA21_0 <= MINUS)||(LA21_0 >= MINUSMINUS && LA21_0 <= STAR)||LA21_0==NOT||LA21_0==AMPERSAND||LA21_0==TILDE||LA21_0==SCOPE||LA21_0==FLOATONE||(LA21_0 >= HEXADECIMALINT && LA21_0 <= DECIMALINT)||(LA21_0 >= CHAR_LITERAL && LA21_0 <= STRING_LITERAL)||(LA21_0 >= NUMBER && LA21_0 <= IDENT)||LA21_0==LITERAL_OPERATOR||(LA21_0 >= LITERAL_typeof && LA21_0 <= LITERAL___typeof)||(LA21_0 >= LITERAL_typename && LA21_0 <= LITERAL_auto)||LA21_0==LITERAL_const_cast||(LA21_0 >= LITERAL_char && LA21_0 <= LITERAL_signed)||LA21_0==LITERAL_unsigned||(LA21_0 >= LITERAL_float && LA21_0 <= LITERAL_void)||(LA21_0 >= LITERAL_this && LA21_0 <= LITERAL_false)||LA21_0==LITERAL_throw||(LA21_0 >= LITERAL_sizeof && LA21_0 <= LITERAL_new)||LA21_0==LITERAL_delete||LA21_0==LITERAL_decltype||(LA21_0 >= LITERAL_char16_t && LA21_0 <= LITERAL___decltype)||LA21_0==LITERAL___null||LA21_0==LITERAL___is_class||LA21_0==LITERAL___is_pod||(LA21_0 >= LITERAL___has_nothrow_assign && LA21_0 <= LITERAL___builtin_va_list)||LA21_0==LITERAL_typeid) ) {
                alt21=1;
            }
            else if ( (LA21_0==LCURLY) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;

            }
            switch (alt21) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:465:9: expression
                    {
                    pushFollow(FOLLOW_expression_in_for_range_initializer6165);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:467:9: braced_init_list
                    {
                    pushFollow(FOLLOW_braced_init_list_in_for_range_initializer6185);
                    braced_init_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("for_range_initializer", 15);
            if(state.backtracking == 0){action.end_for_range_initializer(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "for_range_initializer"



    // $ANTLR start "jump_statement"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:472:1: jump_statement : ( LITERAL_break SEMICOLON | LITERAL_continue SEMICOLON | LITERAL_return ( ( expression )? | braced_init_list ) SEMICOLON | LITERAL_goto IDENT SEMICOLON ) ;
    public final void jump_statement() throws RecognitionException {
        traceIn("jump_statement", 16);
        Token LITERAL_goto4=null;

        if(state.backtracking == 0){action.jump_statement(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:474:5: ( ( LITERAL_break SEMICOLON | LITERAL_continue SEMICOLON | LITERAL_return ( ( expression )? | braced_init_list ) SEMICOLON | LITERAL_goto IDENT SEMICOLON ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:475:5: ( LITERAL_break SEMICOLON | LITERAL_continue SEMICOLON | LITERAL_return ( ( expression )? | braced_init_list ) SEMICOLON | LITERAL_goto IDENT SEMICOLON )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:475:5: ( LITERAL_break SEMICOLON | LITERAL_continue SEMICOLON | LITERAL_return ( ( expression )? | braced_init_list ) SEMICOLON | LITERAL_goto IDENT SEMICOLON )
            int alt24=4;
            switch ( input.LA(1) ) {
            case LITERAL_break:
                {
                alt24=1;
                }
                break;
            case LITERAL_continue:
                {
                alt24=2;
                }
                break;
            case LITERAL_return:
                {
                alt24=3;
                }
                break;
            case LITERAL_goto:
                {
                alt24=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }

            switch (alt24) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:476:9: LITERAL_break SEMICOLON
                    {
                    match(input,LITERAL_break,FOLLOW_LITERAL_break_in_jump_statement6527); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.jump_statement(action.JUMP_STATEMENT__BREAK, input.LT(0));}

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_jump_statement6597); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:479:9: LITERAL_continue SEMICOLON
                    {
                    match(input,LITERAL_continue,FOLLOW_LITERAL_continue_in_jump_statement6613); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.jump_statement(action.JUMP_STATEMENT__CONTINUE, input.LT(0));}

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_jump_statement6680); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:482:9: LITERAL_return ( ( expression )? | braced_init_list ) SEMICOLON
                    {
                    match(input,LITERAL_return,FOLLOW_LITERAL_return_in_jump_statement6696); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.jump_statement(action.JUMP_STATEMENT__RETURN, input.LT(0));}

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:483:9: ( ( expression )? | braced_init_list )
                    int alt23=2;
                    int LA23_0 = input.LA(1);

                    if ( ((LA23_0 >= QUESTIONMARK && LA23_0 <= SEMICOLON)||LA23_0==LPAREN||LA23_0==LSQUARE||LA23_0==PLUS||(LA23_0 >= PLUSPLUS && LA23_0 <= MINUS)||(LA23_0 >= MINUSMINUS && LA23_0 <= STAR)||LA23_0==NOT||LA23_0==AMPERSAND||LA23_0==TILDE||LA23_0==SCOPE||LA23_0==FLOATONE||(LA23_0 >= HEXADECIMALINT && LA23_0 <= DECIMALINT)||(LA23_0 >= CHAR_LITERAL && LA23_0 <= STRING_LITERAL)||(LA23_0 >= NUMBER && LA23_0 <= IDENT)||LA23_0==LITERAL_OPERATOR||(LA23_0 >= LITERAL_typeof && LA23_0 <= LITERAL___typeof)||(LA23_0 >= LITERAL_typename && LA23_0 <= LITERAL_auto)||LA23_0==LITERAL_const_cast||(LA23_0 >= LITERAL_char && LA23_0 <= LITERAL_signed)||LA23_0==LITERAL_unsigned||(LA23_0 >= LITERAL_float && LA23_0 <= LITERAL_void)||(LA23_0 >= LITERAL_this && LA23_0 <= LITERAL_false)||LA23_0==LITERAL_throw||(LA23_0 >= LITERAL_sizeof && LA23_0 <= LITERAL_new)||LA23_0==LITERAL_delete||LA23_0==LITERAL_decltype||(LA23_0 >= LITERAL_char16_t && LA23_0 <= LITERAL___decltype)||LA23_0==LITERAL___null||LA23_0==LITERAL___is_class||LA23_0==LITERAL___is_pod||(LA23_0 >= LITERAL___has_nothrow_assign && LA23_0 <= LITERAL___builtin_va_list)||LA23_0==LITERAL_typeid) ) {
                        alt23=1;
                    }
                    else if ( (LA23_0==LCURLY) ) {
                        alt23=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 23, 0, input);

                        throw nvae;

                    }
                    switch (alt23) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:484:13: ( expression )?
                            {
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:484:13: ( expression )?
                            int alt22=2;
                            int LA22_0 = input.LA(1);

                            if ( (LA22_0==QUESTIONMARK||LA22_0==LPAREN||LA22_0==LSQUARE||LA22_0==PLUS||(LA22_0 >= PLUSPLUS && LA22_0 <= MINUS)||(LA22_0 >= MINUSMINUS && LA22_0 <= STAR)||LA22_0==NOT||LA22_0==AMPERSAND||LA22_0==TILDE||LA22_0==SCOPE||LA22_0==FLOATONE||(LA22_0 >= HEXADECIMALINT && LA22_0 <= DECIMALINT)||(LA22_0 >= CHAR_LITERAL && LA22_0 <= STRING_LITERAL)||(LA22_0 >= NUMBER && LA22_0 <= IDENT)||LA22_0==LITERAL_OPERATOR||(LA22_0 >= LITERAL_typeof && LA22_0 <= LITERAL___typeof)||(LA22_0 >= LITERAL_typename && LA22_0 <= LITERAL_auto)||LA22_0==LITERAL_const_cast||(LA22_0 >= LITERAL_char && LA22_0 <= LITERAL_signed)||LA22_0==LITERAL_unsigned||(LA22_0 >= LITERAL_float && LA22_0 <= LITERAL_void)||(LA22_0 >= LITERAL_this && LA22_0 <= LITERAL_false)||LA22_0==LITERAL_throw||(LA22_0 >= LITERAL_sizeof && LA22_0 <= LITERAL_new)||LA22_0==LITERAL_delete||LA22_0==LITERAL_decltype||(LA22_0 >= LITERAL_char16_t && LA22_0 <= LITERAL___decltype)||LA22_0==LITERAL___null||LA22_0==LITERAL___is_class||LA22_0==LITERAL___is_pod||(LA22_0 >= LITERAL___has_nothrow_assign && LA22_0 <= LITERAL___builtin_va_list)||LA22_0==LITERAL_typeid) ) {
                                alt22=1;
                            }
                            switch (alt22) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:484:13: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_jump_statement6782);
                                    expression();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:486:13: braced_init_list
                            {
                            pushFollow(FOLLOW_braced_init_list_in_jump_statement6810);
                            braced_init_list();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_jump_statement6845); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:490:9: LITERAL_goto IDENT SEMICOLON
                    {
                    LITERAL_goto4=(Token)match(input,LITERAL_goto,FOLLOW_LITERAL_goto_in_jump_statement6861); if (state.failed) return ;

                    match(input,IDENT,FOLLOW_IDENT_in_jump_statement6863); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.jump_statement(action.JUMP_STATEMENT__GOTO, LITERAL_goto4, input.LT(0));}

                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_jump_statement6928); if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("jump_statement", 16);
            if(state.backtracking == 0){action.end_jump_statement(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "jump_statement"



    // $ANTLR start "declaration_statement"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:500:1: declaration_statement : ( simple_declaration[blockscope_decl] | block_declaration );
    public final void declaration_statement() throws RecognitionException {
        traceIn("declaration_statement", 17);
        if(state.backtracking == 0){action.declaration_statement(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:502:5: ( simple_declaration[blockscope_decl] | block_declaration )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ELLIPSIS||LA25_0==SEMICOLON||LA25_0==LPAREN||LA25_0==STAR||LA25_0==AND||LA25_0==AMPERSAND||LA25_0==TILDE||LA25_0==SCOPE||LA25_0==IDENT||LA25_0==LITERAL_OPERATOR||(LA25_0 >= LITERAL_typeof && LA25_0 <= LITERAL___typeof)||(LA25_0 >= LITERAL_typedef && LA25_0 <= LITERAL_enum)||(LA25_0 >= LITERAL_extern && LA25_0 <= LITERAL_inline)||(LA25_0 >= LITERAL___inline && LA25_0 <= LITERAL_friend)||(LA25_0 >= LITERAL_typename && LA25_0 <= LITERAL___const)||LA25_0==LITERAL_volatile||(LA25_0 >= LITERAL_char && LA25_0 <= LITERAL_signed)||LA25_0==LITERAL_unsigned||(LA25_0 >= LITERAL_float && LA25_0 <= LITERAL_void)||(LA25_0 >= LITERAL_class && LA25_0 <= LITERAL_union)||LA25_0==LITERAL___global||LA25_0==LITERAL___thread||(LA25_0 >= LITERAL___symbolic && LA25_0 <= LITERAL___hidden)||(LA25_0 >= LITERAL_constexpr && LA25_0 <= LITERAL_decltype)||LA25_0==LITERAL_thread_local||(LA25_0 >= LITERAL_char16_t && LA25_0 <= LITERAL_char32_t)||LA25_0==LITERAL___decltype||LA25_0==LITERAL___builtin_va_list) ) {
                alt25=1;
            }
            else if ( (LA25_0==LITERAL_namespace||LA25_0==LITERAL_using||(LA25_0 >= LITERAL_asm && LA25_0 <= LITERAL___asm)||LA25_0==LITERAL_static_assert) ) {
                alt25=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;

            }
            switch (alt25) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:503:9: simple_declaration[blockscope_decl]
                    {
                    pushFollow(FOLLOW_simple_declaration_in_declaration_statement7191);
                    simple_declaration(blockscope_decl);

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:505:9: block_declaration
                    {
                    pushFollow(FOLLOW_block_declaration_in_declaration_statement7208);
                    block_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("declaration_statement", 17);
            if(state.backtracking == 0){action.end_declaration_statement(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "declaration_statement"



    // $ANTLR start "declaration"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:513:1: declaration[decl_kind kind] : ( block_declaration | simple_declaration_or_function_definition[kind] | template_declaration[kind] | explicit_instantiation[kind] | explicit_specialization[kind] | linkage_specification[kind] | namespace_definition | attribute_declaration ) ;
    public final void declaration(decl_kind kind) throws RecognitionException {
        traceIn("declaration", 18);
        if(state.backtracking == 0){action.declaration(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:515:5: ( ( block_declaration | simple_declaration_or_function_definition[kind] | template_declaration[kind] | explicit_instantiation[kind] | explicit_specialization[kind] | linkage_specification[kind] | namespace_definition | attribute_declaration ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:516:5: ( block_declaration | simple_declaration_or_function_definition[kind] | template_declaration[kind] | explicit_instantiation[kind] | explicit_specialization[kind] | linkage_specification[kind] | namespace_definition | attribute_declaration )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:516:5: ( block_declaration | simple_declaration_or_function_definition[kind] | template_declaration[kind] | explicit_instantiation[kind] | explicit_specialization[kind] | linkage_specification[kind] | namespace_definition | attribute_declaration )
            int alt26=8;
            switch ( input.LA(1) ) {
            case LITERAL_using:
            case LITERAL_asm:
            case LITERAL__asm:
            case LITERAL___asm__:
            case LITERAL___asm:
            case LITERAL_static_assert:
                {
                alt26=1;
                }
                break;
            case LITERAL_namespace:
                {
                int LA26_2 = input.LA(2);

                if ( (LA26_2==IDENT) ) {
                    int LA26_9 = input.LA(3);

                    if ( (LA26_9==ASSIGNEQUAL) ) {
                        alt26=1;
                    }
                    else if ( (LA26_9==LCURLY||(LA26_9 >= LITERAL___extension__ && LA26_9 <= LITERAL___attribute__)) ) {
                        alt26=7;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 9, input);

                        throw nvae;

                    }
                }
                else if ( (LA26_2==LCURLY||(LA26_2 >= LITERAL___extension__ && LA26_2 <= LITERAL___attribute__)) ) {
                    alt26=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 2, input);

                    throw nvae;

                }
                }
                break;
            case ELLIPSIS:
            case SEMICOLON:
            case LPAREN:
            case STAR:
            case AND:
            case AMPERSAND:
            case TILDE:
            case SCOPE:
            case IDENT:
            case LITERAL_OPERATOR:
            case LITERAL_typeof:
            case LITERAL___typeof__:
            case LITERAL___typeof:
            case LITERAL_typedef:
            case LITERAL_enum:
            case LITERAL___inline:
            case LITERAL_virtual:
            case LITERAL_explicit:
            case LITERAL_friend:
            case LITERAL_typename:
            case LITERAL_auto:
            case LITERAL_register:
            case LITERAL_static:
            case LITERAL_mutable:
            case LITERAL_const:
            case LITERAL___const__:
            case LITERAL___const:
            case LITERAL_volatile:
            case LITERAL_char:
            case LITERAL_wchar_t:
            case LITERAL_bool:
            case LITERAL_short:
            case LITERAL_int:
            case LITERAL_long:
            case LITERAL_signed:
            case LITERAL_unsigned:
            case LITERAL_float:
            case LITERAL_double:
            case LITERAL_void:
            case LITERAL_class:
            case LITERAL_struct:
            case LITERAL_union:
            case LITERAL___extension__:
            case LITERAL___attribute__:
            case LITERAL___global:
            case LITERAL___thread:
            case LITERAL___symbolic:
            case LITERAL___hidden:
            case LITERAL_constexpr:
            case LITERAL_decltype:
            case LITERAL_thread_local:
            case LITERAL_char16_t:
            case LITERAL_char32_t:
            case LITERAL___decltype:
            case LITERAL___builtin_va_list:
                {
                alt26=2;
                }
                break;
            case LITERAL_extern:
                {
                switch ( input.LA(2) ) {
                case STRING_LITERAL:
                    {
                    alt26=6;
                    }
                    break;
                case ELLIPSIS:
                case SEMICOLON:
                case LPAREN:
                case STAR:
                case AND:
                case AMPERSAND:
                case TILDE:
                case SCOPE:
                case IDENT:
                case LITERAL_OPERATOR:
                case LITERAL_typeof:
                case LITERAL___typeof__:
                case LITERAL___typeof:
                case LITERAL_typedef:
                case LITERAL_enum:
                case LITERAL_extern:
                case LITERAL_inline:
                case LITERAL___inline:
                case LITERAL_virtual:
                case LITERAL_explicit:
                case LITERAL_friend:
                case LITERAL_typename:
                case LITERAL_auto:
                case LITERAL_register:
                case LITERAL_static:
                case LITERAL_mutable:
                case LITERAL_const:
                case LITERAL___const__:
                case LITERAL___const:
                case LITERAL_volatile:
                case LITERAL_char:
                case LITERAL_wchar_t:
                case LITERAL_bool:
                case LITERAL_short:
                case LITERAL_int:
                case LITERAL_long:
                case LITERAL_signed:
                case LITERAL_unsigned:
                case LITERAL_float:
                case LITERAL_double:
                case LITERAL_void:
                case LITERAL_class:
                case LITERAL_struct:
                case LITERAL_union:
                case LITERAL___attribute__:
                case LITERAL___global:
                case LITERAL___thread:
                case LITERAL___symbolic:
                case LITERAL___hidden:
                case LITERAL_constexpr:
                case LITERAL_decltype:
                case LITERAL_thread_local:
                case LITERAL_char16_t:
                case LITERAL_char32_t:
                case LITERAL___decltype:
                case LITERAL___builtin_va_list:
                    {
                    alt26=2;
                    }
                    break;
                case LITERAL_template:
                    {
                    alt26=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 4, input);

                    throw nvae;

                }

                }
                break;
            case LITERAL_inline:
                {
                int LA26_5 = input.LA(2);

                if ( (LA26_5==ELLIPSIS||LA26_5==SEMICOLON||LA26_5==LPAREN||LA26_5==STAR||LA26_5==AND||LA26_5==AMPERSAND||LA26_5==TILDE||LA26_5==SCOPE||LA26_5==IDENT||LA26_5==LITERAL_OPERATOR||(LA26_5 >= LITERAL_typeof && LA26_5 <= LITERAL___typeof)||(LA26_5 >= LITERAL_typedef && LA26_5 <= LITERAL_enum)||(LA26_5 >= LITERAL_extern && LA26_5 <= LITERAL_inline)||(LA26_5 >= LITERAL___inline && LA26_5 <= LITERAL_friend)||(LA26_5 >= LITERAL_typename && LA26_5 <= LITERAL___const)||LA26_5==LITERAL_volatile||(LA26_5 >= LITERAL_char && LA26_5 <= LITERAL_signed)||LA26_5==LITERAL_unsigned||(LA26_5 >= LITERAL_float && LA26_5 <= LITERAL_void)||(LA26_5 >= LITERAL_class && LA26_5 <= LITERAL_union)||LA26_5==LITERAL___attribute__||LA26_5==LITERAL___global||LA26_5==LITERAL___thread||(LA26_5 >= LITERAL___symbolic && LA26_5 <= LITERAL___hidden)||(LA26_5 >= LITERAL_constexpr && LA26_5 <= LITERAL_decltype)||LA26_5==LITERAL_thread_local||(LA26_5 >= LITERAL_char16_t && LA26_5 <= LITERAL_char32_t)||LA26_5==LITERAL___decltype||LA26_5==LITERAL___builtin_va_list) ) {
                    alt26=2;
                }
                else if ( (LA26_5==LITERAL_namespace) ) {
                    alt26=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 5, input);

                    throw nvae;

                }
                }
                break;
            case LITERAL_export:
                {
                alt26=3;
                }
                break;
            case LITERAL_template:
                {
                int LA26_7 = input.LA(2);

                if ( (LA26_7==LESSTHAN) ) {
                    int LA26_13 = input.LA(3);

                    if ( (LA26_13==GREATERTHAN) ) {
                        alt26=5;
                    }
                    else if ( (LA26_13==LSQUARE||LA26_13==SCOPE||LA26_13==IDENT||(LA26_13 >= LITERAL_typeof && LA26_13 <= LITERAL_enum)||(LA26_13 >= LITERAL_extern && LA26_13 <= LITERAL_inline)||(LA26_13 >= LITERAL___inline && LA26_13 <= LITERAL_friend)||(LA26_13 >= LITERAL_typename && LA26_13 <= LITERAL___const)||LA26_13==LITERAL_volatile||(LA26_13 >= LITERAL_char && LA26_13 <= LITERAL_signed)||LA26_13==LITERAL_unsigned||(LA26_13 >= LITERAL_float && LA26_13 <= LITERAL_void)||(LA26_13 >= LITERAL_class && LA26_13 <= LITERAL_union)||(LA26_13 >= LITERAL___extension__ && LA26_13 <= LITERAL___attribute__)||LA26_13==LITERAL___global||LA26_13==LITERAL___thread||(LA26_13 >= LITERAL___symbolic && LA26_13 <= LITERAL___hidden)||(LA26_13 >= LITERAL_constexpr && LA26_13 <= LITERAL_decltype)||LA26_13==LITERAL_thread_local||(LA26_13 >= LITERAL_alignas && LA26_13 <= LITERAL_char32_t)||LA26_13==LITERAL___decltype||LA26_13==LITERAL___builtin_va_list) ) {
                        alt26=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 26, 13, input);

                        throw nvae;

                    }
                }
                else if ( (LA26_7==ELLIPSIS||LA26_7==SEMICOLON||LA26_7==LPAREN||LA26_7==LSQUARE||LA26_7==STAR||LA26_7==AND||LA26_7==AMPERSAND||LA26_7==TILDE||LA26_7==SCOPE||LA26_7==IDENT||LA26_7==LITERAL_OPERATOR||(LA26_7 >= LITERAL_typeof && LA26_7 <= LITERAL_inline)||(LA26_7 >= LITERAL___inline && LA26_7 <= LITERAL_friend)||(LA26_7 >= LITERAL_typename && LA26_7 <= LITERAL___const)||LA26_7==LITERAL_volatile||(LA26_7 >= LITERAL_char && LA26_7 <= LITERAL_signed)||LA26_7==LITERAL_unsigned||(LA26_7 >= LITERAL_float && LA26_7 <= LITERAL_void)||(LA26_7 >= LITERAL_class && LA26_7 <= LITERAL_union)||(LA26_7 >= LITERAL_using && LA26_7 <= LITERAL___asm)||(LA26_7 >= LITERAL___extension__ && LA26_7 <= LITERAL___attribute__)||LA26_7==LITERAL___global||LA26_7==LITERAL___thread||(LA26_7 >= LITERAL___symbolic && LA26_7 <= LITERAL___hidden)||(LA26_7 >= LITERAL_constexpr && LA26_7 <= LITERAL_decltype)||(LA26_7 >= LITERAL_thread_local && LA26_7 <= LITERAL_char32_t)||LA26_7==LITERAL___decltype||LA26_7==LITERAL___builtin_va_list) ) {
                    alt26=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 26, 7, input);

                    throw nvae;

                }
                }
                break;
            case LSQUARE:
            case LITERAL_alignas:
                {
                alt26=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;

            }

            switch (alt26) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:517:9: block_declaration
                    {
                    pushFollow(FOLLOW_block_declaration_in_declaration7400);
                    block_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:519:9: simple_declaration_or_function_definition[kind]
                    {
                    pushFollow(FOLLOW_simple_declaration_or_function_definition_in_declaration7416);
                    simple_declaration_or_function_definition(kind);

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:521:9: template_declaration[kind]
                    {
                    pushFollow(FOLLOW_template_declaration_in_declaration7433);
                    template_declaration(kind);

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:523:9: explicit_instantiation[kind]
                    {
                    pushFollow(FOLLOW_explicit_instantiation_in_declaration7450);
                    explicit_instantiation(kind);

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:525:9: explicit_specialization[kind]
                    {
                    pushFollow(FOLLOW_explicit_specialization_in_declaration7467);
                    explicit_specialization(kind);

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:527:9: linkage_specification[kind]
                    {
                    pushFollow(FOLLOW_linkage_specification_in_declaration7484);
                    linkage_specification(kind);

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:529:9: namespace_definition
                    {
                    pushFollow(FOLLOW_namespace_definition_in_declaration7501);
                    namespace_definition();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:531:9: attribute_declaration
                    {
                    pushFollow(FOLLOW_attribute_declaration_in_declaration7518);
                    attribute_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("declaration", 18);
            if(state.backtracking == 0){action.end_declaration(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "declaration"



    // $ANTLR start "sync_declaration"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:536:1: sync_declaration :;
    public final void sync_declaration() throws RecognitionException {
        traceIn("sync_declaration", 19);
        sync_declaration_impl();
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:538:5: ()
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:539:5: 
            {
            }

        }
        finally {
        	// do for sure before leaving
            traceOut("sync_declaration", 19);
        }
        return ;
    }
    // $ANTLR end "sync_declaration"



    // $ANTLR start "sync_member"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:541:1: sync_member :;
    public final void sync_member() throws RecognitionException {
        traceIn("sync_member", 20);
        sync_member_impl();
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:543:5: ()
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:544:5: 
            {
            }

        }
        finally {
        	// do for sure before leaving
            traceOut("sync_member", 20);
        }
        return ;
    }
    // $ANTLR end "sync_member"



    // $ANTLR start "sync_parameter"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:546:1: sync_parameter :;
    public final void sync_parameter() throws RecognitionException {
        traceIn("sync_parameter", 21);
        sync_parameter_impl();
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:548:5: ()
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:549:5: 
            {
            }

        }
        finally {
        	// do for sure before leaving
            traceOut("sync_parameter", 21);
        }
        return ;
    }
    // $ANTLR end "sync_parameter"



    // $ANTLR start "sync_statement"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:551:1: sync_statement :;
    public final void sync_statement() throws RecognitionException {
        traceIn("sync_statement", 22);
        sync_statement_impl();
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:553:5: ()
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:554:5: 
            {
            }

        }
        finally {
        	// do for sure before leaving
            traceOut("sync_statement", 22);
        }
        return ;
    }
    // $ANTLR end "sync_statement"



    // $ANTLR start "block_declaration"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:556:1: block_declaration : ( asm_definition | namespace_alias_definition | using_declaration | using_directive | static_assert_declaration | alias_declaration ) ;
    public final void block_declaration() throws RecognitionException {
        traceIn("block_declaration", 23);
        if(state.backtracking == 0){action.block_declaration(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:558:5: ( ( asm_definition | namespace_alias_definition | using_declaration | using_directive | static_assert_declaration | alias_declaration ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:559:5: ( asm_definition | namespace_alias_definition | using_declaration | using_directive | static_assert_declaration | alias_declaration )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:559:5: ( asm_definition | namespace_alias_definition | using_declaration | using_directive | static_assert_declaration | alias_declaration )
            int alt27=6;
            switch ( input.LA(1) ) {
            case LITERAL_asm:
            case LITERAL__asm:
            case LITERAL___asm__:
            case LITERAL___asm:
                {
                alt27=1;
                }
                break;
            case LITERAL_namespace:
                {
                alt27=2;
                }
                break;
            case LITERAL_using:
                {
                switch ( input.LA(2) ) {
                case LITERAL_namespace:
                    {
                    alt27=4;
                    }
                    break;
                case IDENT:
                    {
                    int LA27_6 = input.LA(3);

                    if ( (LA27_6==ASSIGNEQUAL) ) {
                        alt27=6;
                    }
                    else if ( (LA27_6==SEMICOLON||LA27_6==LESSTHAN||LA27_6==SCOPE) ) {
                        alt27=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 27, 6, input);

                        throw nvae;

                    }
                    }
                    break;
                case TILDE:
                case SCOPE:
                case LITERAL_OPERATOR:
                case LITERAL_typename:
                    {
                    alt27=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 27, 3, input);

                    throw nvae;

                }

                }
                break;
            case LITERAL_static_assert:
                {
                alt27=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;

            }

            switch (alt27) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:560:9: asm_definition
                    {
                    pushFollow(FOLLOW_asm_definition_in_block_declaration8248);
                    asm_definition();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:562:9: namespace_alias_definition
                    {
                    pushFollow(FOLLOW_namespace_alias_definition_in_block_declaration8265);
                    namespace_alias_definition();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:564:9: using_declaration
                    {
                    pushFollow(FOLLOW_using_declaration_in_block_declaration8282);
                    using_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:566:9: using_directive
                    {
                    pushFollow(FOLLOW_using_directive_in_block_declaration8298);
                    using_directive();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:568:9: static_assert_declaration
                    {
                    pushFollow(FOLLOW_static_assert_declaration_in_block_declaration8315);
                    static_assert_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:570:9: alias_declaration
                    {
                    pushFollow(FOLLOW_alias_declaration_in_block_declaration8331);
                    alias_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("block_declaration", 23);
            if(state.backtracking == 0){action.end_block_declaration(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "block_declaration"



    // $ANTLR start "id_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:578:1: id_expression : unqualified_or_qualified_id ;
    public final void id_expression() throws RecognitionException {
        traceIn("id_expression", 24);
        if(state.backtracking == 0){action.id_expression(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:580:5: ( unqualified_or_qualified_id )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:581:5: unqualified_or_qualified_id
            {
            pushFollow(FOLLOW_unqualified_or_qualified_id_in_id_expression8666);
            unqualified_or_qualified_id();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("id_expression", 24);
            if(state.backtracking == 0){action.end_id_expression(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "id_expression"



    // $ANTLR start "tilde_class_name"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:585:1: tilde_class_name : TILDE class_name ;
    public final void tilde_class_name() throws RecognitionException {
        traceIn("tilde_class_name", 25);
        if(state.backtracking == 0){action.tilde_class_name(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:587:5: ( TILDE class_name )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:588:5: TILDE class_name
            {
            match(input,TILDE,FOLLOW_TILDE_in_tilde_class_name8842); if (state.failed) return ;

            pushFollow(FOLLOW_class_name_in_tilde_class_name8844);
            class_name();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("tilde_class_name", 25);
            if(state.backtracking == 0){action.end_tilde_class_name(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "tilde_class_name"



    // $ANTLR start "unqualified_or_qualified_id"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:592:1: unqualified_or_qualified_id : ( ( LITERAL_OPERATOR operator_id )=> operator_function_id | conversion_function_id | literal_operator_id | tilde_class_name | simple_template_id_or_IDENT ( SCOPE ( ( LITERAL_template )? ( ( LITERAL_OPERATOR operator_id )=> operator_function_id | conversion_function_id | literal_operator_id | tilde_class_name | simple_template_id_or_IDENT_nested[t] ) ) )* | SCOPE ( ( simple_template_id_or_IDENT SCOPE )=> nested_name_specifier ( LITERAL_template )? unqualified_id | operator_function_id | ( LITERAL_OPERATOR STRING_LITERAL IDENT )=> literal_operator_id | simple_template_id_or_IDENT ) );
    public final void unqualified_or_qualified_id() throws RecognitionException {
        traceIn("unqualified_or_qualified_id", 26);
        Token t = input.LT(1);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:594:5: ( ( LITERAL_OPERATOR operator_id )=> operator_function_id | conversion_function_id | literal_operator_id | tilde_class_name | simple_template_id_or_IDENT ( SCOPE ( ( LITERAL_template )? ( ( LITERAL_OPERATOR operator_id )=> operator_function_id | conversion_function_id | literal_operator_id | tilde_class_name | simple_template_id_or_IDENT_nested[t] ) ) )* | SCOPE ( ( simple_template_id_or_IDENT SCOPE )=> nested_name_specifier ( LITERAL_template )? unqualified_id | operator_function_id | ( LITERAL_OPERATOR STRING_LITERAL IDENT )=> literal_operator_id | simple_template_id_or_IDENT ) )
            int alt33=6;
            switch ( input.LA(1) ) {
            case LITERAL_OPERATOR:
                {
                int LA33_1 = input.LA(2);

                if ( (LA33_1==STRING_LITERAL) ) {
                    alt33=3;
                }
                else if ( (LA33_1==LITERAL_new) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==LITERAL_delete) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==PLUS) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==MINUS) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==STAR) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==DIVIDE) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==MOD) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==BITWISEXOR) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==AMPERSAND) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==BITWISEOR) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==TILDE) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==NOT) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==ASSIGNEQUAL) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==LESSTHAN) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==GREATERTHAN) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==PLUSEQUAL) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==MINUSEQUAL) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==TIMESEQUAL) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==DIVIDEEQUAL) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==MODEQUAL) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==BITWISEXOREQUAL) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==BITWISEANDEQUAL) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==BITWISEOREQUAL) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==SHIFTLEFT) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==SHIFTRIGHT) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==SHIFTRIGHTEQUAL) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==SHIFTLEFTEQUAL) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==EQUAL) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==NOTEQUAL) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==LESSTHANOREQUALTO) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==GREATERTHANOREQUALTO) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==AND) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==OR) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==PLUSPLUS) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==MINUSMINUS) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==COMMA) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==POINTERTOMBR) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==POINTERTO) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==LPAREN) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==LSQUARE) && (synpred6_CXXParser())) {
                    alt33=1;
                }
                else if ( (LA33_1==SCOPE||LA33_1==IDENT||(LA33_1 >= LITERAL_typeof && LA33_1 <= LITERAL___typeof)||LA33_1==LITERAL_enum||(LA33_1 >= LITERAL_typename && LA33_1 <= LITERAL_auto)||(LA33_1 >= LITERAL_const && LA33_1 <= LITERAL___const)||LA33_1==LITERAL_volatile||(LA33_1 >= LITERAL_char && LA33_1 <= LITERAL_signed)||LA33_1==LITERAL_unsigned||(LA33_1 >= LITERAL_float && LA33_1 <= LITERAL_void)||(LA33_1 >= LITERAL_class && LA33_1 <= LITERAL_union)||LA33_1==LITERAL_decltype||(LA33_1 >= LITERAL_char16_t && LA33_1 <= LITERAL_char32_t)||LA33_1==LITERAL___decltype||LA33_1==LITERAL___builtin_va_list) ) {
                    alt33=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 33, 1, input);

                    throw nvae;

                }
                }
                break;
            case TILDE:
                {
                alt33=4;
                }
                break;
            case IDENT:
                {
                alt33=5;
                }
                break;
            case SCOPE:
                {
                alt33=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;

            }

            switch (alt33) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:595:9: ( LITERAL_OPERATOR operator_id )=> operator_function_id
                    {
                    pushFollow(FOLLOW_operator_function_id_in_unqualified_or_qualified_id8969);
                    operator_function_id();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:598:9: conversion_function_id
                    {
                    pushFollow(FOLLOW_conversion_function_id_in_unqualified_or_qualified_id8985);
                    conversion_function_id();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:600:9: literal_operator_id
                    {
                    pushFollow(FOLLOW_literal_operator_id_in_unqualified_or_qualified_id9001);
                    literal_operator_id();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:602:9: tilde_class_name
                    {
                    pushFollow(FOLLOW_tilde_class_name_in_unqualified_or_qualified_id9017);
                    tilde_class_name();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:604:9: simple_template_id_or_IDENT ( SCOPE ( ( LITERAL_template )? ( ( LITERAL_OPERATOR operator_id )=> operator_function_id | conversion_function_id | literal_operator_id | tilde_class_name | simple_template_id_or_IDENT_nested[t] ) ) )*
                    {
                    pushFollow(FOLLOW_simple_template_id_or_IDENT_in_unqualified_or_qualified_id9033);
                    simple_template_id_or_IDENT();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:605:9: ( SCOPE ( ( LITERAL_template )? ( ( LITERAL_OPERATOR operator_id )=> operator_function_id | conversion_function_id | literal_operator_id | tilde_class_name | simple_template_id_or_IDENT_nested[t] ) ) )*
                    loop30:
                    do {
                        int alt30=2;
                        int LA30_0 = input.LA(1);

                        if ( (LA30_0==SCOPE) ) {
                            alt30=1;
                        }


                        switch (alt30) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:606:13: SCOPE ( ( LITERAL_template )? ( ( LITERAL_OPERATOR operator_id )=> operator_function_id | conversion_function_id | literal_operator_id | tilde_class_name | simple_template_id_or_IDENT_nested[t] ) )
                    	    {
                    	    match(input,SCOPE,FOLLOW_SCOPE_in_unqualified_or_qualified_id9057); if (state.failed) return ;

                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:607:13: ( ( LITERAL_template )? ( ( LITERAL_OPERATOR operator_id )=> operator_function_id | conversion_function_id | literal_operator_id | tilde_class_name | simple_template_id_or_IDENT_nested[t] ) )
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:608:17: ( LITERAL_template )? ( ( LITERAL_OPERATOR operator_id )=> operator_function_id | conversion_function_id | literal_operator_id | tilde_class_name | simple_template_id_or_IDENT_nested[t] )
                    	    {
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:608:17: ( LITERAL_template )?
                    	    int alt28=2;
                    	    int LA28_0 = input.LA(1);

                    	    if ( (LA28_0==LITERAL_template) ) {
                    	        alt28=1;
                    	    }
                    	    switch (alt28) {
                    	        case 1 :
                    	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:608:17: LITERAL_template
                    	            {
                    	            match(input,LITERAL_template,FOLLOW_LITERAL_template_in_unqualified_or_qualified_id9090); if (state.failed) return ;

                    	            }
                    	            break;

                    	    }


                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:609:17: ( ( LITERAL_OPERATOR operator_id )=> operator_function_id | conversion_function_id | literal_operator_id | tilde_class_name | simple_template_id_or_IDENT_nested[t] )
                    	    int alt29=5;
                    	    switch ( input.LA(1) ) {
                    	    case LITERAL_OPERATOR:
                    	        {
                    	        int LA29_1 = input.LA(2);

                    	        if ( (LA29_1==STRING_LITERAL) ) {
                    	            alt29=3;
                    	        }
                    	        else if ( (LA29_1==LITERAL_new) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==LITERAL_delete) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==PLUS) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==MINUS) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==STAR) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==DIVIDE) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==MOD) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==BITWISEXOR) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==AMPERSAND) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==BITWISEOR) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==TILDE) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==NOT) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==ASSIGNEQUAL) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==LESSTHAN) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==GREATERTHAN) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==PLUSEQUAL) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==MINUSEQUAL) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==TIMESEQUAL) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==DIVIDEEQUAL) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==MODEQUAL) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==BITWISEXOREQUAL) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==BITWISEANDEQUAL) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==BITWISEOREQUAL) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==SHIFTLEFT) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==SHIFTRIGHT) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==SHIFTRIGHTEQUAL) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==SHIFTLEFTEQUAL) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==EQUAL) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==NOTEQUAL) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==LESSTHANOREQUALTO) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==GREATERTHANOREQUALTO) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==AND) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==OR) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==PLUSPLUS) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==MINUSMINUS) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==COMMA) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==POINTERTOMBR) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==POINTERTO) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==LPAREN) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==LSQUARE) && (synpred7_CXXParser())) {
                    	            alt29=1;
                    	        }
                    	        else if ( (LA29_1==SCOPE||LA29_1==IDENT||(LA29_1 >= LITERAL_typeof && LA29_1 <= LITERAL___typeof)||LA29_1==LITERAL_enum||(LA29_1 >= LITERAL_typename && LA29_1 <= LITERAL_auto)||(LA29_1 >= LITERAL_const && LA29_1 <= LITERAL___const)||LA29_1==LITERAL_volatile||(LA29_1 >= LITERAL_char && LA29_1 <= LITERAL_signed)||LA29_1==LITERAL_unsigned||(LA29_1 >= LITERAL_float && LA29_1 <= LITERAL_void)||(LA29_1 >= LITERAL_class && LA29_1 <= LITERAL_union)||LA29_1==LITERAL_decltype||(LA29_1 >= LITERAL_char16_t && LA29_1 <= LITERAL_char32_t)||LA29_1==LITERAL___decltype||LA29_1==LITERAL___builtin_va_list) ) {
                    	            alt29=2;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return ;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 29, 1, input);

                    	            throw nvae;

                    	        }
                    	        }
                    	        break;
                    	    case TILDE:
                    	        {
                    	        alt29=4;
                    	        }
                    	        break;
                    	    case IDENT:
                    	        {
                    	        alt29=5;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return ;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 29, 0, input);

                    	        throw nvae;

                    	    }

                    	    switch (alt29) {
                    	        case 1 :
                    	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:610:21: ( LITERAL_OPERATOR operator_id )=> operator_function_id
                    	            {
                    	            pushFollow(FOLLOW_operator_function_id_in_unqualified_or_qualified_id9163);
                    	            operator_function_id();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;
                    	        case 2 :
                    	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:613:21: conversion_function_id
                    	            {
                    	            pushFollow(FOLLOW_conversion_function_id_in_unqualified_or_qualified_id9203);
                    	            conversion_function_id();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;
                    	        case 3 :
                    	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:615:21: literal_operator_id
                    	            {
                    	            pushFollow(FOLLOW_literal_operator_id_in_unqualified_or_qualified_id9243);
                    	            literal_operator_id();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;
                    	        case 4 :
                    	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:617:21: tilde_class_name
                    	            {
                    	            pushFollow(FOLLOW_tilde_class_name_in_unqualified_or_qualified_id9283);
                    	            tilde_class_name();

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;
                    	        case 5 :
                    	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:619:21: simple_template_id_or_IDENT_nested[t]
                    	            {
                    	            pushFollow(FOLLOW_simple_template_id_or_IDENT_nested_in_unqualified_or_qualified_id9323);
                    	            simple_template_id_or_IDENT_nested(t);

                    	            state._fsp--;
                    	            if (state.failed) return ;

                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop30;
                        }
                    } while (true);


                    }
                    break;
                case 6 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:624:9: SCOPE ( ( simple_template_id_or_IDENT SCOPE )=> nested_name_specifier ( LITERAL_template )? unqualified_id | operator_function_id | ( LITERAL_OPERATOR STRING_LITERAL IDENT )=> literal_operator_id | simple_template_id_or_IDENT )
                    {
                    match(input,SCOPE,FOLLOW_SCOPE_in_unqualified_or_qualified_id9383); if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:624:15: ( ( simple_template_id_or_IDENT SCOPE )=> nested_name_specifier ( LITERAL_template )? unqualified_id | operator_function_id | ( LITERAL_OPERATOR STRING_LITERAL IDENT )=> literal_operator_id | simple_template_id_or_IDENT )
                    int alt32=4;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==IDENT) ) {
                        int LA32_1 = input.LA(2);

                        if ( (synpred8_CXXParser()) ) {
                            alt32=1;
                        }
                        else if ( (true) ) {
                            alt32=4;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 32, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA32_0==LITERAL_OPERATOR) ) {
                        int LA32_2 = input.LA(2);

                        if ( (true) ) {
                            alt32=2;
                        }
                        else if ( (synpred9_CXXParser()) ) {
                            alt32=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 32, 2, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 32, 0, input);

                        throw nvae;

                    }
                    switch (alt32) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:625:13: ( simple_template_id_or_IDENT SCOPE )=> nested_name_specifier ( LITERAL_template )? unqualified_id
                            {
                            pushFollow(FOLLOW_nested_name_specifier_in_unqualified_or_qualified_id9419);
                            nested_name_specifier();

                            state._fsp--;
                            if (state.failed) return ;

                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:626:35: ( LITERAL_template )?
                            int alt31=2;
                            int LA31_0 = input.LA(1);

                            if ( (LA31_0==LITERAL_template) ) {
                                alt31=1;
                            }
                            switch (alt31) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:626:35: LITERAL_template
                                    {
                                    match(input,LITERAL_template,FOLLOW_LITERAL_template_in_unqualified_or_qualified_id9421); if (state.failed) return ;

                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_unqualified_id_in_unqualified_or_qualified_id9424);
                            unqualified_id();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:628:13: operator_function_id
                            {
                            pushFollow(FOLLOW_operator_function_id_in_unqualified_or_qualified_id9448);
                            operator_function_id();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 3 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:630:13: ( LITERAL_OPERATOR STRING_LITERAL IDENT )=> literal_operator_id
                            {
                            pushFollow(FOLLOW_literal_operator_id_in_unqualified_or_qualified_id9494);
                            literal_operator_id();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 4 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:633:13: simple_template_id_or_IDENT
                            {
                            pushFollow(FOLLOW_simple_template_id_or_IDENT_in_unqualified_or_qualified_id9518);
                            simple_template_id_or_IDENT();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("unqualified_or_qualified_id", 26);
        }
        return ;
    }
    // $ANTLR end "unqualified_or_qualified_id"



    // $ANTLR start "nested_simple_template_id_or_IDENT"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:640:1: nested_simple_template_id_or_IDENT : simple_template_id_or_IDENT ( SCOPE ( ( LITERAL_template lookup_simple_template_id_nocheck SCOPE )=> LITERAL_template simple_template_id_nocheck | simple_template_id_or_IDENT_nested[startToken] ) )* ;
    public final void nested_simple_template_id_or_IDENT() throws RecognitionException {
        traceIn("nested_simple_template_id_or_IDENT", 27);
        Token startToken = input.LT(1);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:642:5: ( simple_template_id_or_IDENT ( SCOPE ( ( LITERAL_template lookup_simple_template_id_nocheck SCOPE )=> LITERAL_template simple_template_id_nocheck | simple_template_id_or_IDENT_nested[startToken] ) )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:643:9: simple_template_id_or_IDENT ( SCOPE ( ( LITERAL_template lookup_simple_template_id_nocheck SCOPE )=> LITERAL_template simple_template_id_nocheck | simple_template_id_or_IDENT_nested[startToken] ) )*
            {
            pushFollow(FOLLOW_simple_template_id_or_IDENT_in_nested_simple_template_id_or_IDENT9561);
            simple_template_id_or_IDENT();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:644:9: ( SCOPE ( ( LITERAL_template lookup_simple_template_id_nocheck SCOPE )=> LITERAL_template simple_template_id_nocheck | simple_template_id_or_IDENT_nested[startToken] ) )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==SCOPE) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:645:13: SCOPE ( ( LITERAL_template lookup_simple_template_id_nocheck SCOPE )=> LITERAL_template simple_template_id_nocheck | simple_template_id_or_IDENT_nested[startToken] )
            	    {
            	    match(input,SCOPE,FOLLOW_SCOPE_in_nested_simple_template_id_or_IDENT9585); if (state.failed) return ;

            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:646:13: ( ( LITERAL_template lookup_simple_template_id_nocheck SCOPE )=> LITERAL_template simple_template_id_nocheck | simple_template_id_or_IDENT_nested[startToken] )
            	    int alt34=2;
            	    int LA34_0 = input.LA(1);

            	    if ( (LA34_0==LITERAL_template) && (synpred10_CXXParser())) {
            	        alt34=1;
            	    }
            	    else if ( (LA34_0==IDENT) ) {
            	        alt34=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 34, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt34) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:647:17: ( LITERAL_template lookup_simple_template_id_nocheck SCOPE )=> LITERAL_template simple_template_id_nocheck
            	            {
            	            match(input,LITERAL_template,FOLLOW_LITERAL_template_in_nested_simple_template_id_or_IDENT9649); if (state.failed) return ;

            	            pushFollow(FOLLOW_simple_template_id_nocheck_in_nested_simple_template_id_or_IDENT9651);
            	            simple_template_id_nocheck();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:650:17: simple_template_id_or_IDENT_nested[startToken]
            	            {
            	            pushFollow(FOLLOW_simple_template_id_or_IDENT_nested_in_nested_simple_template_id_or_IDENT9686);
            	            simple_template_id_or_IDENT_nested(startToken);

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("nested_simple_template_id_or_IDENT", 27);
        }
        return ;
    }
    // $ANTLR end "nested_simple_template_id_or_IDENT"



    // $ANTLR start "unqualified_id"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:656:1: unqualified_id : ( ( LITERAL_OPERATOR operator_id )=> operator_function_id | conversion_function_id | literal_operator_id | tilde_class_name | TILDE decltype_specifier | simple_template_id_or_IDENT );
    public final void unqualified_id() throws RecognitionException {
        traceIn("unqualified_id", 28);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:656:15: ( ( LITERAL_OPERATOR operator_id )=> operator_function_id | conversion_function_id | literal_operator_id | tilde_class_name | TILDE decltype_specifier | simple_template_id_or_IDENT )
            int alt36=6;
            switch ( input.LA(1) ) {
            case LITERAL_OPERATOR:
                {
                int LA36_1 = input.LA(2);

                if ( (LA36_1==STRING_LITERAL) ) {
                    alt36=3;
                }
                else if ( (LA36_1==LITERAL_new) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==LITERAL_delete) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==PLUS) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==MINUS) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==STAR) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==DIVIDE) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==MOD) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==BITWISEXOR) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==AMPERSAND) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==BITWISEOR) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==TILDE) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==NOT) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==ASSIGNEQUAL) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==LESSTHAN) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==GREATERTHAN) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==PLUSEQUAL) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==MINUSEQUAL) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==TIMESEQUAL) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==DIVIDEEQUAL) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==MODEQUAL) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==BITWISEXOREQUAL) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==BITWISEANDEQUAL) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==BITWISEOREQUAL) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==SHIFTLEFT) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==SHIFTRIGHT) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==SHIFTRIGHTEQUAL) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==SHIFTLEFTEQUAL) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==EQUAL) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==NOTEQUAL) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==LESSTHANOREQUALTO) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==GREATERTHANOREQUALTO) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==AND) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==OR) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==PLUSPLUS) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==MINUSMINUS) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==COMMA) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==POINTERTOMBR) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==POINTERTO) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==LPAREN) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==LSQUARE) && (synpred11_CXXParser())) {
                    alt36=1;
                }
                else if ( (LA36_1==SCOPE||LA36_1==IDENT||(LA36_1 >= LITERAL_typeof && LA36_1 <= LITERAL___typeof)||LA36_1==LITERAL_enum||(LA36_1 >= LITERAL_typename && LA36_1 <= LITERAL_auto)||(LA36_1 >= LITERAL_const && LA36_1 <= LITERAL___const)||LA36_1==LITERAL_volatile||(LA36_1 >= LITERAL_char && LA36_1 <= LITERAL_signed)||LA36_1==LITERAL_unsigned||(LA36_1 >= LITERAL_float && LA36_1 <= LITERAL_void)||(LA36_1 >= LITERAL_class && LA36_1 <= LITERAL_union)||LA36_1==LITERAL_decltype||(LA36_1 >= LITERAL_char16_t && LA36_1 <= LITERAL_char32_t)||LA36_1==LITERAL___decltype||LA36_1==LITERAL___builtin_va_list) ) {
                    alt36=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 1, input);

                    throw nvae;

                }
                }
                break;
            case TILDE:
                {
                int LA36_2 = input.LA(2);

                if ( (LA36_2==IDENT) ) {
                    alt36=4;
                }
                else if ( ((LA36_2 >= LITERAL_typeof && LA36_2 <= LITERAL___typeof)||LA36_2==LITERAL_decltype||LA36_2==LITERAL___decltype) ) {
                    alt36=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 2, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                alt36=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }

            switch (alt36) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:657:9: ( LITERAL_OPERATOR operator_id )=> operator_function_id
                    {
                    pushFollow(FOLLOW_operator_function_id_in_unqualified_id9760);
                    operator_function_id();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:660:9: conversion_function_id
                    {
                    pushFollow(FOLLOW_conversion_function_id_in_unqualified_id9776);
                    conversion_function_id();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:662:9: literal_operator_id
                    {
                    pushFollow(FOLLOW_literal_operator_id_in_unqualified_id9792);
                    literal_operator_id();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:664:9: tilde_class_name
                    {
                    pushFollow(FOLLOW_tilde_class_name_in_unqualified_id9808);
                    tilde_class_name();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:666:9: TILDE decltype_specifier
                    {
                    match(input,TILDE,FOLLOW_TILDE_in_unqualified_id9824); if (state.failed) return ;

                    pushFollow(FOLLOW_decltype_specifier_in_unqualified_id9826);
                    decltype_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:668:9: simple_template_id_or_IDENT
                    {
                    pushFollow(FOLLOW_simple_template_id_or_IDENT_in_unqualified_id9842);
                    simple_template_id_or_IDENT();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("unqualified_id", 28);
        }
        return ;
    }
    // $ANTLR end "unqualified_id"



    // $ANTLR start "qualified_id"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:671:1: qualified_id : ( nested_name_specifier ( LITERAL_template )? unqualified_id | SCOPE ( ( simple_template_id_or_IDENT SCOPE )=> nested_name_specifier ( LITERAL_template )? unqualified_id | ( LITERAL_OPERATOR STRING_LITERAL IDENT )=> literal_operator_id | operator_function_id | simple_template_id_or_IDENT ) );
    public final void qualified_id() throws RecognitionException {
        traceIn("qualified_id", 29);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:671:13: ( nested_name_specifier ( LITERAL_template )? unqualified_id | SCOPE ( ( simple_template_id_or_IDENT SCOPE )=> nested_name_specifier ( LITERAL_template )? unqualified_id | ( LITERAL_OPERATOR STRING_LITERAL IDENT )=> literal_operator_id | operator_function_id | simple_template_id_or_IDENT ) )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==IDENT) ) {
                alt40=1;
            }
            else if ( (LA40_0==SCOPE) ) {
                alt40=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:672:9: nested_name_specifier ( LITERAL_template )? unqualified_id
                    {
                    pushFollow(FOLLOW_nested_name_specifier_in_qualified_id9862);
                    nested_name_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:672:31: ( LITERAL_template )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==LITERAL_template) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:672:31: LITERAL_template
                            {
                            match(input,LITERAL_template,FOLLOW_LITERAL_template_in_qualified_id9864); if (state.failed) return ;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_unqualified_id_in_qualified_id9867);
                    unqualified_id();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:674:9: SCOPE ( ( simple_template_id_or_IDENT SCOPE )=> nested_name_specifier ( LITERAL_template )? unqualified_id | ( LITERAL_OPERATOR STRING_LITERAL IDENT )=> literal_operator_id | operator_function_id | simple_template_id_or_IDENT )
                    {
                    match(input,SCOPE,FOLLOW_SCOPE_in_qualified_id9883); if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:674:15: ( ( simple_template_id_or_IDENT SCOPE )=> nested_name_specifier ( LITERAL_template )? unqualified_id | ( LITERAL_OPERATOR STRING_LITERAL IDENT )=> literal_operator_id | operator_function_id | simple_template_id_or_IDENT )
                    int alt39=4;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==IDENT) ) {
                        int LA39_1 = input.LA(2);

                        if ( (synpred12_CXXParser()) ) {
                            alt39=1;
                        }
                        else if ( (true) ) {
                            alt39=4;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 39, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA39_0==LITERAL_OPERATOR) ) {
                        int LA39_2 = input.LA(2);

                        if ( (synpred13_CXXParser()) ) {
                            alt39=2;
                        }
                        else if ( (true) ) {
                            alt39=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 39, 2, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 39, 0, input);

                        throw nvae;

                    }
                    switch (alt39) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:676:13: ( simple_template_id_or_IDENT SCOPE )=> nested_name_specifier ( LITERAL_template )? unqualified_id
                            {
                            pushFollow(FOLLOW_nested_name_specifier_in_qualified_id9932);
                            nested_name_specifier();

                            state._fsp--;
                            if (state.failed) return ;

                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:677:35: ( LITERAL_template )?
                            int alt38=2;
                            int LA38_0 = input.LA(1);

                            if ( (LA38_0==LITERAL_template) ) {
                                alt38=1;
                            }
                            switch (alt38) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:677:35: LITERAL_template
                                    {
                                    match(input,LITERAL_template,FOLLOW_LITERAL_template_in_qualified_id9934); if (state.failed) return ;

                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_unqualified_id_in_qualified_id9937);
                            unqualified_id();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:680:13: ( LITERAL_OPERATOR STRING_LITERAL IDENT )=> literal_operator_id
                            {
                            pushFollow(FOLLOW_literal_operator_id_in_qualified_id9996);
                            literal_operator_id();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 3 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:683:13: operator_function_id
                            {
                            pushFollow(FOLLOW_operator_function_id_in_qualified_id10020);
                            operator_function_id();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 4 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:685:13: simple_template_id_or_IDENT
                            {
                            pushFollow(FOLLOW_simple_template_id_or_IDENT_in_qualified_id10044);
                            simple_template_id_or_IDENT();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("qualified_id", 29);
        }
        return ;
    }
    // $ANTLR end "qualified_id"



    // $ANTLR start "nested_name_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:705:1: nested_name_specifier returns [ name_specifier_t namequal ] : simple_template_id_or_IDENT SCOPE ( ( LITERAL_template lookup_simple_template_id_nocheck SCOPE )=> LITERAL_template simple_template_id_nocheck SCOPE | ( IDENT SCOPE )=> IDENT SCOPE | ( lookup_simple_template_id SCOPE )=> simple_template_id SCOPE )* ;
    public final name_specifier_t nested_name_specifier() throws RecognitionException {
        traceIn("nested_name_specifier", 30);
        name_specifier_t namequal = null;


        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:706:5: ( simple_template_id_or_IDENT SCOPE ( ( LITERAL_template lookup_simple_template_id_nocheck SCOPE )=> LITERAL_template simple_template_id_nocheck SCOPE | ( IDENT SCOPE )=> IDENT SCOPE | ( lookup_simple_template_id SCOPE )=> simple_template_id SCOPE )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:707:9: simple_template_id_or_IDENT SCOPE ( ( LITERAL_template lookup_simple_template_id_nocheck SCOPE )=> LITERAL_template simple_template_id_nocheck SCOPE | ( IDENT SCOPE )=> IDENT SCOPE | ( lookup_simple_template_id SCOPE )=> simple_template_id SCOPE )*
            {
            pushFollow(FOLLOW_simple_template_id_or_IDENT_in_nested_name_specifier10086);
            simple_template_id_or_IDENT();

            state._fsp--;
            if (state.failed) return namequal;

            match(input,SCOPE,FOLLOW_SCOPE_in_nested_name_specifier10096); if (state.failed) return namequal;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:709:9: ( ( LITERAL_template lookup_simple_template_id_nocheck SCOPE )=> LITERAL_template simple_template_id_nocheck SCOPE | ( IDENT SCOPE )=> IDENT SCOPE | ( lookup_simple_template_id SCOPE )=> simple_template_id SCOPE )*
            loop41:
            do {
                int alt41=4;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==LITERAL_template) ) {
                    int LA41_1 = input.LA(2);

                    if ( (synpred14_CXXParser()) ) {
                        alt41=1;
                    }


                }
                else if ( (LA41_0==IDENT) ) {
                    int LA41_4 = input.LA(2);

                    if ( (synpred15_CXXParser()) ) {
                        alt41=2;
                    }
                    else if ( (synpred16_CXXParser()) ) {
                        alt41=3;
                    }


                }


                switch (alt41) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:710:13: ( LITERAL_template lookup_simple_template_id_nocheck SCOPE )=> LITERAL_template simple_template_id_nocheck SCOPE
            	    {
            	    match(input,LITERAL_template,FOLLOW_LITERAL_template_in_nested_name_specifier10148); if (state.failed) return namequal;

            	    pushFollow(FOLLOW_simple_template_id_nocheck_in_nested_name_specifier10150);
            	    simple_template_id_nocheck();

            	    state._fsp--;
            	    if (state.failed) return namequal;

            	    match(input,SCOPE,FOLLOW_SCOPE_in_nested_name_specifier10152); if (state.failed) return namequal;

            	    }
            	    break;
            	case 2 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:713:13: ( IDENT SCOPE )=> IDENT SCOPE
            	    {
            	    match(input,IDENT,FOLLOW_IDENT_in_nested_name_specifier10200); if (state.failed) return namequal;

            	    if ( state.backtracking==0 ) {action.nested_name_specifier(input.LT(0));}

            	    match(input,SCOPE,FOLLOW_SCOPE_in_nested_name_specifier10278); if (state.failed) return namequal;

            	    }
            	    break;
            	case 3 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:717:13: ( lookup_simple_template_id SCOPE )=> simple_template_id SCOPE
            	    {
            	    pushFollow(FOLLOW_simple_template_id_in_nested_name_specifier10330);
            	    simple_template_id();

            	    state._fsp--;
            	    if (state.failed) return namequal;

            	    match(input,SCOPE,FOLLOW_SCOPE_in_nested_name_specifier10332); if (state.failed) return namequal;

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("nested_name_specifier", 30);
        }
        return namequal;
    }
    // $ANTLR end "nested_name_specifier"



    // $ANTLR start "lookup_nested_name_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:722:1: lookup_nested_name_specifier : simple_template_id_or_IDENT SCOPE ;
    public final void lookup_nested_name_specifier() throws RecognitionException {
        traceIn("lookup_nested_name_specifier", 31);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:722:29: ( simple_template_id_or_IDENT SCOPE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:723:9: simple_template_id_or_IDENT SCOPE
            {
            pushFollow(FOLLOW_simple_template_id_or_IDENT_in_lookup_nested_name_specifier10363);
            simple_template_id_or_IDENT();

            state._fsp--;
            if (state.failed) return ;

            match(input,SCOPE,FOLLOW_SCOPE_in_lookup_nested_name_specifier10365); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("lookup_nested_name_specifier", 31);
        }
        return ;
    }
    // $ANTLR end "lookup_nested_name_specifier"



    // $ANTLR start "alias_declaration"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:735:1: alias_declaration : LITERAL_using IDENT ASSIGNEQUAL type_id SEMICOLON ;
    public final void alias_declaration() throws RecognitionException {
        traceIn("alias_declaration", 32);
        Token LITERAL_using5=null;
        Token IDENT6=null;
        Token ASSIGNEQUAL7=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:735:18: ( LITERAL_using IDENT ASSIGNEQUAL type_id SEMICOLON )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:736:5: LITERAL_using IDENT ASSIGNEQUAL type_id SEMICOLON
            {
            LITERAL_using5=(Token)match(input,LITERAL_using,FOLLOW_LITERAL_using_in_alias_declaration10390); if (state.failed) return ;

            IDENT6=(Token)match(input,IDENT,FOLLOW_IDENT_in_alias_declaration10392); if (state.failed) return ;

            ASSIGNEQUAL7=(Token)match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_alias_declaration10394); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.alias_declaration(LITERAL_using5, IDENT6, ASSIGNEQUAL7);}

            pushFollow(FOLLOW_type_id_in_alias_declaration10446);
            type_id();

            state._fsp--;
            if (state.failed) return ;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_alias_declaration10453); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.end_alias_declaration(input.LT(0));}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("alias_declaration", 32);
        }
        return ;
    }
    // $ANTLR end "alias_declaration"



    // $ANTLR start "simple_declaration"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:752:1: simple_declaration[decl_kind kind] : ( decl_specifier )* ( SEMICOLON | ( ( constructor_declarator )=> constructor_declarator | init_declarator ) ( COMMA init_declarator )* SEMICOLON ) ;
    public final void simple_declaration(decl_kind kind) throws RecognitionException {
        traceIn("simple_declaration", 33);
        Declaration_stack.push(new Declaration_scope());

        if(state.backtracking == 0){action.simple_declaration(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:755:5: ( ( decl_specifier )* ( SEMICOLON | ( ( constructor_declarator )=> constructor_declarator | init_declarator ) ( COMMA init_declarator )* SEMICOLON ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:756:81: ( decl_specifier )* ( SEMICOLON | ( ( constructor_declarator )=> constructor_declarator | init_declarator ) ( COMMA init_declarator )* SEMICOLON )
            {
            if ( state.backtracking==0 ) {action.decl_specifiers(input.LT(1));}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:757:9: ( decl_specifier )*
            loop42:
            do {
                int alt42=2;
                switch ( input.LA(1) ) {
                case SCOPE:
                    {
                    int LA42_6 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt42=1;
                    }


                    }
                    break;
                case IDENT:
                    {
                    int LA42_7 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt42=1;
                    }


                    }
                    break;
                case LITERAL_typeof:
                case LITERAL___typeof__:
                case LITERAL___typeof:
                case LITERAL_typedef:
                case LITERAL_enum:
                case LITERAL_extern:
                case LITERAL_inline:
                case LITERAL___inline:
                case LITERAL_virtual:
                case LITERAL_explicit:
                case LITERAL_friend:
                case LITERAL_typename:
                case LITERAL_auto:
                case LITERAL_register:
                case LITERAL_static:
                case LITERAL_mutable:
                case LITERAL_const:
                case LITERAL___const__:
                case LITERAL___const:
                case LITERAL_volatile:
                case LITERAL_char:
                case LITERAL_wchar_t:
                case LITERAL_bool:
                case LITERAL_short:
                case LITERAL_int:
                case LITERAL_long:
                case LITERAL_signed:
                case LITERAL_unsigned:
                case LITERAL_float:
                case LITERAL_double:
                case LITERAL_void:
                case LITERAL_class:
                case LITERAL_struct:
                case LITERAL_union:
                case LITERAL___global:
                case LITERAL___thread:
                case LITERAL___symbolic:
                case LITERAL___hidden:
                case LITERAL_constexpr:
                case LITERAL_decltype:
                case LITERAL_thread_local:
                case LITERAL_char16_t:
                case LITERAL_char32_t:
                case LITERAL___decltype:
                case LITERAL___builtin_va_list:
                    {
                    alt42=1;
                    }
                    break;

                }

                switch (alt42) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:757:9: decl_specifier
            	    {
            	    pushFollow(FOLLOW_decl_specifier_in_simple_declaration10716);
            	    decl_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            if ( state.backtracking==0 ) {action.end_decl_specifiers(null/*input.LT(0)*/);}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:758:9: ( SEMICOLON | ( ( constructor_declarator )=> constructor_declarator | init_declarator ) ( COMMA init_declarator )* SEMICOLON )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==SEMICOLON) ) {
                alt45=1;
            }
            else if ( (LA45_0==ELLIPSIS||LA45_0==LPAREN||LA45_0==STAR||LA45_0==AND||LA45_0==AMPERSAND||LA45_0==TILDE||LA45_0==SCOPE||LA45_0==IDENT||LA45_0==LITERAL_OPERATOR) ) {
                alt45=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }
            switch (alt45) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:759:13: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_declaration10799); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:761:13: ( ( constructor_declarator )=> constructor_declarator | init_declarator ) ( COMMA init_declarator )* SEMICOLON
                    {
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:761:13: ( ( constructor_declarator )=> constructor_declarator | init_declarator )
                    int alt43=2;
                    int LA43_0 = input.LA(1);

                    if ( (LA43_0==LPAREN) ) {
                        int LA43_1 = input.LA(2);

                        if ( (synpred17_CXXParser()) ) {
                            alt43=1;
                        }
                        else if ( (true) ) {
                            alt43=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 43, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA43_0==ELLIPSIS||LA43_0==STAR||LA43_0==AND||LA43_0==AMPERSAND||LA43_0==TILDE||LA43_0==SCOPE||LA43_0==IDENT||LA43_0==LITERAL_OPERATOR) ) {
                        alt43=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 43, 0, input);

                        throw nvae;

                    }
                    switch (alt43) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:762:17: ( constructor_declarator )=> constructor_declarator
                            {
                            pushFollow(FOLLOW_constructor_declarator_in_simple_declaration10846);
                            constructor_declarator();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:764:17: init_declarator
                            {
                            pushFollow(FOLLOW_init_declarator_in_simple_declaration10878);
                            init_declarator();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:767:13: ( COMMA init_declarator )*
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==COMMA) ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:768:17: COMMA init_declarator
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_simple_declaration10937); if (state.failed) return ;

                    	    if ( state.backtracking==0 ) {action.simple_declaration(action.SIMPLE_DECLARATION__COMMA2, input.LT(0));}

                    	    pushFollow(FOLLOW_init_declarator_in_simple_declaration11015);
                    	    init_declarator();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop44;
                        }
                    } while (true);


                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_declaration11045); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.simple_declaration(action.SIMPLE_DECLARATION__SEMICOLON, input.LT(0));}

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("simple_declaration", 33);
            Declaration_stack.pop();

            if(state.backtracking == 0){action.end_simple_declaration(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "simple_declaration"



    // $ANTLR start "simple_declaration_or_function_definition"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:791:1: simple_declaration_or_function_definition[decl_kind kind] : ( gnu_attribute_or_extension_specifiers )? ( decl_specifier ( gnu_attribute_specifiers )? )* ( SEMICOLON | ( constructor_declarator )=> constructor_declarator ( ( COMMA init_declarator )* SEMICOLON | function_definition_after_declarator[false, false, false] ) | greedy_declarator ( asm_statement )? ({...}? function_definition_after_declarator[false, false, false] | ( initializer )? ( COMMA init_declarator )* SEMICOLON ) ) ;
    public final void simple_declaration_or_function_definition(decl_kind kind) throws RecognitionException {
        traceIn("simple_declaration_or_function_definition", 34);
        Declaration_stack.push(new Declaration_scope());

        declarator_type_t greedy_declarator8 =null;


        if(state.backtracking == 0){action.simple_declaration(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:794:5: ( ( gnu_attribute_or_extension_specifiers )? ( decl_specifier ( gnu_attribute_specifiers )? )* ( SEMICOLON | ( constructor_declarator )=> constructor_declarator ( ( COMMA init_declarator )* SEMICOLON | function_definition_after_declarator[false, false, false] ) | greedy_declarator ( asm_statement )? ({...}? function_definition_after_declarator[false, false, false] | ( initializer )? ( COMMA init_declarator )* SEMICOLON ) ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:795:9: ( gnu_attribute_or_extension_specifiers )? ( decl_specifier ( gnu_attribute_specifiers )? )* ( SEMICOLON | ( constructor_declarator )=> constructor_declarator ( ( COMMA init_declarator )* SEMICOLON | function_definition_after_declarator[false, false, false] ) | greedy_declarator ( asm_statement )? ({...}? function_definition_after_declarator[false, false, false] | ( initializer )? ( COMMA init_declarator )* SEMICOLON ) )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:795:9: ( gnu_attribute_or_extension_specifiers )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( ((LA46_0 >= LITERAL___extension__ && LA46_0 <= LITERAL___attribute__)) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:795:9: gnu_attribute_or_extension_specifiers
                    {
                    pushFollow(FOLLOW_gnu_attribute_or_extension_specifiers_in_simple_declaration_or_function_definition11313);
                    gnu_attribute_or_extension_specifiers();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {action.decl_specifiers(input.LT(1));}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:797:9: ( decl_specifier ( gnu_attribute_specifiers )? )*
            loop48:
            do {
                int alt48=2;
                switch ( input.LA(1) ) {
                case SCOPE:
                    {
                    int LA48_6 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt48=1;
                    }


                    }
                    break;
                case IDENT:
                    {
                    int LA48_7 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt48=1;
                    }


                    }
                    break;
                case LITERAL_typeof:
                case LITERAL___typeof__:
                case LITERAL___typeof:
                case LITERAL_typedef:
                case LITERAL_enum:
                case LITERAL_extern:
                case LITERAL_inline:
                case LITERAL___inline:
                case LITERAL_virtual:
                case LITERAL_explicit:
                case LITERAL_friend:
                case LITERAL_typename:
                case LITERAL_auto:
                case LITERAL_register:
                case LITERAL_static:
                case LITERAL_mutable:
                case LITERAL_const:
                case LITERAL___const__:
                case LITERAL___const:
                case LITERAL_volatile:
                case LITERAL_char:
                case LITERAL_wchar_t:
                case LITERAL_bool:
                case LITERAL_short:
                case LITERAL_int:
                case LITERAL_long:
                case LITERAL_signed:
                case LITERAL_unsigned:
                case LITERAL_float:
                case LITERAL_double:
                case LITERAL_void:
                case LITERAL_class:
                case LITERAL_struct:
                case LITERAL_union:
                case LITERAL___global:
                case LITERAL___thread:
                case LITERAL___symbolic:
                case LITERAL___hidden:
                case LITERAL_constexpr:
                case LITERAL_decltype:
                case LITERAL_thread_local:
                case LITERAL_char16_t:
                case LITERAL_char32_t:
                case LITERAL___decltype:
                case LITERAL___builtin_va_list:
                    {
                    alt48=1;
                    }
                    break;

                }

                switch (alt48) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:797:10: decl_specifier ( gnu_attribute_specifiers )?
            	    {
            	    pushFollow(FOLLOW_decl_specifier_in_simple_declaration_or_function_definition11407);
            	    decl_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:797:25: ( gnu_attribute_specifiers )?
            	    int alt47=2;
            	    int LA47_0 = input.LA(1);

            	    if ( (LA47_0==LITERAL___attribute__) ) {
            	        alt47=1;
            	    }
            	    switch (alt47) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:797:25: gnu_attribute_specifiers
            	            {
            	            pushFollow(FOLLOW_gnu_attribute_specifiers_in_simple_declaration_or_function_definition11409);
            	            gnu_attribute_specifiers();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            if ( state.backtracking==0 ) {action.end_decl_specifiers(null/*input.LT(0)*/);}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:799:9: ( SEMICOLON | ( constructor_declarator )=> constructor_declarator ( ( COMMA init_declarator )* SEMICOLON | function_definition_after_declarator[false, false, false] ) | greedy_declarator ( asm_statement )? ({...}? function_definition_after_declarator[false, false, false] | ( initializer )? ( COMMA init_declarator )* SEMICOLON ) )
            int alt55=3;
            switch ( input.LA(1) ) {
            case SEMICOLON:
                {
                alt55=1;
                }
                break;
            case LPAREN:
                {
                int LA55_2 = input.LA(2);

                if ( (synpred18_CXXParser()) ) {
                    alt55=2;
                }
                else if ( (true) ) {
                    alt55=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 55, 2, input);

                    throw nvae;

                }
                }
                break;
            case ELLIPSIS:
            case STAR:
            case AND:
            case AMPERSAND:
            case TILDE:
            case SCOPE:
            case IDENT:
            case LITERAL_OPERATOR:
                {
                alt55=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;

            }

            switch (alt55) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:800:13: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_declaration_or_function_definition11547); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.simple_declaration(action.SIMPLE_DECLARATION__SEMICOLON, input.LT(0));}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:802:13: ( constructor_declarator )=> constructor_declarator ( ( COMMA init_declarator )* SEMICOLON | function_definition_after_declarator[false, false, false] )
                    {
                    pushFollow(FOLLOW_constructor_declarator_in_simple_declaration_or_function_definition11652);
                    constructor_declarator();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:804:17: ( ( COMMA init_declarator )* SEMICOLON | function_definition_after_declarator[false, false, false] )
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==COMMA||LA50_0==SEMICOLON) ) {
                        alt50=1;
                    }
                    else if ( ((LA50_0 >= ASSIGNEQUAL && LA50_0 <= COLON)||LA50_0==LCURLY||LA50_0==LITERAL_try) ) {
                        alt50=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 50, 0, input);

                        throw nvae;

                    }
                    switch (alt50) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:806:21: ( COMMA init_declarator )* SEMICOLON
                            {
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:806:21: ( COMMA init_declarator )*
                            loop49:
                            do {
                                int alt49=2;
                                int LA49_0 = input.LA(1);

                                if ( (LA49_0==COMMA) ) {
                                    alt49=1;
                                }


                                switch (alt49) {
                            	case 1 :
                            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:807:25: COMMA init_declarator
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_simple_declaration_or_function_definition11740); if (state.failed) return ;

                            	    if ( state.backtracking==0 ) {action.simple_declaration(action.SIMPLE_DECLARATION__COMMA2, input.LT(0));}

                            	    pushFollow(FOLLOW_init_declarator_in_simple_declaration_or_function_definition11818);
                            	    init_declarator();

                            	    state._fsp--;
                            	    if (state.failed) return ;

                            	    }
                            	    break;

                            	default :
                            	    break loop49;
                                }
                            } while (true);


                            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_declaration_or_function_definition11865); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.simple_declaration(action.SIMPLE_DECLARATION__SEMICOLON, input.LT(0));}

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:812:21: function_definition_after_declarator[false, false, false]
                            {
                            pushFollow(FOLLOW_function_definition_after_declarator_in_simple_declaration_or_function_definition11957);
                            function_definition_after_declarator(false, false, false);

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:816:13: greedy_declarator ( asm_statement )? ({...}? function_definition_after_declarator[false, false, false] | ( initializer )? ( COMMA init_declarator )* SEMICOLON )
                    {
                    pushFollow(FOLLOW_greedy_declarator_in_simple_declaration_or_function_definition12013);
                    greedy_declarator8=greedy_declarator();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:816:31: ( asm_statement )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( ((LA51_0 >= LITERAL_asm && LA51_0 <= LITERAL___asm)) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:816:31: asm_statement
                            {
                            pushFollow(FOLLOW_asm_statement_in_simple_declaration_or_function_definition12015);
                            asm_statement();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:817:13: ({...}? function_definition_after_declarator[false, false, false] | ( initializer )? ( COMMA init_declarator )* SEMICOLON )
                    int alt54=2;
                    switch ( input.LA(1) ) {
                    case ASSIGNEQUAL:
                        {
                        int LA54_1 = input.LA(2);

                        if ( (( /*greedy_declarator8.is_function()*/ input.LA(1) != ASSIGNEQUAL )) ) {
                            alt54=1;
                        }
                        else if ( (true) ) {
                            alt54=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 54, 1, input);

                            throw nvae;

                        }
                        }
                        break;
                    case COLON:
                    case LITERAL_try:
                        {
                        alt54=1;
                        }
                        break;
                    case LCURLY:
                        {
                        int LA54_3 = input.LA(2);

                        if ( (( /*greedy_declarator8.is_function()*/ input.LA(1) != ASSIGNEQUAL )) ) {
                            alt54=1;
                        }
                        else if ( (true) ) {
                            alt54=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 54, 3, input);

                            throw nvae;

                        }
                        }
                        break;
                    case COMMA:
                    case SEMICOLON:
                    case LPAREN:
                        {
                        alt54=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 54, 0, input);

                        throw nvae;

                    }

                    switch (alt54) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:818:17: {...}? function_definition_after_declarator[false, false, false]
                            {
                            if ( !(( /*greedy_declarator8.is_function()*/ input.LA(1) != ASSIGNEQUAL )) ) {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                throw new FailedPredicateException(input, "simple_declaration_or_function_definition", " /*$greedy_declarator.type.is_function()*/ input.LA(1) != ASSIGNEQUAL ");
                            }

                            pushFollow(FOLLOW_function_definition_after_declarator_in_simple_declaration_or_function_definition12070);
                            function_definition_after_declarator(false, false, false);

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:823:17: ( initializer )? ( COMMA init_declarator )* SEMICOLON
                            {
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:823:17: ( initializer )?
                            int alt52=2;
                            int LA52_0 = input.LA(1);

                            if ( (LA52_0==ASSIGNEQUAL||LA52_0==LPAREN||LA52_0==LCURLY) ) {
                                alt52=1;
                            }
                            switch (alt52) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:823:17: initializer
                                    {
                                    pushFollow(FOLLOW_initializer_in_simple_declaration_or_function_definition12137);
                                    initializer();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }


                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:824:17: ( COMMA init_declarator )*
                            loop53:
                            do {
                                int alt53=2;
                                int LA53_0 = input.LA(1);

                                if ( (LA53_0==COMMA) ) {
                                    alt53=1;
                                }


                                switch (alt53) {
                            	case 1 :
                            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:825:21: COMMA init_declarator
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_simple_declaration_or_function_definition12180); if (state.failed) return ;

                            	    if ( state.backtracking==0 ) {action.simple_declaration(action.SIMPLE_DECLARATION__COMMA2, input.LT(0));}

                            	    pushFollow(FOLLOW_init_declarator_in_simple_declaration_or_function_definition12258);
                            	    init_declarator();

                            	    state._fsp--;
                            	    if (state.failed) return ;

                            	    }
                            	    break;

                            	default :
                            	    break loop53;
                                }
                            } while (true);


                            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_declaration_or_function_definition12297); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.simple_declaration(action.SIMPLE_DECLARATION__SEMICOLON, input.LT(0));}

                            }
                            break;

                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("simple_declaration_or_function_definition", 34);
            Declaration_stack.pop();

            if(state.backtracking == 0){action.end_simple_declaration(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "simple_declaration_or_function_definition"



    // $ANTLR start "static_assert_declaration"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:834:1: static_assert_declaration : LITERAL_static_assert LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON ;
    public final void static_assert_declaration() throws RecognitionException {
        traceIn("static_assert_declaration", 35);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:834:26: ( LITERAL_static_assert LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:835:5: LITERAL_static_assert LPAREN constant_expression COMMA STRING_LITERAL RPAREN SEMICOLON
            {
            match(input,LITERAL_static_assert,FOLLOW_LITERAL_static_assert_in_static_assert_declaration12473); if (state.failed) return ;

            match(input,LPAREN,FOLLOW_LPAREN_in_static_assert_declaration12475); if (state.failed) return ;

            pushFollow(FOLLOW_constant_expression_in_static_assert_declaration12477);
            constant_expression();

            state._fsp--;
            if (state.failed) return ;

            match(input,COMMA,FOLLOW_COMMA_in_static_assert_declaration12479); if (state.failed) return ;

            match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_static_assert_declaration12481); if (state.failed) return ;

            match(input,RPAREN,FOLLOW_RPAREN_in_static_assert_declaration12483); if (state.failed) return ;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_static_assert_declaration12485); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("static_assert_declaration", 35);
        }
        return ;
    }
    // $ANTLR end "static_assert_declaration"



    // $ANTLR start "attribute_declaration"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:838:1: attribute_declaration : cpp11_attribute_specifiers SEMICOLON ;
    public final void attribute_declaration() throws RecognitionException {
        traceIn("attribute_declaration", 36);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:838:22: ( cpp11_attribute_specifiers SEMICOLON )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:839:9: cpp11_attribute_specifiers SEMICOLON
            {
            pushFollow(FOLLOW_cpp11_attribute_specifiers_in_attribute_declaration12505);
            cpp11_attribute_specifiers();

            state._fsp--;
            if (state.failed) return ;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_attribute_declaration12507); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("attribute_declaration", 36);
        }
        return ;
    }
    // $ANTLR end "attribute_declaration"



    // $ANTLR start "decl_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:842:1: decl_specifier : ( storage_class_specifier | function_specifier | LITERAL_friend | LITERAL_typedef | type_specifier | LITERAL_constexpr );
    public final void decl_specifier() throws RecognitionException {
        traceIn("decl_specifier", 37);
        Token LITERAL_friend9=null;
        Token LITERAL_typedef10=null;
        Token LITERAL_constexpr11=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:843:5: ( storage_class_specifier | function_specifier | LITERAL_friend | LITERAL_typedef | type_specifier | LITERAL_constexpr )
            int alt56=6;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==LITERAL_extern||(LA56_0 >= LITERAL_register && LA56_0 <= LITERAL_mutable)||LA56_0==LITERAL___global||LA56_0==LITERAL___thread||(LA56_0 >= LITERAL___symbolic && LA56_0 <= LITERAL___hidden)||LA56_0==LITERAL_thread_local) ) {
                alt56=1;
            }
            else if ( (LA56_0==LITERAL_inline||(LA56_0 >= LITERAL___inline && LA56_0 <= LITERAL_explicit)) ) {
                alt56=2;
            }
            else if ( (LA56_0==LITERAL_friend) ) {
                alt56=3;
            }
            else if ( (LA56_0==LITERAL_typedef) ) {
                alt56=4;
            }
            else if ( ((LA56_0 >= LITERAL_typeof && LA56_0 <= LITERAL___typeof)||LA56_0==LITERAL_auto||(LA56_0 >= LITERAL_char && LA56_0 <= LITERAL_signed)||LA56_0==LITERAL_unsigned||(LA56_0 >= LITERAL_float && LA56_0 <= LITERAL_void)||LA56_0==LITERAL_decltype||(LA56_0 >= LITERAL_char16_t && LA56_0 <= LITERAL_char32_t)||LA56_0==LITERAL___decltype||LA56_0==LITERAL___builtin_va_list) ) {
                alt56=5;
            }
            else if ( (LA56_0==SCOPE||LA56_0==IDENT) && (( action.type_specifier_already_present(input) ))) {
                alt56=5;
            }
            else if ( (LA56_0==LITERAL_enum||LA56_0==LITERAL_typename||(LA56_0 >= LITERAL_const && LA56_0 <= LITERAL___const)||LA56_0==LITERAL_volatile||(LA56_0 >= LITERAL_class && LA56_0 <= LITERAL_union)) ) {
                alt56=5;
            }
            else if ( (LA56_0==LITERAL_constexpr) ) {
                alt56=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }
            switch (alt56) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:844:9: storage_class_specifier
                    {
                    pushFollow(FOLLOW_storage_class_specifier_in_decl_specifier12532);
                    storage_class_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.decl_specifier(action.DECL_SPECIFIER__STORAGE_CLASS_SPECIFIER, input.LT(0));}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:846:9: function_specifier
                    {
                    pushFollow(FOLLOW_function_specifier_in_decl_specifier12598);
                    function_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.decl_specifier(action.DECL_SPECIFIER__FUNCTION_SPECIFIER, input.LT(0));}

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:848:9: LITERAL_friend
                    {
                    LITERAL_friend9=(Token)match(input,LITERAL_friend,FOLLOW_LITERAL_friend_in_decl_specifier12669); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.decl_specifier(action.DECL_SPECIFIER__LITERAL_FRIEND, LITERAL_friend9);}

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:850:9: LITERAL_typedef
                    {
                    LITERAL_typedef10=(Token)match(input,LITERAL_typedef,FOLLOW_LITERAL_typedef_in_decl_specifier12744); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.decl_specifier(action.DECL_SPECIFIER__LITERAL_TYPEDEF, LITERAL_typedef10);}

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:852:9: type_specifier
                    {
                    pushFollow(FOLLOW_type_specifier_in_decl_specifier12818);
                    type_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.decl_specifier(action.DECL_SPECIFIER__TYPE_SPECIFIER, input.LT(0));}

                    }
                    break;
                case 6 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:854:9: LITERAL_constexpr
                    {
                    LITERAL_constexpr11=(Token)match(input,LITERAL_constexpr,FOLLOW_LITERAL_constexpr_in_decl_specifier12893); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.decl_specifier(action.DECL_SPECIFIER__LITERAL_CONSTEXPR, LITERAL_constexpr11);}

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("decl_specifier", 37);
        }
        return ;
    }
    // $ANTLR end "decl_specifier"



    // $ANTLR start "storage_class_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:857:1: storage_class_specifier : ( LITERAL_register | LITERAL_static | LITERAL_extern | LITERAL_mutable | LITERAL___thread | LITERAL_thread_local | LITERAL___hidden | LITERAL___global | LITERAL___symbolic );
    public final void storage_class_specifier() throws RecognitionException {
        traceIn("storage_class_specifier", 38);
        Token LITERAL_register12=null;
        Token LITERAL_static13=null;
        Token LITERAL_extern14=null;
        Token LITERAL_mutable15=null;
        Token LITERAL___thread16=null;
        Token LITERAL_thread_local17=null;
        Token LITERAL___hidden18=null;
        Token LITERAL___global19=null;
        Token LITERAL___symbolic20=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:857:24: ( LITERAL_register | LITERAL_static | LITERAL_extern | LITERAL_mutable | LITERAL___thread | LITERAL_thread_local | LITERAL___hidden | LITERAL___global | LITERAL___symbolic )
            int alt57=9;
            switch ( input.LA(1) ) {
            case LITERAL_register:
                {
                alt57=1;
                }
                break;
            case LITERAL_static:
                {
                alt57=2;
                }
                break;
            case LITERAL_extern:
                {
                alt57=3;
                }
                break;
            case LITERAL_mutable:
                {
                alt57=4;
                }
                break;
            case LITERAL___thread:
                {
                alt57=5;
                }
                break;
            case LITERAL_thread_local:
                {
                alt57=6;
                }
                break;
            case LITERAL___hidden:
                {
                alt57=7;
                }
                break;
            case LITERAL___global:
                {
                alt57=8;
                }
                break;
            case LITERAL___symbolic:
                {
                alt57=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;

            }

            switch (alt57) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:860:9: LITERAL_register
                    {
                    LITERAL_register12=(Token)match(input,LITERAL_register,FOLLOW_LITERAL_register_in_storage_class_specifier12971); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.decl_specifier(action.STORAGE_CLASS_SPECIFIER__REGISTER, LITERAL_register12);}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:862:9: LITERAL_static
                    {
                    LITERAL_static13=(Token)match(input,LITERAL_static,FOLLOW_LITERAL_static_in_storage_class_specifier13044); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.decl_specifier(action.STORAGE_CLASS_SPECIFIER__STATIC, LITERAL_static13);}

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:864:9: LITERAL_extern
                    {
                    LITERAL_extern14=(Token)match(input,LITERAL_extern,FOLLOW_LITERAL_extern_in_storage_class_specifier13119); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.decl_specifier(action.STORAGE_CLASS_SPECIFIER__EXTERN, LITERAL_extern14);}

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:866:9: LITERAL_mutable
                    {
                    LITERAL_mutable15=(Token)match(input,LITERAL_mutable,FOLLOW_LITERAL_mutable_in_storage_class_specifier13194); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.decl_specifier(action.STORAGE_CLASS_SPECIFIER__MUTABLE, LITERAL_mutable15);}

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:868:9: LITERAL___thread
                    {
                    LITERAL___thread16=(Token)match(input,LITERAL___thread,FOLLOW_LITERAL___thread_in_storage_class_specifier13268); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.decl_specifier(action.STORAGE_CLASS_SPECIFIER____THREAD, LITERAL___thread16);}

                    }
                    break;
                case 6 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:870:9: LITERAL_thread_local
                    {
                    LITERAL_thread_local17=(Token)match(input,LITERAL_thread_local,FOLLOW_LITERAL_thread_local_in_storage_class_specifier13341); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.decl_specifier(action.STORAGE_CLASS_SPECIFIER__THREAD_LOCAL, LITERAL_thread_local17);}

                    }
                    break;
                case 7 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:872:9: LITERAL___hidden
                    {
                    LITERAL___hidden18=(Token)match(input,LITERAL___hidden,FOLLOW_LITERAL___hidden_in_storage_class_specifier13410); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.decl_specifier(action.STORAGE_CLASS_SPECIFIER___HIDDEN, LITERAL___hidden18);}

                    }
                    break;
                case 8 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:874:9: LITERAL___global
                    {
                    LITERAL___global19=(Token)match(input,LITERAL___global,FOLLOW_LITERAL___global_in_storage_class_specifier13483); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.decl_specifier(action.STORAGE_CLASS_SPECIFIER___GLOBAL, LITERAL___global19);}

                    }
                    break;
                case 9 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:876:9: LITERAL___symbolic
                    {
                    LITERAL___symbolic20=(Token)match(input,LITERAL___symbolic,FOLLOW_LITERAL___symbolic_in_storage_class_specifier13556); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.decl_specifier(action.STORAGE_CLASS_SPECIFIER___SYMBOLIC, LITERAL___symbolic20);}

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("storage_class_specifier", 38);
        }
        return ;
    }
    // $ANTLR end "storage_class_specifier"



    // $ANTLR start "function_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:879:1: function_specifier : ( LITERAL_inline | LITERAL_virtual | LITERAL_explicit | LITERAL___inline );
    public final void function_specifier() throws RecognitionException {
        traceIn("function_specifier", 39);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:879:19: ( LITERAL_inline | LITERAL_virtual | LITERAL_explicit | LITERAL___inline )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( input.LA(1)==LITERAL_inline||(input.LA(1) >= LITERAL___inline && input.LA(1) <= LITERAL_explicit) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("function_specifier", 39);
        }
        return ;
    }
    // $ANTLR end "function_specifier"



    // $ANTLR start "type_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:911:1: type_specifier returns [type_specifier_t ts] : ( ( LITERAL_class SCOPE )=> trailing_type_specifier | ( class_head LCURLY )=> class_specifier | ( LITERAL_enum ( attribute_specifiers )? ( IDENT )? LCURLY )=> enum_specifier | trailing_type_specifier );
    public final type_specifier_t type_specifier() throws RecognitionException {
        traceIn("type_specifier", 40);
        type_specifier_t ts = null;


        if(state.backtracking == 0){action.type_specifier(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:913:5: ( ( LITERAL_class SCOPE )=> trailing_type_specifier | ( class_head LCURLY )=> class_specifier | ( LITERAL_enum ( attribute_specifiers )? ( IDENT )? LCURLY )=> enum_specifier | trailing_type_specifier )
            int alt58=4;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==LITERAL_char) ) {
                int LA58_1 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_wchar_t) ) {
                int LA58_2 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_char16_t) ) {
                int LA58_3 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_char32_t) ) {
                int LA58_4 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_bool) ) {
                int LA58_5 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_short) ) {
                int LA58_6 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_int) ) {
                int LA58_7 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_long) ) {
                int LA58_8 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_signed) ) {
                int LA58_9 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_unsigned) ) {
                int LA58_10 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_float) ) {
                int LA58_11 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_double) ) {
                int LA58_12 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_void) ) {
                int LA58_13 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_auto) ) {
                int LA58_14 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL___builtin_va_list) ) {
                int LA58_15 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_decltype||LA58_0==LITERAL___decltype) ) {
                int LA58_16 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 16, input);

                    throw nvae;

                }
            }
            else if ( ((LA58_0 >= LITERAL_typeof && LA58_0 <= LITERAL___typeof)) ) {
                int LA58_17 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 17, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==SCOPE) && (( action.type_specifier_already_present(input) ))) {
                int LA58_18 = input.LA(2);

                if ( (((( action.type_specifier_already_present(input) )&&( action.type_specifier_already_present(input) ))&&synpred19_CXXParser())) ) {
                    alt58=1;
                }
                else if ( (( action.type_specifier_already_present(input) )) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 18, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==IDENT) && (( action.type_specifier_already_present(input) ))) {
                int LA58_19 = input.LA(2);

                if ( (((( action.type_specifier_already_present(input) )&&( action.type_specifier_already_present(input) ))&&synpred19_CXXParser())) ) {
                    alt58=1;
                }
                else if ( (( action.type_specifier_already_present(input) )) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 19, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_class) ) {
                int LA58_20 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (synpred20_CXXParser()) ) {
                    alt58=2;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 20, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_struct) ) {
                int LA58_21 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (synpred20_CXXParser()) ) {
                    alt58=2;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 21, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_union) ) {
                int LA58_22 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (synpred20_CXXParser()) ) {
                    alt58=2;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 22, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_enum) ) {
                int LA58_23 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (synpred21_CXXParser()) ) {
                    alt58=3;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 23, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_typename) ) {
                int LA58_24 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 24, input);

                    throw nvae;

                }
            }
            else if ( ((LA58_0 >= LITERAL_const && LA58_0 <= LITERAL___const)) ) {
                int LA58_25 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 25, input);

                    throw nvae;

                }
            }
            else if ( (LA58_0==LITERAL_volatile) ) {
                int LA58_26 = input.LA(2);

                if ( (synpred19_CXXParser()) ) {
                    alt58=1;
                }
                else if ( (true) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ts;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 26, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ts;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }
            switch (alt58) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:915:9: ( LITERAL_class SCOPE )=> trailing_type_specifier
                    {
                    pushFollow(FOLLOW_trailing_type_specifier_in_type_specifier13824);
                    trailing_type_specifier();

                    state._fsp--;
                    if (state.failed) return ts;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:919:9: ( class_head LCURLY )=> class_specifier
                    {
                    pushFollow(FOLLOW_class_specifier_in_type_specifier13868);
                    class_specifier();

                    state._fsp--;
                    if (state.failed) return ts;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:923:9: ( LITERAL_enum ( attribute_specifiers )? ( IDENT )? LCURLY )=> enum_specifier
                    {
                    pushFollow(FOLLOW_enum_specifier_in_type_specifier13918);
                    enum_specifier();

                    state._fsp--;
                    if (state.failed) return ts;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:926:9: trailing_type_specifier
                    {
                    pushFollow(FOLLOW_trailing_type_specifier_in_type_specifier13934);
                    trailing_type_specifier();

                    state._fsp--;
                    if (state.failed) return ts;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("type_specifier", 40);
            if(state.backtracking == 0){action.end_type_specifier(input.LT(0));}
        }
        return ts;
    }
    // $ANTLR end "type_specifier"



    // $ANTLR start "trailing_type_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:930:1: trailing_type_specifier : ( simple_type_specifier | elaborated_type_specifier | typename_specifier | cv_qualifier );
    public final void trailing_type_specifier() throws RecognitionException {
        traceIn("trailing_type_specifier", 41);
        if(state.backtracking == 0){action.trailing_type_specifier(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:932:5: ( simple_type_specifier | elaborated_type_specifier | typename_specifier | cv_qualifier )
            int alt59=4;
            int LA59_0 = input.LA(1);

            if ( ((LA59_0 >= LITERAL_typeof && LA59_0 <= LITERAL___typeof)||LA59_0==LITERAL_auto||(LA59_0 >= LITERAL_char && LA59_0 <= LITERAL_signed)||LA59_0==LITERAL_unsigned||(LA59_0 >= LITERAL_float && LA59_0 <= LITERAL_void)||LA59_0==LITERAL_decltype||(LA59_0 >= LITERAL_char16_t && LA59_0 <= LITERAL_char32_t)||LA59_0==LITERAL___decltype||LA59_0==LITERAL___builtin_va_list) ) {
                alt59=1;
            }
            else if ( (LA59_0==SCOPE||LA59_0==IDENT) && (( action.type_specifier_already_present(input) ))) {
                alt59=1;
            }
            else if ( (LA59_0==LITERAL_enum||(LA59_0 >= LITERAL_class && LA59_0 <= LITERAL_union)) ) {
                alt59=2;
            }
            else if ( (LA59_0==LITERAL_typename) ) {
                alt59=3;
            }
            else if ( ((LA59_0 >= LITERAL_const && LA59_0 <= LITERAL___const)||LA59_0==LITERAL_volatile) ) {
                alt59=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;

            }
            switch (alt59) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:933:9: simple_type_specifier
                    {
                    pushFollow(FOLLOW_simple_type_specifier_in_trailing_type_specifier14117);
                    simple_type_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:935:9: elaborated_type_specifier
                    {
                    pushFollow(FOLLOW_elaborated_type_specifier_in_trailing_type_specifier14133);
                    elaborated_type_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:937:9: typename_specifier
                    {
                    pushFollow(FOLLOW_typename_specifier_in_trailing_type_specifier14149);
                    typename_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:939:9: cv_qualifier
                    {
                    pushFollow(FOLLOW_cv_qualifier_in_trailing_type_specifier14165);
                    cv_qualifier();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("trailing_type_specifier", 41);
            if(state.backtracking == 0){action.end_trailing_type_specifier(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "trailing_type_specifier"



    // $ANTLR start "simple_type_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:943:1: simple_type_specifier returns [type_specifier_t ts_val] : ( LITERAL_char | LITERAL_wchar_t | LITERAL_char16_t | LITERAL_char32_t | LITERAL_bool | LITERAL_short | LITERAL_int | LITERAL_long | LITERAL_signed | LITERAL_unsigned | LITERAL_float | LITERAL_double | LITERAL_void | LITERAL_auto | LITERAL___builtin_va_list | decltype_specifier |{...}? => ( SCOPE )? ( ( lookup_nested_name_specifier )=> nested_name_specifier ( simple_template_id_or_IDENT | LITERAL_template simple_template_id ) | simple_template_id_or_IDENT ) );
    public final type_specifier_t simple_type_specifier() throws RecognitionException {
        traceIn("simple_type_specifier", 42);
        QualName_stack.push(new QualName_scope());

        type_specifier_t ts_val = null;


        if(state.backtracking == 0){action.simple_type_specifier(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:946:5: ( LITERAL_char | LITERAL_wchar_t | LITERAL_char16_t | LITERAL_char32_t | LITERAL_bool | LITERAL_short | LITERAL_int | LITERAL_long | LITERAL_signed | LITERAL_unsigned | LITERAL_float | LITERAL_double | LITERAL_void | LITERAL_auto | LITERAL___builtin_va_list | decltype_specifier |{...}? => ( SCOPE )? ( ( lookup_nested_name_specifier )=> nested_name_specifier ( simple_template_id_or_IDENT | LITERAL_template simple_template_id ) | simple_template_id_or_IDENT ) )
            int alt63=17;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==LITERAL_char) ) {
                alt63=1;
            }
            else if ( (LA63_0==LITERAL_wchar_t) ) {
                alt63=2;
            }
            else if ( (LA63_0==LITERAL_char16_t) ) {
                alt63=3;
            }
            else if ( (LA63_0==LITERAL_char32_t) ) {
                alt63=4;
            }
            else if ( (LA63_0==LITERAL_bool) ) {
                alt63=5;
            }
            else if ( (LA63_0==LITERAL_short) ) {
                alt63=6;
            }
            else if ( (LA63_0==LITERAL_int) ) {
                alt63=7;
            }
            else if ( (LA63_0==LITERAL_long) ) {
                alt63=8;
            }
            else if ( (LA63_0==LITERAL_signed) ) {
                alt63=9;
            }
            else if ( (LA63_0==LITERAL_unsigned) ) {
                alt63=10;
            }
            else if ( (LA63_0==LITERAL_float) ) {
                alt63=11;
            }
            else if ( (LA63_0==LITERAL_double) ) {
                alt63=12;
            }
            else if ( (LA63_0==LITERAL_void) ) {
                alt63=13;
            }
            else if ( (LA63_0==LITERAL_auto) ) {
                alt63=14;
            }
            else if ( (LA63_0==LITERAL___builtin_va_list) ) {
                alt63=15;
            }
            else if ( ((LA63_0 >= LITERAL_typeof && LA63_0 <= LITERAL___typeof)||LA63_0==LITERAL_decltype||LA63_0==LITERAL___decltype) ) {
                alt63=16;
            }
            else if ( (LA63_0==SCOPE||LA63_0==IDENT) && (( action.type_specifier_already_present(input) ))) {
                alt63=17;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ts_val;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }
            switch (alt63) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:947:9: LITERAL_char
                    {
                    match(input,LITERAL_char,FOLLOW_LITERAL_char_in_simple_type_specifier14354); if (state.failed) return ts_val;

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__CHAR, input.LT(0));}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:949:9: LITERAL_wchar_t
                    {
                    match(input,LITERAL_wchar_t,FOLLOW_LITERAL_wchar_t_in_simple_type_specifier14431); if (state.failed) return ts_val;

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__WCHAR_T, input.LT(0));}

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:951:9: LITERAL_char16_t
                    {
                    match(input,LITERAL_char16_t,FOLLOW_LITERAL_char16_t_in_simple_type_specifier14505); if (state.failed) return ts_val;

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__CHAR16_T, input.LT(0));}

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:953:9: LITERAL_char32_t
                    {
                    match(input,LITERAL_char32_t,FOLLOW_LITERAL_char32_t_in_simple_type_specifier14578); if (state.failed) return ts_val;

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__CHAR32_T, input.LT(0));}

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:955:9: LITERAL_bool
                    {
                    match(input,LITERAL_bool,FOLLOW_LITERAL_bool_in_simple_type_specifier14651); if (state.failed) return ts_val;

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__BOOL, input.LT(0));}

                    }
                    break;
                case 6 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:957:9: LITERAL_short
                    {
                    match(input,LITERAL_short,FOLLOW_LITERAL_short_in_simple_type_specifier14728); if (state.failed) return ts_val;

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__SHORT, input.LT(0));}

                    }
                    break;
                case 7 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:959:9: LITERAL_int
                    {
                    match(input,LITERAL_int,FOLLOW_LITERAL_int_in_simple_type_specifier14804); if (state.failed) return ts_val;

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__INT, input.LT(0));}

                    }
                    break;
                case 8 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:961:9: LITERAL_long
                    {
                    match(input,LITERAL_long,FOLLOW_LITERAL_long_in_simple_type_specifier14882); if (state.failed) return ts_val;

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__LONG, input.LT(0));}

                    }
                    break;
                case 9 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:963:9: LITERAL_signed
                    {
                    match(input,LITERAL_signed,FOLLOW_LITERAL_signed_in_simple_type_specifier14959); if (state.failed) return ts_val;

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__SIGNED, input.LT(0));}

                    }
                    break;
                case 10 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:965:9: LITERAL_unsigned
                    {
                    match(input,LITERAL_unsigned,FOLLOW_LITERAL_unsigned_in_simple_type_specifier15034); if (state.failed) return ts_val;

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__UNSIGNED, input.LT(0));}

                    }
                    break;
                case 11 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:967:9: LITERAL_float
                    {
                    match(input,LITERAL_float,FOLLOW_LITERAL_float_in_simple_type_specifier15107); if (state.failed) return ts_val;

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__FLOAT, input.LT(0));}

                    }
                    break;
                case 12 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:969:9: LITERAL_double
                    {
                    match(input,LITERAL_double,FOLLOW_LITERAL_double_in_simple_type_specifier15183); if (state.failed) return ts_val;

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__DOUBLE, input.LT(0));}

                    }
                    break;
                case 13 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:971:9: LITERAL_void
                    {
                    match(input,LITERAL_void,FOLLOW_LITERAL_void_in_simple_type_specifier15258); if (state.failed) return ts_val;

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__VOID, input.LT(0));}

                    }
                    break;
                case 14 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:973:9: LITERAL_auto
                    {
                    match(input,LITERAL_auto,FOLLOW_LITERAL_auto_in_simple_type_specifier15335); if (state.failed) return ts_val;

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__AUTO, input.LT(0));}

                    }
                    break;
                case 15 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:975:9: LITERAL___builtin_va_list
                    {
                    match(input,LITERAL___builtin_va_list,FOLLOW_LITERAL___builtin_va_list_in_simple_type_specifier15412); if (state.failed) return ts_val;

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__BI_VA_LIST, input.LT(0));}

                    }
                    break;
                case 16 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:977:9: decltype_specifier
                    {
                    pushFollow(FOLLOW_decltype_specifier_in_simple_type_specifier15476);
                    decltype_specifier();

                    state._fsp--;
                    if (state.failed) return ts_val;

                    }
                    break;
                case 17 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:983:9: {...}? => ( SCOPE )? ( ( lookup_nested_name_specifier )=> nested_name_specifier ( simple_template_id_or_IDENT | LITERAL_template simple_template_id ) | simple_template_id_or_IDENT )
                    {
                    if ( !(( action.type_specifier_already_present(input) )) ) {
                        if (state.backtracking>0) {state.failed=true; return ts_val;}
                        throw new FailedPredicateException(input, "simple_type_specifier", " action.type_specifier_already_present(input) ");
                    }

                    if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__ID, input.LT(0));}

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:986:13: ( SCOPE )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==SCOPE) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:987:17: SCOPE
                            {
                            match(input,SCOPE,FOLLOW_SCOPE_in_simple_type_specifier15619); if (state.failed) return ts_val;

                             qual_add_colon2(); 

                            if ( state.backtracking==0 ) {action.simple_type_specifier(action.SIMPLE_TYPE_SPECIFIER__SCOPE, input.LT(0));}

                            }
                            break;

                    }


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:990:13: ( ( lookup_nested_name_specifier )=> nested_name_specifier ( simple_template_id_or_IDENT | LITERAL_template simple_template_id ) | simple_template_id_or_IDENT )
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==IDENT) ) {
                        int LA62_1 = input.LA(2);

                        if ( (synpred22_CXXParser()) ) {
                            alt62=1;
                        }
                        else if ( (true) ) {
                            alt62=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ts_val;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 62, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ts_val;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 62, 0, input);

                        throw nvae;

                    }
                    switch (alt62) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:991:17: ( lookup_nested_name_specifier )=> nested_name_specifier ( simple_template_id_or_IDENT | LITERAL_template simple_template_id )
                            {
                            pushFollow(FOLLOW_nested_name_specifier_in_simple_type_specifier15742);
                            nested_name_specifier();

                            state._fsp--;
                            if (state.failed) return ts_val;

                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:993:21: ( simple_template_id_or_IDENT | LITERAL_template simple_template_id )
                            int alt61=2;
                            int LA61_0 = input.LA(1);

                            if ( (LA61_0==IDENT) ) {
                                alt61=1;
                            }
                            else if ( (LA61_0==LITERAL_template) ) {
                                alt61=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ts_val;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 61, 0, input);

                                throw nvae;

                            }
                            switch (alt61) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:993:22: simple_template_id_or_IDENT
                                    {
                                    pushFollow(FOLLOW_simple_template_id_or_IDENT_in_simple_type_specifier15766);
                                    simple_template_id_or_IDENT();

                                    state._fsp--;
                                    if (state.failed) return ts_val;

                                    }
                                    break;
                                case 2 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:994:23: LITERAL_template simple_template_id
                                    {
                                    match(input,LITERAL_template,FOLLOW_LITERAL_template_in_simple_type_specifier15822); if (state.failed) return ts_val;

                                    pushFollow(FOLLOW_simple_template_id_in_simple_type_specifier15824);
                                    simple_template_id();

                                    state._fsp--;
                                    if (state.failed) return ts_val;

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:996:17: simple_template_id_or_IDENT
                            {
                            pushFollow(FOLLOW_simple_template_id_or_IDENT_in_simple_type_specifier15857);
                            simple_template_id_or_IDENT();

                            state._fsp--;
                            if (state.failed) return ts_val;

                            }
                            break;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("simple_type_specifier", 42);
            QualName_stack.pop();

            if(state.backtracking == 0){action.end_simple_type_specifier(input.LT(0));}
        }
        return ts_val;
    }
    // $ANTLR end "simple_type_specifier"



    // $ANTLR start "lookup_type_name"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1001:1: lookup_type_name : IDENT {...}?;
    public final void lookup_type_name() throws RecognitionException {
        traceIn("lookup_type_name", 43);
        Token IDENT21=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1001:17: ( IDENT {...}?)
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1002:9: IDENT {...}?
            {
            IDENT21=(Token)match(input,IDENT,FOLLOW_IDENT_in_lookup_type_name16004); if (state.failed) return ;

            if ( !(( action.identifier_is(IDT_CLASS_NAME|IDT_ENUM_NAME|IDT_TYPEDEF_NAME, IDENT21) )) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "lookup_type_name", " action.identifier_is(IDT_CLASS_NAME|IDT_ENUM_NAME|IDT_TYPEDEF_NAME, $IDENT) ");
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("lookup_type_name", 43);
        }
        return ;
    }
    // $ANTLR end "lookup_type_name"



    // $ANTLR start "decltype_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1025:1: decltype_specifier : ( literal_decltype | literal_typeof ) LPAREN expression RPAREN ;
    public final void decltype_specifier() throws RecognitionException {
        traceIn("decltype_specifier", 44);
        if(state.backtracking == 0){action.decltype_specifier(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1027:5: ( ( literal_decltype | literal_typeof ) LPAREN expression RPAREN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1028:5: ( literal_decltype | literal_typeof ) LPAREN expression RPAREN
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1028:5: ( literal_decltype | literal_typeof )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==LITERAL_decltype||LA64_0==LITERAL___decltype) ) {
                alt64=1;
            }
            else if ( ((LA64_0 >= LITERAL_typeof && LA64_0 <= LITERAL___typeof)) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }
            switch (alt64) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1028:6: literal_decltype
                    {
                    pushFollow(FOLLOW_literal_decltype_in_decltype_specifier16110);
                    literal_decltype();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1028:25: literal_typeof
                    {
                    pushFollow(FOLLOW_literal_typeof_in_decltype_specifier16114);
                    literal_typeof();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            match(input,LPAREN,FOLLOW_LPAREN_in_decltype_specifier16162); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.decltype_specifier(action.DECLTYPE_SPECIFIER__LPAREN, input.LT(0));}

            pushFollow(FOLLOW_expression_in_decltype_specifier16239);
            expression();

            state._fsp--;
            if (state.failed) return ;

            match(input,RPAREN,FOLLOW_RPAREN_in_decltype_specifier16246); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.decltype_specifier(action.DECLTYPE_SPECIFIER__RPAREN, input.LT(0));}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("decltype_specifier", 44);
            if(state.backtracking == 0){action.end_decltype_specifier(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "decltype_specifier"



    // $ANTLR start "elaborated_type_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1036:1: elaborated_type_specifier : ( class_key ( attribute_specifiers )? ( SCOPE )? ( ( IDENT SCOPE )=> nested_name_specifier ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck ) | ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck ) ) | LITERAL_enum ( SCOPE )? ( ( IDENT SCOPE )=> nested_name_specifier IDENT | ( IDENT )=> IDENT ) ) ;
    public final void elaborated_type_specifier() throws RecognitionException {
        traceIn("elaborated_type_specifier", 45);
        if(state.backtracking == 0){action.elaborated_type_specifier(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1038:5: ( ( class_key ( attribute_specifiers )? ( SCOPE )? ( ( IDENT SCOPE )=> nested_name_specifier ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck ) | ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck ) ) | LITERAL_enum ( SCOPE )? ( ( IDENT SCOPE )=> nested_name_specifier IDENT | ( IDENT )=> IDENT ) ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1039:5: ( class_key ( attribute_specifiers )? ( SCOPE )? ( ( IDENT SCOPE )=> nested_name_specifier ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck ) | ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck ) ) | LITERAL_enum ( SCOPE )? ( ( IDENT SCOPE )=> nested_name_specifier IDENT | ( IDENT )=> IDENT ) )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1039:5: ( class_key ( attribute_specifiers )? ( SCOPE )? ( ( IDENT SCOPE )=> nested_name_specifier ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck ) | ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck ) ) | LITERAL_enum ( SCOPE )? ( ( IDENT SCOPE )=> nested_name_specifier IDENT | ( IDENT )=> IDENT ) )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( ((LA72_0 >= LITERAL_class && LA72_0 <= LITERAL_union)) ) {
                alt72=1;
            }
            else if ( (LA72_0==LITERAL_enum) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;

            }
            switch (alt72) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1040:9: class_key ( attribute_specifiers )? ( SCOPE )? ( ( IDENT SCOPE )=> nested_name_specifier ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck ) | ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck ) )
                    {
                    pushFollow(FOLLOW_class_key_in_elaborated_type_specifier16659);
                    class_key();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1040:19: ( attribute_specifiers )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==LSQUARE||(LA65_0 >= LITERAL___extension__ && LA65_0 <= LITERAL___attribute__)||LA65_0==LITERAL_alignas) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1040:19: attribute_specifiers
                            {
                            pushFollow(FOLLOW_attribute_specifiers_in_elaborated_type_specifier16661);
                            attribute_specifiers();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1040:41: ( SCOPE )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==SCOPE) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1040:41: SCOPE
                            {
                            match(input,SCOPE,FOLLOW_SCOPE_in_elaborated_type_specifier16664); if (state.failed) return ;

                            }
                            break;

                    }


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1041:9: ( ( IDENT SCOPE )=> nested_name_specifier ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck ) | ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck ) )
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==IDENT) ) {
                        int LA69_1 = input.LA(2);

                        if ( (synpred23_CXXParser()) ) {
                            alt69=1;
                        }
                        else if ( (true) ) {
                            alt69=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 69, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA69_0==LITERAL_template) ) {
                        alt69=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 69, 0, input);

                        throw nvae;

                    }
                    switch (alt69) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1042:13: ( IDENT SCOPE )=> nested_name_specifier ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck )
                            {
                            pushFollow(FOLLOW_nested_name_specifier_in_elaborated_type_specifier16722);
                            nested_name_specifier();

                            state._fsp--;
                            if (state.failed) return ;

                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1043:39: ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck )
                            int alt67=2;
                            int LA67_0 = input.LA(1);

                            if ( (LA67_0==IDENT) ) {
                                alt67=1;
                            }
                            else if ( (LA67_0==LITERAL_template) ) {
                                alt67=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 67, 0, input);

                                throw nvae;

                            }
                            switch (alt67) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1043:40: simple_template_id_or_IDENT
                                    {
                                    pushFollow(FOLLOW_simple_template_id_or_IDENT_in_elaborated_type_specifier16725);
                                    simple_template_id_or_IDENT();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;
                                case 2 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1043:70: LITERAL_template simple_template_id_nocheck
                                    {
                                    match(input,LITERAL_template,FOLLOW_LITERAL_template_in_elaborated_type_specifier16729); if (state.failed) return ;

                                    pushFollow(FOLLOW_simple_template_id_nocheck_in_elaborated_type_specifier16731);
                                    simple_template_id_nocheck();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1045:13: ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck )
                            {
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1045:13: ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck )
                            int alt68=2;
                            int LA68_0 = input.LA(1);

                            if ( (LA68_0==IDENT) ) {
                                alt68=1;
                            }
                            else if ( (LA68_0==LITERAL_template) ) {
                                alt68=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 68, 0, input);

                                throw nvae;

                            }
                            switch (alt68) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1046:17: simple_template_id_or_IDENT
                                    {
                                    pushFollow(FOLLOW_simple_template_id_or_IDENT_in_elaborated_type_specifier16774);
                                    simple_template_id_or_IDENT();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;
                                case 2 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1048:17: LITERAL_template simple_template_id_nocheck
                                    {
                                    match(input,LITERAL_template,FOLLOW_LITERAL_template_in_elaborated_type_specifier16844); if (state.failed) return ;

                                    pushFollow(FOLLOW_simple_template_id_nocheck_in_elaborated_type_specifier16846);
                                    simple_template_id_nocheck();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1052:9: LITERAL_enum ( SCOPE )? ( ( IDENT SCOPE )=> nested_name_specifier IDENT | ( IDENT )=> IDENT )
                    {
                    match(input,LITERAL_enum,FOLLOW_LITERAL_enum_in_elaborated_type_specifier16886); if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1052:22: ( SCOPE )?
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==SCOPE) ) {
                        alt70=1;
                    }
                    switch (alt70) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1052:22: SCOPE
                            {
                            match(input,SCOPE,FOLLOW_SCOPE_in_elaborated_type_specifier16888); if (state.failed) return ;

                            }
                            break;

                    }


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1052:29: ( ( IDENT SCOPE )=> nested_name_specifier IDENT | ( IDENT )=> IDENT )
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==IDENT) ) {
                        int LA71_1 = input.LA(2);

                        if ( (synpred24_CXXParser()) ) {
                            alt71=1;
                        }
                        else if ( (synpred25_CXXParser()) ) {
                            alt71=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 71, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 71, 0, input);

                        throw nvae;

                    }
                    switch (alt71) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1053:13: ( IDENT SCOPE )=> nested_name_specifier IDENT
                            {
                            pushFollow(FOLLOW_nested_name_specifier_in_elaborated_type_specifier16928);
                            nested_name_specifier();

                            state._fsp--;
                            if (state.failed) return ;

                            match(input,IDENT,FOLLOW_IDENT_in_elaborated_type_specifier16930); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1056:13: ( IDENT )=> IDENT
                            {
                            match(input,IDENT,FOLLOW_IDENT_in_elaborated_type_specifier16975); if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("elaborated_type_specifier", 45);
            if(state.backtracking == 0){action.end_elaborated_type_specifier(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "elaborated_type_specifier"



    // $ANTLR start "typename_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1064:1: typename_specifier : LITERAL_typename ( SCOPE )? nested_name_specifier ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck ) ;
    public final void typename_specifier() throws RecognitionException {
        traceIn("typename_specifier", 46);
        if(state.backtracking == 0){action.typename_specifier(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1066:5: ( LITERAL_typename ( SCOPE )? nested_name_specifier ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1067:9: LITERAL_typename ( SCOPE )? nested_name_specifier ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck )
            {
            match(input,LITERAL_typename,FOLLOW_LITERAL_typename_in_typename_specifier17251); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1067:26: ( SCOPE )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==SCOPE) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1067:26: SCOPE
                    {
                    match(input,SCOPE,FOLLOW_SCOPE_in_typename_specifier17253); if (state.failed) return ;

                    }
                    break;

            }


            pushFollow(FOLLOW_nested_name_specifier_in_typename_specifier17256);
            nested_name_specifier();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1067:55: ( simple_template_id_or_IDENT | LITERAL_template simple_template_id_nocheck )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==IDENT) ) {
                alt74=1;
            }
            else if ( (LA74_0==LITERAL_template) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;

            }
            switch (alt74) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1067:57: simple_template_id_or_IDENT
                    {
                    pushFollow(FOLLOW_simple_template_id_or_IDENT_in_typename_specifier17260);
                    simple_template_id_or_IDENT();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1067:88: LITERAL_template simple_template_id_nocheck
                    {
                    match(input,LITERAL_template,FOLLOW_LITERAL_template_in_typename_specifier17265); if (state.failed) return ;

                    pushFollow(FOLLOW_simple_template_id_nocheck_in_typename_specifier17267);
                    simple_template_id_nocheck();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("typename_specifier", 46);
            if(state.backtracking == 0){action.end_typename_specifier(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "typename_specifier"



    // $ANTLR start "enum_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1078:1: enum_specifier : enum_head ( LCURLY ( enumerator_list ( COMMA )? )? RCURLY | SEMICOLON ) ;
    public final void enum_specifier() throws RecognitionException {
        traceIn("enum_specifier", 47);
        Token LCURLY22=null;
        Token RCURLY23=null;
        Token SEMICOLON24=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1078:15: ( enum_head ( LCURLY ( enumerator_list ( COMMA )? )? RCURLY | SEMICOLON ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1080:81: enum_head ( LCURLY ( enumerator_list ( COMMA )? )? RCURLY | SEMICOLON )
            {
            if ( state.backtracking==0 ) {action.enum_declaration(input.LT(1));}

            pushFollow(FOLLOW_enum_head_in_enum_specifier17450);
            enum_head();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1082:9: ( LCURLY ( enumerator_list ( COMMA )? )? RCURLY | SEMICOLON )
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==LCURLY) ) {
                alt77=1;
            }
            else if ( (LA77_0==SEMICOLON) ) {
                alt77=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;

            }
            switch (alt77) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1083:13: LCURLY ( enumerator_list ( COMMA )? )? RCURLY
                    {
                    LCURLY22=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_enum_specifier17475); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.enum_body(LCURLY22);}

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1084:13: ( enumerator_list ( COMMA )? )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==IDENT) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1084:14: enumerator_list ( COMMA )?
                            {
                            pushFollow(FOLLOW_enumerator_list_in_enum_specifier17553);
                            enumerator_list();

                            state._fsp--;
                            if (state.failed) return ;

                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1084:30: ( COMMA )?
                            int alt75=2;
                            int LA75_0 = input.LA(1);

                            if ( (LA75_0==COMMA) ) {
                                alt75=1;
                            }
                            switch (alt75) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1084:30: COMMA
                                    {
                                    match(input,COMMA,FOLLOW_COMMA_in_enum_specifier17555); if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    RCURLY23=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_enum_specifier17573); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.end_enum_body(RCURLY23);}

                    if ( state.backtracking==0 ) {action.end_enum_declaration(RCURLY23);}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1088:13: SEMICOLON
                    {
                    SEMICOLON24=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_enum_specifier17742); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.end_enum_declaration(SEMICOLON24);}

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("enum_specifier", 47);
        }
        return ;
    }
    // $ANTLR end "enum_specifier"



    // $ANTLR start "enum_head"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1091:1: enum_head : enum_key ( attribute_specifiers )? ( nested_name_specifier IDENT | ( IDENT )? ) ( enum_base )? ;
    public final void enum_head() throws RecognitionException {
        traceIn("enum_head", 48);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1091:10: ( enum_key ( attribute_specifiers )? ( nested_name_specifier IDENT | ( IDENT )? ) ( enum_base )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1092:5: enum_key ( attribute_specifiers )? ( nested_name_specifier IDENT | ( IDENT )? ) ( enum_base )?
            {
            pushFollow(FOLLOW_enum_key_in_enum_head17827);
            enum_key();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1092:14: ( attribute_specifiers )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==LSQUARE||(LA78_0 >= LITERAL___extension__ && LA78_0 <= LITERAL___attribute__)||LA78_0==LITERAL_alignas) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1092:14: attribute_specifiers
                    {
                    pushFollow(FOLLOW_attribute_specifiers_in_enum_head17829);
                    attribute_specifiers();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1093:5: ( nested_name_specifier IDENT | ( IDENT )? )
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==IDENT) ) {
                int LA80_1 = input.LA(2);

                if ( (LA80_1==LESSTHAN) && (( action.identifier_is(IDT_TEMPLATE_NAME, input.LT(1)) ))) {
                    alt80=1;
                }
                else if ( (LA80_1==SCOPE) ) {
                    alt80=1;
                }
                else if ( (LA80_1==COLON||LA80_1==SEMICOLON||LA80_1==LCURLY) ) {
                    alt80=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA80_0==COLON||LA80_0==SEMICOLON||LA80_0==LCURLY) ) {
                alt80=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;

            }
            switch (alt80) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1094:9: nested_name_specifier IDENT
                    {
                    pushFollow(FOLLOW_nested_name_specifier_in_enum_head17846);
                    nested_name_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,IDENT,FOLLOW_IDENT_in_enum_head17848); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.enum_name(input.LT(0));}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1096:9: ( IDENT )?
                    {
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1096:9: ( IDENT )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==IDENT) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1097:13: IDENT
                            {
                            match(input,IDENT,FOLLOW_IDENT_in_enum_head17927); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.enum_name(input.LT(0));}

                            }
                            break;

                    }


                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1100:5: ( enum_base )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==COLON) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1100:5: enum_base
                    {
                    pushFollow(FOLLOW_enum_base_in_enum_head18014);
                    enum_base();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("enum_head", 48);
        }
        return ;
    }
    // $ANTLR end "enum_head"



    // $ANTLR start "enum_key"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1105:1: enum_key : LITERAL_enum ;
    public final void enum_key() throws RecognitionException {
        traceIn("enum_key", 49);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1105:9: ( LITERAL_enum )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1106:5: LITERAL_enum
            {
            match(input,LITERAL_enum,FOLLOW_LITERAL_enum_in_enum_key18033); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("enum_key", 49);
        }
        return ;
    }
    // $ANTLR end "enum_key"



    // $ANTLR start "enum_base"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1108:1: enum_base : COLON ( type_specifier )+ ;
    public final void enum_base() throws RecognitionException {
        traceIn("enum_base", 50);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1108:10: ( COLON ( type_specifier )+ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1109:5: COLON ( type_specifier )+
            {
            match(input,COLON,FOLLOW_COLON_in_enum_base18049); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1109:11: ( type_specifier )+
            int cnt82=0;
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( ((LA82_0 >= LITERAL_typeof && LA82_0 <= LITERAL___typeof)||LA82_0==LITERAL_auto||(LA82_0 >= LITERAL_char && LA82_0 <= LITERAL_signed)||LA82_0==LITERAL_unsigned||(LA82_0 >= LITERAL_float && LA82_0 <= LITERAL_void)||LA82_0==LITERAL_decltype||(LA82_0 >= LITERAL_char16_t && LA82_0 <= LITERAL_char32_t)||LA82_0==LITERAL___decltype||LA82_0==LITERAL___builtin_va_list) ) {
                    alt82=1;
                }
                else if ( (LA82_0==SCOPE||LA82_0==IDENT) && (( action.type_specifier_already_present(input) ))) {
                    alt82=1;
                }
                else if ( (LA82_0==LITERAL_enum||LA82_0==LITERAL_typename||(LA82_0 >= LITERAL_const && LA82_0 <= LITERAL___const)||LA82_0==LITERAL_volatile||(LA82_0 >= LITERAL_class && LA82_0 <= LITERAL_union)) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1109:11: type_specifier
            	    {
            	    pushFollow(FOLLOW_type_specifier_in_enum_base18051);
            	    type_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("enum_base", 50);
        }
        return ;
    }
    // $ANTLR end "enum_base"



    // $ANTLR start "enumerator_list"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1111:1: enumerator_list : enumerator_definition ( COMMA enumerator_definition )* ;
    public final void enumerator_list() throws RecognitionException {
        traceIn("enumerator_list", 51);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1111:16: ( enumerator_definition ( COMMA enumerator_definition )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1112:9: enumerator_definition ( COMMA enumerator_definition )*
            {
            pushFollow(FOLLOW_enumerator_definition_in_enumerator_list18071);
            enumerator_definition();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1112:31: ( COMMA enumerator_definition )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==COMMA) ) {
                    int LA83_1 = input.LA(2);

                    if ( (LA83_1==IDENT) ) {
                        alt83=1;
                    }


                }


                switch (alt83) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1112:32: COMMA enumerator_definition
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_enumerator_list18074); if (state.failed) return ;

            	    pushFollow(FOLLOW_enumerator_definition_in_enumerator_list18076);
            	    enumerator_definition();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("enumerator_list", 51);
        }
        return ;
    }
    // $ANTLR end "enumerator_list"



    // $ANTLR start "enumerator_definition"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1114:1: enumerator_definition : ( enumerator | enumerator ASSIGNEQUAL constant_expression );
    public final void enumerator_definition() throws RecognitionException {
        traceIn("enumerator_definition", 52);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1114:22: ( enumerator | enumerator ASSIGNEQUAL constant_expression )
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==IDENT) ) {
                int LA84_1 = input.LA(2);

                if ( (LA84_1==COMMA||LA84_1==RCURLY) ) {
                    alt84=1;
                }
                else if ( (LA84_1==ASSIGNEQUAL) ) {
                    alt84=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 84, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;

            }
            switch (alt84) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1115:9: enumerator
                    {
                    pushFollow(FOLLOW_enumerator_in_enumerator_definition18098);
                    enumerator();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1117:9: enumerator ASSIGNEQUAL constant_expression
                    {
                    pushFollow(FOLLOW_enumerator_in_enumerator_definition18115);
                    enumerator();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_enumerator_definition18117); if (state.failed) return ;

                    pushFollow(FOLLOW_constant_expression_in_enumerator_definition18119);
                    constant_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("enumerator_definition", 52);
        }
        return ;
    }
    // $ANTLR end "enumerator_definition"



    // $ANTLR start "enumerator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1120:1: enumerator : IDENT ;
    public final void enumerator() throws RecognitionException {
        traceIn("enumerator", 53);
        Token IDENT25=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1120:11: ( IDENT )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1121:9: IDENT
            {
            IDENT25=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumerator18140); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.enumerator(IDENT25);}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("enumerator", 53);
        }
        return ;
    }
    // $ANTLR end "enumerator"



    // $ANTLR start "namespace_definition"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1166:1: namespace_definition : ( LITERAL_inline )? LITERAL_namespace ( IDENT )? ( gnu_attribute_or_extension_specifiers )? LCURLY sync_declaration ( declaration[object_decl] sync_declaration )* RCURLY ;
    public final void namespace_definition() throws RecognitionException {
        traceIn("namespace_definition", 54);
        Token LITERAL_namespace26=null;
        Token IDENT27=null;
        Token LCURLY28=null;
        Token RCURLY29=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1166:21: ( ( LITERAL_inline )? LITERAL_namespace ( IDENT )? ( gnu_attribute_or_extension_specifiers )? LCURLY sync_declaration ( declaration[object_decl] sync_declaration )* RCURLY )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1167:9: ( LITERAL_inline )? LITERAL_namespace ( IDENT )? ( gnu_attribute_or_extension_specifiers )? LCURLY sync_declaration ( declaration[object_decl] sync_declaration )* RCURLY
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1167:9: ( LITERAL_inline )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==LITERAL_inline) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1167:9: LITERAL_inline
                    {
                    match(input,LITERAL_inline,FOLLOW_LITERAL_inline_in_namespace_definition18233); if (state.failed) return ;

                    }
                    break;

            }


            LITERAL_namespace26=(Token)match(input,LITERAL_namespace,FOLLOW_LITERAL_namespace_in_namespace_definition18244); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.namespace_declaration(LITERAL_namespace26);}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1169:9: ( IDENT )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==IDENT) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1170:13: IDENT
                    {
                    IDENT27=(Token)match(input,IDENT,FOLLOW_IDENT_in_namespace_definition18327); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.namespace_name(IDENT27);}

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1172:9: ( gnu_attribute_or_extension_specifiers )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( ((LA87_0 >= LITERAL___extension__ && LA87_0 <= LITERAL___attribute__)) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1172:9: gnu_attribute_or_extension_specifiers
                    {
                    pushFollow(FOLLOW_gnu_attribute_or_extension_specifiers_in_namespace_definition18412);
                    gnu_attribute_or_extension_specifiers();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            LCURLY28=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_namespace_definition18423); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.namespace_body(LCURLY28);}

            pushFollow(FOLLOW_sync_declaration_in_namespace_definition18500);
            sync_declaration();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1175:9: ( declaration[object_decl] sync_declaration )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==ELLIPSIS||LA88_0==SEMICOLON||LA88_0==LPAREN||LA88_0==LSQUARE||LA88_0==STAR||LA88_0==AND||LA88_0==AMPERSAND||LA88_0==TILDE||LA88_0==SCOPE||LA88_0==IDENT||LA88_0==LITERAL_OPERATOR||(LA88_0 >= LITERAL_typeof && LA88_0 <= LITERAL_inline)||(LA88_0 >= LITERAL___inline && LA88_0 <= LITERAL_friend)||(LA88_0 >= LITERAL_typename && LA88_0 <= LITERAL___const)||LA88_0==LITERAL_volatile||(LA88_0 >= LITERAL_char && LA88_0 <= LITERAL_signed)||LA88_0==LITERAL_unsigned||(LA88_0 >= LITERAL_float && LA88_0 <= LITERAL_void)||(LA88_0 >= LITERAL_class && LA88_0 <= LITERAL_union)||(LA88_0 >= LITERAL_using && LA88_0 <= LITERAL___asm)||(LA88_0 >= LITERAL___extension__ && LA88_0 <= LITERAL___attribute__)||LA88_0==LITERAL___global||LA88_0==LITERAL___thread||(LA88_0 >= LITERAL___symbolic && LA88_0 <= LITERAL___hidden)||(LA88_0 >= LITERAL_constexpr && LA88_0 <= LITERAL_decltype)||(LA88_0 >= LITERAL_thread_local && LA88_0 <= LITERAL_char32_t)||LA88_0==LITERAL___decltype||LA88_0==LITERAL___builtin_va_list) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1176:13: declaration[object_decl] sync_declaration
            	    {
            	    pushFollow(FOLLOW_declaration_in_namespace_definition18524);
            	    declaration(object_decl);

            	    state._fsp--;
            	    if (state.failed) return ;

            	    pushFollow(FOLLOW_sync_declaration_in_namespace_definition18539);
            	    sync_declaration();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            RCURLY29=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_namespace_definition18560); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.end_namespace_body(RCURLY29);}

            if ( state.backtracking==0 ) {action.end_namespace_declaration(RCURLY29);}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("namespace_definition", 54);
        }
        return ;
    }
    // $ANTLR end "namespace_definition"



    // $ANTLR start "namespace_body"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1183:1: namespace_body : ( declaration[object_decl] )* ;
    public final void namespace_body() throws RecognitionException {
        traceIn("namespace_body", 55);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1183:15: ( ( declaration[object_decl] )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1184:9: ( declaration[object_decl] )*
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1184:9: ( declaration[object_decl] )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==ELLIPSIS||LA89_0==SEMICOLON||LA89_0==LPAREN||LA89_0==LSQUARE||LA89_0==STAR||LA89_0==AND||LA89_0==AMPERSAND||LA89_0==TILDE||LA89_0==SCOPE||LA89_0==IDENT||LA89_0==LITERAL_OPERATOR||(LA89_0 >= LITERAL_typeof && LA89_0 <= LITERAL_inline)||(LA89_0 >= LITERAL___inline && LA89_0 <= LITERAL_friend)||(LA89_0 >= LITERAL_typename && LA89_0 <= LITERAL___const)||LA89_0==LITERAL_volatile||(LA89_0 >= LITERAL_char && LA89_0 <= LITERAL_signed)||LA89_0==LITERAL_unsigned||(LA89_0 >= LITERAL_float && LA89_0 <= LITERAL_void)||(LA89_0 >= LITERAL_class && LA89_0 <= LITERAL_union)||(LA89_0 >= LITERAL_using && LA89_0 <= LITERAL___asm)||(LA89_0 >= LITERAL___extension__ && LA89_0 <= LITERAL___attribute__)||LA89_0==LITERAL___global||LA89_0==LITERAL___thread||(LA89_0 >= LITERAL___symbolic && LA89_0 <= LITERAL___hidden)||(LA89_0 >= LITERAL_constexpr && LA89_0 <= LITERAL_decltype)||(LA89_0 >= LITERAL_thread_local && LA89_0 <= LITERAL_char32_t)||LA89_0==LITERAL___decltype||LA89_0==LITERAL___builtin_va_list) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1184:9: declaration[object_decl]
            	    {
            	    pushFollow(FOLLOW_declaration_in_namespace_body18731);
            	    declaration(object_decl);

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("namespace_body", 55);
        }
        return ;
    }
    // $ANTLR end "namespace_body"



    // $ANTLR start "namespace_alias"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1187:1: namespace_alias : IDENT ;
    public final void namespace_alias() throws RecognitionException {
        traceIn("namespace_alias", 56);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1187:16: ( IDENT )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1188:9: IDENT
            {
            match(input,IDENT,FOLLOW_IDENT_in_namespace_alias18754); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("namespace_alias", 56);
        }
        return ;
    }
    // $ANTLR end "namespace_alias"



    // $ANTLR start "namespace_alias_definition"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1191:1: namespace_alias_definition : LITERAL_namespace IDENT ASSIGNEQUAL qualified_namespace_specifier SEMICOLON ;
    public final void namespace_alias_definition() throws RecognitionException {
        traceIn("namespace_alias_definition", 57);
        Token LITERAL_namespace30=null;
        Token IDENT31=null;
        Token ASSIGNEQUAL32=null;
        Token SEMICOLON33=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1191:27: ( LITERAL_namespace IDENT ASSIGNEQUAL qualified_namespace_specifier SEMICOLON )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1192:9: LITERAL_namespace IDENT ASSIGNEQUAL qualified_namespace_specifier SEMICOLON
            {
            LITERAL_namespace30=(Token)match(input,LITERAL_namespace,FOLLOW_LITERAL_namespace_in_namespace_alias_definition18774); if (state.failed) return ;

            IDENT31=(Token)match(input,IDENT,FOLLOW_IDENT_in_namespace_alias_definition18776); if (state.failed) return ;

            ASSIGNEQUAL32=(Token)match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_namespace_alias_definition18778); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.namespace_alias_definition(LITERAL_namespace30, IDENT31, ASSIGNEQUAL32);}

            pushFollow(FOLLOW_qualified_namespace_specifier_in_namespace_alias_definition18826);
            qualified_namespace_specifier();

            state._fsp--;
            if (state.failed) return ;

            SEMICOLON33=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_namespace_alias_definition18837); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.end_namespace_alias_definition(SEMICOLON33);}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("namespace_alias_definition", 57);
        }
        return ;
    }
    // $ANTLR end "namespace_alias_definition"



    // $ANTLR start "qualified_namespace_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1197:1: qualified_namespace_specifier : ( SCOPE )? ( nested_name_specifier )? IDENT ;
    public final void qualified_namespace_specifier() throws RecognitionException {
        traceIn("qualified_namespace_specifier", 58);
        Token SCOPE34=null;
        Token IDENT35=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1197:30: ( ( SCOPE )? ( nested_name_specifier )? IDENT )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1198:9: ( SCOPE )? ( nested_name_specifier )? IDENT
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1198:9: ( SCOPE )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==SCOPE) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1199:13: SCOPE
                    {
                    SCOPE34=(Token)match(input,SCOPE,FOLLOW_SCOPE_in_qualified_namespace_specifier18935); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.qualified_namespace_specifier(action.QUALIFIED_NAMESPACE_SPECIFIER__SCOPE, SCOPE34);}

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1201:9: ( nested_name_specifier )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==IDENT) ) {
                int LA91_1 = input.LA(2);

                if ( (LA91_1==LESSTHAN) && (( action.identifier_is(IDT_TEMPLATE_NAME, input.LT(1)) ))) {
                    alt91=1;
                }
                else if ( (LA91_1==SCOPE) ) {
                    alt91=1;
                }
            }
            switch (alt91) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1201:9: nested_name_specifier
                    {
                    pushFollow(FOLLOW_nested_name_specifier_in_qualified_namespace_specifier19021);
                    nested_name_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            IDENT35=(Token)match(input,IDENT,FOLLOW_IDENT_in_qualified_namespace_specifier19033); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.qualified_namespace_specifier(action.QUALIFIED_NAMESPACE_SPECIFIER__IDENT, IDENT35);}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("qualified_namespace_specifier", 58);
        }
        return ;
    }
    // $ANTLR end "qualified_namespace_specifier"



    // $ANTLR start "using_declaration"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1218:1: using_declaration : LITERAL_using ( LITERAL_typename )? ( SCOPE )? ( ( simple_template_id_or_IDENT SCOPE )=> nested_name_specifier )? unqualified_id SEMICOLON ;
    public final void using_declaration() throws RecognitionException {
        traceIn("using_declaration", 59);
        Token LITERAL_using36=null;
        Token LITERAL_typename37=null;
        Token SCOPE38=null;
        Token SEMICOLON39=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1219:6: ( LITERAL_using ( LITERAL_typename )? ( SCOPE )? ( ( simple_template_id_or_IDENT SCOPE )=> nested_name_specifier )? unqualified_id SEMICOLON )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1220:9: LITERAL_using ( LITERAL_typename )? ( SCOPE )? ( ( simple_template_id_or_IDENT SCOPE )=> nested_name_specifier )? unqualified_id SEMICOLON
            {
            LITERAL_using36=(Token)match(input,LITERAL_using,FOLLOW_LITERAL_using_in_using_declaration19130); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.using_declaration(LITERAL_using36);}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1221:9: ( LITERAL_typename )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==LITERAL_typename) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1222:13: LITERAL_typename
                    {
                    LITERAL_typename37=(Token)match(input,LITERAL_typename,FOLLOW_LITERAL_typename_in_using_declaration19214); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.using_declaration(action.USING_DECLARATION__TYPENAME, LITERAL_typename37);}

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1224:9: ( SCOPE )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==SCOPE) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1225:13: SCOPE
                    {
                    SCOPE38=(Token)match(input,SCOPE,FOLLOW_SCOPE_in_using_declaration19302); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.using_declaration(action.USING_DECLARATION__SCOPE, SCOPE38);}

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1228:9: ( ( simple_template_id_or_IDENT SCOPE )=> nested_name_specifier )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==IDENT) ) {
                int LA94_1 = input.LA(2);

                if ( (synpred26_CXXParser()) ) {
                    alt94=1;
                }
            }
            switch (alt94) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1228:10: ( simple_template_id_or_IDENT SCOPE )=> nested_name_specifier
                    {
                    pushFollow(FOLLOW_nested_name_specifier_in_using_declaration19405);
                    nested_name_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            pushFollow(FOLLOW_unqualified_id_in_using_declaration19418);
            unqualified_id();

            state._fsp--;
            if (state.failed) return ;

            SEMICOLON39=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_using_declaration19428); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.end_using_declaration(SEMICOLON39);}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("using_declaration", 59);
        }
        return ;
    }
    // $ANTLR end "using_declaration"



    // $ANTLR start "using_directive"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1233:1: using_directive : LITERAL_using LITERAL_namespace ( SCOPE )? ( nested_name_specifier )? IDENT SEMICOLON ;
    public final void using_directive() throws RecognitionException {
        traceIn("using_directive", 60);
        Token LITERAL_using40=null;
        Token LITERAL_namespace41=null;
        Token SCOPE42=null;
        Token IDENT43=null;
        Token SEMICOLON44=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1233:16: ( LITERAL_using LITERAL_namespace ( SCOPE )? ( nested_name_specifier )? IDENT SEMICOLON )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1234:9: LITERAL_using LITERAL_namespace ( SCOPE )? ( nested_name_specifier )? IDENT SEMICOLON
            {
            LITERAL_using40=(Token)match(input,LITERAL_using,FOLLOW_LITERAL_using_in_using_directive19512); if (state.failed) return ;

            LITERAL_namespace41=(Token)match(input,LITERAL_namespace,FOLLOW_LITERAL_namespace_in_using_directive19514); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.using_directive(LITERAL_using40, LITERAL_namespace41);}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1235:9: ( SCOPE )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==SCOPE) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1236:13: SCOPE
                    {
                    SCOPE42=(Token)match(input,SCOPE,FOLLOW_SCOPE_in_using_directive19580); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.using_directive(action.USING_DIRECTIVE__SCOPE, SCOPE42);}

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1238:9: ( nested_name_specifier )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==IDENT) ) {
                int LA96_1 = input.LA(2);

                if ( (LA96_1==LESSTHAN) && (( action.identifier_is(IDT_TEMPLATE_NAME, input.LT(1)) ))) {
                    alt96=1;
                }
                else if ( (LA96_1==SCOPE) ) {
                    alt96=1;
                }
            }
            switch (alt96) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1238:9: nested_name_specifier
                    {
                    pushFollow(FOLLOW_nested_name_specifier_in_using_directive19666);
                    nested_name_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            IDENT43=(Token)match(input,IDENT,FOLLOW_IDENT_in_using_directive19678); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.using_directive(action.USING_DIRECTIVE__IDENT, IDENT43);}

            SEMICOLON44=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_using_directive19756); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.end_using_directive(SEMICOLON44);}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("using_directive", 60);
        }
        return ;
    }
    // $ANTLR end "using_directive"



    // $ANTLR start "asm_statement"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1244:1: asm_statement : literal_asm LPAREN ( adjacent_string_literals )? RPAREN ;
    public final void asm_statement() throws RecognitionException {
        traceIn("asm_statement", 61);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1244:14: ( literal_asm LPAREN ( adjacent_string_literals )? RPAREN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1245:9: literal_asm LPAREN ( adjacent_string_literals )? RPAREN
            {
            pushFollow(FOLLOW_literal_asm_in_asm_statement19841);
            literal_asm();

            state._fsp--;
            if (state.failed) return ;

            match(input,LPAREN,FOLLOW_LPAREN_in_asm_statement19843); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1245:28: ( adjacent_string_literals )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==STRING_LITERAL) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1245:28: adjacent_string_literals
                    {
                    pushFollow(FOLLOW_adjacent_string_literals_in_asm_statement19845);
                    adjacent_string_literals();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            match(input,RPAREN,FOLLOW_RPAREN_in_asm_statement19848); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("asm_statement", 61);
        }
        return ;
    }
    // $ANTLR end "asm_statement"



    // $ANTLR start "asm_definition"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1248:1: asm_definition : asm_statement SEMICOLON ;
    public final void asm_definition() throws RecognitionException {
        traceIn("asm_definition", 62);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1248:15: ( asm_statement SEMICOLON )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1249:9: asm_statement SEMICOLON
            {
            pushFollow(FOLLOW_asm_statement_in_asm_definition19868);
            asm_statement();

            state._fsp--;
            if (state.failed) return ;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_asm_definition19870); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("asm_definition", 62);
        }
        return ;
    }
    // $ANTLR end "asm_definition"



    // $ANTLR start "linkage_specification"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1252:1: linkage_specification[decl_kind kind] : LITERAL_extern STRING_LITERAL ( LCURLY sync_declaration ( declaration[kind] sync_declaration )* RCURLY | declaration[kind] ) ;
    public final void linkage_specification(decl_kind kind) throws RecognitionException {
        traceIn("linkage_specification", 63);
        Token LITERAL_extern45=null;
        Token STRING_LITERAL46=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1252:39: ( LITERAL_extern STRING_LITERAL ( LCURLY sync_declaration ( declaration[kind] sync_declaration )* RCURLY | declaration[kind] ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1253:9: LITERAL_extern STRING_LITERAL ( LCURLY sync_declaration ( declaration[kind] sync_declaration )* RCURLY | declaration[kind] )
            {
            LITERAL_extern45=(Token)match(input,LITERAL_extern,FOLLOW_LITERAL_extern_in_linkage_specification19914); if (state.failed) return ;

            STRING_LITERAL46=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_linkage_specification19916); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.linkage_specification(LITERAL_extern45, STRING_LITERAL46);}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1254:9: ( LCURLY sync_declaration ( declaration[kind] sync_declaration )* RCURLY | declaration[kind] )
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==LCURLY) ) {
                alt99=1;
            }
            else if ( (LA99_0==ELLIPSIS||LA99_0==SEMICOLON||LA99_0==LPAREN||LA99_0==LSQUARE||LA99_0==STAR||LA99_0==AND||LA99_0==AMPERSAND||LA99_0==TILDE||LA99_0==SCOPE||LA99_0==IDENT||LA99_0==LITERAL_OPERATOR||(LA99_0 >= LITERAL_typeof && LA99_0 <= LITERAL_inline)||(LA99_0 >= LITERAL___inline && LA99_0 <= LITERAL_friend)||(LA99_0 >= LITERAL_typename && LA99_0 <= LITERAL___const)||LA99_0==LITERAL_volatile||(LA99_0 >= LITERAL_char && LA99_0 <= LITERAL_signed)||LA99_0==LITERAL_unsigned||(LA99_0 >= LITERAL_float && LA99_0 <= LITERAL_void)||(LA99_0 >= LITERAL_class && LA99_0 <= LITERAL_union)||(LA99_0 >= LITERAL_using && LA99_0 <= LITERAL___asm)||(LA99_0 >= LITERAL___extension__ && LA99_0 <= LITERAL___attribute__)||LA99_0==LITERAL___global||LA99_0==LITERAL___thread||(LA99_0 >= LITERAL___symbolic && LA99_0 <= LITERAL___hidden)||(LA99_0 >= LITERAL_constexpr && LA99_0 <= LITERAL_decltype)||(LA99_0 >= LITERAL_thread_local && LA99_0 <= LITERAL_char32_t)||LA99_0==LITERAL___decltype||LA99_0==LITERAL___builtin_va_list) ) {
                alt99=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;

            }
            switch (alt99) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1255:13: LCURLY sync_declaration ( declaration[kind] sync_declaration )* RCURLY
                    {
                    match(input,LCURLY,FOLLOW_LCURLY_in_linkage_specification19984); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.linkage_specification(action.LINKAGE_SPECIFICATION__LCURLY, input.LT(0));}

                    pushFollow(FOLLOW_sync_declaration_in_linkage_specification20061);
                    sync_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1257:13: ( declaration[kind] sync_declaration )*
                    loop98:
                    do {
                        int alt98=2;
                        int LA98_0 = input.LA(1);

                        if ( (LA98_0==ELLIPSIS||LA98_0==SEMICOLON||LA98_0==LPAREN||LA98_0==LSQUARE||LA98_0==STAR||LA98_0==AND||LA98_0==AMPERSAND||LA98_0==TILDE||LA98_0==SCOPE||LA98_0==IDENT||LA98_0==LITERAL_OPERATOR||(LA98_0 >= LITERAL_typeof && LA98_0 <= LITERAL_inline)||(LA98_0 >= LITERAL___inline && LA98_0 <= LITERAL_friend)||(LA98_0 >= LITERAL_typename && LA98_0 <= LITERAL___const)||LA98_0==LITERAL_volatile||(LA98_0 >= LITERAL_char && LA98_0 <= LITERAL_signed)||LA98_0==LITERAL_unsigned||(LA98_0 >= LITERAL_float && LA98_0 <= LITERAL_void)||(LA98_0 >= LITERAL_class && LA98_0 <= LITERAL_union)||(LA98_0 >= LITERAL_using && LA98_0 <= LITERAL___asm)||(LA98_0 >= LITERAL___extension__ && LA98_0 <= LITERAL___attribute__)||LA98_0==LITERAL___global||LA98_0==LITERAL___thread||(LA98_0 >= LITERAL___symbolic && LA98_0 <= LITERAL___hidden)||(LA98_0 >= LITERAL_constexpr && LA98_0 <= LITERAL_decltype)||(LA98_0 >= LITERAL_thread_local && LA98_0 <= LITERAL_char32_t)||LA98_0==LITERAL___decltype||LA98_0==LITERAL___builtin_va_list) ) {
                            alt98=1;
                        }


                        switch (alt98) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1258:17: declaration[kind] sync_declaration
                    	    {
                    	    pushFollow(FOLLOW_declaration_in_linkage_specification20093);
                    	    declaration(kind);

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    pushFollow(FOLLOW_sync_declaration_in_linkage_specification20112);
                    	    sync_declaration();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop98;
                        }
                    } while (true);


                    match(input,RCURLY,FOLLOW_RCURLY_in_linkage_specification20141); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.linkage_specification(action.LINKAGE_SPECIFICATION__RCURLY, input.LT(0));}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1263:13: declaration[kind]
                    {
                    pushFollow(FOLLOW_declaration_in_linkage_specification20224);
                    declaration(kind);

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {action.end_linkage_specification(input.LT(0));}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("linkage_specification", 63);
        }
        return ;
    }
    // $ANTLR end "linkage_specification"



    // $ANTLR start "attribute_specifiers"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1267:1: attribute_specifiers : ( attribute_specifier | gnu_attribute_or_extension_specifier )+ ;
    public final void attribute_specifiers() throws RecognitionException {
        traceIn("attribute_specifiers", 64);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1267:21: ( ( attribute_specifier | gnu_attribute_or_extension_specifier )+ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1268:9: ( attribute_specifier | gnu_attribute_or_extension_specifier )+
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1268:9: ( attribute_specifier | gnu_attribute_or_extension_specifier )+
            int cnt100=0;
            loop100:
            do {
                int alt100=3;
                switch ( input.LA(1) ) {
                case LSQUARE:
                    {
                    int LA100_2 = input.LA(2);

                    if ( (LA100_2==LSQUARE) ) {
                        int LA100_5 = input.LA(3);

                        if ( (LA100_5==IDENT) ) {
                            switch ( input.LA(4) ) {
                            case COLON:
                            case LPAREN:
                            case SCOPE:
                                {
                                alt100=1;
                                }
                                break;
                            case ELLIPSIS:
                                {
                                int LA100_8 = input.LA(5);

                                if ( (LA100_8==COLON) ) {
                                    alt100=1;
                                }
                                else if ( (LA100_8==RSQUARE) ) {
                                    int LA100_7 = input.LA(6);

                                    if ( (LA100_7==RSQUARE) ) {
                                        alt100=1;
                                    }


                                }


                                }
                                break;
                            case RSQUARE:
                                {
                                int LA100_7 = input.LA(5);

                                if ( (LA100_7==RSQUARE) ) {
                                    alt100=1;
                                }


                                }
                                break;

                            }

                        }
                        else if ( (LA100_5==RSQUARE) ) {
                            int LA100_7 = input.LA(4);

                            if ( (LA100_7==RSQUARE) ) {
                                alt100=1;
                            }


                        }


                    }


                    }
                    break;
                case LITERAL_alignas:
                    {
                    alt100=1;
                    }
                    break;
                case LITERAL___extension__:
                case LITERAL___attribute__:
                    {
                    alt100=2;
                    }
                    break;

                }

                switch (alt100) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1268:10: attribute_specifier
            	    {
            	    pushFollow(FOLLOW_attribute_specifier_in_attribute_specifiers20328);
            	    attribute_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 2 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1268:32: gnu_attribute_or_extension_specifier
            	    {
            	    pushFollow(FOLLOW_gnu_attribute_or_extension_specifier_in_attribute_specifiers20332);
            	    gnu_attribute_or_extension_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt100 >= 1 ) break loop100;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(100, input);
                        throw eee;
                }
                cnt100++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("attribute_specifiers", 64);
        }
        return ;
    }
    // $ANTLR end "attribute_specifiers"



    // $ANTLR start "cpp11_attribute_specifiers"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1271:1: cpp11_attribute_specifiers : ( attribute_specifier )+ ;
    public final void cpp11_attribute_specifiers() throws RecognitionException {
        traceIn("cpp11_attribute_specifiers", 65);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1271:27: ( ( attribute_specifier )+ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1272:9: ( attribute_specifier )+
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1272:9: ( attribute_specifier )+
            int cnt101=0;
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==LSQUARE||LA101_0==LITERAL_alignas) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1272:9: attribute_specifier
            	    {
            	    pushFollow(FOLLOW_attribute_specifier_in_cpp11_attribute_specifiers20354);
            	    attribute_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt101 >= 1 ) break loop101;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(101, input);
                        throw eee;
                }
                cnt101++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("cpp11_attribute_specifiers", 65);
        }
        return ;
    }
    // $ANTLR end "cpp11_attribute_specifiers"



    // $ANTLR start "attribute_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1275:1: attribute_specifier : ( LSQUARE LSQUARE attribute_list RSQUARE RSQUARE | aligment_specifier );
    public final void attribute_specifier() throws RecognitionException {
        traceIn("attribute_specifier", 66);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1275:20: ( LSQUARE LSQUARE attribute_list RSQUARE RSQUARE | aligment_specifier )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==LSQUARE) ) {
                alt102=1;
            }
            else if ( (LA102_0==LITERAL_alignas) ) {
                alt102=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;

            }
            switch (alt102) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1276:9: LSQUARE LSQUARE attribute_list RSQUARE RSQUARE
                    {
                    match(input,LSQUARE,FOLLOW_LSQUARE_in_attribute_specifier20375); if (state.failed) return ;

                    match(input,LSQUARE,FOLLOW_LSQUARE_in_attribute_specifier20377); if (state.failed) return ;

                    pushFollow(FOLLOW_attribute_list_in_attribute_specifier20379);
                    attribute_list();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RSQUARE,FOLLOW_RSQUARE_in_attribute_specifier20381); if (state.failed) return ;

                    match(input,RSQUARE,FOLLOW_RSQUARE_in_attribute_specifier20383); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1278:9: aligment_specifier
                    {
                    pushFollow(FOLLOW_aligment_specifier_in_attribute_specifier20399);
                    aligment_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("attribute_specifier", 66);
        }
        return ;
    }
    // $ANTLR end "attribute_specifier"



    // $ANTLR start "aligment_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1281:1: aligment_specifier : LITERAL_alignas LPAREN ( ( type_id )=> type_id | assignment_expression ) ( ELLIPSIS )? RPAREN ;
    public final void aligment_specifier() throws RecognitionException {
        traceIn("aligment_specifier", 67);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1281:19: ( LITERAL_alignas LPAREN ( ( type_id )=> type_id | assignment_expression ) ( ELLIPSIS )? RPAREN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1282:9: LITERAL_alignas LPAREN ( ( type_id )=> type_id | assignment_expression ) ( ELLIPSIS )? RPAREN
            {
            match(input,LITERAL_alignas,FOLLOW_LITERAL_alignas_in_aligment_specifier20419); if (state.failed) return ;

            match(input,LPAREN,FOLLOW_LPAREN_in_aligment_specifier20421); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1283:9: ( ( type_id )=> type_id | assignment_expression )
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==LITERAL___attribute__) && (synpred27_CXXParser())) {
                alt103=1;
            }
            else if ( (LA103_0==LITERAL___extension__) && (synpred27_CXXParser())) {
                alt103=1;
            }
            else if ( (LA103_0==LITERAL_char) ) {
                int LA103_3 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL_wchar_t) ) {
                int LA103_4 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL_char16_t) ) {
                int LA103_5 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL_char32_t) ) {
                int LA103_6 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL_bool) ) {
                int LA103_7 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL_short) ) {
                int LA103_8 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL_int) ) {
                int LA103_9 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL_long) ) {
                int LA103_10 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL_signed) ) {
                int LA103_11 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 11, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL_unsigned) ) {
                int LA103_12 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 12, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL_float) ) {
                int LA103_13 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL_double) ) {
                int LA103_14 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 14, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL_void) ) {
                int LA103_15 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 15, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL_auto) ) {
                int LA103_16 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 16, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL___builtin_va_list) ) {
                int LA103_17 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 17, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL_decltype||LA103_0==LITERAL___decltype) ) {
                int LA103_18 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 18, input);

                    throw nvae;

                }
            }
            else if ( ((LA103_0 >= LITERAL_typeof && LA103_0 <= LITERAL___typeof)) ) {
                int LA103_19 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 19, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==SCOPE) ) {
                int LA103_20 = input.LA(2);

                if ( (((( action.type_specifier_already_present(input) )&&( action.type_specifier_already_present(input) ))&&synpred27_CXXParser())) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 20, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==IDENT) ) {
                int LA103_21 = input.LA(2);

                if ( (((( action.type_specifier_already_present(input) )&&( action.type_specifier_already_present(input) ))&&synpred27_CXXParser())) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 21, input);

                    throw nvae;

                }
            }
            else if ( (LA103_0==LITERAL_class) && (synpred27_CXXParser())) {
                alt103=1;
            }
            else if ( (LA103_0==LITERAL_struct) && (synpred27_CXXParser())) {
                alt103=1;
            }
            else if ( (LA103_0==LITERAL_union) && (synpred27_CXXParser())) {
                alt103=1;
            }
            else if ( (LA103_0==LITERAL_enum) && (synpred27_CXXParser())) {
                alt103=1;
            }
            else if ( (LA103_0==LITERAL_typename) ) {
                int LA103_26 = input.LA(2);

                if ( (synpred27_CXXParser()) ) {
                    alt103=1;
                }
                else if ( (true) ) {
                    alt103=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 26, input);

                    throw nvae;

                }
            }
            else if ( ((LA103_0 >= LITERAL_const && LA103_0 <= LITERAL___const)) && (synpred27_CXXParser())) {
                alt103=1;
            }
            else if ( (LA103_0==LITERAL_volatile) && (synpred27_CXXParser())) {
                alt103=1;
            }
            else if ( (LA103_0==QUESTIONMARK||LA103_0==LPAREN||LA103_0==LSQUARE||LA103_0==PLUS||(LA103_0 >= PLUSPLUS && LA103_0 <= MINUS)||(LA103_0 >= MINUSMINUS && LA103_0 <= STAR)||LA103_0==NOT||LA103_0==AMPERSAND||LA103_0==TILDE||LA103_0==FLOATONE||(LA103_0 >= HEXADECIMALINT && LA103_0 <= DECIMALINT)||(LA103_0 >= CHAR_LITERAL && LA103_0 <= STRING_LITERAL)||LA103_0==NUMBER||LA103_0==LITERAL_OPERATOR||LA103_0==LITERAL_const_cast||(LA103_0 >= LITERAL_this && LA103_0 <= LITERAL_false)||LA103_0==LITERAL_throw||(LA103_0 >= LITERAL_sizeof && LA103_0 <= LITERAL_new)||LA103_0==LITERAL_delete||LA103_0==LITERAL_noexcept||LA103_0==LITERAL___null||LA103_0==LITERAL___is_class||LA103_0==LITERAL___is_pod||(LA103_0 >= LITERAL___has_nothrow_assign && LA103_0 <= LITERAL___underlying_type)||LA103_0==LITERAL_typeid) ) {
                alt103=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;

            }
            switch (alt103) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1284:13: ( type_id )=> type_id
                    {
                    pushFollow(FOLLOW_type_id_in_aligment_specifier20450);
                    type_id();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1286:13: assignment_expression
                    {
                    pushFollow(FOLLOW_assignment_expression_in_aligment_specifier20474);
                    assignment_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1288:9: ( ELLIPSIS )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==ELLIPSIS) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1288:9: ELLIPSIS
                    {
                    match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_aligment_specifier20494); if (state.failed) return ;

                    }
                    break;

            }


            match(input,RPAREN,FOLLOW_RPAREN_in_aligment_specifier20497); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("aligment_specifier", 67);
        }
        return ;
    }
    // $ANTLR end "aligment_specifier"



    // $ANTLR start "attribute_list"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1291:1: attribute_list : ( attribute ( ELLIPSIS )? ( COLON ( attribute ( ELLIPSIS )? )? )? )? ;
    public final void attribute_list() throws RecognitionException {
        traceIn("attribute_list", 68);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1291:15: ( ( attribute ( ELLIPSIS )? ( COLON ( attribute ( ELLIPSIS )? )? )? )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1292:9: ( attribute ( ELLIPSIS )? ( COLON ( attribute ( ELLIPSIS )? )? )? )?
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1292:9: ( attribute ( ELLIPSIS )? ( COLON ( attribute ( ELLIPSIS )? )? )? )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==IDENT) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1292:10: attribute ( ELLIPSIS )? ( COLON ( attribute ( ELLIPSIS )? )? )?
                    {
                    pushFollow(FOLLOW_attribute_in_attribute_list20518);
                    attribute();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1292:20: ( ELLIPSIS )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==ELLIPSIS) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1292:20: ELLIPSIS
                            {
                            match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_attribute_list20520); if (state.failed) return ;

                            }
                            break;

                    }


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1292:30: ( COLON ( attribute ( ELLIPSIS )? )? )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==COLON) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1292:31: COLON ( attribute ( ELLIPSIS )? )?
                            {
                            match(input,COLON,FOLLOW_COLON_in_attribute_list20524); if (state.failed) return ;

                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1292:37: ( attribute ( ELLIPSIS )? )?
                            int alt107=2;
                            int LA107_0 = input.LA(1);

                            if ( (LA107_0==IDENT) ) {
                                alt107=1;
                            }
                            switch (alt107) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1292:38: attribute ( ELLIPSIS )?
                                    {
                                    pushFollow(FOLLOW_attribute_in_attribute_list20527);
                                    attribute();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1292:48: ( ELLIPSIS )?
                                    int alt106=2;
                                    int LA106_0 = input.LA(1);

                                    if ( (LA106_0==ELLIPSIS) ) {
                                        alt106=1;
                                    }
                                    switch (alt106) {
                                        case 1 :
                                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1292:48: ELLIPSIS
                                            {
                                            match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_attribute_list20529); if (state.failed) return ;

                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("attribute_list", 68);
        }
        return ;
    }
    // $ANTLR end "attribute_list"



    // $ANTLR start "attribute"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1295:1: attribute : attribute_token ( attribute_argument_clouse )? ;
    public final void attribute() throws RecognitionException {
        traceIn("attribute", 69);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1295:10: ( attribute_token ( attribute_argument_clouse )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1296:9: attribute_token ( attribute_argument_clouse )?
            {
            pushFollow(FOLLOW_attribute_token_in_attribute20556);
            attribute_token();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1296:25: ( attribute_argument_clouse )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==LPAREN) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1296:25: attribute_argument_clouse
                    {
                    pushFollow(FOLLOW_attribute_argument_clouse_in_attribute20558);
                    attribute_argument_clouse();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("attribute", 69);
        }
        return ;
    }
    // $ANTLR end "attribute"



    // $ANTLR start "attribute_token"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1299:1: attribute_token : ( IDENT | attribute_scoped_token );
    public final void attribute_token() throws RecognitionException {
        traceIn("attribute_token", 70);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1299:16: ( IDENT | attribute_scoped_token )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==IDENT) ) {
                int LA111_1 = input.LA(2);

                if ( (LA111_1==ELLIPSIS||LA111_1==COLON||LA111_1==LPAREN||LA111_1==RSQUARE) ) {
                    alt111=1;
                }
                else if ( (LA111_1==SCOPE) ) {
                    alt111=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 111, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }
            switch (alt111) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1300:9: IDENT
                    {
                    match(input,IDENT,FOLLOW_IDENT_in_attribute_token20579); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1302:9: attribute_scoped_token
                    {
                    pushFollow(FOLLOW_attribute_scoped_token_in_attribute_token20595);
                    attribute_scoped_token();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("attribute_token", 70);
        }
        return ;
    }
    // $ANTLR end "attribute_token"



    // $ANTLR start "attribute_scoped_token"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1305:1: attribute_scoped_token : attribute_namespace SCOPE IDENT ;
    public final void attribute_scoped_token() throws RecognitionException {
        traceIn("attribute_scoped_token", 71);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1305:23: ( attribute_namespace SCOPE IDENT )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1306:9: attribute_namespace SCOPE IDENT
            {
            pushFollow(FOLLOW_attribute_namespace_in_attribute_scoped_token20615);
            attribute_namespace();

            state._fsp--;
            if (state.failed) return ;

            match(input,SCOPE,FOLLOW_SCOPE_in_attribute_scoped_token20617); if (state.failed) return ;

            match(input,IDENT,FOLLOW_IDENT_in_attribute_scoped_token20619); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("attribute_scoped_token", 71);
        }
        return ;
    }
    // $ANTLR end "attribute_scoped_token"



    // $ANTLR start "attribute_namespace"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1309:1: attribute_namespace : IDENT ;
    public final void attribute_namespace() throws RecognitionException {
        traceIn("attribute_namespace", 72);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1309:20: ( IDENT )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1310:9: IDENT
            {
            match(input,IDENT,FOLLOW_IDENT_in_attribute_namespace20639); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("attribute_namespace", 72);
        }
        return ;
    }
    // $ANTLR end "attribute_namespace"



    // $ANTLR start "attribute_argument_clouse"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1313:1: attribute_argument_clouse : LPAREN balanced_tokens RPAREN ;
    public final void attribute_argument_clouse() throws RecognitionException {
        traceIn("attribute_argument_clouse", 73);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1313:26: ( LPAREN balanced_tokens RPAREN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1314:9: LPAREN balanced_tokens RPAREN
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_attribute_argument_clouse20659); if (state.failed) return ;

            pushFollow(FOLLOW_balanced_tokens_in_attribute_argument_clouse20661);
            balanced_tokens();

            state._fsp--;
            if (state.failed) return ;

            match(input,RPAREN,FOLLOW_RPAREN_in_attribute_argument_clouse20663); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("attribute_argument_clouse", 73);
        }
        return ;
    }
    // $ANTLR end "attribute_argument_clouse"



    // $ANTLR start "balanced_tokens"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1317:1: balanced_tokens : ( balanced_token )+ ;
    public final void balanced_tokens() throws RecognitionException {
        traceIn("balanced_tokens", 74);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1317:16: ( ( balanced_token )+ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1318:9: ( balanced_token )+
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1318:9: ( balanced_token )+
            int cnt112=0;
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( ((LA112_0 >= ELLIPSIS && LA112_0 <= LPAREN)||LA112_0==LSQUARE||LA112_0==LCURLY||(LA112_0 >= EQUAL && LA112_0 <= LITERAL_typeid)) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1318:9: balanced_token
            	    {
            	    pushFollow(FOLLOW_balanced_token_in_balanced_tokens20683);
            	    balanced_token();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt112 >= 1 ) break loop112;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(112, input);
                        throw eee;
                }
                cnt112++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("balanced_tokens", 74);
        }
        return ;
    }
    // $ANTLR end "balanced_tokens"



    // $ANTLR start "balanced_token"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1321:1: balanced_token : ( LPAREN balanced_tokens RPAREN | LSQUARE balanced_tokens RSQUARE | LCURLY balanced_tokens RCURLY |~ ( RCURLY | LCURLY | LSQUARE | RSQUARE | LPAREN | RPAREN ) );
    public final void balanced_token() throws RecognitionException {
        traceIn("balanced_token", 75);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1321:15: ( LPAREN balanced_tokens RPAREN | LSQUARE balanced_tokens RSQUARE | LCURLY balanced_tokens RCURLY |~ ( RCURLY | LCURLY | LSQUARE | RSQUARE | LPAREN | RPAREN ) )
            int alt113=4;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==LPAREN) ) {
                alt113=1;
            }
            else if ( (LA113_0==LSQUARE) ) {
                alt113=2;
            }
            else if ( (LA113_0==LCURLY) ) {
                alt113=3;
            }
            else if ( ((LA113_0 >= ELLIPSIS && LA113_0 <= POINTERTO)||(LA113_0 >= EQUAL && LA113_0 <= LITERAL_typeid)) ) {
                alt113=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;

            }
            switch (alt113) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1322:9: LPAREN balanced_tokens RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_balanced_token20704); if (state.failed) return ;

                    pushFollow(FOLLOW_balanced_tokens_in_balanced_token20706);
                    balanced_tokens();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RPAREN,FOLLOW_RPAREN_in_balanced_token20708); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1324:9: LSQUARE balanced_tokens RSQUARE
                    {
                    match(input,LSQUARE,FOLLOW_LSQUARE_in_balanced_token20724); if (state.failed) return ;

                    pushFollow(FOLLOW_balanced_tokens_in_balanced_token20726);
                    balanced_tokens();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RSQUARE,FOLLOW_RSQUARE_in_balanced_token20728); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1326:9: LCURLY balanced_tokens RCURLY
                    {
                    match(input,LCURLY,FOLLOW_LCURLY_in_balanced_token20744); if (state.failed) return ;

                    pushFollow(FOLLOW_balanced_tokens_in_balanced_token20746);
                    balanced_tokens();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RCURLY,FOLLOW_RCURLY_in_balanced_token20748); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1328:9: ~ ( RCURLY | LCURLY | LSQUARE | RSQUARE | LPAREN | RPAREN )
                    {
                    if ( (input.LA(1) >= ELLIPSIS && input.LA(1) <= POINTERTO)||(input.LA(1) >= EQUAL && input.LA(1) <= LITERAL_typeid) ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("balanced_token", 75);
        }
        return ;
    }
    // $ANTLR end "balanced_token"



    // $ANTLR start "gnu_attribute_or_extension_specifiers"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1331:1: gnu_attribute_or_extension_specifiers : ( gnu_attribute_or_extension_specifier )+ ;
    public final void gnu_attribute_or_extension_specifiers() throws RecognitionException {
        traceIn("gnu_attribute_or_extension_specifiers", 76);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1331:38: ( ( gnu_attribute_or_extension_specifier )+ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1332:9: ( gnu_attribute_or_extension_specifier )+
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1332:9: ( gnu_attribute_or_extension_specifier )+
            int cnt114=0;
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( ((LA114_0 >= LITERAL___extension__ && LA114_0 <= LITERAL___attribute__)) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1332:9: gnu_attribute_or_extension_specifier
            	    {
            	    pushFollow(FOLLOW_gnu_attribute_or_extension_specifier_in_gnu_attribute_or_extension_specifiers20807);
            	    gnu_attribute_or_extension_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt114 >= 1 ) break loop114;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(114, input);
                        throw eee;
                }
                cnt114++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("gnu_attribute_or_extension_specifiers", 76);
        }
        return ;
    }
    // $ANTLR end "gnu_attribute_or_extension_specifiers"



    // $ANTLR start "gnu_attribute_or_extension_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1335:1: gnu_attribute_or_extension_specifier : ( gnu_attribute_specifier | LITERAL___extension__ );
    public final void gnu_attribute_or_extension_specifier() throws RecognitionException {
        traceIn("gnu_attribute_or_extension_specifier", 77);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1335:37: ( gnu_attribute_specifier | LITERAL___extension__ )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==LITERAL___attribute__) ) {
                alt115=1;
            }
            else if ( (LA115_0==LITERAL___extension__) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;

            }
            switch (alt115) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1336:9: gnu_attribute_specifier
                    {
                    pushFollow(FOLLOW_gnu_attribute_specifier_in_gnu_attribute_or_extension_specifier20828);
                    gnu_attribute_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1338:9: LITERAL___extension__
                    {
                    match(input,LITERAL___extension__,FOLLOW_LITERAL___extension___in_gnu_attribute_or_extension_specifier20844); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("gnu_attribute_or_extension_specifier", 77);
        }
        return ;
    }
    // $ANTLR end "gnu_attribute_or_extension_specifier"



    // $ANTLR start "gnu_attribute_specifiers"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1341:1: gnu_attribute_specifiers : ( gnu_attribute_specifier )+ ;
    public final void gnu_attribute_specifiers() throws RecognitionException {
        traceIn("gnu_attribute_specifiers", 78);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1341:25: ( ( gnu_attribute_specifier )+ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1342:9: ( gnu_attribute_specifier )+
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1342:9: ( gnu_attribute_specifier )+
            int cnt116=0;
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==LITERAL___attribute__) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1342:9: gnu_attribute_specifier
            	    {
            	    pushFollow(FOLLOW_gnu_attribute_specifier_in_gnu_attribute_specifiers20864);
            	    gnu_attribute_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt116 >= 1 ) break loop116;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(116, input);
                        throw eee;
                }
                cnt116++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("gnu_attribute_specifiers", 78);
        }
        return ;
    }
    // $ANTLR end "gnu_attribute_specifiers"



    // $ANTLR start "gnu_attribute_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1345:1: gnu_attribute_specifier : LITERAL___attribute__ LPAREN balanced_tokens RPAREN ;
    public final void gnu_attribute_specifier() throws RecognitionException {
        traceIn("gnu_attribute_specifier", 79);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1345:24: ( LITERAL___attribute__ LPAREN balanced_tokens RPAREN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1346:9: LITERAL___attribute__ LPAREN balanced_tokens RPAREN
            {
            match(input,LITERAL___attribute__,FOLLOW_LITERAL___attribute___in_gnu_attribute_specifier20885); if (state.failed) return ;

            match(input,LPAREN,FOLLOW_LPAREN_in_gnu_attribute_specifier20887); if (state.failed) return ;

            pushFollow(FOLLOW_balanced_tokens_in_gnu_attribute_specifier20889);
            balanced_tokens();

            state._fsp--;
            if (state.failed) return ;

            match(input,RPAREN,FOLLOW_RPAREN_in_gnu_attribute_specifier20891); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("gnu_attribute_specifier", 79);
        }
        return ;
    }
    // $ANTLR end "gnu_attribute_specifier"



    // $ANTLR start "init_declarator_list"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1349:1: init_declarator_list : init_declarator ( COMMA init_declarator )* ;
    public final void init_declarator_list() throws RecognitionException {
        traceIn("init_declarator_list", 80);
        if(state.backtracking == 0){action.init_declarator_list(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1351:5: ( init_declarator ( COMMA init_declarator )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1352:9: init_declarator ( COMMA init_declarator )*
            {
            pushFollow(FOLLOW_init_declarator_in_init_declarator_list21066);
            init_declarator();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1353:9: ( COMMA init_declarator )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==COMMA) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1354:13: COMMA init_declarator
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_init_declarator_list21090); if (state.failed) return ;

            	    if ( state.backtracking==0 ) {action.init_declarator_list(action.INIT_DECLARATOR_LIST__COMMA, input.LT(0));}

            	    pushFollow(FOLLOW_init_declarator_in_init_declarator_list21168);
            	    init_declarator();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("init_declarator_list", 80);
            if(state.backtracking == 0){action.end_init_declarator_list(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "init_declarator_list"



    // $ANTLR start "init_declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1370:1: init_declarator : greedy_declarator ( asm_statement )? ( initializer )? ;
    public final void init_declarator() throws RecognitionException {
        traceIn("init_declarator", 81);
        if(state.backtracking == 0){action.init_declarator(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1372:5: ( greedy_declarator ( asm_statement )? ( initializer )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1373:9: greedy_declarator ( asm_statement )? ( initializer )?
            {
            pushFollow(FOLLOW_greedy_declarator_in_init_declarator21506);
            greedy_declarator();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1373:27: ( asm_statement )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( ((LA118_0 >= LITERAL_asm && LA118_0 <= LITERAL___asm)) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1373:27: asm_statement
                    {
                    pushFollow(FOLLOW_asm_statement_in_init_declarator21508);
                    asm_statement();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1373:42: ( initializer )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==ASSIGNEQUAL||LA119_0==LPAREN||LA119_0==LCURLY) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1373:42: initializer
                    {
                    pushFollow(FOLLOW_initializer_in_init_declarator21511);
                    initializer();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("init_declarator", 81);
            if(state.backtracking == 0){action.end_init_declarator(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "init_declarator"



    // $ANTLR start "declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1403:1: declarator returns [declarator_type_t type] : ( ( ptr_operator )=> ptr_operator ( literal_restrict )? nested= declarator | noptr_declarator ) ;
    public final declarator_type_t declarator() throws RecognitionException {
        traceIn("declarator", 82);
        declarator_type_t type = null;


        declarator_type_t nested =null;


        if(state.backtracking == 0){action.declarator(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1405:5: ( ( ( ptr_operator )=> ptr_operator ( literal_restrict )? nested= declarator | noptr_declarator ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1406:5: ( ( ptr_operator )=> ptr_operator ( literal_restrict )? nested= declarator | noptr_declarator )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1406:5: ( ( ptr_operator )=> ptr_operator ( literal_restrict )? nested= declarator | noptr_declarator )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==STAR) && (synpred28_CXXParser())) {
                alt121=1;
            }
            else if ( (LA121_0==AMPERSAND) && (synpred28_CXXParser())) {
                alt121=1;
            }
            else if ( (LA121_0==AND) && (synpred28_CXXParser())) {
                alt121=1;
            }
            else if ( (LA121_0==SCOPE) ) {
                int LA121_4 = input.LA(2);

                if ( (synpred28_CXXParser()) ) {
                    alt121=1;
                }
                else if ( (true) ) {
                    alt121=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA121_0==IDENT) ) {
                int LA121_5 = input.LA(2);

                if ( (synpred28_CXXParser()) ) {
                    alt121=1;
                }
                else if ( (true) ) {
                    alt121=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 121, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA121_0==ELLIPSIS||LA121_0==LPAREN||LA121_0==TILDE||LA121_0==LITERAL_OPERATOR) ) {
                alt121=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;

            }
            switch (alt121) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1407:9: ( ptr_operator )=> ptr_operator ( literal_restrict )? nested= declarator
                    {
                    pushFollow(FOLLOW_ptr_operator_in_declarator21841);
                    ptr_operator();

                    state._fsp--;
                    if (state.failed) return type;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1408:26: ( literal_restrict )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( ((LA120_0 >= LITERAL_restrict && LA120_0 <= LITERAL___restrict)||LA120_0==LITERAL___restrict__) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1408:26: literal_restrict
                            {
                            pushFollow(FOLLOW_literal_restrict_in_declarator21843);
                            literal_restrict();

                            state._fsp--;
                            if (state.failed) return type;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_declarator_in_declarator21848);
                    nested=declarator();

                    state._fsp--;
                    if (state.failed) return type;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1413:9: noptr_declarator
                    {
                    pushFollow(FOLLOW_noptr_declarator_in_declarator21867);
                    noptr_declarator();

                    state._fsp--;
                    if (state.failed) return type;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("declarator", 82);
            if(state.backtracking == 0){action.end_declarator(input.LT(0));}
        }
        return type;
    }
    // $ANTLR end "declarator"



    // $ANTLR start "noptr_declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1420:1: noptr_declarator returns [declarator_type_t type] : ( declarator_id ( attribute_specifiers )? | LPAREN ( gnu_attribute_specifier )* declarator RPAREN ) ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE ( attribute_specifiers )? )* ( trailing_return_type )? ;
    public final declarator_type_t noptr_declarator() throws RecognitionException {
        traceIn("noptr_declarator", 83);
        declarator_type_t type = null;


        if(state.backtracking == 0){action.noptr_declarator(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1422:5: ( ( declarator_id ( attribute_specifiers )? | LPAREN ( gnu_attribute_specifier )* declarator RPAREN ) ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE ( attribute_specifiers )? )* ( trailing_return_type )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1423:9: ( declarator_id ( attribute_specifiers )? | LPAREN ( gnu_attribute_specifier )* declarator RPAREN ) ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE ( attribute_specifiers )? )* ( trailing_return_type )?
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1423:9: ( declarator_id ( attribute_specifiers )? | LPAREN ( gnu_attribute_specifier )* declarator RPAREN )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==ELLIPSIS||LA124_0==TILDE||LA124_0==SCOPE||LA124_0==IDENT||LA124_0==LITERAL_OPERATOR) ) {
                alt124=1;
            }
            else if ( (LA124_0==LPAREN) ) {
                alt124=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;

            }
            switch (alt124) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1424:13: declarator_id ( attribute_specifiers )?
                    {
                    pushFollow(FOLLOW_declarator_id_in_noptr_declarator22224);
                    declarator_id();

                    state._fsp--;
                    if (state.failed) return type;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1424:27: ( attribute_specifiers )?
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==LSQUARE) ) {
                        int LA122_1 = input.LA(2);

                        if ( (LA122_1==LSQUARE) ) {
                            int LA122_4 = input.LA(3);

                            if ( (LA122_4==IDENT) ) {
                                switch ( input.LA(4) ) {
                                    case COLON:
                                    case LPAREN:
                                    case SCOPE:
                                        {
                                        alt122=1;
                                        }
                                        break;
                                    case ELLIPSIS:
                                        {
                                        int LA122_7 = input.LA(5);

                                        if ( (LA122_7==COLON) ) {
                                            alt122=1;
                                        }
                                        else if ( (LA122_7==RSQUARE) ) {
                                            int LA122_6 = input.LA(6);

                                            if ( (LA122_6==RSQUARE) ) {
                                                alt122=1;
                                            }
                                        }
                                        }
                                        break;
                                    case RSQUARE:
                                        {
                                        int LA122_6 = input.LA(5);

                                        if ( (LA122_6==RSQUARE) ) {
                                            alt122=1;
                                        }
                                        }
                                        break;
                                }

                            }
                            else if ( (LA122_4==RSQUARE) ) {
                                int LA122_6 = input.LA(4);

                                if ( (LA122_6==RSQUARE) ) {
                                    alt122=1;
                                }
                            }
                        }
                    }
                    else if ( ((LA122_0 >= LITERAL___extension__ && LA122_0 <= LITERAL___attribute__)||LA122_0==LITERAL_alignas) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1424:27: attribute_specifiers
                            {
                            pushFollow(FOLLOW_attribute_specifiers_in_noptr_declarator22226);
                            attribute_specifiers();

                            state._fsp--;
                            if (state.failed) return type;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1427:13: LPAREN ( gnu_attribute_specifier )* declarator RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_noptr_declarator22252); if (state.failed) return type;

                    if ( state.backtracking==0 ) {action.noptr_declarator(action.NOPTR_DECLARATOR__LPAREN, input.LT(0));}

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1428:13: ( gnu_attribute_specifier )*
                    loop123:
                    do {
                        int alt123=2;
                        int LA123_0 = input.LA(1);

                        if ( (LA123_0==LITERAL___attribute__) ) {
                            alt123=1;
                        }


                        switch (alt123) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1428:13: gnu_attribute_specifier
                    	    {
                    	    pushFollow(FOLLOW_gnu_attribute_specifier_in_noptr_declarator22329);
                    	    gnu_attribute_specifier();

                    	    state._fsp--;
                    	    if (state.failed) return type;

                    	    }
                    	    break;

                    	default :
                    	    break loop123;
                        }
                    } while (true);


                    pushFollow(FOLLOW_declarator_in_noptr_declarator22344);
                    declarator();

                    state._fsp--;
                    if (state.failed) return type;

                    match(input,RPAREN,FOLLOW_RPAREN_in_noptr_declarator22359); if (state.failed) return type;

                    if ( state.backtracking==0 ) {action.noptr_declarator(action.NOPTR_DECLARATOR__RPAREN, input.LT(0));}

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1433:9: ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE ( attribute_specifiers )? )*
            loop127:
            do {
                int alt127=3;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==LPAREN) ) {
                    alt127=1;
                }
                else if ( (LA127_0==LSQUARE) ) {
                    alt127=2;
                }


                switch (alt127) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1434:13: parameters_and_qualifiers
            	    {
            	    pushFollow(FOLLOW_parameters_and_qualifiers_in_noptr_declarator22458);
            	    parameters_and_qualifiers();

            	    state._fsp--;
            	    if (state.failed) return type;

            	    }
            	    break;
            	case 2 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1437:13: LSQUARE ( constant_expression )? RSQUARE ( attribute_specifiers )?
            	    {
            	    match(input,LSQUARE,FOLLOW_LSQUARE_in_noptr_declarator22484); if (state.failed) return type;

            	    if ( state.backtracking==0 ) {action.noptr_declarator(action.NOPTR_DECLARATOR__LSQUARE, input.LT(0));}

            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1438:13: ( constant_expression )?
            	    int alt125=2;
            	    int LA125_0 = input.LA(1);

            	    if ( (LA125_0==QUESTIONMARK||LA125_0==LPAREN||LA125_0==LSQUARE||LA125_0==PLUS||(LA125_0 >= PLUSPLUS && LA125_0 <= MINUS)||(LA125_0 >= MINUSMINUS && LA125_0 <= STAR)||LA125_0==NOT||LA125_0==AMPERSAND||LA125_0==TILDE||LA125_0==SCOPE||LA125_0==FLOATONE||(LA125_0 >= HEXADECIMALINT && LA125_0 <= DECIMALINT)||(LA125_0 >= CHAR_LITERAL && LA125_0 <= STRING_LITERAL)||(LA125_0 >= NUMBER && LA125_0 <= IDENT)||LA125_0==LITERAL_OPERATOR||(LA125_0 >= LITERAL_typeof && LA125_0 <= LITERAL___typeof)||(LA125_0 >= LITERAL_typename && LA125_0 <= LITERAL_auto)||LA125_0==LITERAL_const_cast||(LA125_0 >= LITERAL_char && LA125_0 <= LITERAL_signed)||LA125_0==LITERAL_unsigned||(LA125_0 >= LITERAL_float && LA125_0 <= LITERAL_void)||(LA125_0 >= LITERAL_this && LA125_0 <= LITERAL_false)||(LA125_0 >= LITERAL_sizeof && LA125_0 <= LITERAL_new)||LA125_0==LITERAL_delete||LA125_0==LITERAL_decltype||(LA125_0 >= LITERAL_char16_t && LA125_0 <= LITERAL___decltype)||LA125_0==LITERAL___null||LA125_0==LITERAL___is_class||LA125_0==LITERAL___is_pod||(LA125_0 >= LITERAL___has_nothrow_assign && LA125_0 <= LITERAL___builtin_va_list)||LA125_0==LITERAL_typeid) ) {
            	        alt125=1;
            	    }
            	    switch (alt125) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1438:13: constant_expression
            	            {
            	            pushFollow(FOLLOW_constant_expression_in_noptr_declarator22560);
            	            constant_expression();

            	            state._fsp--;
            	            if (state.failed) return type;

            	            }
            	            break;

            	    }


            	    match(input,RSQUARE,FOLLOW_RSQUARE_in_noptr_declarator22576); if (state.failed) return type;

            	    if ( state.backtracking==0 ) {action.noptr_declarator(action.NOPTR_DECLARATOR__RSQUARE, input.LT(0));}

            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1440:13: ( attribute_specifiers )?
            	    int alt126=2;
            	    int LA126_0 = input.LA(1);

            	    if ( (LA126_0==LSQUARE) ) {
            	        int LA126_1 = input.LA(2);

            	        if ( (LA126_1==LSQUARE) ) {
            	            int LA126_4 = input.LA(3);

            	            if ( (LA126_4==IDENT) ) {
            	                switch ( input.LA(4) ) {
            	                    case COLON:
            	                    case LPAREN:
            	                    case SCOPE:
            	                        {
            	                        alt126=1;
            	                        }
            	                        break;
            	                    case ELLIPSIS:
            	                        {
            	                        int LA126_7 = input.LA(5);

            	                        if ( (LA126_7==COLON) ) {
            	                            alt126=1;
            	                        }
            	                        else if ( (LA126_7==RSQUARE) ) {
            	                            int LA126_6 = input.LA(6);

            	                            if ( (LA126_6==RSQUARE) ) {
            	                                alt126=1;
            	                            }
            	                        }
            	                        }
            	                        break;
            	                    case RSQUARE:
            	                        {
            	                        int LA126_6 = input.LA(5);

            	                        if ( (LA126_6==RSQUARE) ) {
            	                            alt126=1;
            	                        }
            	                        }
            	                        break;
            	                }

            	            }
            	            else if ( (LA126_4==RSQUARE) ) {
            	                int LA126_6 = input.LA(4);

            	                if ( (LA126_6==RSQUARE) ) {
            	                    alt126=1;
            	                }
            	            }
            	        }
            	    }
            	    else if ( ((LA126_0 >= LITERAL___extension__ && LA126_0 <= LITERAL___attribute__)||LA126_0==LITERAL_alignas) ) {
            	        alt126=1;
            	    }
            	    switch (alt126) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1440:13: attribute_specifiers
            	            {
            	            pushFollow(FOLLOW_attribute_specifiers_in_noptr_declarator22652);
            	            attribute_specifiers();

            	            state._fsp--;
            	            if (state.failed) return type;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1443:9: ( trailing_return_type )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==LITERAL_POINTERTO) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1443:9: trailing_return_type
                    {
                    pushFollow(FOLLOW_trailing_return_type_in_noptr_declarator22675);
                    trailing_return_type();

                    state._fsp--;
                    if (state.failed) return type;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("noptr_declarator", 83);
            if(state.backtracking == 0){action.end_noptr_declarator(input.LT(0));}
        }
        return type;
    }
    // $ANTLR end "noptr_declarator"



    // $ANTLR start "trailing_return_type"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1447:1: trailing_return_type : LITERAL_POINTERTO ( trailing_type_specifier )+ ( ( abstract_declarator )=> abstract_declarator )? ;
    public final void trailing_return_type() throws RecognitionException {
        traceIn("trailing_return_type", 84);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1447:21: ( LITERAL_POINTERTO ( trailing_type_specifier )+ ( ( abstract_declarator )=> abstract_declarator )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1448:5: LITERAL_POINTERTO ( trailing_type_specifier )+ ( ( abstract_declarator )=> abstract_declarator )?
            {
            match(input,LITERAL_POINTERTO,FOLLOW_LITERAL_POINTERTO_in_trailing_return_type22819); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1448:23: ( trailing_type_specifier )+
            int cnt129=0;
            loop129:
            do {
                int alt129=2;
                switch ( input.LA(1) ) {
                case SCOPE:
                    {
                    int LA129_6 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt129=1;
                    }


                    }
                    break;
                case IDENT:
                    {
                    int LA129_7 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt129=1;
                    }


                    }
                    break;
                case LITERAL_typeof:
                case LITERAL___typeof__:
                case LITERAL___typeof:
                case LITERAL_enum:
                case LITERAL_typename:
                case LITERAL_auto:
                case LITERAL_const:
                case LITERAL___const__:
                case LITERAL___const:
                case LITERAL_volatile:
                case LITERAL_char:
                case LITERAL_wchar_t:
                case LITERAL_bool:
                case LITERAL_short:
                case LITERAL_int:
                case LITERAL_long:
                case LITERAL_signed:
                case LITERAL_unsigned:
                case LITERAL_float:
                case LITERAL_double:
                case LITERAL_void:
                case LITERAL_class:
                case LITERAL_struct:
                case LITERAL_union:
                case LITERAL_decltype:
                case LITERAL_char16_t:
                case LITERAL_char32_t:
                case LITERAL___decltype:
                case LITERAL___builtin_va_list:
                    {
                    alt129=1;
                    }
                    break;

                }

                switch (alt129) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1448:23: trailing_type_specifier
            	    {
            	    pushFollow(FOLLOW_trailing_type_specifier_in_trailing_return_type22821);
            	    trailing_type_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt129 >= 1 ) break loop129;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(129, input);
                        throw eee;
                }
                cnt129++;
            } while (true);


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1449:5: ( ( abstract_declarator )=> abstract_declarator )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==LPAREN) && (synpred29_CXXParser())) {
                alt130=1;
            }
            else if ( (LA130_0==LSQUARE) && (synpred29_CXXParser())) {
                alt130=1;
            }
            else if ( (LA130_0==STAR) && (synpred29_CXXParser())) {
                alt130=1;
            }
            else if ( (LA130_0==AMPERSAND) && (synpred29_CXXParser())) {
                alt130=1;
            }
            else if ( (LA130_0==AND) && (synpred29_CXXParser())) {
                alt130=1;
            }
            else if ( (LA130_0==SCOPE) && (synpred29_CXXParser())) {
                alt130=1;
            }
            else if ( (LA130_0==IDENT) && (synpred29_CXXParser())) {
                alt130=1;
            }
            else if ( (LA130_0==ELLIPSIS) ) {
                int LA130_8 = input.LA(2);

                if ( (synpred29_CXXParser()) ) {
                    alt130=1;
                }
            }
            switch (alt130) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1449:6: ( abstract_declarator )=> abstract_declarator
                    {
                    pushFollow(FOLLOW_abstract_declarator_in_trailing_return_type22836);
                    abstract_declarator();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("trailing_return_type", 84);
        }
        return ;
    }
    // $ANTLR end "trailing_return_type"



    // $ANTLR start "function_declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1457:1: function_declarator returns [declarator_type_t type] : ( ( constructor_declarator )=> constructor_declarator | declarator ) ;
    public final declarator_type_t function_declarator() throws RecognitionException {
        traceIn("function_declarator", 85);
        declarator_type_t type = null;


        if(state.backtracking == 0){action.function_declarator(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1459:5: ( ( ( constructor_declarator )=> constructor_declarator | declarator ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1460:5: ( ( constructor_declarator )=> constructor_declarator | declarator )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1460:5: ( ( constructor_declarator )=> constructor_declarator | declarator )
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==LPAREN) ) {
                int LA131_1 = input.LA(2);

                if ( (synpred30_CXXParser()) ) {
                    alt131=1;
                }
                else if ( (true) ) {
                    alt131=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 131, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA131_0==ELLIPSIS||LA131_0==STAR||LA131_0==AND||LA131_0==AMPERSAND||LA131_0==TILDE||LA131_0==SCOPE||LA131_0==IDENT||LA131_0==LITERAL_OPERATOR) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }
            switch (alt131) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1461:9: ( constructor_declarator )=> constructor_declarator
                    {
                    pushFollow(FOLLOW_constructor_declarator_in_function_declarator23046);
                    constructor_declarator();

                    state._fsp--;
                    if (state.failed) return type;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1464:9: declarator
                    {
                    pushFollow(FOLLOW_declarator_in_function_declarator23063);
                    declarator();

                    state._fsp--;
                    if (state.failed) return type;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("function_declarator", 85);
            if(state.backtracking == 0){action.end_function_declarator(input.LT(0));}
        }
        return type;
    }
    // $ANTLR end "function_declarator"



    // $ANTLR start "constructor_declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1469:1: constructor_declarator returns [declarator_type_t type] : parameters_and_qualifiers ;
    public final declarator_type_t constructor_declarator() throws RecognitionException {
        traceIn("constructor_declarator", 86);
        declarator_type_t type = null;


        if(state.backtracking == 0){action.constructor_declarator(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1471:5: ( parameters_and_qualifiers )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1472:9: parameters_and_qualifiers
            {
            pushFollow(FOLLOW_parameters_and_qualifiers_in_constructor_declarator23404);
            parameters_and_qualifiers();

            state._fsp--;
            if (state.failed) return type;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("constructor_declarator", 86);
            if(state.backtracking == 0){action.end_constructor_declarator(input.LT(0));}
        }
        return type;
    }
    // $ANTLR end "constructor_declarator"



    // $ANTLR start "abstract_declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1497:1: abstract_declarator returns [declarator_type_t type] : ( noptr_abstract_declarator ( trailing_return_type )? | ptr_operator ( literal_restrict )? ( ( abstract_declarator )=> abstract_declarator )? | ELLIPSIS ) ;
    public final declarator_type_t abstract_declarator() throws RecognitionException {
        traceIn("abstract_declarator", 87);
        declarator_type_t type = null;


        if(state.backtracking == 0){action.function_declarator(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1499:5: ( ( noptr_abstract_declarator ( trailing_return_type )? | ptr_operator ( literal_restrict )? ( ( abstract_declarator )=> abstract_declarator )? | ELLIPSIS ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1500:5: ( noptr_abstract_declarator ( trailing_return_type )? | ptr_operator ( literal_restrict )? ( ( abstract_declarator )=> abstract_declarator )? | ELLIPSIS )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1500:5: ( noptr_abstract_declarator ( trailing_return_type )? | ptr_operator ( literal_restrict )? ( ( abstract_declarator )=> abstract_declarator )? | ELLIPSIS )
            int alt135=3;
            switch ( input.LA(1) ) {
            case LPAREN:
            case LSQUARE:
                {
                alt135=1;
                }
                break;
            case STAR:
            case AND:
            case AMPERSAND:
            case SCOPE:
            case IDENT:
                {
                alt135=2;
                }
                break;
            case ELLIPSIS:
                {
                alt135=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;

            }

            switch (alt135) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1501:9: noptr_abstract_declarator ( trailing_return_type )?
                    {
                    pushFollow(FOLLOW_noptr_abstract_declarator_in_abstract_declarator23732);
                    noptr_abstract_declarator();

                    state._fsp--;
                    if (state.failed) return type;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1503:9: ( trailing_return_type )?
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==LITERAL_POINTERTO) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1503:9: trailing_return_type
                            {
                            pushFollow(FOLLOW_trailing_return_type_in_abstract_declarator23752);
                            trailing_return_type();

                            state._fsp--;
                            if (state.failed) return type;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1505:9: ptr_operator ( literal_restrict )? ( ( abstract_declarator )=> abstract_declarator )?
                    {
                    pushFollow(FOLLOW_ptr_operator_in_abstract_declarator23769);
                    ptr_operator();

                    state._fsp--;
                    if (state.failed) return type;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1505:22: ( literal_restrict )?
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( ((LA133_0 >= LITERAL_restrict && LA133_0 <= LITERAL___restrict)||LA133_0==LITERAL___restrict__) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1505:22: literal_restrict
                            {
                            pushFollow(FOLLOW_literal_restrict_in_abstract_declarator23771);
                            literal_restrict();

                            state._fsp--;
                            if (state.failed) return type;

                            }
                            break;

                    }


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1505:40: ( ( abstract_declarator )=> abstract_declarator )?
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==LPAREN) && (synpred31_CXXParser())) {
                        alt134=1;
                    }
                    else if ( (LA134_0==LSQUARE) && (synpred31_CXXParser())) {
                        alt134=1;
                    }
                    else if ( (LA134_0==STAR) && (synpred31_CXXParser())) {
                        alt134=1;
                    }
                    else if ( (LA134_0==AMPERSAND) && (synpred31_CXXParser())) {
                        alt134=1;
                    }
                    else if ( (LA134_0==AND) && (synpred31_CXXParser())) {
                        alt134=1;
                    }
                    else if ( (LA134_0==SCOPE) && (synpred31_CXXParser())) {
                        alt134=1;
                    }
                    else if ( (LA134_0==IDENT) && (synpred31_CXXParser())) {
                        alt134=1;
                    }
                    else if ( (LA134_0==ELLIPSIS) ) {
                        int LA134_8 = input.LA(2);

                        if ( (synpred31_CXXParser()) ) {
                            alt134=1;
                        }
                    }
                    switch (alt134) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1505:41: ( abstract_declarator )=> abstract_declarator
                            {
                            pushFollow(FOLLOW_abstract_declarator_in_abstract_declarator23781);
                            abstract_declarator();

                            state._fsp--;
                            if (state.failed) return type;

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1510:9: ELLIPSIS
                    {
                    match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_abstract_declarator23803); if (state.failed) return type;

                    if ( state.backtracking==0 ) {action.function_declarator(action.FUNCTION_DECLARATOR__ELLIPSIS, input.LT(0));}

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("abstract_declarator", 87);
            if(state.backtracking == 0){action.end_function_declarator(input.LT(0));}
        }
        return type;
    }
    // $ANTLR end "abstract_declarator"



    // $ANTLR start "noptr_abstract_declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1515:1: noptr_abstract_declarator returns [declarator_type_t type] : ( ( LPAREN abstract_declarator RPAREN )=> LPAREN abstract_declarator RPAREN ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )* | ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )+ ) ;
    public final declarator_type_t noptr_abstract_declarator() throws RecognitionException {
        traceIn("noptr_abstract_declarator", 88);
        declarator_type_t type = null;


        if(state.backtracking == 0){action.noptr_abstract_declarator(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1517:5: ( ( ( LPAREN abstract_declarator RPAREN )=> LPAREN abstract_declarator RPAREN ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )* | ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )+ ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1518:5: ( ( LPAREN abstract_declarator RPAREN )=> LPAREN abstract_declarator RPAREN ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )* | ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )+ )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1518:5: ( ( LPAREN abstract_declarator RPAREN )=> LPAREN abstract_declarator RPAREN ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )* | ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )+ )
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==LPAREN) ) {
                int LA140_1 = input.LA(2);

                if ( (synpred32_CXXParser()) ) {
                    alt140=1;
                }
                else if ( (true) ) {
                    alt140=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 140, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA140_0==LSQUARE) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;

            }
            switch (alt140) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1519:9: ( LPAREN abstract_declarator RPAREN )=> LPAREN abstract_declarator RPAREN ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )*
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_noptr_abstract_declarator24235); if (state.failed) return type;

                    if ( state.backtracking==0 ) {action.noptr_abstract_declarator(action.NOPTR_ABSTRACT_DECLARATOR__LPAREN, input.LT(0));}

                    pushFollow(FOLLOW_abstract_declarator_in_noptr_abstract_declarator24312);
                    abstract_declarator();

                    state._fsp--;
                    if (state.failed) return type;

                    match(input,RPAREN,FOLLOW_RPAREN_in_noptr_abstract_declarator24327); if (state.failed) return type;

                    if ( state.backtracking==0 ) {action.noptr_abstract_declarator(action.NOPTR_ABSTRACT_DECLARATOR__RPAREN, input.LT(0));}

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1523:13: ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )*
                    loop137:
                    do {
                        int alt137=3;
                        int LA137_0 = input.LA(1);

                        if ( (LA137_0==LPAREN) ) {
                            alt137=1;
                        }
                        else if ( (LA137_0==LSQUARE) ) {
                            alt137=2;
                        }


                        switch (alt137) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1524:17: parameters_and_qualifiers
                    	    {
                    	    pushFollow(FOLLOW_parameters_and_qualifiers_in_noptr_abstract_declarator24423);
                    	    parameters_and_qualifiers();

                    	    state._fsp--;
                    	    if (state.failed) return type;

                    	    }
                    	    break;
                    	case 2 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1526:17: LSQUARE ( constant_expression )? RSQUARE
                    	    {
                    	    match(input,LSQUARE,FOLLOW_LSQUARE_in_noptr_abstract_declarator24457); if (state.failed) return type;

                    	    if ( state.backtracking==0 ) {action.noptr_abstract_declarator(action.NOPTR_ABSTRACT_DECLARATOR__LSQUARE, input.LT(0));}

                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1527:17: ( constant_expression )?
                    	    int alt136=2;
                    	    int LA136_0 = input.LA(1);

                    	    if ( (LA136_0==QUESTIONMARK||LA136_0==LPAREN||LA136_0==LSQUARE||LA136_0==PLUS||(LA136_0 >= PLUSPLUS && LA136_0 <= MINUS)||(LA136_0 >= MINUSMINUS && LA136_0 <= STAR)||LA136_0==NOT||LA136_0==AMPERSAND||LA136_0==TILDE||LA136_0==SCOPE||LA136_0==FLOATONE||(LA136_0 >= HEXADECIMALINT && LA136_0 <= DECIMALINT)||(LA136_0 >= CHAR_LITERAL && LA136_0 <= STRING_LITERAL)||(LA136_0 >= NUMBER && LA136_0 <= IDENT)||LA136_0==LITERAL_OPERATOR||(LA136_0 >= LITERAL_typeof && LA136_0 <= LITERAL___typeof)||(LA136_0 >= LITERAL_typename && LA136_0 <= LITERAL_auto)||LA136_0==LITERAL_const_cast||(LA136_0 >= LITERAL_char && LA136_0 <= LITERAL_signed)||LA136_0==LITERAL_unsigned||(LA136_0 >= LITERAL_float && LA136_0 <= LITERAL_void)||(LA136_0 >= LITERAL_this && LA136_0 <= LITERAL_false)||(LA136_0 >= LITERAL_sizeof && LA136_0 <= LITERAL_new)||LA136_0==LITERAL_delete||LA136_0==LITERAL_decltype||(LA136_0 >= LITERAL_char16_t && LA136_0 <= LITERAL___decltype)||LA136_0==LITERAL___null||LA136_0==LITERAL___is_class||LA136_0==LITERAL___is_pod||(LA136_0 >= LITERAL___has_nothrow_assign && LA136_0 <= LITERAL___builtin_va_list)||LA136_0==LITERAL_typeid) ) {
                    	        alt136=1;
                    	    }
                    	    switch (alt136) {
                    	        case 1 :
                    	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1527:17: constant_expression
                    	            {
                    	            pushFollow(FOLLOW_constant_expression_in_noptr_abstract_declarator24533);
                    	            constant_expression();

                    	            state._fsp--;
                    	            if (state.failed) return type;

                    	            }
                    	            break;

                    	    }


                    	    match(input,RSQUARE,FOLLOW_RSQUARE_in_noptr_abstract_declarator24553); if (state.failed) return type;

                    	    if ( state.backtracking==0 ) {action.noptr_abstract_declarator(action.NOPTR_ABSTRACT_DECLARATOR__RSQUARE, input.LT(0));}

                    	    }
                    	    break;

                    	default :
                    	    break loop137;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1531:9: ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )+
                    {
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1531:9: ( parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )+
                    int cnt139=0;
                    loop139:
                    do {
                        int alt139=3;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==LPAREN) ) {
                            alt139=1;
                        }
                        else if ( (LA139_0==LSQUARE) ) {
                            alt139=2;
                        }


                        switch (alt139) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1532:13: parameters_and_qualifiers
                    	    {
                    	    pushFollow(FOLLOW_parameters_and_qualifiers_in_noptr_abstract_declarator24653);
                    	    parameters_and_qualifiers();

                    	    state._fsp--;
                    	    if (state.failed) return type;

                    	    }
                    	    break;
                    	case 2 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1534:13: LSQUARE ( constant_expression )? RSQUARE
                    	    {
                    	    match(input,LSQUARE,FOLLOW_LSQUARE_in_noptr_abstract_declarator24674); if (state.failed) return type;

                    	    if ( state.backtracking==0 ) {action.noptr_abstract_declarator(action.NOPTR_ABSTRACT_DECLARATOR__LSQUARE, input.LT(0));}

                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1535:13: ( constant_expression )?
                    	    int alt138=2;
                    	    int LA138_0 = input.LA(1);

                    	    if ( (LA138_0==QUESTIONMARK||LA138_0==LPAREN||LA138_0==LSQUARE||LA138_0==PLUS||(LA138_0 >= PLUSPLUS && LA138_0 <= MINUS)||(LA138_0 >= MINUSMINUS && LA138_0 <= STAR)||LA138_0==NOT||LA138_0==AMPERSAND||LA138_0==TILDE||LA138_0==SCOPE||LA138_0==FLOATONE||(LA138_0 >= HEXADECIMALINT && LA138_0 <= DECIMALINT)||(LA138_0 >= CHAR_LITERAL && LA138_0 <= STRING_LITERAL)||(LA138_0 >= NUMBER && LA138_0 <= IDENT)||LA138_0==LITERAL_OPERATOR||(LA138_0 >= LITERAL_typeof && LA138_0 <= LITERAL___typeof)||(LA138_0 >= LITERAL_typename && LA138_0 <= LITERAL_auto)||LA138_0==LITERAL_const_cast||(LA138_0 >= LITERAL_char && LA138_0 <= LITERAL_signed)||LA138_0==LITERAL_unsigned||(LA138_0 >= LITERAL_float && LA138_0 <= LITERAL_void)||(LA138_0 >= LITERAL_this && LA138_0 <= LITERAL_false)||(LA138_0 >= LITERAL_sizeof && LA138_0 <= LITERAL_new)||LA138_0==LITERAL_delete||LA138_0==LITERAL_decltype||(LA138_0 >= LITERAL_char16_t && LA138_0 <= LITERAL___decltype)||LA138_0==LITERAL___null||LA138_0==LITERAL___is_class||LA138_0==LITERAL___is_pod||(LA138_0 >= LITERAL___has_nothrow_assign && LA138_0 <= LITERAL___builtin_va_list)||LA138_0==LITERAL_typeid) ) {
                    	        alt138=1;
                    	    }
                    	    switch (alt138) {
                    	        case 1 :
                    	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1535:13: constant_expression
                    	            {
                    	            pushFollow(FOLLOW_constant_expression_in_noptr_abstract_declarator24750);
                    	            constant_expression();

                    	            state._fsp--;
                    	            if (state.failed) return type;

                    	            }
                    	            break;

                    	    }


                    	    match(input,RSQUARE,FOLLOW_RSQUARE_in_noptr_abstract_declarator24766); if (state.failed) return type;

                    	    if ( state.backtracking==0 ) {action.noptr_abstract_declarator(action.NOPTR_ABSTRACT_DECLARATOR__RSQUARE, input.LT(0));}

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt139 >= 1 ) break loop139;
                    	    if (state.backtracking>0) {state.failed=true; return type;}
                                EarlyExitException eee =
                                    new EarlyExitException(139, input);
                                throw eee;
                        }
                        cnt139++;
                    } while (true);


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("noptr_abstract_declarator", 88);
            if(state.backtracking == 0){action.end_noptr_abstract_declarator(input.LT(0));}
        }
        return type;
    }
    // $ANTLR end "noptr_abstract_declarator"



    // $ANTLR start "universal_declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1542:1: universal_declarator returns [declarator_type_t type] : ( options {backtrack=true; } : declarator | abstract_declarator ) ;
    public final declarator_type_t universal_declarator() throws RecognitionException {
        traceIn("universal_declarator", 89);
        declarator_type_t type = null;


        if(state.backtracking == 0){action.universal_declarator(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1544:5: ( ( options {backtrack=true; } : declarator | abstract_declarator ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1545:5: ( options {backtrack=true; } : declarator | abstract_declarator )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1545:5: ( options {backtrack=true; } : declarator | abstract_declarator )
            int alt141=2;
            switch ( input.LA(1) ) {
            case STAR:
                {
                int LA141_1 = input.LA(2);

                if ( (synpred33_CXXParser()) ) {
                    alt141=1;
                }
                else if ( (true) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 1, input);

                    throw nvae;

                }
                }
                break;
            case AMPERSAND:
                {
                int LA141_2 = input.LA(2);

                if ( (synpred33_CXXParser()) ) {
                    alt141=1;
                }
                else if ( (true) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 2, input);

                    throw nvae;

                }
                }
                break;
            case AND:
                {
                int LA141_3 = input.LA(2);

                if ( (synpred33_CXXParser()) ) {
                    alt141=1;
                }
                else if ( (true) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 3, input);

                    throw nvae;

                }
                }
                break;
            case SCOPE:
                {
                int LA141_4 = input.LA(2);

                if ( (synpred33_CXXParser()) ) {
                    alt141=1;
                }
                else if ( (true) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 4, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
                {
                int LA141_5 = input.LA(2);

                if ( (synpred33_CXXParser()) ) {
                    alt141=1;
                }
                else if ( (true) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 5, input);

                    throw nvae;

                }
                }
                break;
            case ELLIPSIS:
                {
                int LA141_6 = input.LA(2);

                if ( (synpred33_CXXParser()) ) {
                    alt141=1;
                }
                else if ( (true) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 6, input);

                    throw nvae;

                }
                }
                break;
            case TILDE:
            case LITERAL_OPERATOR:
                {
                alt141=1;
                }
                break;
            case LPAREN:
                {
                int LA141_9 = input.LA(2);

                if ( (synpred33_CXXParser()) ) {
                    alt141=1;
                }
                else if ( (true) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 9, input);

                    throw nvae;

                }
                }
                break;
            case LSQUARE:
                {
                alt141=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;

            }

            switch (alt141) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1546:9: declarator
                    {
                    pushFollow(FOLLOW_declarator_in_universal_declarator25196);
                    declarator();

                    state._fsp--;
                    if (state.failed) return type;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1548:9: abstract_declarator
                    {
                    pushFollow(FOLLOW_abstract_declarator_in_universal_declarator25213);
                    abstract_declarator();

                    state._fsp--;
                    if (state.failed) return type;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("universal_declarator", 89);
            if(state.backtracking == 0){action.end_universal_declarator(input.LT(0));}
        }
        return type;
    }
    // $ANTLR end "universal_declarator"



    // $ANTLR start "greedy_declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1553:1: greedy_declarator returns [declarator_type_t type] : ( ( ptr_operator )=> ptr_operator ( gnu_attribute_specifier )* decl= greedy_declarator | greedy_nonptr_declarator ) ;
    public final declarator_type_t greedy_declarator() throws RecognitionException {
        traceIn("greedy_declarator", 90);
        declarator_type_t type = null;


        declarator_type_t decl =null;


        if(state.backtracking == 0){action.greedy_declarator(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1555:5: ( ( ( ptr_operator )=> ptr_operator ( gnu_attribute_specifier )* decl= greedy_declarator | greedy_nonptr_declarator ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1556:5: ( ( ptr_operator )=> ptr_operator ( gnu_attribute_specifier )* decl= greedy_declarator | greedy_nonptr_declarator )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1556:5: ( ( ptr_operator )=> ptr_operator ( gnu_attribute_specifier )* decl= greedy_declarator | greedy_nonptr_declarator )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==STAR) && (synpred34_CXXParser())) {
                alt143=1;
            }
            else if ( (LA143_0==AMPERSAND) && (synpred34_CXXParser())) {
                alt143=1;
            }
            else if ( (LA143_0==AND) && (synpred34_CXXParser())) {
                alt143=1;
            }
            else if ( (LA143_0==SCOPE) ) {
                int LA143_4 = input.LA(2);

                if ( (synpred34_CXXParser()) ) {
                    alt143=1;
                }
                else if ( (true) ) {
                    alt143=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 143, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA143_0==IDENT) ) {
                int LA143_5 = input.LA(2);

                if ( (synpred34_CXXParser()) ) {
                    alt143=1;
                }
                else if ( (true) ) {
                    alt143=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return type;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 143, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA143_0==ELLIPSIS||LA143_0==LPAREN||LA143_0==TILDE||LA143_0==LITERAL_OPERATOR) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;

            }
            switch (alt143) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1557:9: ( ptr_operator )=> ptr_operator ( gnu_attribute_specifier )* decl= greedy_declarator
                    {
                    pushFollow(FOLLOW_ptr_operator_in_greedy_declarator25505);
                    ptr_operator();

                    state._fsp--;
                    if (state.failed) return type;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1558:26: ( gnu_attribute_specifier )*
                    loop142:
                    do {
                        int alt142=2;
                        int LA142_0 = input.LA(1);

                        if ( (LA142_0==LITERAL___attribute__) ) {
                            alt142=1;
                        }


                        switch (alt142) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1558:26: gnu_attribute_specifier
                    	    {
                    	    pushFollow(FOLLOW_gnu_attribute_specifier_in_greedy_declarator25507);
                    	    gnu_attribute_specifier();

                    	    state._fsp--;
                    	    if (state.failed) return type;

                    	    }
                    	    break;

                    	default :
                    	    break loop142;
                        }
                    } while (true);


                    pushFollow(FOLLOW_greedy_declarator_in_greedy_declarator25512);
                    decl=greedy_declarator();

                    state._fsp--;
                    if (state.failed) return type;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1560:9: greedy_nonptr_declarator
                    {
                    pushFollow(FOLLOW_greedy_nonptr_declarator_in_greedy_declarator25528);
                    greedy_nonptr_declarator();

                    state._fsp--;
                    if (state.failed) return type;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("greedy_declarator", 90);
            if(state.backtracking == 0){action.end_greedy_declarator(input.LT(0));}
        }
        return type;
    }
    // $ANTLR end "greedy_declarator"



    // $ANTLR start "greedy_nonptr_declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1572:1: greedy_nonptr_declarator returns [declarator_type_t type] : ( ( declarator_id ( attribute_specifiers )? | LPAREN ( gnu_attribute_specifier )* greedy_declarator RPAREN ) ( ( parameters_and_qualifiers )=> parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )* ) ;
    public final declarator_type_t greedy_nonptr_declarator() throws RecognitionException {
        traceIn("greedy_nonptr_declarator", 91);
        declarator_type_t type = null;


        if(state.backtracking == 0){action.greedy_nonptr_declarator(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1574:5: ( ( ( declarator_id ( attribute_specifiers )? | LPAREN ( gnu_attribute_specifier )* greedy_declarator RPAREN ) ( ( parameters_and_qualifiers )=> parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )* ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1575:5: ( ( declarator_id ( attribute_specifiers )? | LPAREN ( gnu_attribute_specifier )* greedy_declarator RPAREN ) ( ( parameters_and_qualifiers )=> parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )* )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1575:5: ( ( declarator_id ( attribute_specifiers )? | LPAREN ( gnu_attribute_specifier )* greedy_declarator RPAREN ) ( ( parameters_and_qualifiers )=> parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1576:9: ( declarator_id ( attribute_specifiers )? | LPAREN ( gnu_attribute_specifier )* greedy_declarator RPAREN ) ( ( parameters_and_qualifiers )=> parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )*
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1576:9: ( declarator_id ( attribute_specifiers )? | LPAREN ( gnu_attribute_specifier )* greedy_declarator RPAREN )
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==ELLIPSIS||LA146_0==TILDE||LA146_0==SCOPE||LA146_0==IDENT||LA146_0==LITERAL_OPERATOR) ) {
                alt146=1;
            }
            else if ( (LA146_0==LPAREN) ) {
                alt146=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;

            }
            switch (alt146) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1577:13: declarator_id ( attribute_specifiers )?
                    {
                    pushFollow(FOLLOW_declarator_id_in_greedy_nonptr_declarator25894);
                    declarator_id();

                    state._fsp--;
                    if (state.failed) return type;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1577:27: ( attribute_specifiers )?
                    int alt144=2;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==LSQUARE) ) {
                        int LA144_1 = input.LA(2);

                        if ( (LA144_1==LSQUARE) ) {
                            int LA144_4 = input.LA(3);

                            if ( (LA144_4==IDENT) ) {
                                switch ( input.LA(4) ) {
                                    case COLON:
                                    case LPAREN:
                                    case SCOPE:
                                        {
                                        alt144=1;
                                        }
                                        break;
                                    case ELLIPSIS:
                                        {
                                        int LA144_7 = input.LA(5);

                                        if ( (LA144_7==COLON) ) {
                                            alt144=1;
                                        }
                                        else if ( (LA144_7==RSQUARE) ) {
                                            int LA144_6 = input.LA(6);

                                            if ( (LA144_6==RSQUARE) ) {
                                                alt144=1;
                                            }
                                        }
                                        }
                                        break;
                                    case RSQUARE:
                                        {
                                        int LA144_6 = input.LA(5);

                                        if ( (LA144_6==RSQUARE) ) {
                                            alt144=1;
                                        }
                                        }
                                        break;
                                }

                            }
                            else if ( (LA144_4==RSQUARE) ) {
                                int LA144_6 = input.LA(4);

                                if ( (LA144_6==RSQUARE) ) {
                                    alt144=1;
                                }
                            }
                        }
                    }
                    else if ( ((LA144_0 >= LITERAL___extension__ && LA144_0 <= LITERAL___attribute__)||LA144_0==LITERAL_alignas) ) {
                        alt144=1;
                    }
                    switch (alt144) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1577:27: attribute_specifiers
                            {
                            pushFollow(FOLLOW_attribute_specifiers_in_greedy_nonptr_declarator25896);
                            attribute_specifiers();

                            state._fsp--;
                            if (state.failed) return type;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1580:13: LPAREN ( gnu_attribute_specifier )* greedy_declarator RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_greedy_nonptr_declarator25938); if (state.failed) return type;

                    if ( state.backtracking==0 ) {action.greedy_nonptr_declarator(action.GREEDY_NONPTR_DECLARATOR__LPAREN, input.LT(0));}

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1581:13: ( gnu_attribute_specifier )*
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);

                        if ( (LA145_0==LITERAL___attribute__) ) {
                            alt145=1;
                        }


                        switch (alt145) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1581:13: gnu_attribute_specifier
                    	    {
                    	    pushFollow(FOLLOW_gnu_attribute_specifier_in_greedy_nonptr_declarator26015);
                    	    gnu_attribute_specifier();

                    	    state._fsp--;
                    	    if (state.failed) return type;

                    	    }
                    	    break;

                    	default :
                    	    break loop145;
                        }
                    } while (true);


                    pushFollow(FOLLOW_greedy_declarator_in_greedy_nonptr_declarator26030);
                    greedy_declarator();

                    state._fsp--;
                    if (state.failed) return type;

                    match(input,RPAREN,FOLLOW_RPAREN_in_greedy_nonptr_declarator26045); if (state.failed) return type;

                    if ( state.backtracking==0 ) {action.greedy_nonptr_declarator(action.GREEDY_NONPTR_DECLARATOR__RPAREN, input.LT(0));}

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1586:9: ( ( parameters_and_qualifiers )=> parameters_and_qualifiers | LSQUARE ( constant_expression )? RSQUARE )*
            loop148:
            do {
                int alt148=3;
                int LA148_0 = input.LA(1);

                if ( (LA148_0==LPAREN) ) {
                    int LA148_6 = input.LA(2);

                    if ( (synpred35_CXXParser()) ) {
                        alt148=1;
                    }


                }
                else if ( (LA148_0==LSQUARE) ) {
                    alt148=2;
                }


                switch (alt148) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1587:13: ( parameters_and_qualifiers )=> parameters_and_qualifiers
            	    {
            	    pushFollow(FOLLOW_parameters_and_qualifiers_in_greedy_nonptr_declarator26181);
            	    parameters_and_qualifiers();

            	    state._fsp--;
            	    if (state.failed) return type;

            	    }
            	    break;
            	case 2 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1591:13: LSQUARE ( constant_expression )? RSQUARE
            	    {
            	    match(input,LSQUARE,FOLLOW_LSQUARE_in_greedy_nonptr_declarator26222); if (state.failed) return type;

            	    if ( state.backtracking==0 ) {action.greedy_nonptr_declarator(action.GREEDY_NONPTR_DECLARATOR__LSQUARE, input.LT(0));}

            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1592:13: ( constant_expression )?
            	    int alt147=2;
            	    int LA147_0 = input.LA(1);

            	    if ( (LA147_0==QUESTIONMARK||LA147_0==LPAREN||LA147_0==LSQUARE||LA147_0==PLUS||(LA147_0 >= PLUSPLUS && LA147_0 <= MINUS)||(LA147_0 >= MINUSMINUS && LA147_0 <= STAR)||LA147_0==NOT||LA147_0==AMPERSAND||LA147_0==TILDE||LA147_0==SCOPE||LA147_0==FLOATONE||(LA147_0 >= HEXADECIMALINT && LA147_0 <= DECIMALINT)||(LA147_0 >= CHAR_LITERAL && LA147_0 <= STRING_LITERAL)||(LA147_0 >= NUMBER && LA147_0 <= IDENT)||LA147_0==LITERAL_OPERATOR||(LA147_0 >= LITERAL_typeof && LA147_0 <= LITERAL___typeof)||(LA147_0 >= LITERAL_typename && LA147_0 <= LITERAL_auto)||LA147_0==LITERAL_const_cast||(LA147_0 >= LITERAL_char && LA147_0 <= LITERAL_signed)||LA147_0==LITERAL_unsigned||(LA147_0 >= LITERAL_float && LA147_0 <= LITERAL_void)||(LA147_0 >= LITERAL_this && LA147_0 <= LITERAL_false)||(LA147_0 >= LITERAL_sizeof && LA147_0 <= LITERAL_new)||LA147_0==LITERAL_delete||LA147_0==LITERAL_decltype||(LA147_0 >= LITERAL_char16_t && LA147_0 <= LITERAL___decltype)||LA147_0==LITERAL___null||LA147_0==LITERAL___is_class||LA147_0==LITERAL___is_pod||(LA147_0 >= LITERAL___has_nothrow_assign && LA147_0 <= LITERAL___builtin_va_list)||LA147_0==LITERAL_typeid) ) {
            	        alt147=1;
            	    }
            	    switch (alt147) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1592:13: constant_expression
            	            {
            	            pushFollow(FOLLOW_constant_expression_in_greedy_nonptr_declarator26298);
            	            constant_expression();

            	            state._fsp--;
            	            if (state.failed) return type;

            	            }
            	            break;

            	    }


            	    match(input,RSQUARE,FOLLOW_RSQUARE_in_greedy_nonptr_declarator26314); if (state.failed) return type;

            	    if ( state.backtracking==0 ) {action.greedy_nonptr_declarator(action.GREEDY_NONPTR_DECLARATOR__RSQUARE, input.LT(0));}

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("greedy_nonptr_declarator", 91);
            if(state.backtracking == 0){action.end_greedy_nonptr_declarator(input.LT(0));}
        }
        return type;
    }
    // $ANTLR end "greedy_nonptr_declarator"



    // $ANTLR start "ptr_operator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1600:1: ptr_operator returns [ declarator_type_t type ] : ( STAR ( cv_qualifier )* | AMPERSAND | AND | ( SCOPE )? nested_name_specifier STAR ( cv_qualifier )* ) ;
    public final declarator_type_t ptr_operator() throws RecognitionException {
        traceIn("ptr_operator", 92);
        declarator_type_t type = null;


        if(state.backtracking == 0){action.ptr_operator(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1602:5: ( ( STAR ( cv_qualifier )* | AMPERSAND | AND | ( SCOPE )? nested_name_specifier STAR ( cv_qualifier )* ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1603:5: ( STAR ( cv_qualifier )* | AMPERSAND | AND | ( SCOPE )? nested_name_specifier STAR ( cv_qualifier )* )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1603:5: ( STAR ( cv_qualifier )* | AMPERSAND | AND | ( SCOPE )? nested_name_specifier STAR ( cv_qualifier )* )
            int alt152=4;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt152=1;
                }
                break;
            case AMPERSAND:
                {
                alt152=2;
                }
                break;
            case AND:
                {
                alt152=3;
                }
                break;
            case SCOPE:
            case IDENT:
                {
                alt152=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return type;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;

            }

            switch (alt152) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1604:9: STAR ( cv_qualifier )*
                    {
                    match(input,STAR,FOLLOW_STAR_in_ptr_operator26750); if (state.failed) return type;

                    if ( state.backtracking==0 ) {action.ptr_operator(action.PTR_OPERATOR__STAR, input.LT(0));}

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1605:9: ( cv_qualifier )*
                    loop149:
                    do {
                        int alt149=2;
                        int LA149_0 = input.LA(1);

                        if ( ((LA149_0 >= LITERAL_const && LA149_0 <= LITERAL___const)||LA149_0==LITERAL_volatile) ) {
                            alt149=1;
                        }


                        switch (alt149) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1605:9: cv_qualifier
                    	    {
                    	    pushFollow(FOLLOW_cv_qualifier_in_ptr_operator26829);
                    	    cv_qualifier();

                    	    state._fsp--;
                    	    if (state.failed) return type;

                    	    }
                    	    break;

                    	default :
                    	    break loop149;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1608:9: AMPERSAND
                    {
                    match(input,AMPERSAND,FOLLOW_AMPERSAND_in_ptr_operator26859); if (state.failed) return type;

                    if ( state.backtracking==0 ) {action.ptr_operator(action.PTR_OPERATOR__AMPERSAND, input.LT(0));}

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1611:9: AND
                    {
                    match(input,AND,FOLLOW_AND_in_ptr_operator26952); if (state.failed) return type;

                    if ( state.backtracking==0 ) {action.ptr_operator(action.PTR_OPERATOR__AND, input.LT(0));}

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1613:9: ( SCOPE )? nested_name_specifier STAR ( cv_qualifier )*
                    {
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1613:9: ( SCOPE )?
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==SCOPE) ) {
                        alt150=1;
                    }
                    switch (alt150) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1614:13: SCOPE
                            {
                            match(input,SCOPE,FOLLOW_SCOPE_in_ptr_operator27052); if (state.failed) return type;

                            if ( state.backtracking==0 ) {action.ptr_operator(action.PTR_OPERATOR__SCOPE, input.LT(0));}

                            }
                            break;

                    }


                    pushFollow(FOLLOW_nested_name_specifier_in_ptr_operator27138);
                    nested_name_specifier();

                    state._fsp--;
                    if (state.failed) return type;

                    match(input,STAR,FOLLOW_STAR_in_ptr_operator27149); if (state.failed) return type;

                    if ( state.backtracking==0 ) {action.ptr_operator(action.PTR_OPERATOR__STAR2, input.LT(0));}

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1618:9: ( cv_qualifier )*
                    loop151:
                    do {
                        int alt151=2;
                        int LA151_0 = input.LA(1);

                        if ( ((LA151_0 >= LITERAL_const && LA151_0 <= LITERAL___const)||LA151_0==LITERAL_volatile) ) {
                            alt151=1;
                        }


                        switch (alt151) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1618:9: cv_qualifier
                    	    {
                    	    pushFollow(FOLLOW_cv_qualifier_in_ptr_operator27228);
                    	    cv_qualifier();

                    	    state._fsp--;
                    	    if (state.failed) return type;

                    	    }
                    	    break;

                    	default :
                    	    break loop151;
                        }
                    } while (true);


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("ptr_operator", 92);
            if(state.backtracking == 0){action.end_ptr_operator(input.LT(0));}
        }
        return type;
    }
    // $ANTLR end "ptr_operator"



    // $ANTLR start "cv_qualifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1624:1: cv_qualifier returns [ qualifier_t qual ] : ( literal_const | LITERAL_volatile );
    public final qualifier_t cv_qualifier() throws RecognitionException {
        traceIn("cv_qualifier", 93);
        qualifier_t qual = null;


        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1624:42: ( literal_const | LITERAL_volatile )
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( ((LA153_0 >= LITERAL_const && LA153_0 <= LITERAL___const)) ) {
                alt153=1;
            }
            else if ( (LA153_0==LITERAL_volatile) ) {
                alt153=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return qual;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;

            }
            switch (alt153) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1625:9: literal_const
                    {
                    pushFollow(FOLLOW_literal_const_in_cv_qualifier27411);
                    literal_const();

                    state._fsp--;
                    if (state.failed) return qual;

                    if ( state.backtracking==0 ) {action.cv_qualifier(action.CV_QUALIFIER__CONST, input.LT(0));}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1628:9: LITERAL_volatile
                    {
                    match(input,LITERAL_volatile,FOLLOW_LITERAL_volatile_in_cv_qualifier27496); if (state.failed) return qual;

                    if ( state.backtracking==0 ) {action.cv_qualifier(action.CV_QUALIFIER__VOLATILE, input.LT(0));}

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("cv_qualifier", 93);
        }
        return qual;
    }
    // $ANTLR end "cv_qualifier"



    // $ANTLR start "ref_qualifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1632:1: ref_qualifier : ( AMPERSAND | AND );
    public final void ref_qualifier() throws RecognitionException {
        traceIn("ref_qualifier", 94);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1632:14: ( AMPERSAND | AND )
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==AMPERSAND) ) {
                alt154=1;
            }
            else if ( (LA154_0==AND) ) {
                alt154=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;

            }
            switch (alt154) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1633:9: AMPERSAND
                    {
                    match(input,AMPERSAND,FOLLOW_AMPERSAND_in_ref_qualifier27582); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.ref_qualifier(action.REF_QUALIFIER__AMPERSAND, input.LT(0));}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1635:9: AND
                    {
                    match(input,AND,FOLLOW_AND_in_ref_qualifier27662); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.ref_qualifier(action.REF_QUALIFIER__AND, input.LT(0));}

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("ref_qualifier", 94);
        }
        return ;
    }
    // $ANTLR end "ref_qualifier"



    // $ANTLR start "declarator_id"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1647:1: declarator_id returns [ declarator_type_t type ] : ( ELLIPSIS )? id_expression ;
    public final declarator_type_t declarator_id() throws RecognitionException {
        traceIn("declarator_id", 95);
        declarator_type_t type = null;


        if(state.backtracking == 0){action.declarator_id(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1649:5: ( ( ELLIPSIS )? id_expression )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1650:9: ( ELLIPSIS )? id_expression
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1650:9: ( ELLIPSIS )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==ELLIPSIS) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1651:13: ELLIPSIS
                    {
                    match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_declarator_id27933); if (state.failed) return type;

                    if ( state.backtracking==0 ) {action.declarator_id(action.DECLARATOR_ID__ELLIPSIS, input.LT(0));}

                    }
                    break;

            }


            pushFollow(FOLLOW_id_expression_in_declarator_id28016);
            id_expression();

            state._fsp--;
            if (state.failed) return type;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("declarator_id", 95);
            if(state.backtracking == 0){action.end_declarator_id(input.LT(0));}
        }
        return type;
    }
    // $ANTLR end "declarator_id"



    // $ANTLR start "type_id"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1663:1: type_id : ( gnu_attribute_or_extension_specifiers )? ( type_specifier ( gnu_attribute_specifiers )? )+ ( ( abstract_declarator )=> abstract_declarator )? ;
    public final void type_id() throws RecognitionException {
        traceIn("type_id", 96);
        if(state.backtracking == 0){action.type_id(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1665:5: ( ( gnu_attribute_or_extension_specifiers )? ( type_specifier ( gnu_attribute_specifiers )? )+ ( ( abstract_declarator )=> abstract_declarator )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1666:9: ( gnu_attribute_or_extension_specifiers )? ( type_specifier ( gnu_attribute_specifiers )? )+ ( ( abstract_declarator )=> abstract_declarator )?
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1666:9: ( gnu_attribute_or_extension_specifiers )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( ((LA156_0 >= LITERAL___extension__ && LA156_0 <= LITERAL___attribute__)) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1666:9: gnu_attribute_or_extension_specifiers
                    {
                    pushFollow(FOLLOW_gnu_attribute_or_extension_specifiers_in_type_id28324);
                    gnu_attribute_or_extension_specifiers();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1667:9: ( type_specifier ( gnu_attribute_specifiers )? )+
            int cnt158=0;
            loop158:
            do {
                int alt158=2;
                switch ( input.LA(1) ) {
                case SCOPE:
                    {
                    int LA158_6 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt158=1;
                    }


                    }
                    break;
                case IDENT:
                    {
                    int LA158_7 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt158=1;
                    }


                    }
                    break;
                case LITERAL_typeof:
                case LITERAL___typeof__:
                case LITERAL___typeof:
                case LITERAL_enum:
                case LITERAL_typename:
                case LITERAL_auto:
                case LITERAL_const:
                case LITERAL___const__:
                case LITERAL___const:
                case LITERAL_volatile:
                case LITERAL_char:
                case LITERAL_wchar_t:
                case LITERAL_bool:
                case LITERAL_short:
                case LITERAL_int:
                case LITERAL_long:
                case LITERAL_signed:
                case LITERAL_unsigned:
                case LITERAL_float:
                case LITERAL_double:
                case LITERAL_void:
                case LITERAL_class:
                case LITERAL_struct:
                case LITERAL_union:
                case LITERAL_decltype:
                case LITERAL_char16_t:
                case LITERAL_char32_t:
                case LITERAL___decltype:
                case LITERAL___builtin_va_list:
                    {
                    alt158=1;
                    }
                    break;

                }

                switch (alt158) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1667:10: type_specifier ( gnu_attribute_specifiers )?
            	    {
            	    pushFollow(FOLLOW_type_specifier_in_type_id28336);
            	    type_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1667:25: ( gnu_attribute_specifiers )?
            	    int alt157=2;
            	    int LA157_0 = input.LA(1);

            	    if ( (LA157_0==LITERAL___attribute__) ) {
            	        alt157=1;
            	    }
            	    switch (alt157) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1667:25: gnu_attribute_specifiers
            	            {
            	            pushFollow(FOLLOW_gnu_attribute_specifiers_in_type_id28338);
            	            gnu_attribute_specifiers();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt158 >= 1 ) break loop158;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(158, input);
                        throw eee;
                }
                cnt158++;
            } while (true);


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1668:9: ( ( abstract_declarator )=> abstract_declarator )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==LPAREN) && (synpred36_CXXParser())) {
                alt159=1;
            }
            else if ( (LA159_0==LSQUARE) && (synpred36_CXXParser())) {
                alt159=1;
            }
            else if ( (LA159_0==STAR) && (synpred36_CXXParser())) {
                alt159=1;
            }
            else if ( (LA159_0==AMPERSAND) && (synpred36_CXXParser())) {
                alt159=1;
            }
            else if ( (LA159_0==AND) && (synpred36_CXXParser())) {
                alt159=1;
            }
            else if ( (LA159_0==SCOPE) && (synpred36_CXXParser())) {
                alt159=1;
            }
            else if ( (LA159_0==IDENT) && (synpred36_CXXParser())) {
                alt159=1;
            }
            else if ( (LA159_0==ELLIPSIS) ) {
                int LA159_8 = input.LA(2);

                if ( (synpred36_CXXParser()) ) {
                    alt159=1;
                }
            }
            switch (alt159) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1668:10: ( abstract_declarator )=> abstract_declarator
                    {
                    pushFollow(FOLLOW_abstract_declarator_in_type_id28359);
                    abstract_declarator();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("type_id", 96);
            if(state.backtracking == 0){action.end_type_id(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "type_id"



    // $ANTLR start "parameters_and_qualifiers"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1672:1: parameters_and_qualifiers returns [ parameters_and_qualifiers_t pq ] : parameters ( attribute_specifiers )? ( cv_qualifier )* ( ref_qualifier )? ( exception_specification )? ;
    public final parameters_and_qualifiers_t parameters_and_qualifiers() throws RecognitionException {
        traceIn("parameters_and_qualifiers", 97);
        parameters_and_qualifiers_t pq = null;


        if(state.backtracking == 0){action.parameters_and_qualifiers(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1674:5: ( parameters ( attribute_specifiers )? ( cv_qualifier )* ( ref_qualifier )? ( exception_specification )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1675:9: parameters ( attribute_specifiers )? ( cv_qualifier )* ( ref_qualifier )? ( exception_specification )?
            {
            pushFollow(FOLLOW_parameters_in_parameters_and_qualifiers28621);
            parameters();

            state._fsp--;
            if (state.failed) return pq;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1676:9: ( attribute_specifiers )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==LSQUARE) ) {
                int LA160_1 = input.LA(2);

                if ( (LA160_1==LSQUARE) ) {
                    int LA160_4 = input.LA(3);

                    if ( (LA160_4==IDENT) ) {
                        switch ( input.LA(4) ) {
                            case COLON:
                            case LPAREN:
                            case SCOPE:
                                {
                                alt160=1;
                                }
                                break;
                            case ELLIPSIS:
                                {
                                int LA160_7 = input.LA(5);

                                if ( (LA160_7==COLON) ) {
                                    alt160=1;
                                }
                                else if ( (LA160_7==RSQUARE) ) {
                                    int LA160_6 = input.LA(6);

                                    if ( (LA160_6==RSQUARE) ) {
                                        alt160=1;
                                    }
                                }
                                }
                                break;
                            case RSQUARE:
                                {
                                int LA160_6 = input.LA(5);

                                if ( (LA160_6==RSQUARE) ) {
                                    alt160=1;
                                }
                                }
                                break;
                        }

                    }
                    else if ( (LA160_4==RSQUARE) ) {
                        int LA160_6 = input.LA(4);

                        if ( (LA160_6==RSQUARE) ) {
                            alt160=1;
                        }
                    }
                }
            }
            else if ( ((LA160_0 >= LITERAL___extension__ && LA160_0 <= LITERAL___attribute__)||LA160_0==LITERAL_alignas) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1676:9: attribute_specifiers
                    {
                    pushFollow(FOLLOW_attribute_specifiers_in_parameters_and_qualifiers28631);
                    attribute_specifiers();

                    state._fsp--;
                    if (state.failed) return pq;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1677:9: ( cv_qualifier )*
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);

                if ( ((LA161_0 >= LITERAL_const && LA161_0 <= LITERAL___const)||LA161_0==LITERAL_volatile) ) {
                    alt161=1;
                }


                switch (alt161) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1677:9: cv_qualifier
            	    {
            	    pushFollow(FOLLOW_cv_qualifier_in_parameters_and_qualifiers28642);
            	    cv_qualifier();

            	    state._fsp--;
            	    if (state.failed) return pq;

            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1678:9: ( ref_qualifier )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==AND||LA162_0==AMPERSAND) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1678:9: ref_qualifier
                    {
                    pushFollow(FOLLOW_ref_qualifier_in_parameters_and_qualifiers28654);
                    ref_qualifier();

                    state._fsp--;
                    if (state.failed) return pq;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1679:9: ( exception_specification )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==LITERAL_throw||LA163_0==LITERAL_noexcept) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1679:9: exception_specification
                    {
                    pushFollow(FOLLOW_exception_specification_in_parameters_and_qualifiers28666);
                    exception_specification();

                    state._fsp--;
                    if (state.failed) return pq;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("parameters_and_qualifiers", 97);
            if(state.backtracking == 0){action.end_parameters_and_qualifiers(input.LT(0));}
        }
        return pq;
    }
    // $ANTLR end "parameters_and_qualifiers"



    // $ANTLR start "parameters"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1683:1: parameters : LPAREN ( ( ELLIPSIS )? | ( sync_parameter parameter_declaration[parm_decl] ( COMMA parameter_declaration[parm_decl] sync_parameter )* ) ( COMMA ELLIPSIS )? ) RPAREN ;
    public final void parameters() throws RecognitionException {
        traceIn("parameters", 98);
        Declaration_stack.push(new Declaration_scope());

        if(state.backtracking == 0){action.parameters_and_qualifiers(action.PARAMETERS_AND_QUALIFIERS__LPAREN, input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1686:5: ( LPAREN ( ( ELLIPSIS )? | ( sync_parameter parameter_declaration[parm_decl] ( COMMA parameter_declaration[parm_decl] sync_parameter )* ) ( COMMA ELLIPSIS )? ) RPAREN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1687:9: LPAREN ( ( ELLIPSIS )? | ( sync_parameter parameter_declaration[parm_decl] ( COMMA parameter_declaration[parm_decl] sync_parameter )* ) ( COMMA ELLIPSIS )? ) RPAREN
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_parameters28977); if (state.failed) return ;

            if ( state.backtracking==0 ) {if(state.backtracking == 0){action.parameter_declaration_clause(input.LT(1));}}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1689:9: ( ( ELLIPSIS )? | ( sync_parameter parameter_declaration[parm_decl] ( COMMA parameter_declaration[parm_decl] sync_parameter )* ) ( COMMA ELLIPSIS )? )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==ELLIPSIS||LA167_0==RPAREN) ) {
                alt167=1;
            }
            else if ( (LA167_0==LSQUARE||LA167_0==SCOPE||LA167_0==IDENT||(LA167_0 >= LITERAL_typeof && LA167_0 <= LITERAL___typeof)||(LA167_0 >= LITERAL_typedef && LA167_0 <= LITERAL_enum)||(LA167_0 >= LITERAL_extern && LA167_0 <= LITERAL_inline)||(LA167_0 >= LITERAL___inline && LA167_0 <= LITERAL_friend)||(LA167_0 >= LITERAL_typename && LA167_0 <= LITERAL___const)||LA167_0==LITERAL_volatile||(LA167_0 >= LITERAL_char && LA167_0 <= LITERAL_signed)||LA167_0==LITERAL_unsigned||(LA167_0 >= LITERAL_float && LA167_0 <= LITERAL_void)||(LA167_0 >= LITERAL_class && LA167_0 <= LITERAL_union)||(LA167_0 >= LITERAL___extension__ && LA167_0 <= LITERAL___attribute__)||LA167_0==LITERAL___global||LA167_0==LITERAL___thread||(LA167_0 >= LITERAL___symbolic && LA167_0 <= LITERAL___hidden)||(LA167_0 >= LITERAL_constexpr && LA167_0 <= LITERAL_decltype)||LA167_0==LITERAL_thread_local||(LA167_0 >= LITERAL_alignas && LA167_0 <= LITERAL_char32_t)||LA167_0==LITERAL___decltype||LA167_0==LITERAL___builtin_va_list) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;

            }
            switch (alt167) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1690:13: ( ELLIPSIS )?
                    {
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1690:13: ( ELLIPSIS )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==ELLIPSIS) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1690:13: ELLIPSIS
                            {
                            match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_parameters29083); if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1692:13: ( sync_parameter parameter_declaration[parm_decl] ( COMMA parameter_declaration[parm_decl] sync_parameter )* ) ( COMMA ELLIPSIS )?
                    {
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1692:13: ( sync_parameter parameter_declaration[parm_decl] ( COMMA parameter_declaration[parm_decl] sync_parameter )* )
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1692:81: sync_parameter parameter_declaration[parm_decl] ( COMMA parameter_declaration[parm_decl] sync_parameter )*
                    {
                    if ( state.backtracking==0 ) {if(state.backtracking == 0){action.parameter_declaration_list(input.LT(1));}}

                    pushFollow(FOLLOW_sync_parameter_in_parameters29194);
                    sync_parameter();

                    state._fsp--;
                    if (state.failed) return ;

                    pushFollow(FOLLOW_parameter_declaration_in_parameters29212);
                    parameter_declaration(parm_decl);

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1695:17: ( COMMA parameter_declaration[parm_decl] sync_parameter )*
                    loop165:
                    do {
                        int alt165=2;
                        int LA165_0 = input.LA(1);

                        if ( (LA165_0==COMMA) ) {
                            int LA165_1 = input.LA(2);

                            if ( (LA165_1==LSQUARE||LA165_1==SCOPE||LA165_1==IDENT||(LA165_1 >= LITERAL_typeof && LA165_1 <= LITERAL___typeof)||(LA165_1 >= LITERAL_typedef && LA165_1 <= LITERAL_enum)||(LA165_1 >= LITERAL_extern && LA165_1 <= LITERAL_inline)||(LA165_1 >= LITERAL___inline && LA165_1 <= LITERAL_friend)||(LA165_1 >= LITERAL_typename && LA165_1 <= LITERAL___const)||LA165_1==LITERAL_volatile||(LA165_1 >= LITERAL_char && LA165_1 <= LITERAL_signed)||LA165_1==LITERAL_unsigned||(LA165_1 >= LITERAL_float && LA165_1 <= LITERAL_void)||(LA165_1 >= LITERAL_class && LA165_1 <= LITERAL_union)||(LA165_1 >= LITERAL___extension__ && LA165_1 <= LITERAL___attribute__)||LA165_1==LITERAL___global||LA165_1==LITERAL___thread||(LA165_1 >= LITERAL___symbolic && LA165_1 <= LITERAL___hidden)||(LA165_1 >= LITERAL_constexpr && LA165_1 <= LITERAL_decltype)||LA165_1==LITERAL_thread_local||(LA165_1 >= LITERAL_alignas && LA165_1 <= LITERAL_char32_t)||LA165_1==LITERAL___decltype||LA165_1==LITERAL___builtin_va_list) ) {
                                alt165=1;
                            }


                        }


                        switch (alt165) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1696:21: COMMA parameter_declaration[parm_decl] sync_parameter
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_parameters29254); if (state.failed) return ;

                    	    if ( state.backtracking==0 ) {action.end_parameter_declaration_list(action.PARAMETER_DECLARATION_LIST__COMMA, input.LT(0));}

                    	    pushFollow(FOLLOW_parameter_declaration_in_parameters29332);
                    	    parameter_declaration(parm_decl);

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    pushFollow(FOLLOW_sync_parameter_in_parameters29355);
                    	    sync_parameter();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop165;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) {if(state.backtracking == 0){action.end_parameter_declaration_list(input.LT(0));}}

                    }


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1702:13: ( COMMA ELLIPSIS )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==COMMA) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1703:17: COMMA ELLIPSIS
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_parameters29564); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.parameter_declaration_clause(action.PARAMETER_DECLARATION_CLAUSE__COMMA, input.LT(0));}

                            match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_parameters29646); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.parameter_declaration_clause(action.PARAMETER_DECLARATION_CLAUSE__ELLIPSIS2, input.LT(0));}

                            }
                            break;

                    }


                    }
                    break;

            }


            match(input,RPAREN,FOLLOW_RPAREN_in_parameters29742); if (state.failed) return ;

            if ( state.backtracking==0 ) {if(state.backtracking == 0){action.end_parameter_declaration_clause(input.LT(0));}}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("parameters", 98);
            Declaration_stack.pop();

            if(state.backtracking == 0){action.parameters_and_qualifiers(action.PARAMETERS_AND_QUALIFIERS__RPAREN, input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "parameters"



    // $ANTLR start "parameter_declaration_clause"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1711:1: parameter_declaration_clause : ( ( ELLIPSIS )? | parameter_declaration_list ( COMMA ELLIPSIS )? ) ;
    public final void parameter_declaration_clause() throws RecognitionException {
        traceIn("parameter_declaration_clause", 99);
        Declaration_stack.push(new Declaration_scope());

        if(state.backtracking == 0){action.parameter_declaration_clause(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1714:5: ( ( ( ELLIPSIS )? | parameter_declaration_list ( COMMA ELLIPSIS )? ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1715:5: ( ( ELLIPSIS )? | parameter_declaration_list ( COMMA ELLIPSIS )? )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1715:5: ( ( ELLIPSIS )? | parameter_declaration_list ( COMMA ELLIPSIS )? )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==EOF||LA170_0==ELLIPSIS) ) {
                alt170=1;
            }
            else if ( (LA170_0==LSQUARE||LA170_0==SCOPE||LA170_0==IDENT||(LA170_0 >= LITERAL_typeof && LA170_0 <= LITERAL___typeof)||(LA170_0 >= LITERAL_typedef && LA170_0 <= LITERAL_enum)||(LA170_0 >= LITERAL_extern && LA170_0 <= LITERAL_inline)||(LA170_0 >= LITERAL___inline && LA170_0 <= LITERAL_friend)||(LA170_0 >= LITERAL_typename && LA170_0 <= LITERAL___const)||LA170_0==LITERAL_volatile||(LA170_0 >= LITERAL_char && LA170_0 <= LITERAL_signed)||LA170_0==LITERAL_unsigned||(LA170_0 >= LITERAL_float && LA170_0 <= LITERAL_void)||(LA170_0 >= LITERAL_class && LA170_0 <= LITERAL_union)||(LA170_0 >= LITERAL___extension__ && LA170_0 <= LITERAL___attribute__)||LA170_0==LITERAL___global||LA170_0==LITERAL___thread||(LA170_0 >= LITERAL___symbolic && LA170_0 <= LITERAL___hidden)||(LA170_0 >= LITERAL_constexpr && LA170_0 <= LITERAL_decltype)||LA170_0==LITERAL_thread_local||(LA170_0 >= LITERAL_alignas && LA170_0 <= LITERAL_char32_t)||LA170_0==LITERAL___decltype||LA170_0==LITERAL___builtin_va_list) ) {
                alt170=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;

            }
            switch (alt170) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1716:9: ( ELLIPSIS )?
                    {
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1716:9: ( ELLIPSIS )?
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==ELLIPSIS) ) {
                        alt168=1;
                    }
                    switch (alt168) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1717:13: ELLIPSIS
                            {
                            match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_parameter_declaration_clause30091); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.parameter_declaration_clause(action.PARAMETER_DECLARATION_CLAUSE__ELLIPSIS, input.LT(0));}

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1720:9: parameter_declaration_list ( COMMA ELLIPSIS )?
                    {
                    pushFollow(FOLLOW_parameter_declaration_list_in_parameter_declaration_clause30179);
                    parameter_declaration_list();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1721:9: ( COMMA ELLIPSIS )?
                    int alt169=2;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==COMMA) ) {
                        alt169=1;
                    }
                    switch (alt169) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1722:13: COMMA ELLIPSIS
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_parameter_declaration_clause30204); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.parameter_declaration_clause(action.PARAMETER_DECLARATION_CLAUSE__COMMA, input.LT(0));}

                            match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_parameter_declaration_clause30282); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.parameter_declaration_clause(action.PARAMETER_DECLARATION_CLAUSE__ELLIPSIS2, input.LT(0));}

                            }
                            break;

                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("parameter_declaration_clause", 99);
            Declaration_stack.pop();

            if(state.backtracking == 0){action.end_parameter_declaration_clause(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "parameter_declaration_clause"



    // $ANTLR start "parameter_declaration_list"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1729:1: parameter_declaration_list : parameter_declaration[parm_decl] ( COMMA parameter_declaration[parm_decl] )* ;
    public final void parameter_declaration_list() throws RecognitionException {
        traceIn("parameter_declaration_list", 100);
        if(state.backtracking == 0){action.parameter_declaration_list(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1731:5: ( parameter_declaration[parm_decl] ( COMMA parameter_declaration[parm_decl] )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1732:9: parameter_declaration[parm_decl] ( COMMA parameter_declaration[parm_decl] )*
            {
            pushFollow(FOLLOW_parameter_declaration_in_parameter_declaration_list30690);
            parameter_declaration(parm_decl);

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1733:9: ( COMMA parameter_declaration[parm_decl] )*
            loop171:
            do {
                int alt171=2;
                int LA171_0 = input.LA(1);

                if ( (LA171_0==COMMA) ) {
                    int LA171_1 = input.LA(2);

                    if ( (LA171_1==LSQUARE||LA171_1==SCOPE||LA171_1==IDENT||(LA171_1 >= LITERAL_typeof && LA171_1 <= LITERAL___typeof)||(LA171_1 >= LITERAL_typedef && LA171_1 <= LITERAL_enum)||(LA171_1 >= LITERAL_extern && LA171_1 <= LITERAL_inline)||(LA171_1 >= LITERAL___inline && LA171_1 <= LITERAL_friend)||(LA171_1 >= LITERAL_typename && LA171_1 <= LITERAL___const)||LA171_1==LITERAL_volatile||(LA171_1 >= LITERAL_char && LA171_1 <= LITERAL_signed)||LA171_1==LITERAL_unsigned||(LA171_1 >= LITERAL_float && LA171_1 <= LITERAL_void)||(LA171_1 >= LITERAL_class && LA171_1 <= LITERAL_union)||(LA171_1 >= LITERAL___extension__ && LA171_1 <= LITERAL___attribute__)||LA171_1==LITERAL___global||LA171_1==LITERAL___thread||(LA171_1 >= LITERAL___symbolic && LA171_1 <= LITERAL___hidden)||(LA171_1 >= LITERAL_constexpr && LA171_1 <= LITERAL_decltype)||LA171_1==LITERAL_thread_local||(LA171_1 >= LITERAL_alignas && LA171_1 <= LITERAL_char32_t)||LA171_1==LITERAL___decltype||LA171_1==LITERAL___builtin_va_list) ) {
                        alt171=1;
                    }


                }


                switch (alt171) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1734:13: COMMA parameter_declaration[parm_decl]
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_parameter_declaration_list30716); if (state.failed) return ;

            	    if ( state.backtracking==0 ) {action.end_parameter_declaration_list(action.PARAMETER_DECLARATION_LIST__COMMA, input.LT(0));}

            	    pushFollow(FOLLOW_parameter_declaration_in_parameter_declaration_list30794);
            	    parameter_declaration(parm_decl);

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop171;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("parameter_declaration_list", 100);
            if(state.backtracking == 0){action.end_parameter_declaration_list(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "parameter_declaration_list"



    // $ANTLR start "parameter_declaration"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1740:1: parameter_declaration[decl_kind kind] : ( attribute_specifiers )? ( decl_specifier ( attribute_specifiers )? ) ( decl_specifier ( attribute_specifiers )? )* ( universal_declarator )? ( ASSIGNEQUAL assignment_expression )? ;
    public final void parameter_declaration(decl_kind kind) throws RecognitionException {
        traceIn("parameter_declaration", 101);
        Declaration_stack.push(new Declaration_scope());

        if(state.backtracking == 0){action.parameter_declaration(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1743:5: ( ( attribute_specifiers )? ( decl_specifier ( attribute_specifiers )? ) ( decl_specifier ( attribute_specifiers )? )* ( universal_declarator )? ( ASSIGNEQUAL assignment_expression )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1744:9: ( attribute_specifiers )? ( decl_specifier ( attribute_specifiers )? ) ( decl_specifier ( attribute_specifiers )? )* ( universal_declarator )? ( ASSIGNEQUAL assignment_expression )?
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1744:9: ( attribute_specifiers )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==LSQUARE||(LA172_0 >= LITERAL___extension__ && LA172_0 <= LITERAL___attribute__)||LA172_0==LITERAL_alignas) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1744:9: attribute_specifiers
                    {
                    pushFollow(FOLLOW_attribute_specifiers_in_parameter_declaration31138);
                    attribute_specifiers();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {action.decl_specifiers(input.LT(1));}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1746:9: ( decl_specifier ( attribute_specifiers )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1746:10: decl_specifier ( attribute_specifiers )?
            {
            pushFollow(FOLLOW_decl_specifier_in_parameter_declaration31391);
            decl_specifier();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1746:25: ( attribute_specifiers )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==LSQUARE) ) {
                int LA173_1 = input.LA(2);

                if ( (LA173_1==LSQUARE) ) {
                    int LA173_4 = input.LA(3);

                    if ( (LA173_4==IDENT) ) {
                        switch ( input.LA(4) ) {
                            case COLON:
                            case LPAREN:
                            case SCOPE:
                                {
                                alt173=1;
                                }
                                break;
                            case ELLIPSIS:
                                {
                                int LA173_7 = input.LA(5);

                                if ( (LA173_7==COLON) ) {
                                    alt173=1;
                                }
                                else if ( (LA173_7==RSQUARE) ) {
                                    int LA173_6 = input.LA(6);

                                    if ( (LA173_6==RSQUARE) ) {
                                        alt173=1;
                                    }
                                }
                                }
                                break;
                            case RSQUARE:
                                {
                                int LA173_6 = input.LA(5);

                                if ( (LA173_6==RSQUARE) ) {
                                    alt173=1;
                                }
                                }
                                break;
                        }

                    }
                    else if ( (LA173_4==RSQUARE) ) {
                        int LA173_6 = input.LA(4);

                        if ( (LA173_6==RSQUARE) ) {
                            alt173=1;
                        }
                    }
                }
            }
            else if ( ((LA173_0 >= LITERAL___extension__ && LA173_0 <= LITERAL___attribute__)||LA173_0==LITERAL_alignas) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1746:25: attribute_specifiers
                    {
                    pushFollow(FOLLOW_attribute_specifiers_in_parameter_declaration31393);
                    attribute_specifiers();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1747:9: ( decl_specifier ( attribute_specifiers )? )*
            loop175:
            do {
                int alt175=2;
                switch ( input.LA(1) ) {
                case SCOPE:
                    {
                    int LA175_2 = input.LA(2);

                    if ( (LA175_2==IDENT) ) {
                        int LA175_5 = input.LA(3);

                        if ( (( action.type_specifier_already_present(input) )) ) {
                            alt175=1;
                        }


                    }


                    }
                    break;
                case IDENT:
                    {
                    int LA175_3 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt175=1;
                    }


                    }
                    break;
                case LITERAL_typeof:
                case LITERAL___typeof__:
                case LITERAL___typeof:
                case LITERAL_typedef:
                case LITERAL_enum:
                case LITERAL_extern:
                case LITERAL_inline:
                case LITERAL___inline:
                case LITERAL_virtual:
                case LITERAL_explicit:
                case LITERAL_friend:
                case LITERAL_typename:
                case LITERAL_auto:
                case LITERAL_register:
                case LITERAL_static:
                case LITERAL_mutable:
                case LITERAL_const:
                case LITERAL___const__:
                case LITERAL___const:
                case LITERAL_volatile:
                case LITERAL_char:
                case LITERAL_wchar_t:
                case LITERAL_bool:
                case LITERAL_short:
                case LITERAL_int:
                case LITERAL_long:
                case LITERAL_signed:
                case LITERAL_unsigned:
                case LITERAL_float:
                case LITERAL_double:
                case LITERAL_void:
                case LITERAL_class:
                case LITERAL_struct:
                case LITERAL_union:
                case LITERAL___global:
                case LITERAL___thread:
                case LITERAL___symbolic:
                case LITERAL___hidden:
                case LITERAL_constexpr:
                case LITERAL_decltype:
                case LITERAL_thread_local:
                case LITERAL_char16_t:
                case LITERAL_char32_t:
                case LITERAL___decltype:
                case LITERAL___builtin_va_list:
                    {
                    alt175=1;
                    }
                    break;

                }

                switch (alt175) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1747:11: decl_specifier ( attribute_specifiers )?
            	    {
            	    pushFollow(FOLLOW_decl_specifier_in_parameter_declaration31441);
            	    decl_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1747:26: ( attribute_specifiers )?
            	    int alt174=2;
            	    int LA174_0 = input.LA(1);

            	    if ( (LA174_0==LSQUARE) ) {
            	        int LA174_1 = input.LA(2);

            	        if ( (LA174_1==LSQUARE) ) {
            	            int LA174_4 = input.LA(3);

            	            if ( (LA174_4==IDENT) ) {
            	                switch ( input.LA(4) ) {
            	                    case COLON:
            	                    case LPAREN:
            	                    case SCOPE:
            	                        {
            	                        alt174=1;
            	                        }
            	                        break;
            	                    case ELLIPSIS:
            	                        {
            	                        int LA174_7 = input.LA(5);

            	                        if ( (LA174_7==COLON) ) {
            	                            alt174=1;
            	                        }
            	                        else if ( (LA174_7==RSQUARE) ) {
            	                            int LA174_6 = input.LA(6);

            	                            if ( (LA174_6==RSQUARE) ) {
            	                                alt174=1;
            	                            }
            	                        }
            	                        }
            	                        break;
            	                    case RSQUARE:
            	                        {
            	                        int LA174_6 = input.LA(5);

            	                        if ( (LA174_6==RSQUARE) ) {
            	                            alt174=1;
            	                        }
            	                        }
            	                        break;
            	                }

            	            }
            	            else if ( (LA174_4==RSQUARE) ) {
            	                int LA174_6 = input.LA(4);

            	                if ( (LA174_6==RSQUARE) ) {
            	                    alt174=1;
            	                }
            	            }
            	        }
            	    }
            	    else if ( ((LA174_0 >= LITERAL___extension__ && LA174_0 <= LITERAL___attribute__)||LA174_0==LITERAL_alignas) ) {
            	        alt174=1;
            	    }
            	    switch (alt174) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1747:26: attribute_specifiers
            	            {
            	            pushFollow(FOLLOW_attribute_specifiers_in_parameter_declaration31443);
            	            attribute_specifiers();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);


            if ( state.backtracking==0 ) {action.end_decl_specifiers(null/*input.LT(0)*/);}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1749:9: ( universal_declarator )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==ELLIPSIS||LA176_0==LPAREN||LA176_0==LSQUARE||LA176_0==STAR||LA176_0==AND||LA176_0==AMPERSAND||LA176_0==TILDE||LA176_0==SCOPE||LA176_0==IDENT||LA176_0==LITERAL_OPERATOR) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1749:9: universal_declarator
                    {
                    pushFollow(FOLLOW_universal_declarator_in_parameter_declaration31490);
                    universal_declarator();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1750:9: ( ASSIGNEQUAL assignment_expression )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==ASSIGNEQUAL) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1751:13: ASSIGNEQUAL assignment_expression
                    {
                    match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_parameter_declaration31516); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.parameter_declaration(action.PARAMETER_DECLARATION__ASSIGNEQUAL, input.LT(0));}

                    pushFollow(FOLLOW_assignment_expression_in_parameter_declaration31588);
                    assignment_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("parameter_declaration", 101);
            Declaration_stack.pop();

            if(state.backtracking == 0){action.end_parameter_declaration(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "parameter_declaration"



    // $ANTLR start "function_definition_after_declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1769:1: function_definition_after_declarator[boolean class_late_binding, boolean member_declaration, boolean standalone] : ( ( ASSIGNEQUAL )=> ASSIGNEQUAL ( LITERAL_delete | LITERAL_default ) SEMICOLON | ({...}? ( ( COLON )=> COLON (~ ( RCURLY | LCURLY ) )* )? skip_balanced_Curl | ( ( ctor_initializer )? function_body[class_late_binding] | function_try_block[class_late_binding] ) ) );
    public final void function_definition_after_declarator(boolean class_late_binding, boolean member_declaration, boolean standalone) throws RecognitionException {
        traceIn("function_definition_after_declarator", 102);
        if(state.backtracking == 0 && !standalone && (!class_late_binding || !member_declaration)){action.function_definition_after_declarator(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1771:5: ( ( ASSIGNEQUAL )=> ASSIGNEQUAL ( LITERAL_delete | LITERAL_default ) SEMICOLON | ({...}? ( ( COLON )=> COLON (~ ( RCURLY | LCURLY ) )* )? skip_balanced_Curl | ( ( ctor_initializer )? function_body[class_late_binding] | function_try_block[class_late_binding] ) ) )
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==ASSIGNEQUAL) && (synpred37_CXXParser())) {
                alt184=1;
            }
            else if ( (LA184_0==COLON||LA184_0==LCURLY||LA184_0==LITERAL_try) ) {
                alt184=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;

            }
            switch (alt184) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1772:9: ( ASSIGNEQUAL )=> ASSIGNEQUAL ( LITERAL_delete | LITERAL_default ) SEMICOLON
                    {
                    match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_function_definition_after_declarator31867); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.function_definition_after_declarator(action.FUNCTION_DEFINITION_AFTER_DECLARATOR__ASSIGNEQUAL, input.LT(0));}

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1774:9: ( LITERAL_delete | LITERAL_default )
                    int alt178=2;
                    int LA178_0 = input.LA(1);

                    if ( (LA178_0==LITERAL_delete) ) {
                        alt178=1;
                    }
                    else if ( (LA178_0==LITERAL_default) ) {
                        alt178=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 178, 0, input);

                        throw nvae;

                    }
                    switch (alt178) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1775:13: LITERAL_delete
                            {
                            match(input,LITERAL_delete,FOLLOW_LITERAL_delete_in_function_definition_after_declarator31953); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.function_definition_after_declarator(action.FUNCTION_DEFINITION_AFTER_DECLARATOR__DELETE, input.LT(0));}

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1777:13: LITERAL_default
                            {
                            match(input,LITERAL_default,FOLLOW_LITERAL_default_in_function_definition_after_declarator32033); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.function_definition_after_declarator(action.FUNCTION_DEFINITION_AFTER_DECLARATOR__DEFAULT, input.LT(0));}

                            }
                            break;

                    }


                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_function_definition_after_declarator32108); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1781:9: ({...}? ( ( COLON )=> COLON (~ ( RCURLY | LCURLY ) )* )? skip_balanced_Curl | ( ( ctor_initializer )? function_body[class_late_binding] | function_try_block[class_late_binding] ) )
                    {
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1781:9: ({...}? ( ( COLON )=> COLON (~ ( RCURLY | LCURLY ) )* )? skip_balanced_Curl | ( ( ctor_initializer )? function_body[class_late_binding] | function_try_block[class_late_binding] ) )
                    int alt183=2;
                    switch ( input.LA(1) ) {
                    case COLON:
                        {
                        int LA183_1 = input.LA(2);

                        if ( ((!standalone && !class_late_binding && member_declaration)) ) {
                            alt183=1;
                        }
                        else if ( (true) ) {
                            alt183=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 183, 1, input);

                            throw nvae;

                        }
                        }
                        break;
                    case LCURLY:
                        {
                        int LA183_2 = input.LA(2);

                        if ( ((!standalone && !class_late_binding && member_declaration)) ) {
                            alt183=1;
                        }
                        else if ( (true) ) {
                            alt183=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 183, 2, input);

                            throw nvae;

                        }
                        }
                        break;
                    case LITERAL_try:
                        {
                        alt183=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 183, 0, input);

                        throw nvae;

                    }

                    switch (alt183) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1781:10: {...}? ( ( COLON )=> COLON (~ ( RCURLY | LCURLY ) )* )? skip_balanced_Curl
                            {
                            if ( !((!standalone && !class_late_binding && member_declaration)) ) {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                throw new FailedPredicateException(input, "function_definition_after_declarator", "!standalone && !class_late_binding && member_declaration");
                            }

                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1782:13: ( ( COLON )=> COLON (~ ( RCURLY | LCURLY ) )* )?
                            int alt180=2;
                            int LA180_0 = input.LA(1);

                            if ( (LA180_0==COLON) && (synpred38_CXXParser())) {
                                alt180=1;
                            }
                            switch (alt180) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1782:14: ( COLON )=> COLON (~ ( RCURLY | LCURLY ) )*
                                    {
                                    match(input,COLON,FOLLOW_COLON_in_function_definition_after_declarator32146); if (state.failed) return ;

                                    if ( state.backtracking==0 ) {if(state.backtracking == 0){action.skip_balanced_curlies(input.LT(0));}}

                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1783:17: (~ ( RCURLY | LCURLY ) )*
                                    loop179:
                                    do {
                                        int alt179=2;
                                        int LA179_0 = input.LA(1);

                                        if ( ((LA179_0 >= ELLIPSIS && LA179_0 <= RSQUARE)||(LA179_0 >= EQUAL && LA179_0 <= LITERAL_typeid)) ) {
                                            alt179=1;
                                        }


                                        switch (alt179) {
                                    	case 1 :
                                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1784:21: ~ ( RCURLY | LCURLY )
                                    	    {
                                    	    if ( (input.LA(1) >= ELLIPSIS && input.LA(1) <= RSQUARE)||(input.LA(1) >= EQUAL && input.LA(1) <= LITERAL_typeid) ) {
                                    	        input.consume();
                                    	        state.errorRecovery=false;
                                    	        state.failed=false;
                                    	    }
                                    	    else {
                                    	        if (state.backtracking>0) {state.failed=true; return ;}
                                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                                    	        throw mse;
                                    	    }


                                    	    if ( state.backtracking==0 ) {if(state.backtracking == 0){action.skip_balanced_curlies(input.LT(0));}}

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop179;
                                        }
                                    } while (true);


                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_skip_balanced_Curl_in_function_definition_after_declarator32336);
                            skip_balanced_Curl();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1789:13: ( ( ctor_initializer )? function_body[class_late_binding] | function_try_block[class_late_binding] )
                            {
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1789:13: ( ( ctor_initializer )? function_body[class_late_binding] | function_try_block[class_late_binding] )
                            int alt182=2;
                            int LA182_0 = input.LA(1);

                            if ( (LA182_0==COLON||LA182_0==LCURLY) ) {
                                alt182=1;
                            }
                            else if ( (LA182_0==LITERAL_try) ) {
                                alt182=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 182, 0, input);

                                throw nvae;

                            }
                            switch (alt182) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1790:17: ( ctor_initializer )? function_body[class_late_binding]
                                    {
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1790:17: ( ctor_initializer )?
                                    int alt181=2;
                                    int LA181_0 = input.LA(1);

                                    if ( (LA181_0==COLON) ) {
                                        alt181=1;
                                    }
                                    switch (alt181) {
                                        case 1 :
                                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1790:17: ctor_initializer
                                            {
                                            pushFollow(FOLLOW_ctor_initializer_in_function_definition_after_declarator32378);
                                            ctor_initializer();

                                            state._fsp--;
                                            if (state.failed) return ;

                                            }
                                            break;

                                    }


                                    pushFollow(FOLLOW_function_body_in_function_definition_after_declarator32381);
                                    function_body(class_late_binding);

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;
                                case 2 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1792:17: function_try_block[class_late_binding]
                                    {
                                    pushFollow(FOLLOW_function_try_block_in_function_definition_after_declarator32414);
                                    function_try_block(class_late_binding);

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("function_definition_after_declarator", 102);
            if(state.backtracking == 0 && !standalone && (!class_late_binding || !member_declaration)){action.end_function_definition_after_declarator(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "function_definition_after_declarator"



    // $ANTLR start "function_declaration"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1811:1: function_declaration[decl_kind kind] : ( decl_specifier )* function_declarator ;
    public final void function_declaration(decl_kind kind) throws RecognitionException {
        traceIn("function_declaration", 103);
        Declaration_stack.push(new Declaration_scope());

        if(state.backtracking == 0){action.function_declaration(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1814:5: ( ( decl_specifier )* function_declarator )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1815:9: ( decl_specifier )* function_declarator
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1815:9: ( decl_specifier )*
            loop185:
            do {
                int alt185=2;
                switch ( input.LA(1) ) {
                case SCOPE:
                    {
                    int LA185_5 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt185=1;
                    }


                    }
                    break;
                case IDENT:
                    {
                    int LA185_6 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt185=1;
                    }


                    }
                    break;
                case LITERAL_typeof:
                case LITERAL___typeof__:
                case LITERAL___typeof:
                case LITERAL_typedef:
                case LITERAL_enum:
                case LITERAL_extern:
                case LITERAL_inline:
                case LITERAL___inline:
                case LITERAL_virtual:
                case LITERAL_explicit:
                case LITERAL_friend:
                case LITERAL_typename:
                case LITERAL_auto:
                case LITERAL_register:
                case LITERAL_static:
                case LITERAL_mutable:
                case LITERAL_const:
                case LITERAL___const__:
                case LITERAL___const:
                case LITERAL_volatile:
                case LITERAL_char:
                case LITERAL_wchar_t:
                case LITERAL_bool:
                case LITERAL_short:
                case LITERAL_int:
                case LITERAL_long:
                case LITERAL_signed:
                case LITERAL_unsigned:
                case LITERAL_float:
                case LITERAL_double:
                case LITERAL_void:
                case LITERAL_class:
                case LITERAL_struct:
                case LITERAL_union:
                case LITERAL___global:
                case LITERAL___thread:
                case LITERAL___symbolic:
                case LITERAL___hidden:
                case LITERAL_constexpr:
                case LITERAL_decltype:
                case LITERAL_thread_local:
                case LITERAL_char16_t:
                case LITERAL_char32_t:
                case LITERAL___decltype:
                case LITERAL___builtin_va_list:
                    {
                    alt185=1;
                    }
                    break;

                }

                switch (alt185) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1815:9: decl_specifier
            	    {
            	    pushFollow(FOLLOW_decl_specifier_in_function_declaration32704);
            	    decl_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop185;
                }
            } while (true);


            pushFollow(FOLLOW_function_declarator_in_function_declaration32707);
            function_declarator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("function_declaration", 103);
            Declaration_stack.pop();

            if(state.backtracking == 0){action.end_function_declaration(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "function_declaration"



    // $ANTLR start "function_body"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1824:1: function_body[boolean class_late_binding] : compound_statement[class_late_binding] ;
    public final void function_body(boolean class_late_binding) throws RecognitionException {
        traceIn("function_body", 104);
        if(state.backtracking == 0){action.function_body(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1826:5: ( compound_statement[class_late_binding] )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1827:9: compound_statement[class_late_binding]
            {
            pushFollow(FOLLOW_compound_statement_in_function_body32930);
            compound_statement(class_late_binding);

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("function_body", 104);
            if(state.backtracking == 0){action.end_function_body(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "function_body"



    // $ANTLR start "initializer"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1831:1: initializer : ( brace_or_equal_initializer | LPAREN expression_list RPAREN ) ;
    public final void initializer() throws RecognitionException {
        traceIn("initializer", 105);
        if(state.backtracking == 0){action.initializer(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1833:5: ( ( brace_or_equal_initializer | LPAREN expression_list RPAREN ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1834:5: ( brace_or_equal_initializer | LPAREN expression_list RPAREN )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1834:5: ( brace_or_equal_initializer | LPAREN expression_list RPAREN )
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==ASSIGNEQUAL||LA186_0==LCURLY) ) {
                alt186=1;
            }
            else if ( (LA186_0==LPAREN) ) {
                alt186=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;

            }
            switch (alt186) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1835:9: brace_or_equal_initializer
                    {
                    pushFollow(FOLLOW_brace_or_equal_initializer_in_initializer33193);
                    brace_or_equal_initializer();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1837:9: LPAREN expression_list RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_initializer33209); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.initializer(action.INITIALIZER__LPAREN, input.LT(0));}

                    pushFollow(FOLLOW_expression_list_in_initializer33286);
                    expression_list();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RPAREN,FOLLOW_RPAREN_in_initializer33297); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.initializer(action.INITIALIZER__RPAREN, input.LT(0));}

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("initializer", 105);
            if(state.backtracking == 0){action.end_initializer(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "initializer"



    // $ANTLR start "brace_or_equal_initializer"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1844:1: brace_or_equal_initializer : ( ASSIGNEQUAL initializer_clause | braced_init_list ) ;
    public final void brace_or_equal_initializer() throws RecognitionException {
        traceIn("brace_or_equal_initializer", 106);
        if(state.backtracking == 0){action.brace_or_equal_initializer(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1846:5: ( ( ASSIGNEQUAL initializer_clause | braced_init_list ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1847:5: ( ASSIGNEQUAL initializer_clause | braced_init_list )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1847:5: ( ASSIGNEQUAL initializer_clause | braced_init_list )
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==ASSIGNEQUAL) ) {
                alt187=1;
            }
            else if ( (LA187_0==LCURLY) ) {
                alt187=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;

            }
            switch (alt187) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1848:9: ASSIGNEQUAL initializer_clause
                    {
                    match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_brace_or_equal_initializer33706); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.brace_or_equal_initializer(action.BRACE_OR_EQUAL_INITIALIZER__ASSIGNEQUAL, input.LT(0));}

                    pushFollow(FOLLOW_initializer_clause_in_brace_or_equal_initializer33778);
                    initializer_clause();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1851:9: braced_init_list
                    {
                    pushFollow(FOLLOW_braced_init_list_in_brace_or_equal_initializer33795);
                    braced_init_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("brace_or_equal_initializer", 106);
            if(state.backtracking == 0){action.end_brace_or_equal_initializer(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "brace_or_equal_initializer"



    // $ANTLR start "initializer_clause"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1856:1: initializer_clause : ( assignment_expression | braced_init_list ) ;
    public final void initializer_clause() throws RecognitionException {
        traceIn("initializer_clause", 107);
        if(state.backtracking == 0){action.initializer_clause(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1858:5: ( ( assignment_expression | braced_init_list ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1859:5: ( assignment_expression | braced_init_list )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1859:5: ( assignment_expression | braced_init_list )
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==QUESTIONMARK||LA188_0==LPAREN||LA188_0==LSQUARE||LA188_0==PLUS||(LA188_0 >= PLUSPLUS && LA188_0 <= MINUS)||(LA188_0 >= MINUSMINUS && LA188_0 <= STAR)||LA188_0==NOT||LA188_0==AMPERSAND||LA188_0==TILDE||LA188_0==SCOPE||LA188_0==FLOATONE||(LA188_0 >= HEXADECIMALINT && LA188_0 <= DECIMALINT)||(LA188_0 >= CHAR_LITERAL && LA188_0 <= STRING_LITERAL)||(LA188_0 >= NUMBER && LA188_0 <= IDENT)||LA188_0==LITERAL_OPERATOR||(LA188_0 >= LITERAL_typeof && LA188_0 <= LITERAL___typeof)||(LA188_0 >= LITERAL_typename && LA188_0 <= LITERAL_auto)||LA188_0==LITERAL_const_cast||(LA188_0 >= LITERAL_char && LA188_0 <= LITERAL_signed)||LA188_0==LITERAL_unsigned||(LA188_0 >= LITERAL_float && LA188_0 <= LITERAL_void)||(LA188_0 >= LITERAL_this && LA188_0 <= LITERAL_false)||LA188_0==LITERAL_throw||(LA188_0 >= LITERAL_sizeof && LA188_0 <= LITERAL_new)||LA188_0==LITERAL_delete||LA188_0==LITERAL_decltype||(LA188_0 >= LITERAL_char16_t && LA188_0 <= LITERAL___decltype)||LA188_0==LITERAL___null||LA188_0==LITERAL___is_class||LA188_0==LITERAL___is_pod||(LA188_0 >= LITERAL___has_nothrow_assign && LA188_0 <= LITERAL___builtin_va_list)||LA188_0==LITERAL_typeid) ) {
                alt188=1;
            }
            else if ( (LA188_0==LCURLY) ) {
                alt188=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;

            }
            switch (alt188) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1860:9: assignment_expression
                    {
                    pushFollow(FOLLOW_assignment_expression_in_initializer_clause34063);
                    assignment_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1862:9: braced_init_list
                    {
                    pushFollow(FOLLOW_braced_init_list_in_initializer_clause34080);
                    braced_init_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("initializer_clause", 107);
            if(state.backtracking == 0){action.end_initializer_clause(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "initializer_clause"



    // $ANTLR start "initializer_list"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1867:1: initializer_list : initializer_clause ( COMMA initializer_clause )* ;
    public final void initializer_list() throws RecognitionException {
        traceIn("initializer_list", 108);
        if(state.backtracking == 0){action.initializer_list(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1869:9: ( initializer_clause ( COMMA initializer_clause )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1870:9: initializer_clause ( COMMA initializer_clause )*
            {
            pushFollow(FOLLOW_initializer_clause_in_initializer_list34416);
            initializer_clause();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1871:9: ( COMMA initializer_clause )*
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==COMMA) ) {
                    int LA189_1 = input.LA(2);

                    if ( (LA189_1==QUESTIONMARK||LA189_1==LPAREN||LA189_1==LSQUARE||LA189_1==LCURLY||LA189_1==PLUS||(LA189_1 >= PLUSPLUS && LA189_1 <= MINUS)||(LA189_1 >= MINUSMINUS && LA189_1 <= STAR)||LA189_1==NOT||LA189_1==AMPERSAND||LA189_1==TILDE||LA189_1==SCOPE||LA189_1==FLOATONE||(LA189_1 >= HEXADECIMALINT && LA189_1 <= DECIMALINT)||(LA189_1 >= CHAR_LITERAL && LA189_1 <= STRING_LITERAL)||(LA189_1 >= NUMBER && LA189_1 <= IDENT)||LA189_1==LITERAL_OPERATOR||(LA189_1 >= LITERAL_typeof && LA189_1 <= LITERAL___typeof)||(LA189_1 >= LITERAL_typename && LA189_1 <= LITERAL_auto)||LA189_1==LITERAL_const_cast||(LA189_1 >= LITERAL_char && LA189_1 <= LITERAL_signed)||LA189_1==LITERAL_unsigned||(LA189_1 >= LITERAL_float && LA189_1 <= LITERAL_void)||(LA189_1 >= LITERAL_this && LA189_1 <= LITERAL_false)||LA189_1==LITERAL_throw||(LA189_1 >= LITERAL_sizeof && LA189_1 <= LITERAL_new)||LA189_1==LITERAL_delete||LA189_1==LITERAL_decltype||(LA189_1 >= LITERAL_char16_t && LA189_1 <= LITERAL___decltype)||LA189_1==LITERAL___null||LA189_1==LITERAL___is_class||LA189_1==LITERAL___is_pod||(LA189_1 >= LITERAL___has_nothrow_assign && LA189_1 <= LITERAL___builtin_va_list)||LA189_1==LITERAL_typeid) ) {
                        alt189=1;
                    }


                }


                switch (alt189) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1872:13: COMMA initializer_clause
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_initializer_list34444); if (state.failed) return ;

            	    if ( state.backtracking==0 ) {action.initializer_list(action.INITIALIZER_LIST__COMMA, input.LT(0));}

            	    pushFollow(FOLLOW_initializer_clause_in_initializer_list34522);
            	    initializer_clause();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop189;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("initializer_list", 108);
            if(state.backtracking == 0){action.end_initializer_list(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "initializer_list"



    // $ANTLR start "braced_init_list"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1878:1: braced_init_list : LCURLY ( initializer_list ( COMMA )? )? RCURLY ;
    public final void braced_init_list() throws RecognitionException {
        traceIn("braced_init_list", 109);
        if(state.backtracking == 0){action.braced_init_list(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1880:5: ( LCURLY ( initializer_list ( COMMA )? )? RCURLY )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1881:5: LCURLY ( initializer_list ( COMMA )? )? RCURLY
            {
            match(input,LCURLY,FOLLOW_LCURLY_in_braced_init_list34855); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1882:5: ( initializer_list ( COMMA )? )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==QUESTIONMARK||LA191_0==LPAREN||LA191_0==LSQUARE||LA191_0==LCURLY||LA191_0==PLUS||(LA191_0 >= PLUSPLUS && LA191_0 <= MINUS)||(LA191_0 >= MINUSMINUS && LA191_0 <= STAR)||LA191_0==NOT||LA191_0==AMPERSAND||LA191_0==TILDE||LA191_0==SCOPE||LA191_0==FLOATONE||(LA191_0 >= HEXADECIMALINT && LA191_0 <= DECIMALINT)||(LA191_0 >= CHAR_LITERAL && LA191_0 <= STRING_LITERAL)||(LA191_0 >= NUMBER && LA191_0 <= IDENT)||LA191_0==LITERAL_OPERATOR||(LA191_0 >= LITERAL_typeof && LA191_0 <= LITERAL___typeof)||(LA191_0 >= LITERAL_typename && LA191_0 <= LITERAL_auto)||LA191_0==LITERAL_const_cast||(LA191_0 >= LITERAL_char && LA191_0 <= LITERAL_signed)||LA191_0==LITERAL_unsigned||(LA191_0 >= LITERAL_float && LA191_0 <= LITERAL_void)||(LA191_0 >= LITERAL_this && LA191_0 <= LITERAL_false)||LA191_0==LITERAL_throw||(LA191_0 >= LITERAL_sizeof && LA191_0 <= LITERAL_new)||LA191_0==LITERAL_delete||LA191_0==LITERAL_decltype||(LA191_0 >= LITERAL_char16_t && LA191_0 <= LITERAL___decltype)||LA191_0==LITERAL___null||LA191_0==LITERAL___is_class||LA191_0==LITERAL___is_pod||(LA191_0 >= LITERAL___has_nothrow_assign && LA191_0 <= LITERAL___builtin_va_list)||LA191_0==LITERAL_typeid) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1883:9: initializer_list ( COMMA )?
                    {
                    pushFollow(FOLLOW_initializer_list_in_braced_init_list34872);
                    initializer_list();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1884:9: ( COMMA )?
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==COMMA) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1885:13: COMMA
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_braced_init_list34897); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.braced_init_list(action.BRACED_INIT_LIST__COMMA, input.LT(0));}

                            }
                            break;

                    }


                    }
                    break;

            }


            match(input,RCURLY,FOLLOW_RCURLY_in_braced_init_list34986); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("braced_init_list", 109);
            if(state.backtracking == 0){action.end_braced_init_list(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "braced_init_list"



    // $ANTLR start "class_name"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1893:1: class_name : simple_template_id_or_IDENT ;
    public final void class_name() throws RecognitionException {
        traceIn("class_name", 110);
        if(state.backtracking == 0){action.class_name(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1895:5: ( simple_template_id_or_IDENT )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1896:9: simple_template_id_or_IDENT
            {
            pushFollow(FOLLOW_simple_template_id_or_IDENT_in_class_name35312);
            simple_template_id_or_IDENT();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("class_name", 110);
            if(state.backtracking == 0){action.end_class_name(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "class_name"



    // $ANTLR start "class_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1900:1: class_specifier : class_head LCURLY sync_member ( member_specification[false] sync_member )* RCURLY ;
    public final void class_specifier() throws RecognitionException {
        traceIn("class_specifier", 111);
        Token LCURLY47=null;
        Token RCURLY48=null;

        if(state.backtracking == 0){action.class_declaration(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1902:5: ( class_head LCURLY sync_member ( member_specification[false] sync_member )* RCURLY )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1903:9: class_head LCURLY sync_member ( member_specification[false] sync_member )* RCURLY
            {
            pushFollow(FOLLOW_class_head_in_class_specifier35537);
            class_head();

            state._fsp--;
            if (state.failed) return ;

            LCURLY47=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_class_specifier35548); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.class_body(LCURLY47);}

            pushFollow(FOLLOW_sync_member_in_class_specifier35625);
            sync_member();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1906:9: ( member_specification[false] sync_member )*
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==ELLIPSIS||LA192_0==COLON||LA192_0==SEMICOLON||LA192_0==LPAREN||LA192_0==LSQUARE||LA192_0==STAR||LA192_0==AND||LA192_0==AMPERSAND||LA192_0==TILDE||LA192_0==SCOPE||LA192_0==IDENT||LA192_0==LITERAL_OPERATOR||(LA192_0 >= LITERAL_typeof && LA192_0 <= LITERAL_enum)||(LA192_0 >= LITERAL_extern && LA192_0 <= LITERAL_inline)||(LA192_0 >= LITERAL___inline && LA192_0 <= LITERAL_friend)||(LA192_0 >= LITERAL_typename && LA192_0 <= LITERAL___const)||LA192_0==LITERAL_volatile||(LA192_0 >= LITERAL_char && LA192_0 <= LITERAL_signed)||LA192_0==LITERAL_unsigned||(LA192_0 >= LITERAL_float && LA192_0 <= LITERAL_void)||(LA192_0 >= LITERAL_class && LA192_0 <= LITERAL_union)||(LA192_0 >= LITERAL_public && LA192_0 <= LITERAL_private)||(LA192_0 >= LITERAL_using && LA192_0 <= LITERAL_export)||LA192_0==LITERAL_new||(LA192_0 >= LITERAL___extension__ && LA192_0 <= LITERAL___attribute__)||LA192_0==LITERAL___global||LA192_0==LITERAL___thread||(LA192_0 >= LITERAL___symbolic && LA192_0 <= LITERAL_decltype)||(LA192_0 >= LITERAL_thread_local && LA192_0 <= LITERAL_char32_t)||LA192_0==LITERAL___decltype||LA192_0==LITERAL___builtin_va_list) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1907:13: member_specification[false] sync_member
            	    {
            	    pushFollow(FOLLOW_member_specification_in_class_specifier35649);
            	    member_specification(false);

            	    state._fsp--;
            	    if (state.failed) return ;

            	    pushFollow(FOLLOW_sync_member_in_class_specifier35664);
            	    sync_member();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);


            RCURLY48=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_class_specifier35685); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.end_class_body(RCURLY48);}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("class_specifier", 111);
            if(state.backtracking == 0){action.end_class_declaration(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "class_specifier"



    // $ANTLR start "optionally_qualified_name"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1927:1: optionally_qualified_name : ( ( ( lookup_simple_template_id | IDENT ) SCOPE )=> nested_name_specifier )? simple_template_id_or_IDENT ;
    public final void optionally_qualified_name() throws RecognitionException {
        traceIn("optionally_qualified_name", 112);
        if(state.backtracking == 0){action.optionally_qualified_name(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1929:5: ( ( ( ( lookup_simple_template_id | IDENT ) SCOPE )=> nested_name_specifier )? simple_template_id_or_IDENT )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1931:9: ( ( ( lookup_simple_template_id | IDENT ) SCOPE )=> nested_name_specifier )? simple_template_id_or_IDENT
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1931:9: ( ( ( lookup_simple_template_id | IDENT ) SCOPE )=> nested_name_specifier )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==IDENT) ) {
                int LA193_1 = input.LA(2);

                if ( (synpred39_CXXParser()) ) {
                    alt193=1;
                }
            }
            switch (alt193) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1931:10: ( ( lookup_simple_template_id | IDENT ) SCOPE )=> nested_name_specifier
                    {
                    pushFollow(FOLLOW_nested_name_specifier_in_optionally_qualified_name36033);
                    nested_name_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            pushFollow(FOLLOW_simple_template_id_or_IDENT_in_optionally_qualified_name36046);
            simple_template_id_or_IDENT();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("optionally_qualified_name", 112);
            if(state.backtracking == 0){action.end_optionally_qualified_name(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "optionally_qualified_name"



    // $ANTLR start "class_head"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1936:1: class_head : class_key ( attribute_specifiers )? ( optionally_qualified_name )? ( class_virtual_specifier )* ( base_clause )? ;
    public final void class_head() throws RecognitionException {
        traceIn("class_head", 113);
        if(state.backtracking == 0){action.class_head(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1938:5: ( class_key ( attribute_specifiers )? ( optionally_qualified_name )? ( class_virtual_specifier )* ( base_clause )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1939:9: class_key ( attribute_specifiers )? ( optionally_qualified_name )? ( class_virtual_specifier )* ( base_clause )?
            {
            pushFollow(FOLLOW_class_key_in_class_head36346);
            class_key();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1940:9: ( attribute_specifiers )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==LSQUARE||(LA194_0 >= LITERAL___extension__ && LA194_0 <= LITERAL___attribute__)||LA194_0==LITERAL_alignas) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1940:9: attribute_specifiers
                    {
                    pushFollow(FOLLOW_attribute_specifiers_in_class_head36357);
                    attribute_specifiers();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1941:9: ( optionally_qualified_name )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==IDENT) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1941:9: optionally_qualified_name
                    {
                    pushFollow(FOLLOW_optionally_qualified_name_in_class_head36368);
                    optionally_qualified_name();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1942:9: ( class_virtual_specifier )*
            loop196:
            do {
                int alt196=2;
                int LA196_0 = input.LA(1);

                if ( (LA196_0==LITERAL_explicit||LA196_0==LITERAL_final) ) {
                    alt196=1;
                }


                switch (alt196) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1942:9: class_virtual_specifier
            	    {
            	    pushFollow(FOLLOW_class_virtual_specifier_in_class_head36380);
            	    class_virtual_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop196;
                }
            } while (true);


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1943:9: ( base_clause )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==COLON) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1943:9: base_clause
                    {
                    pushFollow(FOLLOW_base_clause_in_class_head36392);
                    base_clause();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("class_head", 113);
            if(state.backtracking == 0){action.end_class_head(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "class_head"



    // $ANTLR start "class_virtual_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1947:1: class_virtual_specifier : ( LITERAL_final | LITERAL_explicit );
    public final void class_virtual_specifier() throws RecognitionException {
        traceIn("class_virtual_specifier", 114);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1947:24: ( LITERAL_final | LITERAL_explicit )
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==LITERAL_final) ) {
                alt198=1;
            }
            else if ( (LA198_0==LITERAL_explicit) ) {
                alt198=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;

            }
            switch (alt198) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1948:9: LITERAL_final
                    {
                    match(input,LITERAL_final,FOLLOW_LITERAL_final_in_class_virtual_specifier36549); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.class_virtual_specifier(action.CLASS_VIRTUAL_SPECIFIER__FINAL, input.LT(0));}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1950:9: LITERAL_explicit
                    {
                    match(input,LITERAL_explicit,FOLLOW_LITERAL_explicit_in_class_virtual_specifier36628); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.class_virtual_specifier(action.CLASS_VIRTUAL_SPECIFIER__EXPLICIT, input.LT(0));}

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("class_virtual_specifier", 114);
        }
        return ;
    }
    // $ANTLR end "class_virtual_specifier"



    // $ANTLR start "class_key"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1953:1: class_key : ( LITERAL_class | LITERAL_struct | LITERAL_union );
    public final void class_key() throws RecognitionException {
        traceIn("class_key", 115);
        Token LITERAL_class49=null;
        Token LITERAL_struct50=null;
        Token LITERAL_union51=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1953:10: ( LITERAL_class | LITERAL_struct | LITERAL_union )
            int alt199=3;
            switch ( input.LA(1) ) {
            case LITERAL_class:
                {
                alt199=1;
                }
                break;
            case LITERAL_struct:
                {
                alt199=2;
                }
                break;
            case LITERAL_union:
                {
                alt199=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;

            }

            switch (alt199) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1954:9: LITERAL_class
                    {
                    LITERAL_class49=(Token)match(input,LITERAL_class,FOLLOW_LITERAL_class_in_class_key36705); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.class_kind(LITERAL_class49);}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1956:9: LITERAL_struct
                    {
                    LITERAL_struct50=(Token)match(input,LITERAL_struct,FOLLOW_LITERAL_struct_in_class_key36781); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.class_kind(LITERAL_struct50);}

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1958:9: LITERAL_union
                    {
                    LITERAL_union51=(Token)match(input,LITERAL_union,FOLLOW_LITERAL_union_in_class_key36856); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.class_kind(LITERAL_union51);}

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("class_key", 115);
        }
        return ;
    }
    // $ANTLR end "class_key"



    // $ANTLR start "member_specification"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1961:1: member_specification[boolean class_late_binding] : ( access_specifier COLON | member_declaration[field_decl, class_late_binding] );
    public final void member_specification(boolean class_late_binding) throws RecognitionException {
        traceIn("member_specification", 116);
        if(state.backtracking == 0){action.member_specification(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1963:5: ( access_specifier COLON | member_declaration[field_decl, class_late_binding] )
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( ((LA200_0 >= LITERAL_public && LA200_0 <= LITERAL_private)) ) {
                alt200=1;
            }
            else if ( (LA200_0==ELLIPSIS||LA200_0==COLON||LA200_0==SEMICOLON||LA200_0==LPAREN||LA200_0==LSQUARE||LA200_0==STAR||LA200_0==AND||LA200_0==AMPERSAND||LA200_0==TILDE||LA200_0==SCOPE||LA200_0==IDENT||LA200_0==LITERAL_OPERATOR||(LA200_0 >= LITERAL_typeof && LA200_0 <= LITERAL_enum)||(LA200_0 >= LITERAL_extern && LA200_0 <= LITERAL_inline)||(LA200_0 >= LITERAL___inline && LA200_0 <= LITERAL_friend)||(LA200_0 >= LITERAL_typename && LA200_0 <= LITERAL___const)||LA200_0==LITERAL_volatile||(LA200_0 >= LITERAL_char && LA200_0 <= LITERAL_signed)||LA200_0==LITERAL_unsigned||(LA200_0 >= LITERAL_float && LA200_0 <= LITERAL_void)||(LA200_0 >= LITERAL_class && LA200_0 <= LITERAL_union)||(LA200_0 >= LITERAL_using && LA200_0 <= LITERAL_export)||LA200_0==LITERAL_new||(LA200_0 >= LITERAL___extension__ && LA200_0 <= LITERAL___attribute__)||LA200_0==LITERAL___global||LA200_0==LITERAL___thread||(LA200_0 >= LITERAL___symbolic && LA200_0 <= LITERAL_decltype)||(LA200_0 >= LITERAL_thread_local && LA200_0 <= LITERAL_char32_t)||LA200_0==LITERAL___decltype||LA200_0==LITERAL___builtin_va_list) ) {
                alt200=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;

            }
            switch (alt200) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1964:9: access_specifier COLON
                    {
                    pushFollow(FOLLOW_access_specifier_in_member_specification37021);
                    access_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,COLON,FOLLOW_COLON_in_member_specification37032); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.member_specification(action.MEMBER_SPECIFICATION__COLON, input.LT(0));}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1967:9: member_declaration[field_decl, class_late_binding]
                    {
                    pushFollow(FOLLOW_member_declaration_in_member_specification37116);
                    member_declaration(field_decl, class_late_binding);

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("member_specification", 116);
            if(state.backtracking == 0){action.end_member_specification(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "member_specification"



    // $ANTLR start "member_declaration"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1999:1: member_declaration[decl_kind kind, boolean class_late_binding] : ( ( attribute_specifiers )? simple_member_declaration_or_function_definition[kind, class_late_binding] | using_declaration | template_declaration[kind] | static_assert_declaration | alias_declaration );
    public final void member_declaration(decl_kind kind, boolean class_late_binding) throws RecognitionException {
        traceIn("member_declaration", 117);
        if(state.backtracking == 0){action.member_declaration(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2001:5: ( ( attribute_specifiers )? simple_member_declaration_or_function_definition[kind, class_late_binding] | using_declaration | template_declaration[kind] | static_assert_declaration | alias_declaration )
            int alt202=5;
            switch ( input.LA(1) ) {
            case ELLIPSIS:
            case COLON:
            case SEMICOLON:
            case LPAREN:
            case LSQUARE:
            case STAR:
            case AND:
            case AMPERSAND:
            case TILDE:
            case SCOPE:
            case IDENT:
            case LITERAL_OPERATOR:
            case LITERAL_typeof:
            case LITERAL___typeof__:
            case LITERAL___typeof:
            case LITERAL_typedef:
            case LITERAL_enum:
            case LITERAL_extern:
            case LITERAL_inline:
            case LITERAL___inline:
            case LITERAL_virtual:
            case LITERAL_explicit:
            case LITERAL_friend:
            case LITERAL_typename:
            case LITERAL_auto:
            case LITERAL_register:
            case LITERAL_static:
            case LITERAL_mutable:
            case LITERAL_const:
            case LITERAL___const__:
            case LITERAL___const:
            case LITERAL_volatile:
            case LITERAL_char:
            case LITERAL_wchar_t:
            case LITERAL_bool:
            case LITERAL_short:
            case LITERAL_int:
            case LITERAL_long:
            case LITERAL_signed:
            case LITERAL_unsigned:
            case LITERAL_float:
            case LITERAL_double:
            case LITERAL_void:
            case LITERAL_class:
            case LITERAL_struct:
            case LITERAL_union:
            case LITERAL_new:
            case LITERAL___extension__:
            case LITERAL___attribute__:
            case LITERAL___global:
            case LITERAL___thread:
            case LITERAL___symbolic:
            case LITERAL___hidden:
            case LITERAL_final:
            case LITERAL_override:
            case LITERAL_constexpr:
            case LITERAL_decltype:
            case LITERAL_thread_local:
            case LITERAL_alignas:
            case LITERAL_char16_t:
            case LITERAL_char32_t:
            case LITERAL___decltype:
            case LITERAL___builtin_va_list:
                {
                alt202=1;
                }
                break;
            case LITERAL_using:
                {
                int LA202_2 = input.LA(2);

                if ( (LA202_2==IDENT) ) {
                    int LA202_5 = input.LA(3);

                    if ( (LA202_5==ASSIGNEQUAL) ) {
                        alt202=5;
                    }
                    else if ( (LA202_5==SEMICOLON||LA202_5==LESSTHAN||LA202_5==SCOPE) ) {
                        alt202=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 202, 5, input);

                        throw nvae;

                    }
                }
                else if ( (LA202_2==TILDE||LA202_2==SCOPE||LA202_2==LITERAL_OPERATOR||LA202_2==LITERAL_typename) ) {
                    alt202=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 202, 2, input);

                    throw nvae;

                }
                }
                break;
            case LITERAL_template:
            case LITERAL_export:
                {
                alt202=3;
                }
                break;
            case LITERAL_static_assert:
                {
                alt202=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;

            }

            switch (alt202) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2002:9: ( attribute_specifiers )? simple_member_declaration_or_function_definition[kind, class_late_binding]
                    {
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2002:9: ( attribute_specifiers )?
                    int alt201=2;
                    int LA201_0 = input.LA(1);

                    if ( (LA201_0==LSQUARE||(LA201_0 >= LITERAL___extension__ && LA201_0 <= LITERAL___attribute__)||LA201_0==LITERAL_alignas) ) {
                        alt201=1;
                    }
                    switch (alt201) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2002:9: attribute_specifiers
                            {
                            pushFollow(FOLLOW_attribute_specifiers_in_member_declaration37302);
                            attribute_specifiers();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_simple_member_declaration_or_function_definition_in_member_declaration37305);
                    simple_member_declaration_or_function_definition(kind, class_late_binding);

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2009:9: using_declaration
                    {
                    pushFollow(FOLLOW_using_declaration_in_member_declaration37333);
                    using_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2011:9: template_declaration[kind]
                    {
                    pushFollow(FOLLOW_template_declaration_in_member_declaration37349);
                    template_declaration(kind);

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2013:9: static_assert_declaration
                    {
                    pushFollow(FOLLOW_static_assert_declaration_in_member_declaration37366);
                    static_assert_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2015:9: alias_declaration
                    {
                    pushFollow(FOLLOW_alias_declaration_in_member_declaration37382);
                    alias_declaration();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("member_declaration", 117);
            if(state.backtracking == 0){action.end_member_declaration(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "member_declaration"



    // $ANTLR start "simple_member_declaration_or_function_definition"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2019:1: simple_member_declaration_or_function_definition[decl_kind kind, boolean class_late_binding] : ( decl_specifier )* ( ( ( IDENT )? COLON )=> member_bitfield_declarator ( COMMA member_declarator )* SEMICOLON | ( constructor_declarator )=> constructor_declarator ( ( COMMA member_declarator )* SEMICOLON | function_definition_after_declarator[class_late_binding, true, false] ) | declarator ({...}? function_definition_after_declarator[class_late_binding, true, false] | ( constant_initializer )? ( COMMA member_declarator )* SEMICOLON ) | SEMICOLON ) ;
    public final void simple_member_declaration_or_function_definition(decl_kind kind, boolean class_late_binding) throws RecognitionException {
        traceIn("simple_member_declaration_or_function_definition", 118);
        declarator_type_t declarator52 =null;


        if(state.backtracking == 0){action.simple_member_declaration(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2021:5: ( ( decl_specifier )* ( ( ( IDENT )? COLON )=> member_bitfield_declarator ( COMMA member_declarator )* SEMICOLON | ( constructor_declarator )=> constructor_declarator ( ( COMMA member_declarator )* SEMICOLON | function_definition_after_declarator[class_late_binding, true, false] ) | declarator ({...}? function_definition_after_declarator[class_late_binding, true, false] | ( constant_initializer )? ( COMMA member_declarator )* SEMICOLON ) | SEMICOLON ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2022:81: ( decl_specifier )* ( ( ( IDENT )? COLON )=> member_bitfield_declarator ( COMMA member_declarator )* SEMICOLON | ( constructor_declarator )=> constructor_declarator ( ( COMMA member_declarator )* SEMICOLON | function_definition_after_declarator[class_late_binding, true, false] ) | declarator ({...}? function_definition_after_declarator[class_late_binding, true, false] | ( constant_initializer )? ( COMMA member_declarator )* SEMICOLON ) | SEMICOLON )
            {
            if ( state.backtracking==0 ) {action.decl_specifiers(input.LT(1));}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2023:9: ( decl_specifier )*
            loop203:
            do {
                int alt203=2;
                switch ( input.LA(1) ) {
                case IDENT:
                    {
                    int LA203_1 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt203=1;
                    }


                    }
                    break;
                case SCOPE:
                    {
                    int LA203_10 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt203=1;
                    }


                    }
                    break;
                case LITERAL_typeof:
                case LITERAL___typeof__:
                case LITERAL___typeof:
                case LITERAL_typedef:
                case LITERAL_enum:
                case LITERAL_extern:
                case LITERAL_inline:
                case LITERAL___inline:
                case LITERAL_virtual:
                case LITERAL_explicit:
                case LITERAL_friend:
                case LITERAL_typename:
                case LITERAL_auto:
                case LITERAL_register:
                case LITERAL_static:
                case LITERAL_mutable:
                case LITERAL_const:
                case LITERAL___const__:
                case LITERAL___const:
                case LITERAL_volatile:
                case LITERAL_char:
                case LITERAL_wchar_t:
                case LITERAL_bool:
                case LITERAL_short:
                case LITERAL_int:
                case LITERAL_long:
                case LITERAL_signed:
                case LITERAL_unsigned:
                case LITERAL_float:
                case LITERAL_double:
                case LITERAL_void:
                case LITERAL_class:
                case LITERAL_struct:
                case LITERAL_union:
                case LITERAL___global:
                case LITERAL___thread:
                case LITERAL___symbolic:
                case LITERAL___hidden:
                case LITERAL_constexpr:
                case LITERAL_decltype:
                case LITERAL_thread_local:
                case LITERAL_char16_t:
                case LITERAL_char32_t:
                case LITERAL___decltype:
                case LITERAL___builtin_va_list:
                    {
                    alt203=1;
                    }
                    break;

                }

                switch (alt203) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2023:9: decl_specifier
            	    {
            	    pushFollow(FOLLOW_decl_specifier_in_simple_member_declaration_or_function_definition37645);
            	    decl_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop203;
                }
            } while (true);


            if ( state.backtracking==0 ) {action.end_decl_specifiers(null/*input.LT(0)*/);}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2024:9: ( ( ( IDENT )? COLON )=> member_bitfield_declarator ( COMMA member_declarator )* SEMICOLON | ( constructor_declarator )=> constructor_declarator ( ( COMMA member_declarator )* SEMICOLON | function_definition_after_declarator[class_late_binding, true, false] ) | declarator ({...}? function_definition_after_declarator[class_late_binding, true, false] | ( constant_initializer )? ( COMMA member_declarator )* SEMICOLON ) | SEMICOLON )
            int alt210=4;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==IDENT) ) {
                int LA210_1 = input.LA(2);

                if ( (synpred40_CXXParser()) ) {
                    alt210=1;
                }
                else if ( (true) ) {
                    alt210=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 210, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA210_0==LITERAL_override) && (synpred40_CXXParser())) {
                alt210=1;
            }
            else if ( (LA210_0==LITERAL_final) && (synpred40_CXXParser())) {
                alt210=1;
            }
            else if ( (LA210_0==LITERAL_new) && (synpred40_CXXParser())) {
                alt210=1;
            }
            else if ( (LA210_0==COLON) && (synpred40_CXXParser())) {
                alt210=1;
            }
            else if ( (LA210_0==LPAREN) ) {
                int LA210_6 = input.LA(2);

                if ( (synpred41_CXXParser()) ) {
                    alt210=2;
                }
                else if ( (true) ) {
                    alt210=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 210, 6, input);

                    throw nvae;

                }
            }
            else if ( (LA210_0==ELLIPSIS||LA210_0==STAR||LA210_0==AND||LA210_0==AMPERSAND||LA210_0==TILDE||LA210_0==SCOPE||LA210_0==LITERAL_OPERATOR) ) {
                alt210=3;
            }
            else if ( (LA210_0==SEMICOLON) ) {
                alt210=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);

                throw nvae;

            }
            switch (alt210) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2025:13: ( ( IDENT )? COLON )=> member_bitfield_declarator ( COMMA member_declarator )* SEMICOLON
                    {
                    pushFollow(FOLLOW_member_bitfield_declarator_in_simple_member_declaration_or_function_definition37752);
                    member_bitfield_declarator();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2027:17: ( COMMA member_declarator )*
                    loop204:
                    do {
                        int alt204=2;
                        int LA204_0 = input.LA(1);

                        if ( (LA204_0==COMMA) ) {
                            alt204=1;
                        }


                        switch (alt204) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2028:21: COMMA member_declarator
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_simple_member_declaration_or_function_definition37794); if (state.failed) return ;

                    	    if ( state.backtracking==0 ) {action.simple_member_declaration(action.SIMPLE_MEMBER_DECLARATION__COMMA2, input.LT(0));}

                    	    pushFollow(FOLLOW_member_declarator_in_simple_member_declaration_or_function_definition37872);
                    	    member_declarator();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop204;
                        }
                    } while (true);


                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_member_declaration_or_function_definition37911); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.simple_member_declaration(action.SIMPLE_MEMBER_DECLARATION__SEMICOLON, input.LT(0));}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2033:13: ( constructor_declarator )=> constructor_declarator ( ( COMMA member_declarator )* SEMICOLON | function_definition_after_declarator[class_late_binding, true, false] )
                    {
                    pushFollow(FOLLOW_constructor_declarator_in_simple_member_declaration_or_function_definition38012);
                    constructor_declarator();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2035:17: ( ( COMMA member_declarator )* SEMICOLON | function_definition_after_declarator[class_late_binding, true, false] )
                    int alt206=2;
                    int LA206_0 = input.LA(1);

                    if ( (LA206_0==COMMA||LA206_0==SEMICOLON) ) {
                        alt206=1;
                    }
                    else if ( ((LA206_0 >= ASSIGNEQUAL && LA206_0 <= COLON)||LA206_0==LCURLY||LA206_0==LITERAL_try) ) {
                        alt206=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 206, 0, input);

                        throw nvae;

                    }
                    switch (alt206) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2037:21: ( COMMA member_declarator )* SEMICOLON
                            {
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2037:21: ( COMMA member_declarator )*
                            loop205:
                            do {
                                int alt205=2;
                                int LA205_0 = input.LA(1);

                                if ( (LA205_0==COMMA) ) {
                                    alt205=1;
                                }


                                switch (alt205) {
                            	case 1 :
                            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2038:25: COMMA member_declarator
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_simple_member_declaration_or_function_definition38100); if (state.failed) return ;

                            	    if ( state.backtracking==0 ) {action.simple_member_declaration(action.SIMPLE_MEMBER_DECLARATION__COMMA2, input.LT(0));}

                            	    pushFollow(FOLLOW_member_declarator_in_simple_member_declaration_or_function_definition38178);
                            	    member_declarator();

                            	    state._fsp--;
                            	    if (state.failed) return ;

                            	    }
                            	    break;

                            	default :
                            	    break loop205;
                                }
                            } while (true);


                            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_member_declaration_or_function_definition38225); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.simple_member_declaration(action.SIMPLE_MEMBER_DECLARATION__SEMICOLON, input.LT(0));}

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2043:21: function_definition_after_declarator[class_late_binding, true, false]
                            {
                            pushFollow(FOLLOW_function_definition_after_declarator_in_simple_member_declaration_or_function_definition38317);
                            function_definition_after_declarator(class_late_binding, true, false);

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2046:13: declarator ({...}? function_definition_after_declarator[class_late_binding, true, false] | ( constant_initializer )? ( COMMA member_declarator )* SEMICOLON )
                    {
                    pushFollow(FOLLOW_declarator_in_simple_member_declaration_or_function_definition38360);
                    declarator52=declarator();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2047:13: ({...}? function_definition_after_declarator[class_late_binding, true, false] | ( constant_initializer )? ( COMMA member_declarator )* SEMICOLON )
                    int alt209=2;
                    switch ( input.LA(1) ) {
                    case ASSIGNEQUAL:
                        {
                        switch ( input.LA(2) ) {
                        case LITERAL_delete:
                            {
                            int LA209_4 = input.LA(3);

                            if ( (LA209_4==SEMICOLON) ) {
                                alt209=1;
                            }
                            else if ( (LA209_4==LPAREN||LA209_4==LSQUARE||LA209_4==PLUS||(LA209_4 >= PLUSPLUS && LA209_4 <= MINUS)||(LA209_4 >= MINUSMINUS && LA209_4 <= STAR)||LA209_4==NOT||LA209_4==AMPERSAND||LA209_4==TILDE||LA209_4==SCOPE||LA209_4==FLOATONE||(LA209_4 >= HEXADECIMALINT && LA209_4 <= DECIMALINT)||(LA209_4 >= CHAR_LITERAL && LA209_4 <= STRING_LITERAL)||(LA209_4 >= NUMBER && LA209_4 <= IDENT)||LA209_4==LITERAL_OPERATOR||(LA209_4 >= LITERAL_typeof && LA209_4 <= LITERAL___typeof)||(LA209_4 >= LITERAL_typename && LA209_4 <= LITERAL_auto)||LA209_4==LITERAL_const_cast||(LA209_4 >= LITERAL_char && LA209_4 <= LITERAL_signed)||LA209_4==LITERAL_unsigned||(LA209_4 >= LITERAL_float && LA209_4 <= LITERAL_void)||(LA209_4 >= LITERAL_this && LA209_4 <= LITERAL_false)||(LA209_4 >= LITERAL_sizeof && LA209_4 <= LITERAL_new)||LA209_4==LITERAL_delete||LA209_4==LITERAL_decltype||(LA209_4 >= LITERAL_char16_t && LA209_4 <= LITERAL___decltype)||LA209_4==LITERAL___null||LA209_4==LITERAL___is_class||LA209_4==LITERAL___is_pod||(LA209_4 >= LITERAL___has_nothrow_assign && LA209_4 <= LITERAL___builtin_va_list)||LA209_4==LITERAL_typeid) ) {
                                alt209=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 209, 4, input);

                                throw nvae;

                            }
                            }
                            break;
                        case LITERAL_default:
                            {
                            alt209=1;
                            }
                            break;
                        case QUESTIONMARK:
                        case LPAREN:
                        case LSQUARE:
                        case PLUS:
                        case PLUSPLUS:
                        case MINUS:
                        case MINUSMINUS:
                        case STAR:
                        case NOT:
                        case AMPERSAND:
                        case TILDE:
                        case SCOPE:
                        case FLOATONE:
                        case HEXADECIMALINT:
                        case OCTALINT:
                        case DECIMALINT:
                        case CHAR_LITERAL:
                        case STRING_LITERAL:
                        case NUMBER:
                        case IDENT:
                        case LITERAL_OPERATOR:
                        case LITERAL_typeof:
                        case LITERAL___typeof__:
                        case LITERAL___typeof:
                        case LITERAL_typename:
                        case LITERAL_auto:
                        case LITERAL_const_cast:
                        case LITERAL_char:
                        case LITERAL_wchar_t:
                        case LITERAL_bool:
                        case LITERAL_short:
                        case LITERAL_int:
                        case LITERAL_long:
                        case LITERAL_signed:
                        case LITERAL_unsigned:
                        case LITERAL_float:
                        case LITERAL_double:
                        case LITERAL_void:
                        case LITERAL_this:
                        case LITERAL_true:
                        case LITERAL_false:
                        case LITERAL_sizeof:
                        case LITERAL_dynamic_cast:
                        case LITERAL_static_cast:
                        case LITERAL_reinterpret_cast:
                        case LITERAL_new:
                        case LITERAL_decltype:
                        case LITERAL_char16_t:
                        case LITERAL_char32_t:
                        case LITERAL_noexcept:
                        case LITERAL___decltype:
                        case LITERAL___null:
                        case LITERAL___is_class:
                        case LITERAL___is_pod:
                        case LITERAL___has_nothrow_assign:
                        case LITERAL___has_nothrow_copy:
                        case LITERAL___has_nothrow_constructor:
                        case LITERAL___has_trivial_assign:
                        case LITERAL___has_trivial_copy:
                        case LITERAL___has_trivial_destructor:
                        case LITERAL___has_virtual_destructor:
                        case LITERAL___is_abstract:
                        case LITERAL___is_empty:
                        case LITERAL___is_literal_type:
                        case LITERAL___is_polymorphic:
                        case LITERAL___is_standard_layout:
                        case LITERAL___is_trivial:
                        case LITERAL___is_union:
                        case LITERAL___underlying_type:
                        case LITERAL___builtin_va_list:
                        case LITERAL_typeid:
                            {
                            alt209=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 209, 1, input);

                            throw nvae;

                        }

                        }
                        break;
                    case COLON:
                    case LCURLY:
                    case LITERAL_try:
                        {
                        alt209=1;
                        }
                        break;
                    case COMMA:
                    case SEMICOLON:
                        {
                        alt209=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 209, 0, input);

                        throw nvae;

                    }

                    switch (alt209) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2048:17: {...}? function_definition_after_declarator[class_late_binding, true, false]
                            {
                            if ( !(( /*declarator52.is_function()*/ (input.LA(1) != ASSIGNEQUAL && (input.LA(1) != COLON || input.LA(0) == RPAREN)) )) ) {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                throw new FailedPredicateException(input, "simple_member_declaration_or_function_definition", " /*$declarator.type.is_function()*/ (input.LA(1) != ASSIGNEQUAL && (input.LA(1) != COLON || input.LA(0) == RPAREN)) ");
                            }

                            pushFollow(FOLLOW_function_definition_after_declarator_in_simple_member_declaration_or_function_definition38414);
                            function_definition_after_declarator(class_late_binding, true, false);

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2052:17: ( constant_initializer )? ( COMMA member_declarator )* SEMICOLON
                            {
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2052:17: ( constant_initializer )?
                            int alt207=2;
                            int LA207_0 = input.LA(1);

                            if ( (LA207_0==ASSIGNEQUAL) ) {
                                alt207=1;
                            }
                            switch (alt207) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2052:17: constant_initializer
                                    {
                                    pushFollow(FOLLOW_constant_initializer_in_simple_member_declaration_or_function_definition38464);
                                    constant_initializer();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }


                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2053:17: ( COMMA member_declarator )*
                            loop208:
                            do {
                                int alt208=2;
                                int LA208_0 = input.LA(1);

                                if ( (LA208_0==COMMA) ) {
                                    alt208=1;
                                }


                                switch (alt208) {
                            	case 1 :
                            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2054:21: COMMA member_declarator
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_simple_member_declaration_or_function_definition38507); if (state.failed) return ;

                            	    if ( state.backtracking==0 ) {action.simple_member_declaration(action.SIMPLE_MEMBER_DECLARATION__COMMA2, input.LT(0));}

                            	    pushFollow(FOLLOW_member_declarator_in_simple_member_declaration_or_function_definition38585);
                            	    member_declarator();

                            	    state._fsp--;
                            	    if (state.failed) return ;

                            	    }
                            	    break;

                            	default :
                            	    break loop208;
                                }
                            } while (true);


                            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_member_declaration_or_function_definition38624); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.simple_member_declaration(action.SIMPLE_MEMBER_DECLARATION__SEMICOLON, input.LT(0));}

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2060:13: SEMICOLON
                    {
                    match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_member_declaration_or_function_definition38718); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.simple_member_declaration(action.SIMPLE_MEMBER_DECLARATION__SEMICOLON, input.LT(0));}

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("simple_member_declaration_or_function_definition", 118);
            if(state.backtracking == 0){action.end_simple_member_declaration(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "simple_member_declaration_or_function_definition"



    // $ANTLR start "member_bitfield_declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2065:1: member_bitfield_declarator : ( IDENT )? ( virt_specifier )* COLON constant_expression ;
    public final void member_bitfield_declarator() throws RecognitionException {
        traceIn("member_bitfield_declarator", 119);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2066:5: ( ( IDENT )? ( virt_specifier )* COLON constant_expression )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2067:9: ( IDENT )? ( virt_specifier )* COLON constant_expression
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2067:9: ( IDENT )?
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==IDENT) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2068:13: IDENT
                    {
                    match(input,IDENT,FOLLOW_IDENT_in_member_bitfield_declarator38903); if (state.failed) return ;

                    if ( state.backtracking==0 ) {if(state.backtracking == 0){action.member_bitfield_declarator(input.LT(0));}}

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2070:9: ( virt_specifier )*
            loop212:
            do {
                int alt212=2;
                int LA212_0 = input.LA(1);

                if ( (LA212_0==LITERAL_new||(LA212_0 >= LITERAL_final && LA212_0 <= LITERAL_override)) ) {
                    alt212=1;
                }


                switch (alt212) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2070:9: virt_specifier
            	    {
            	    pushFollow(FOLLOW_virt_specifier_in_member_bitfield_declarator38989);
            	    virt_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop212;
                }
            } while (true);


            match(input,COLON,FOLLOW_COLON_in_member_bitfield_declarator39001); if (state.failed) return ;

            pushFollow(FOLLOW_constant_expression_in_member_bitfield_declarator39012);
            constant_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("member_bitfield_declarator", 119);
        }
        return ;
    }
    // $ANTLR end "member_bitfield_declarator"



    // $ANTLR start "member_declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2075:1: member_declarator : ( declarator ( virt_specifier )* ( brace_or_equal_initializer )? | member_bitfield_declarator ) ;
    public final void member_declarator() throws RecognitionException {
        traceIn("member_declarator", 120);
        if(state.backtracking == 0){action.member_declarator(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2077:5: ( ( declarator ( virt_specifier )* ( brace_or_equal_initializer )? | member_bitfield_declarator ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2078:5: ( declarator ( virt_specifier )* ( brace_or_equal_initializer )? | member_bitfield_declarator )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2078:5: ( declarator ( virt_specifier )* ( brace_or_equal_initializer )? | member_bitfield_declarator )
            int alt215=2;
            alt215 = dfa215.predict(input);
            switch (alt215) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2079:9: declarator ( virt_specifier )* ( brace_or_equal_initializer )?
                    {
                    pushFollow(FOLLOW_declarator_in_member_declarator39197);
                    declarator();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2079:20: ( virt_specifier )*
                    loop213:
                    do {
                        int alt213=2;
                        int LA213_0 = input.LA(1);

                        if ( (LA213_0==LITERAL_new||(LA213_0 >= LITERAL_final && LA213_0 <= LITERAL_override)) ) {
                            alt213=1;
                        }


                        switch (alt213) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2079:20: virt_specifier
                    	    {
                    	    pushFollow(FOLLOW_virt_specifier_in_member_declarator39199);
                    	    virt_specifier();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop213;
                        }
                    } while (true);


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2079:36: ( brace_or_equal_initializer )?
                    int alt214=2;
                    int LA214_0 = input.LA(1);

                    if ( (LA214_0==ASSIGNEQUAL||LA214_0==LCURLY) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2079:36: brace_or_equal_initializer
                            {
                            pushFollow(FOLLOW_brace_or_equal_initializer_in_member_declarator39202);
                            brace_or_equal_initializer();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2081:9: member_bitfield_declarator
                    {
                    pushFollow(FOLLOW_member_bitfield_declarator_in_member_declarator39219);
                    member_bitfield_declarator();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("member_declarator", 120);
            if(state.backtracking == 0){action.end_member_declarator(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "member_declarator"



    // $ANTLR start "pure_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2099:1: pure_specifier : ASSIGNEQUAL literal ;
    public final void pure_specifier() throws RecognitionException {
        traceIn("pure_specifier", 121);
        if(state.backtracking == 0){action.pure_specifier(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2101:5: ( ASSIGNEQUAL literal )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2102:9: ASSIGNEQUAL literal
            {
            match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_pure_specifier39559); if (state.failed) return ;

            pushFollow(FOLLOW_literal_in_pure_specifier39561);
            literal();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("pure_specifier", 121);
            if(state.backtracking == 0){action.end_pure_specifier(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "pure_specifier"



    // $ANTLR start "constant_initializer"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2106:1: constant_initializer : ASSIGNEQUAL constant_expression ;
    public final void constant_initializer() throws RecognitionException {
        traceIn("constant_initializer", 122);
        if(state.backtracking == 0){action.constant_initializer(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2108:5: ( ASSIGNEQUAL constant_expression )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2109:9: ASSIGNEQUAL constant_expression
            {
            match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_constant_initializer39869); if (state.failed) return ;

            pushFollow(FOLLOW_constant_expression_in_constant_initializer39871);
            constant_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("constant_initializer", 122);
            if(state.backtracking == 0){action.end_constant_initializer(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "constant_initializer"



    // $ANTLR start "virt_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2113:1: virt_specifier : ( LITERAL_override | LITERAL_final | LITERAL_new );
    public final void virt_specifier() throws RecognitionException {
        traceIn("virt_specifier", 123);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2113:15: ( LITERAL_override | LITERAL_final | LITERAL_new )
            int alt216=3;
            switch ( input.LA(1) ) {
            case LITERAL_override:
                {
                alt216=1;
                }
                break;
            case LITERAL_final:
                {
                alt216=2;
                }
                break;
            case LITERAL_new:
                {
                alt216=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;

            }

            switch (alt216) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2114:9: LITERAL_override
                    {
                    match(input,LITERAL_override,FOLLOW_LITERAL_override_in_virt_specifier40008); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.virt_specifier(action.VIRT_SPECIFIER__OVERRIDE, input.LT(0));}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2116:9: LITERAL_final
                    {
                    match(input,LITERAL_final,FOLLOW_LITERAL_final_in_virt_specifier40081); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.virt_specifier(action.VIRT_SPECIFIER__FINAL, input.LT(0));}

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2118:9: LITERAL_new
                    {
                    match(input,LITERAL_new,FOLLOW_LITERAL_new_in_virt_specifier40157); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.virt_specifier(action.VIRT_SPECIFIER__NEW, input.LT(0));}

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("virt_specifier", 123);
        }
        return ;
    }
    // $ANTLR end "virt_specifier"



    // $ANTLR start "base_clause"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2122:1: base_clause : COLON base_specifier_list ;
    public final void base_clause() throws RecognitionException {
        traceIn("base_clause", 124);
        if(state.backtracking == 0){action.base_clause(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2124:5: ( COLON base_specifier_list )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2125:9: COLON base_specifier_list
            {
            match(input,COLON,FOLLOW_COLON_in_base_clause40399); if (state.failed) return ;

            pushFollow(FOLLOW_base_specifier_list_in_base_clause40401);
            base_specifier_list();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("base_clause", 124);
            if(state.backtracking == 0){action.end_base_clause(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "base_clause"



    // $ANTLR start "base_specifier_list"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2129:1: base_specifier_list : base_specifier ( ELLIPSIS )? ( COMMA base_specifier ( ELLIPSIS )? )* ;
    public final void base_specifier_list() throws RecognitionException {
        traceIn("base_specifier_list", 125);
        if(state.backtracking == 0){action.base_specifier_list(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2131:9: ( base_specifier ( ELLIPSIS )? ( COMMA base_specifier ( ELLIPSIS )? )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2132:9: base_specifier ( ELLIPSIS )? ( COMMA base_specifier ( ELLIPSIS )? )*
            {
            pushFollow(FOLLOW_base_specifier_in_base_specifier_list40703);
            base_specifier();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2133:9: ( ELLIPSIS )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==ELLIPSIS) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2134:13: ELLIPSIS
                    {
                    match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_base_specifier_list40728); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.base_specifier_list(action.BASE_SPECIFIER_LIST__ELLIPSIS, input.LT(0));}

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2136:9: ( COMMA base_specifier ( ELLIPSIS )? )*
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);

                if ( (LA219_0==COMMA) ) {
                    alt219=1;
                }


                switch (alt219) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2137:13: COMMA base_specifier ( ELLIPSIS )?
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_base_specifier_list40826); if (state.failed) return ;

            	    if ( state.backtracking==0 ) {action.base_specifier_list(action.BASE_SPECIFIER_LIST__COMMA, input.LT(0));}

            	    pushFollow(FOLLOW_base_specifier_in_base_specifier_list40904);
            	    base_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2139:13: ( ELLIPSIS )?
            	    int alt218=2;
            	    int LA218_0 = input.LA(1);

            	    if ( (LA218_0==ELLIPSIS) ) {
            	        alt218=1;
            	    }
            	    switch (alt218) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2140:17: ELLIPSIS
            	            {
            	            match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_base_specifier_list40937); if (state.failed) return ;

            	            if ( state.backtracking==0 ) {action.base_specifier_list(action.BASE_SPECIFIER_LIST__ELLIPSIS, input.LT(0));}

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop219;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("base_specifier_list", 125);
            if(state.backtracking == 0){action.end_base_specifier_list(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "base_specifier_list"



    // $ANTLR start "base_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2146:1: base_specifier : ( attribute_specifiers )? ( base_type_specifier | LITERAL_virtual ( access_specifier )? base_type_specifier | access_specifier ( LITERAL_virtual )? base_type_specifier ) ;
    public final void base_specifier() throws RecognitionException {
        traceIn("base_specifier", 126);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2146:15: ( ( attribute_specifiers )? ( base_type_specifier | LITERAL_virtual ( access_specifier )? base_type_specifier | access_specifier ( LITERAL_virtual )? base_type_specifier ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2147:5: ( attribute_specifiers )? ( base_type_specifier | LITERAL_virtual ( access_specifier )? base_type_specifier | access_specifier ( LITERAL_virtual )? base_type_specifier )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2147:5: ( attribute_specifiers )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==LSQUARE||(LA220_0 >= LITERAL___extension__ && LA220_0 <= LITERAL___attribute__)||LA220_0==LITERAL_alignas) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2147:5: attribute_specifiers
                    {
                    pushFollow(FOLLOW_attribute_specifiers_in_base_specifier41183);
                    attribute_specifiers();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2148:5: ( base_type_specifier | LITERAL_virtual ( access_specifier )? base_type_specifier | access_specifier ( LITERAL_virtual )? base_type_specifier )
            int alt223=3;
            switch ( input.LA(1) ) {
            case SCOPE:
            case IDENT:
            case LITERAL_typeof:
            case LITERAL___typeof__:
            case LITERAL___typeof:
            case LITERAL_decltype:
            case LITERAL___decltype:
                {
                alt223=1;
                }
                break;
            case LITERAL_virtual:
                {
                alt223=2;
                }
                break;
            case LITERAL_public:
            case LITERAL_protected:
            case LITERAL_private:
                {
                alt223=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;

            }

            switch (alt223) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2149:9: base_type_specifier
                    {
                    pushFollow(FOLLOW_base_type_specifier_in_base_specifier41200);
                    base_type_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2151:9: LITERAL_virtual ( access_specifier )? base_type_specifier
                    {
                    match(input,LITERAL_virtual,FOLLOW_LITERAL_virtual_in_base_specifier41216); if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2151:25: ( access_specifier )?
                    int alt221=2;
                    int LA221_0 = input.LA(1);

                    if ( ((LA221_0 >= LITERAL_public && LA221_0 <= LITERAL_private)) ) {
                        alt221=1;
                    }
                    switch (alt221) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2151:25: access_specifier
                            {
                            pushFollow(FOLLOW_access_specifier_in_base_specifier41218);
                            access_specifier();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_base_type_specifier_in_base_specifier41221);
                    base_type_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2153:9: access_specifier ( LITERAL_virtual )? base_type_specifier
                    {
                    pushFollow(FOLLOW_access_specifier_in_base_specifier41237);
                    access_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2153:26: ( LITERAL_virtual )?
                    int alt222=2;
                    int LA222_0 = input.LA(1);

                    if ( (LA222_0==LITERAL_virtual) ) {
                        alt222=1;
                    }
                    switch (alt222) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2153:26: LITERAL_virtual
                            {
                            match(input,LITERAL_virtual,FOLLOW_LITERAL_virtual_in_base_specifier41239); if (state.failed) return ;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_base_type_specifier_in_base_specifier41242);
                    base_type_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("base_specifier", 126);
        }
        return ;
    }
    // $ANTLR end "base_specifier"



    // $ANTLR start "class_or_decltype"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2156:1: class_or_decltype : ( ( SCOPE )? nested_simple_template_id_or_IDENT | decltype_specifier ) ;
    public final void class_or_decltype() throws RecognitionException {
        traceIn("class_or_decltype", 127);
        if(state.backtracking == 0){action.class_or_decltype(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2158:5: ( ( ( SCOPE )? nested_simple_template_id_or_IDENT | decltype_specifier ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2159:5: ( ( SCOPE )? nested_simple_template_id_or_IDENT | decltype_specifier )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2159:5: ( ( SCOPE )? nested_simple_template_id_or_IDENT | decltype_specifier )
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==SCOPE||LA225_0==IDENT) ) {
                alt225=1;
            }
            else if ( ((LA225_0 >= LITERAL_typeof && LA225_0 <= LITERAL___typeof)||LA225_0==LITERAL_decltype||LA225_0==LITERAL___decltype) ) {
                alt225=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;

            }
            switch (alt225) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2160:9: ( SCOPE )? nested_simple_template_id_or_IDENT
                    {
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2160:9: ( SCOPE )?
                    int alt224=2;
                    int LA224_0 = input.LA(1);

                    if ( (LA224_0==SCOPE) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2161:13: SCOPE
                            {
                            match(input,SCOPE,FOLLOW_SCOPE_in_class_or_decltype41446); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.class_or_decltype(action.CLASS_OR_DECLTYPE__SCOPE, input.LT(0));}

                            }
                            break;

                    }


                    pushFollow(FOLLOW_nested_simple_template_id_or_IDENT_in_class_or_decltype41532);
                    nested_simple_template_id_or_IDENT();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2165:9: decltype_specifier
                    {
                    pushFollow(FOLLOW_decltype_specifier_in_class_or_decltype41548);
                    decltype_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("class_or_decltype", 127);
            if(state.backtracking == 0){action.end_class_or_decltype(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "class_or_decltype"



    // $ANTLR start "base_type_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2170:1: base_type_specifier : class_or_decltype ;
    public final void base_type_specifier() throws RecognitionException {
        traceIn("base_type_specifier", 128);
        if(state.backtracking == 0){action.base_type_specifier(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2172:5: ( class_or_decltype )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2173:9: class_or_decltype
            {
            pushFollow(FOLLOW_class_or_decltype_in_base_type_specifier41884);
            class_or_decltype();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("base_type_specifier", 128);
            if(state.backtracking == 0){action.end_base_type_specifier(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "base_type_specifier"



    // $ANTLR start "access_specifier"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2177:1: access_specifier : ( LITERAL_private | LITERAL_protected | LITERAL_public );
    public final void access_specifier() throws RecognitionException {
        traceIn("access_specifier", 129);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2177:17: ( LITERAL_private | LITERAL_protected | LITERAL_public )
            int alt226=3;
            switch ( input.LA(1) ) {
            case LITERAL_private:
                {
                alt226=1;
                }
                break;
            case LITERAL_protected:
                {
                alt226=2;
                }
                break;
            case LITERAL_public:
                {
                alt226=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);

                throw nvae;

            }

            switch (alt226) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2178:9: LITERAL_private
                    {
                    match(input,LITERAL_private,FOLLOW_LITERAL_private_in_access_specifier42035); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.access_specifier(action.ACCESS_SPECIFIER__PRIVATE, input.LT(0));}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2180:9: LITERAL_protected
                    {
                    match(input,LITERAL_protected,FOLLOW_LITERAL_protected_in_access_specifier42109); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.access_specifier(action.ACCESS_SPECIFIER__PROTECTED, input.LT(0));}

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2182:9: LITERAL_public
                    {
                    match(input,LITERAL_public,FOLLOW_LITERAL_public_in_access_specifier42181); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.access_specifier(action.ACCESS_SPECIFIER__PUBLIC, input.LT(0));}

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("access_specifier", 129);
        }
        return ;
    }
    // $ANTLR end "access_specifier"



    // $ANTLR start "conversion_function_id"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2186:1: conversion_function_id : LITERAL_OPERATOR conversion_type_id ;
    public final void conversion_function_id() throws RecognitionException {
        traceIn("conversion_function_id", 130);
        if(state.backtracking == 0){action.conversion_function_id(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2188:5: ( LITERAL_OPERATOR conversion_type_id )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2189:9: LITERAL_OPERATOR conversion_type_id
            {
            match(input,LITERAL_OPERATOR,FOLLOW_LITERAL_OPERATOR_in_conversion_function_id42420); if (state.failed) return ;

            pushFollow(FOLLOW_conversion_type_id_in_conversion_function_id42422);
            conversion_type_id();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("conversion_function_id", 130);
            if(state.backtracking == 0){action.end_conversion_function_id(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "conversion_function_id"



    // $ANTLR start "conversion_type_id"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2210:1: conversion_type_id : type_specifier ( type_specifier )* ( ( ptr_operator )=> ptr_operator )* ;
    public final void conversion_type_id() throws RecognitionException {
        traceIn("conversion_type_id", 131);
        if(state.backtracking == 0){action.conversion_type_id(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2212:5: ( type_specifier ( type_specifier )* ( ( ptr_operator )=> ptr_operator )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2213:9: type_specifier ( type_specifier )* ( ( ptr_operator )=> ptr_operator )*
            {
            pushFollow(FOLLOW_type_specifier_in_conversion_type_id42716);
            type_specifier();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2214:9: ( type_specifier )*
            loop227:
            do {
                int alt227=2;
                alt227 = dfa227.predict(input);
                switch (alt227) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2214:10: type_specifier
            	    {
            	    pushFollow(FOLLOW_type_specifier_in_conversion_type_id42727);
            	    type_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop227;
                }
            } while (true);


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2215:9: ( ( ptr_operator )=> ptr_operator )*
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);

                if ( (LA228_0==STAR) ) {
                    int LA228_28 = input.LA(2);

                    if ( (synpred42_CXXParser()) ) {
                        alt228=1;
                    }


                }
                else if ( (LA228_0==AMPERSAND) ) {
                    int LA228_39 = input.LA(2);

                    if ( (synpred42_CXXParser()) ) {
                        alt228=1;
                    }


                }
                else if ( (LA228_0==AND) ) {
                    int LA228_42 = input.LA(2);

                    if ( (synpred42_CXXParser()) ) {
                        alt228=1;
                    }


                }
                else if ( (LA228_0==SCOPE) ) {
                    int LA228_48 = input.LA(2);

                    if ( (synpred42_CXXParser()) ) {
                        alt228=1;
                    }


                }
                else if ( (LA228_0==IDENT) && (synpred42_CXXParser())) {
                    alt228=1;
                }


                switch (alt228) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2215:10: ( ptr_operator )=> ptr_operator
            	    {
            	    pushFollow(FOLLOW_ptr_operator_in_conversion_type_id42745);
            	    ptr_operator();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop228;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("conversion_type_id", 131);
            if(state.backtracking == 0){action.end_conversion_type_id(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "conversion_type_id"



    // $ANTLR start "ctor_initializer"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2219:1: ctor_initializer : COLON mem_initializer_list ;
    public final void ctor_initializer() throws RecognitionException {
        traceIn("ctor_initializer", 132);
        if(state.backtracking == 0){action.ctor_initializer(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2221:5: ( COLON mem_initializer_list )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2222:9: COLON mem_initializer_list
            {
            match(input,COLON,FOLLOW_COLON_in_ctor_initializer43042); if (state.failed) return ;

            pushFollow(FOLLOW_mem_initializer_list_in_ctor_initializer43044);
            mem_initializer_list();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("ctor_initializer", 132);
            if(state.backtracking == 0){action.end_ctor_initializer(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "ctor_initializer"



    // $ANTLR start "mem_initializer_list"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2226:1: mem_initializer_list : mem_initializer ( ELLIPSIS )? ( COMMA mem_initializer ( ELLIPSIS )? )* ;
    public final void mem_initializer_list() throws RecognitionException {
        traceIn("mem_initializer_list", 133);
        if(state.backtracking == 0){action.mem_initializer_list(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2228:5: ( mem_initializer ( ELLIPSIS )? ( COMMA mem_initializer ( ELLIPSIS )? )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2229:9: mem_initializer ( ELLIPSIS )? ( COMMA mem_initializer ( ELLIPSIS )? )*
            {
            pushFollow(FOLLOW_mem_initializer_in_mem_initializer_list43345);
            mem_initializer();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2230:9: ( ELLIPSIS )?
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==ELLIPSIS) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2231:13: ELLIPSIS
                    {
                    match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_mem_initializer_list43370); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.mem_initializer_list(action.MEM_INITIALIZER_LIST__ELLIPSIS, input.LT(0));}

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2233:9: ( COMMA mem_initializer ( ELLIPSIS )? )*
            loop231:
            do {
                int alt231=2;
                int LA231_0 = input.LA(1);

                if ( (LA231_0==COMMA) ) {
                    alt231=1;
                }


                switch (alt231) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2234:13: COMMA mem_initializer ( ELLIPSIS )?
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_mem_initializer_list43468); if (state.failed) return ;

            	    if ( state.backtracking==0 ) {action.mem_initializer_list(action.MEM_INITIALIZER_LIST__COMMA, input.LT(0));}

            	    pushFollow(FOLLOW_mem_initializer_in_mem_initializer_list43546);
            	    mem_initializer();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2236:13: ( ELLIPSIS )?
            	    int alt230=2;
            	    int LA230_0 = input.LA(1);

            	    if ( (LA230_0==ELLIPSIS) ) {
            	        alt230=1;
            	    }
            	    switch (alt230) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2237:17: ELLIPSIS
            	            {
            	            match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_mem_initializer_list43579); if (state.failed) return ;

            	            if ( state.backtracking==0 ) {action.mem_initializer_list(action.MEM_INITIALIZER_LIST__ELLIPSIS, input.LT(0));}

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop231;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("mem_initializer_list", 133);
            if(state.backtracking == 0){action.end_mem_initializer_list(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "mem_initializer_list"



    // $ANTLR start "mem_initializer"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2243:1: mem_initializer : mem_initializer_id ( LPAREN ( expression_list )? RPAREN | braced_init_list ) ;
    public final void mem_initializer() throws RecognitionException {
        traceIn("mem_initializer", 134);
        if(state.backtracking == 0){action.mem_initializer(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2245:5: ( mem_initializer_id ( LPAREN ( expression_list )? RPAREN | braced_init_list ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2246:9: mem_initializer_id ( LPAREN ( expression_list )? RPAREN | braced_init_list )
            {
            pushFollow(FOLLOW_mem_initializer_id_in_mem_initializer43988);
            mem_initializer_id();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2247:9: ( LPAREN ( expression_list )? RPAREN | braced_init_list )
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==LPAREN) ) {
                alt233=1;
            }
            else if ( (LA233_0==LCURLY) ) {
                alt233=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;

            }
            switch (alt233) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2248:13: LPAREN ( expression_list )? RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_mem_initializer44013); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.mem_initializer(action.MEM_INITIALIZER__LPAREN, input.LT(0));}

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2249:13: ( expression_list )?
                    int alt232=2;
                    int LA232_0 = input.LA(1);

                    if ( (LA232_0==QUESTIONMARK||LA232_0==LPAREN||LA232_0==LSQUARE||LA232_0==LCURLY||LA232_0==PLUS||(LA232_0 >= PLUSPLUS && LA232_0 <= MINUS)||(LA232_0 >= MINUSMINUS && LA232_0 <= STAR)||LA232_0==NOT||LA232_0==AMPERSAND||LA232_0==TILDE||LA232_0==SCOPE||LA232_0==FLOATONE||(LA232_0 >= HEXADECIMALINT && LA232_0 <= DECIMALINT)||(LA232_0 >= CHAR_LITERAL && LA232_0 <= STRING_LITERAL)||(LA232_0 >= NUMBER && LA232_0 <= IDENT)||LA232_0==LITERAL_OPERATOR||(LA232_0 >= LITERAL_typeof && LA232_0 <= LITERAL___typeof)||(LA232_0 >= LITERAL_typename && LA232_0 <= LITERAL_auto)||LA232_0==LITERAL_const_cast||(LA232_0 >= LITERAL_char && LA232_0 <= LITERAL_signed)||LA232_0==LITERAL_unsigned||(LA232_0 >= LITERAL_float && LA232_0 <= LITERAL_void)||(LA232_0 >= LITERAL_this && LA232_0 <= LITERAL_false)||LA232_0==LITERAL_throw||(LA232_0 >= LITERAL_sizeof && LA232_0 <= LITERAL_new)||LA232_0==LITERAL_delete||LA232_0==LITERAL_decltype||(LA232_0 >= LITERAL_char16_t && LA232_0 <= LITERAL___decltype)||LA232_0==LITERAL___null||LA232_0==LITERAL___is_class||LA232_0==LITERAL___is_pod||(LA232_0 >= LITERAL___has_nothrow_assign && LA232_0 <= LITERAL___builtin_va_list)||LA232_0==LITERAL_typeid) ) {
                        alt232=1;
                    }
                    switch (alt232) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2249:13: expression_list
                            {
                            pushFollow(FOLLOW_expression_list_in_mem_initializer44090);
                            expression_list();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    match(input,RPAREN,FOLLOW_RPAREN_in_mem_initializer44106); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.mem_initializer(action.MEM_INITIALIZER__RPAREN, input.LT(0));}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2252:13: braced_init_list
                    {
                    pushFollow(FOLLOW_braced_init_list_in_mem_initializer44193);
                    braced_init_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("mem_initializer", 134);
            if(state.backtracking == 0){action.end_mem_initializer(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "mem_initializer"



    // $ANTLR start "mem_initializer_id"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2266:1: mem_initializer_id : class_or_decltype ;
    public final void mem_initializer_id() throws RecognitionException {
        traceIn("mem_initializer_id", 135);
        if(state.backtracking == 0){action.mem_initializer_id(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2268:5: ( class_or_decltype )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2269:9: class_or_decltype
            {
            pushFollow(FOLLOW_class_or_decltype_in_mem_initializer_id44531);
            class_or_decltype();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("mem_initializer_id", 135);
            if(state.backtracking == 0){action.end_mem_initializer_id(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "mem_initializer_id"



    // $ANTLR start "operator_function_id"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2274:1: operator_function_id : LITERAL_OPERATOR operator_id ({...}? => LESSTHAN ( template_argument_list )? GREATERTHAN )? ;
    public final void operator_function_id() throws RecognitionException {
        traceIn("operator_function_id", 136);
        if(state.backtracking == 0){action.mem_operator_function_id(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2276:9: ( LITERAL_OPERATOR operator_id ({...}? => LESSTHAN ( template_argument_list )? GREATERTHAN )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2277:9: LITERAL_OPERATOR operator_id ({...}? => LESSTHAN ( template_argument_list )? GREATERTHAN )?
            {
            match(input,LITERAL_OPERATOR,FOLLOW_LITERAL_OPERATOR_in_operator_function_id44771); if (state.failed) return ;

            pushFollow(FOLLOW_operator_id_in_operator_function_id44782);
            operator_id();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2279:9: ({...}? => LESSTHAN ( template_argument_list )? GREATERTHAN )?
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==LESSTHAN) ) {
                int LA235_1 = input.LA(2);

                if ( (( operator_is_template() )) ) {
                    alt235=1;
                }
            }
            switch (alt235) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2279:11: {...}? => LESSTHAN ( template_argument_list )? GREATERTHAN
                    {
                    if ( !(( operator_is_template() )) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "operator_function_id", " operator_is_template() ");
                    }

                    match(input,LESSTHAN,FOLLOW_LESSTHAN_in_operator_function_id44811); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.operator_function_id(action.OPERATOR_FUNCTION_ID__LESSTHAN, input.LT(0));}

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2281:13: ( template_argument_list )?
                    int alt234=2;
                    int LA234_0 = input.LA(1);

                    if ( ((LA234_0 >= ELLIPSIS && LA234_0 <= RSQUARE)||(LA234_0 >= EQUAL && LA234_0 <= GREATERTHANOREQUALTO)||(LA234_0 >= DIVIDE && LA234_0 <= LITERAL_typeid)) ) {
                        alt234=1;
                    }
                    switch (alt234) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2281:13: template_argument_list
                            {
                            pushFollow(FOLLOW_template_argument_list_in_operator_function_id44886);
                            template_argument_list();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_operator_function_id44902); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.operator_function_id(action.OPERATOR_FUNCTION_ID__GREATERTHAN, input.LT(0));}

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("operator_function_id", 136);
            if(state.backtracking == 0){action.end_operator_function_id(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "operator_function_id"



    // $ANTLR start "operator_id"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2290:1: operator_id returns [int id] : ( ( LITERAL_new LSQUARE RSQUARE )=> LITERAL_new LSQUARE RSQUARE | ( LITERAL_delete LSQUARE RSQUARE )=> LITERAL_delete LSQUARE RSQUARE | LITERAL_new | LITERAL_delete | PLUS | MINUS | STAR | DIVIDE | MOD | BITWISEXOR | AMPERSAND | BITWISEOR | TILDE | NOT | ASSIGNEQUAL | LESSTHAN | GREATERTHAN | PLUSEQUAL | MINUSEQUAL | TIMESEQUAL | DIVIDEEQUAL | MODEQUAL | BITWISEXOREQUAL | BITWISEANDEQUAL | BITWISEOREQUAL | SHIFTLEFT | shiftright_literal | SHIFTRIGHTEQUAL | SHIFTLEFTEQUAL | EQUAL | NOTEQUAL | LESSTHANOREQUALTO | GREATERTHANOREQUALTO | AND | OR | PLUSPLUS | MINUSMINUS | COMMA | POINTERTOMBR | POINTERTO | LPAREN RPAREN | LSQUARE RSQUARE ) ;
    public final int operator_id() throws RecognitionException {
        traceIn("operator_id", 137);
        int id = 0;


        if(state.backtracking == 0){action.operator_id(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2292:5: ( ( ( LITERAL_new LSQUARE RSQUARE )=> LITERAL_new LSQUARE RSQUARE | ( LITERAL_delete LSQUARE RSQUARE )=> LITERAL_delete LSQUARE RSQUARE | LITERAL_new | LITERAL_delete | PLUS | MINUS | STAR | DIVIDE | MOD | BITWISEXOR | AMPERSAND | BITWISEOR | TILDE | NOT | ASSIGNEQUAL | LESSTHAN | GREATERTHAN | PLUSEQUAL | MINUSEQUAL | TIMESEQUAL | DIVIDEEQUAL | MODEQUAL | BITWISEXOREQUAL | BITWISEANDEQUAL | BITWISEOREQUAL | SHIFTLEFT | shiftright_literal | SHIFTRIGHTEQUAL | SHIFTLEFTEQUAL | EQUAL | NOTEQUAL | LESSTHANOREQUALTO | GREATERTHANOREQUALTO | AND | OR | PLUSPLUS | MINUSMINUS | COMMA | POINTERTOMBR | POINTERTO | LPAREN RPAREN | LSQUARE RSQUARE ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2293:5: ( ( LITERAL_new LSQUARE RSQUARE )=> LITERAL_new LSQUARE RSQUARE | ( LITERAL_delete LSQUARE RSQUARE )=> LITERAL_delete LSQUARE RSQUARE | LITERAL_new | LITERAL_delete | PLUS | MINUS | STAR | DIVIDE | MOD | BITWISEXOR | AMPERSAND | BITWISEOR | TILDE | NOT | ASSIGNEQUAL | LESSTHAN | GREATERTHAN | PLUSEQUAL | MINUSEQUAL | TIMESEQUAL | DIVIDEEQUAL | MODEQUAL | BITWISEXOREQUAL | BITWISEANDEQUAL | BITWISEOREQUAL | SHIFTLEFT | shiftright_literal | SHIFTRIGHTEQUAL | SHIFTLEFTEQUAL | EQUAL | NOTEQUAL | LESSTHANOREQUALTO | GREATERTHANOREQUALTO | AND | OR | PLUSPLUS | MINUSMINUS | COMMA | POINTERTOMBR | POINTERTO | LPAREN RPAREN | LSQUARE RSQUARE )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2293:5: ( ( LITERAL_new LSQUARE RSQUARE )=> LITERAL_new LSQUARE RSQUARE | ( LITERAL_delete LSQUARE RSQUARE )=> LITERAL_delete LSQUARE RSQUARE | LITERAL_new | LITERAL_delete | PLUS | MINUS | STAR | DIVIDE | MOD | BITWISEXOR | AMPERSAND | BITWISEOR | TILDE | NOT | ASSIGNEQUAL | LESSTHAN | GREATERTHAN | PLUSEQUAL | MINUSEQUAL | TIMESEQUAL | DIVIDEEQUAL | MODEQUAL | BITWISEXOREQUAL | BITWISEANDEQUAL | BITWISEOREQUAL | SHIFTLEFT | shiftright_literal | SHIFTRIGHTEQUAL | SHIFTLEFTEQUAL | EQUAL | NOTEQUAL | LESSTHANOREQUALTO | GREATERTHANOREQUALTO | AND | OR | PLUSPLUS | MINUSMINUS | COMMA | POINTERTOMBR | POINTERTO | LPAREN RPAREN | LSQUARE RSQUARE )
            int alt236=42;
            switch ( input.LA(1) ) {
            case LITERAL_new:
                {
                int LA236_1 = input.LA(2);

                if ( (LA236_1==LSQUARE) ) {
                    int LA236_41 = input.LA(3);

                    if ( (LA236_41==RSQUARE) ) {
                        int LA236_47 = input.LA(4);

                        if ( (synpred43_CXXParser()) ) {
                            alt236=1;
                        }
                        else if ( (true) ) {
                            alt236=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return id;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 236, 47, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA236_41==QUESTIONMARK||LA236_41==LPAREN||LA236_41==LSQUARE||LA236_41==PLUS||(LA236_41 >= PLUSPLUS && LA236_41 <= MINUS)||(LA236_41 >= MINUSMINUS && LA236_41 <= STAR)||LA236_41==NOT||LA236_41==AMPERSAND||LA236_41==TILDE||LA236_41==SCOPE||LA236_41==FLOATONE||(LA236_41 >= HEXADECIMALINT && LA236_41 <= DECIMALINT)||(LA236_41 >= CHAR_LITERAL && LA236_41 <= STRING_LITERAL)||(LA236_41 >= NUMBER && LA236_41 <= IDENT)||LA236_41==LITERAL_OPERATOR||(LA236_41 >= LITERAL_typeof && LA236_41 <= LITERAL___typeof)||(LA236_41 >= LITERAL_typename && LA236_41 <= LITERAL_auto)||LA236_41==LITERAL_const_cast||(LA236_41 >= LITERAL_char && LA236_41 <= LITERAL_signed)||LA236_41==LITERAL_unsigned||(LA236_41 >= LITERAL_float && LA236_41 <= LITERAL_void)||(LA236_41 >= LITERAL_this && LA236_41 <= LITERAL_false)||LA236_41==LITERAL_throw||(LA236_41 >= LITERAL_sizeof && LA236_41 <= LITERAL_new)||LA236_41==LITERAL_delete||LA236_41==LITERAL_decltype||(LA236_41 >= LITERAL_char16_t && LA236_41 <= LITERAL___decltype)||LA236_41==LITERAL___null||LA236_41==LITERAL___is_class||LA236_41==LITERAL___is_pod||(LA236_41 >= LITERAL___has_nothrow_assign && LA236_41 <= LITERAL___builtin_va_list)||LA236_41==LITERAL_typeid) ) {
                        alt236=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return id;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 236, 41, input);

                        throw nvae;

                    }
                }
                else if ( (LA236_1==EOF||(LA236_1 >= ELLIPSIS && LA236_1 <= RPAREN)||(LA236_1 >= RSQUARE && LA236_1 <= AND)||(LA236_1 >= OR && LA236_1 <= BITWISEANDEQUAL)||(LA236_1 >= BITWISEOR && LA236_1 <= SCOPE)||LA236_1==LITERAL_try||(LA236_1 >= LITERAL_asm && LA236_1 <= LITERAL___asm)||LA236_1==LITERAL_new||(LA236_1 >= LITERAL___extension__ && LA236_1 <= LITERAL___attribute__)||(LA236_1 >= LITERAL_final && LA236_1 <= LITERAL_override)||LA236_1==LITERAL_alignas||LA236_1==LITERAL_POINTERTO) ) {
                    alt236=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return id;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 236, 1, input);

                    throw nvae;

                }
                }
                break;
            case LITERAL_delete:
                {
                int LA236_2 = input.LA(2);

                if ( (LA236_2==LSQUARE) ) {
                    int LA236_43 = input.LA(3);

                    if ( (LA236_43==RSQUARE) ) {
                        int LA236_48 = input.LA(4);

                        if ( (synpred44_CXXParser()) ) {
                            alt236=2;
                        }
                        else if ( (true) ) {
                            alt236=4;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return id;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 236, 48, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA236_43==QUESTIONMARK||LA236_43==LPAREN||LA236_43==LSQUARE||LA236_43==PLUS||(LA236_43 >= PLUSPLUS && LA236_43 <= MINUS)||(LA236_43 >= MINUSMINUS && LA236_43 <= STAR)||LA236_43==NOT||LA236_43==AMPERSAND||LA236_43==TILDE||LA236_43==SCOPE||LA236_43==FLOATONE||(LA236_43 >= HEXADECIMALINT && LA236_43 <= DECIMALINT)||(LA236_43 >= CHAR_LITERAL && LA236_43 <= STRING_LITERAL)||(LA236_43 >= NUMBER && LA236_43 <= IDENT)||LA236_43==LITERAL_OPERATOR||(LA236_43 >= LITERAL_typeof && LA236_43 <= LITERAL___typeof)||(LA236_43 >= LITERAL_typename && LA236_43 <= LITERAL_auto)||LA236_43==LITERAL_const_cast||(LA236_43 >= LITERAL_char && LA236_43 <= LITERAL_signed)||LA236_43==LITERAL_unsigned||(LA236_43 >= LITERAL_float && LA236_43 <= LITERAL_void)||(LA236_43 >= LITERAL_this && LA236_43 <= LITERAL_false)||LA236_43==LITERAL_throw||(LA236_43 >= LITERAL_sizeof && LA236_43 <= LITERAL_new)||LA236_43==LITERAL_delete||LA236_43==LITERAL_decltype||(LA236_43 >= LITERAL_char16_t && LA236_43 <= LITERAL___decltype)||LA236_43==LITERAL___null||LA236_43==LITERAL___is_class||LA236_43==LITERAL___is_pod||(LA236_43 >= LITERAL___has_nothrow_assign && LA236_43 <= LITERAL___builtin_va_list)||LA236_43==LITERAL_typeid) ) {
                        alt236=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return id;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 236, 43, input);

                        throw nvae;

                    }
                }
                else if ( (LA236_2==EOF||(LA236_2 >= ELLIPSIS && LA236_2 <= RPAREN)||(LA236_2 >= RSQUARE && LA236_2 <= AND)||(LA236_2 >= OR && LA236_2 <= BITWISEANDEQUAL)||(LA236_2 >= BITWISEOR && LA236_2 <= SCOPE)||LA236_2==LITERAL_try||(LA236_2 >= LITERAL_asm && LA236_2 <= LITERAL___asm)||LA236_2==LITERAL_new||(LA236_2 >= LITERAL___extension__ && LA236_2 <= LITERAL___attribute__)||(LA236_2 >= LITERAL_final && LA236_2 <= LITERAL_override)||LA236_2==LITERAL_alignas||LA236_2==LITERAL_POINTERTO) ) {
                    alt236=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return id;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 236, 2, input);

                    throw nvae;

                }
                }
                break;
            case PLUS:
                {
                alt236=5;
                }
                break;
            case MINUS:
                {
                alt236=6;
                }
                break;
            case STAR:
                {
                alt236=7;
                }
                break;
            case DIVIDE:
                {
                alt236=8;
                }
                break;
            case MOD:
                {
                alt236=9;
                }
                break;
            case BITWISEXOR:
                {
                alt236=10;
                }
                break;
            case AMPERSAND:
                {
                alt236=11;
                }
                break;
            case BITWISEOR:
                {
                alt236=12;
                }
                break;
            case TILDE:
                {
                alt236=13;
                }
                break;
            case NOT:
                {
                alt236=14;
                }
                break;
            case ASSIGNEQUAL:
                {
                alt236=15;
                }
                break;
            case LESSTHAN:
                {
                alt236=16;
                }
                break;
            case GREATERTHAN:
                {
                int LA236_15 = input.LA(2);

                if ( (LA236_15==GREATERTHAN) ) {
                    int LA236_45 = input.LA(3);

                    if ( (!(((input.LA(1) == GREATERTHAN && input.LT(1).getText().equals(""))))) ) {
                        alt236=17;
                    }
                    else if ( ((input.LA(1) == GREATERTHAN && input.LT(1).getText().equals(""))) ) {
                        alt236=27;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return id;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 236, 45, input);

                        throw nvae;

                    }
                }
                else if ( (LA236_15==EOF||(LA236_15 >= ELLIPSIS && LA236_15 <= GREATERTHANOREQUALTO)||(LA236_15 >= DIVIDE && LA236_15 <= AND)||(LA236_15 >= OR && LA236_15 <= BITWISEANDEQUAL)||(LA236_15 >= BITWISEOR && LA236_15 <= SCOPE)||LA236_15==LITERAL_try||(LA236_15 >= LITERAL_asm && LA236_15 <= LITERAL___asm)||LA236_15==LITERAL_new||(LA236_15 >= LITERAL___extension__ && LA236_15 <= LITERAL___attribute__)||(LA236_15 >= LITERAL_final && LA236_15 <= LITERAL_override)||LA236_15==LITERAL_alignas||LA236_15==LITERAL_POINTERTO) ) {
                    alt236=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return id;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 236, 15, input);

                    throw nvae;

                }
                }
                break;
            case PLUSEQUAL:
                {
                alt236=18;
                }
                break;
            case MINUSEQUAL:
                {
                alt236=19;
                }
                break;
            case TIMESEQUAL:
                {
                alt236=20;
                }
                break;
            case DIVIDEEQUAL:
                {
                alt236=21;
                }
                break;
            case MODEQUAL:
                {
                alt236=22;
                }
                break;
            case BITWISEXOREQUAL:
                {
                alt236=23;
                }
                break;
            case BITWISEANDEQUAL:
                {
                alt236=24;
                }
                break;
            case BITWISEOREQUAL:
                {
                alt236=25;
                }
                break;
            case SHIFTLEFT:
                {
                alt236=26;
                }
                break;
            case SHIFTRIGHT:
                {
                alt236=27;
                }
                break;
            case SHIFTRIGHTEQUAL:
                {
                alt236=28;
                }
                break;
            case SHIFTLEFTEQUAL:
                {
                alt236=29;
                }
                break;
            case EQUAL:
                {
                alt236=30;
                }
                break;
            case NOTEQUAL:
                {
                alt236=31;
                }
                break;
            case LESSTHANOREQUALTO:
                {
                alt236=32;
                }
                break;
            case GREATERTHANOREQUALTO:
                {
                alt236=33;
                }
                break;
            case AND:
                {
                alt236=34;
                }
                break;
            case OR:
                {
                alt236=35;
                }
                break;
            case PLUSPLUS:
                {
                alt236=36;
                }
                break;
            case MINUSMINUS:
                {
                alt236=37;
                }
                break;
            case COMMA:
                {
                alt236=38;
                }
                break;
            case POINTERTOMBR:
                {
                alt236=39;
                }
                break;
            case POINTERTO:
                {
                alt236=40;
                }
                break;
            case LPAREN:
                {
                alt236=41;
                }
                break;
            case LSQUARE:
                {
                alt236=42;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return id;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;

            }

            switch (alt236) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2294:9: ( LITERAL_new LSQUARE RSQUARE )=> LITERAL_new LSQUARE RSQUARE
                    {
                    match(input,LITERAL_new,FOLLOW_LITERAL_new_in_operator_id45329); if (state.failed) return id;

                    match(input,LSQUARE,FOLLOW_LSQUARE_in_operator_id45331); if (state.failed) return id;

                    match(input,RSQUARE,FOLLOW_RSQUARE_in_operator_id45333); if (state.failed) return id;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2296:9: ( LITERAL_delete LSQUARE RSQUARE )=> LITERAL_delete LSQUARE RSQUARE
                    {
                    match(input,LITERAL_delete,FOLLOW_LITERAL_delete_in_operator_id45366); if (state.failed) return id;

                    match(input,LSQUARE,FOLLOW_LSQUARE_in_operator_id45368); if (state.failed) return id;

                    match(input,RSQUARE,FOLLOW_RSQUARE_in_operator_id45370); if (state.failed) return id;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2298:9: LITERAL_new
                    {
                    match(input,LITERAL_new,FOLLOW_LITERAL_new_in_operator_id45382); if (state.failed) return id;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2298:23: LITERAL_delete
                    {
                    match(input,LITERAL_delete,FOLLOW_LITERAL_delete_in_operator_id45386); if (state.failed) return id;

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2299:9: PLUS
                    {
                    match(input,PLUS,FOLLOW_PLUS_in_operator_id45398); if (state.failed) return id;

                    }
                    break;
                case 6 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2299:16: MINUS
                    {
                    match(input,MINUS,FOLLOW_MINUS_in_operator_id45402); if (state.failed) return id;

                    }
                    break;
                case 7 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2299:24: STAR
                    {
                    match(input,STAR,FOLLOW_STAR_in_operator_id45406); if (state.failed) return id;

                    }
                    break;
                case 8 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2299:31: DIVIDE
                    {
                    match(input,DIVIDE,FOLLOW_DIVIDE_in_operator_id45410); if (state.failed) return id;

                    }
                    break;
                case 9 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2299:40: MOD
                    {
                    match(input,MOD,FOLLOW_MOD_in_operator_id45414); if (state.failed) return id;

                    }
                    break;
                case 10 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2299:46: BITWISEXOR
                    {
                    match(input,BITWISEXOR,FOLLOW_BITWISEXOR_in_operator_id45418); if (state.failed) return id;

                    }
                    break;
                case 11 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2299:59: AMPERSAND
                    {
                    match(input,AMPERSAND,FOLLOW_AMPERSAND_in_operator_id45422); if (state.failed) return id;

                    }
                    break;
                case 12 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2299:71: BITWISEOR
                    {
                    match(input,BITWISEOR,FOLLOW_BITWISEOR_in_operator_id45426); if (state.failed) return id;

                    }
                    break;
                case 13 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2299:83: TILDE
                    {
                    match(input,TILDE,FOLLOW_TILDE_in_operator_id45430); if (state.failed) return id;

                    }
                    break;
                case 14 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2300:9: NOT
                    {
                    match(input,NOT,FOLLOW_NOT_in_operator_id45442); if (state.failed) return id;

                    }
                    break;
                case 15 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2300:15: ASSIGNEQUAL
                    {
                    match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_operator_id45446); if (state.failed) return id;

                    }
                    break;
                case 16 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2300:29: LESSTHAN
                    {
                    match(input,LESSTHAN,FOLLOW_LESSTHAN_in_operator_id45450); if (state.failed) return id;

                    }
                    break;
                case 17 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2300:40: GREATERTHAN
                    {
                    match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_operator_id45454); if (state.failed) return id;

                    }
                    break;
                case 18 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2300:54: PLUSEQUAL
                    {
                    match(input,PLUSEQUAL,FOLLOW_PLUSEQUAL_in_operator_id45458); if (state.failed) return id;

                    }
                    break;
                case 19 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2300:66: MINUSEQUAL
                    {
                    match(input,MINUSEQUAL,FOLLOW_MINUSEQUAL_in_operator_id45462); if (state.failed) return id;

                    }
                    break;
                case 20 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2300:79: TIMESEQUAL
                    {
                    match(input,TIMESEQUAL,FOLLOW_TIMESEQUAL_in_operator_id45466); if (state.failed) return id;

                    }
                    break;
                case 21 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2300:92: DIVIDEEQUAL
                    {
                    match(input,DIVIDEEQUAL,FOLLOW_DIVIDEEQUAL_in_operator_id45470); if (state.failed) return id;

                    }
                    break;
                case 22 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2300:106: MODEQUAL
                    {
                    match(input,MODEQUAL,FOLLOW_MODEQUAL_in_operator_id45474); if (state.failed) return id;

                    }
                    break;
                case 23 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2301:9: BITWISEXOREQUAL
                    {
                    match(input,BITWISEXOREQUAL,FOLLOW_BITWISEXOREQUAL_in_operator_id45486); if (state.failed) return id;

                    }
                    break;
                case 24 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2301:27: BITWISEANDEQUAL
                    {
                    match(input,BITWISEANDEQUAL,FOLLOW_BITWISEANDEQUAL_in_operator_id45490); if (state.failed) return id;

                    }
                    break;
                case 25 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2301:45: BITWISEOREQUAL
                    {
                    match(input,BITWISEOREQUAL,FOLLOW_BITWISEOREQUAL_in_operator_id45494); if (state.failed) return id;

                    }
                    break;
                case 26 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2301:62: SHIFTLEFT
                    {
                    match(input,SHIFTLEFT,FOLLOW_SHIFTLEFT_in_operator_id45498); if (state.failed) return id;

                    }
                    break;
                case 27 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2301:74: shiftright_literal
                    {
                    pushFollow(FOLLOW_shiftright_literal_in_operator_id45502);
                    shiftright_literal();

                    state._fsp--;
                    if (state.failed) return id;

                    }
                    break;
                case 28 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2301:95: SHIFTRIGHTEQUAL
                    {
                    match(input,SHIFTRIGHTEQUAL,FOLLOW_SHIFTRIGHTEQUAL_in_operator_id45506); if (state.failed) return id;

                    }
                    break;
                case 29 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2301:113: SHIFTLEFTEQUAL
                    {
                    match(input,SHIFTLEFTEQUAL,FOLLOW_SHIFTLEFTEQUAL_in_operator_id45510); if (state.failed) return id;

                    }
                    break;
                case 30 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2301:130: EQUAL
                    {
                    match(input,EQUAL,FOLLOW_EQUAL_in_operator_id45514); if (state.failed) return id;

                    }
                    break;
                case 31 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2301:138: NOTEQUAL
                    {
                    match(input,NOTEQUAL,FOLLOW_NOTEQUAL_in_operator_id45518); if (state.failed) return id;

                    }
                    break;
                case 32 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2302:9: LESSTHANOREQUALTO
                    {
                    match(input,LESSTHANOREQUALTO,FOLLOW_LESSTHANOREQUALTO_in_operator_id45530); if (state.failed) return id;

                    }
                    break;
                case 33 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2302:29: GREATERTHANOREQUALTO
                    {
                    match(input,GREATERTHANOREQUALTO,FOLLOW_GREATERTHANOREQUALTO_in_operator_id45534); if (state.failed) return id;

                    }
                    break;
                case 34 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2302:52: AND
                    {
                    match(input,AND,FOLLOW_AND_in_operator_id45538); if (state.failed) return id;

                    }
                    break;
                case 35 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2302:58: OR
                    {
                    match(input,OR,FOLLOW_OR_in_operator_id45542); if (state.failed) return id;

                    }
                    break;
                case 36 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2302:63: PLUSPLUS
                    {
                    match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_operator_id45546); if (state.failed) return id;

                    }
                    break;
                case 37 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2302:74: MINUSMINUS
                    {
                    match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_operator_id45550); if (state.failed) return id;

                    }
                    break;
                case 38 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2302:87: COMMA
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_operator_id45554); if (state.failed) return id;

                    }
                    break;
                case 39 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2302:95: POINTERTOMBR
                    {
                    match(input,POINTERTOMBR,FOLLOW_POINTERTOMBR_in_operator_id45558); if (state.failed) return id;

                    }
                    break;
                case 40 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2302:110: POINTERTO
                    {
                    match(input,POINTERTO,FOLLOW_POINTERTO_in_operator_id45562); if (state.failed) return id;

                    }
                    break;
                case 41 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2303:9: LPAREN RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_operator_id45575); if (state.failed) return id;

                    match(input,RPAREN,FOLLOW_RPAREN_in_operator_id45577); if (state.failed) return id;

                    }
                    break;
                case 42 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2303:25: LSQUARE RSQUARE
                    {
                    match(input,LSQUARE,FOLLOW_LSQUARE_in_operator_id45581); if (state.failed) return id;

                    match(input,RSQUARE,FOLLOW_RSQUARE_in_operator_id45583); if (state.failed) return id;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("operator_id", 137);
            if(state.backtracking == 0){action.end_operator_id(input.LT(0));}
        }
        return id;
    }
    // $ANTLR end "operator_id"



    // $ANTLR start "literal_operator_id"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2308:1: literal_operator_id : LITERAL_OPERATOR STRING_LITERAL IDENT ;
    public final void literal_operator_id() throws RecognitionException {
        traceIn("literal_operator_id", 138);
        Token LITERAL_OPERATOR53=null;
        Token STRING_LITERAL54=null;
        Token IDENT55=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2309:5: ( LITERAL_OPERATOR STRING_LITERAL IDENT )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2310:9: LITERAL_OPERATOR STRING_LITERAL IDENT
            {
            LITERAL_OPERATOR53=(Token)match(input,LITERAL_OPERATOR,FOLLOW_LITERAL_OPERATOR_in_literal_operator_id45766); if (state.failed) return ;

            STRING_LITERAL54=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_literal_operator_id45768); if (state.failed) return ;

            IDENT55=(Token)match(input,IDENT,FOLLOW_IDENT_in_literal_operator_id45770); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.literal_operator_id(LITERAL_OPERATOR53, STRING_LITERAL54, IDENT55);}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_operator_id", 138);
        }
        return ;
    }
    // $ANTLR end "literal_operator_id"



    // $ANTLR start "template_declaration"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2314:1: template_declaration[decl_kind kind] : ( LITERAL_export )? LITERAL_template LESSTHAN template_parameter_list GREATERTHAN declaration[kind] ;
    public final void template_declaration(decl_kind kind) throws RecognitionException {
        traceIn("template_declaration", 139);
        Token LITERAL_export56=null;
        Token LITERAL_template57=null;
        Token LESSTHAN58=null;
        Token GREATERTHAN59=null;

        if(state.backtracking == 0){action.template_declaration(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2316:5: ( ( LITERAL_export )? LITERAL_template LESSTHAN template_parameter_list GREATERTHAN declaration[kind] )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2317:9: ( LITERAL_export )? LITERAL_template LESSTHAN template_parameter_list GREATERTHAN declaration[kind]
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2317:9: ( LITERAL_export )?
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==LITERAL_export) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2318:13: LITERAL_export
                    {
                    LITERAL_export56=(Token)match(input,LITERAL_export,FOLLOW_LITERAL_export_in_template_declaration46002); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.template_declaration(action.TEMPLATE_DECLARATION__EXPORT, LITERAL_export56);}

                    }
                    break;

            }


            LITERAL_template57=(Token)match(input,LITERAL_template,FOLLOW_LITERAL_template_in_template_declaration46079); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.template_declaration(action.TEMPLATE_DECLARATION__TEMPLATE, LITERAL_template57);}

            LESSTHAN58=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_template_declaration46146); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.template_declaration(action.TEMPLATE_DECLARATION__TEMPLATE_ARGUMENT_LIST, LESSTHAN58);}

            pushFollow(FOLLOW_template_parameter_list_in_template_declaration46221);
            template_parameter_list();

            state._fsp--;
            if (state.failed) return ;

            GREATERTHAN59=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_template_declaration46232); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.template_declaration(action.TEMPLATE_DECLARATION__END_TEMPLATE_ARGUMENT_LIST, GREATERTHAN59);}

            pushFollow(FOLLOW_declaration_in_template_declaration46304);
            declaration(kind);

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("template_declaration", 139);
            if(state.backtracking == 0){action.end_template_declaration(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "template_declaration"



    // $ANTLR start "template_parameter_list"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2328:1: template_parameter_list : template_parameter ( COMMA template_parameter )* ;
    public final void template_parameter_list() throws RecognitionException {
        traceIn("template_parameter_list", 140);
        if(state.backtracking == 0){action.template_parameter_list(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2330:5: ( template_parameter ( COMMA template_parameter )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2331:9: template_parameter ( COMMA template_parameter )*
            {
            pushFollow(FOLLOW_template_parameter_in_template_parameter_list46540);
            template_parameter();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2332:9: ( COMMA template_parameter )*
            loop238:
            do {
                int alt238=2;
                int LA238_0 = input.LA(1);

                if ( (LA238_0==COMMA) ) {
                    alt238=1;
                }


                switch (alt238) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2333:13: COMMA template_parameter
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_template_parameter_list46619); if (state.failed) return ;

            	    if ( state.backtracking==0 ) {action.template_parameter_list(action.TEMPLATE_PARAMETER_LIST__COMMA, input.LT(0));}

            	    pushFollow(FOLLOW_template_parameter_in_template_parameter_list46697);
            	    template_parameter();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop238;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("template_parameter_list", 140);
            if(state.backtracking == 0){action.end_template_parameter_list(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "template_parameter_list"



    // $ANTLR start "template_parameter"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2348:1: template_parameter : ( ( LITERAL_class ( IDENT | GREATERTHAN | COMMA | ASSIGNEQUAL ) )=> type_parameter | type_parameter | parameter_declaration[tparm_decl] ) ;
    public final void template_parameter() throws RecognitionException {
        traceIn("template_parameter", 141);
        if(state.backtracking == 0){action.template_parameter(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2350:5: ( ( ( LITERAL_class ( IDENT | GREATERTHAN | COMMA | ASSIGNEQUAL ) )=> type_parameter | type_parameter | parameter_declaration[tparm_decl] ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2351:5: ( ( LITERAL_class ( IDENT | GREATERTHAN | COMMA | ASSIGNEQUAL ) )=> type_parameter | type_parameter | parameter_declaration[tparm_decl] )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2351:5: ( ( LITERAL_class ( IDENT | GREATERTHAN | COMMA | ASSIGNEQUAL ) )=> type_parameter | type_parameter | parameter_declaration[tparm_decl] )
            int alt239=3;
            switch ( input.LA(1) ) {
            case LITERAL_class:
                {
                int LA239_1 = input.LA(2);

                if ( (synpred45_CXXParser()) ) {
                    alt239=1;
                }
                else if ( (true) ) {
                    alt239=2;
                }
                else if ( (true) ) {
                    alt239=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 239, 1, input);

                    throw nvae;

                }
                }
                break;
            case LITERAL_typename:
                {
                int LA239_2 = input.LA(2);

                if ( (synpred45_CXXParser()) ) {
                    alt239=1;
                }
                else if ( (true) ) {
                    alt239=2;
                }
                else if ( (true) ) {
                    alt239=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 239, 2, input);

                    throw nvae;

                }
                }
                break;
            case LITERAL_template:
                {
                int LA239_3 = input.LA(2);

                if ( (synpred45_CXXParser()) ) {
                    alt239=1;
                }
                else if ( (true) ) {
                    alt239=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 239, 3, input);

                    throw nvae;

                }
                }
                break;
            case LSQUARE:
            case SCOPE:
            case IDENT:
            case LITERAL_typeof:
            case LITERAL___typeof__:
            case LITERAL___typeof:
            case LITERAL_typedef:
            case LITERAL_enum:
            case LITERAL_extern:
            case LITERAL_inline:
            case LITERAL___inline:
            case LITERAL_virtual:
            case LITERAL_explicit:
            case LITERAL_friend:
            case LITERAL_auto:
            case LITERAL_register:
            case LITERAL_static:
            case LITERAL_mutable:
            case LITERAL_const:
            case LITERAL___const__:
            case LITERAL___const:
            case LITERAL_volatile:
            case LITERAL_char:
            case LITERAL_wchar_t:
            case LITERAL_bool:
            case LITERAL_short:
            case LITERAL_int:
            case LITERAL_long:
            case LITERAL_signed:
            case LITERAL_unsigned:
            case LITERAL_float:
            case LITERAL_double:
            case LITERAL_void:
            case LITERAL_struct:
            case LITERAL_union:
            case LITERAL___extension__:
            case LITERAL___attribute__:
            case LITERAL___global:
            case LITERAL___thread:
            case LITERAL___symbolic:
            case LITERAL___hidden:
            case LITERAL_constexpr:
            case LITERAL_decltype:
            case LITERAL_thread_local:
            case LITERAL_alignas:
            case LITERAL_char16_t:
            case LITERAL_char32_t:
            case LITERAL___decltype:
            case LITERAL___builtin_va_list:
                {
                alt239=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 239, 0, input);

                throw nvae;

            }

            switch (alt239) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2352:5: ( LITERAL_class ( IDENT | GREATERTHAN | COMMA | ASSIGNEQUAL ) )=> type_parameter
                    {
                    pushFollow(FOLLOW_type_parameter_in_template_parameter47070);
                    type_parameter();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2356:9: type_parameter
                    {
                    pushFollow(FOLLOW_type_parameter_in_template_parameter47095);
                    type_parameter();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2358:9: parameter_declaration[tparm_decl]
                    {
                    pushFollow(FOLLOW_parameter_declaration_in_template_parameter47111);
                    parameter_declaration(tparm_decl);

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("template_parameter", 141);
            if(state.backtracking == 0){action.end_template_parameter(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "template_parameter"



    // $ANTLR start "type_parameter"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2363:1: type_parameter : ( LITERAL_class ( ELLIPSIS )? ( IDENT )? | LITERAL_class ( IDENT )? ASSIGNEQUAL type_id | LITERAL_typename ( ELLIPSIS )? ( IDENT )? | LITERAL_typename ( IDENT )? ASSIGNEQUAL type_id | template_parameter_type LITERAL_class ( ELLIPSIS )? ( IDENT )? ( ASSIGNEQUAL id_expression )? );
    public final void type_parameter() throws RecognitionException {
        traceIn("type_parameter", 142);
        Token LITERAL_class60=null;
        Token ELLIPSIS61=null;
        Token IDENT62=null;
        Token LITERAL_class63=null;
        Token IDENT64=null;
        Token ASSIGNEQUAL65=null;
        Token LITERAL_typename66=null;
        Token ELLIPSIS67=null;
        Token IDENT68=null;
        Token LITERAL_typename69=null;
        Token IDENT70=null;
        Token ASSIGNEQUAL71=null;
        Token LITERAL_class72=null;
        Token ELLIPSIS73=null;
        Token IDENT74=null;
        Token ASSIGNEQUAL75=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2363:15: ( LITERAL_class ( ELLIPSIS )? ( IDENT )? | LITERAL_class ( IDENT )? ASSIGNEQUAL type_id | LITERAL_typename ( ELLIPSIS )? ( IDENT )? | LITERAL_typename ( IDENT )? ASSIGNEQUAL type_id | template_parameter_type LITERAL_class ( ELLIPSIS )? ( IDENT )? ( ASSIGNEQUAL id_expression )? )
            int alt249=5;
            switch ( input.LA(1) ) {
            case LITERAL_class:
                {
                switch ( input.LA(2) ) {
                case ELLIPSIS:
                case COMMA:
                case GREATERTHAN:
                    {
                    alt249=1;
                    }
                    break;
                case IDENT:
                    {
                    int LA249_5 = input.LA(3);

                    if ( (LA249_5==COMMA||LA249_5==GREATERTHAN) ) {
                        alt249=1;
                    }
                    else if ( (LA249_5==ASSIGNEQUAL) ) {
                        alt249=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 249, 5, input);

                        throw nvae;

                    }
                    }
                    break;
                case ASSIGNEQUAL:
                    {
                    alt249=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 249, 1, input);

                    throw nvae;

                }

                }
                break;
            case LITERAL_typename:
                {
                switch ( input.LA(2) ) {
                case ELLIPSIS:
                case COMMA:
                case GREATERTHAN:
                    {
                    alt249=3;
                    }
                    break;
                case IDENT:
                    {
                    int LA249_8 = input.LA(3);

                    if ( (LA249_8==COMMA||LA249_8==GREATERTHAN) ) {
                        alt249=3;
                    }
                    else if ( (LA249_8==ASSIGNEQUAL) ) {
                        alt249=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 249, 8, input);

                        throw nvae;

                    }
                    }
                    break;
                case ASSIGNEQUAL:
                    {
                    alt249=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 249, 2, input);

                    throw nvae;

                }

                }
                break;
            case LITERAL_template:
                {
                alt249=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);

                throw nvae;

            }

            switch (alt249) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2364:9: LITERAL_class ( ELLIPSIS )? ( IDENT )?
                    {
                    LITERAL_class60=(Token)match(input,LITERAL_class,FOLLOW_LITERAL_class_in_type_parameter47289); if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2364:23: ( ELLIPSIS )?
                    int alt240=2;
                    int LA240_0 = input.LA(1);

                    if ( (LA240_0==ELLIPSIS) ) {
                        alt240=1;
                    }
                    switch (alt240) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2364:23: ELLIPSIS
                            {
                            ELLIPSIS61=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_type_parameter47291); if (state.failed) return ;

                            }
                            break;

                    }


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2364:33: ( IDENT )?
                    int alt241=2;
                    int LA241_0 = input.LA(1);

                    if ( (LA241_0==IDENT) ) {
                        alt241=1;
                    }
                    switch (alt241) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2364:33: IDENT
                            {
                            IDENT62=(Token)match(input,IDENT,FOLLOW_IDENT_in_type_parameter47294); if (state.failed) return ;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {action.type_parameter(action.TYPE_PARAMETER__CLASS, LITERAL_class60, ELLIPSIS61, IDENT62);}

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2366:9: LITERAL_class ( IDENT )? ASSIGNEQUAL type_id
                    {
                    LITERAL_class63=(Token)match(input,LITERAL_class,FOLLOW_LITERAL_class_in_type_parameter47354); if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2366:23: ( IDENT )?
                    int alt242=2;
                    int LA242_0 = input.LA(1);

                    if ( (LA242_0==IDENT) ) {
                        alt242=1;
                    }
                    switch (alt242) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2366:23: IDENT
                            {
                            IDENT64=(Token)match(input,IDENT,FOLLOW_IDENT_in_type_parameter47356); if (state.failed) return ;

                            }
                            break;

                    }


                    ASSIGNEQUAL65=(Token)match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_type_parameter47359); if (state.failed) return ;

                    pushFollow(FOLLOW_type_id_in_type_parameter47361);
                    type_id();

                    state._fsp--;
                    if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.type_parameter(action.TYPE_PARAMETER__CLASS_ASSIGNEQUAL, LITERAL_class63, IDENT64, ASSIGNEQUAL65);}

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2368:9: LITERAL_typename ( ELLIPSIS )? ( IDENT )?
                    {
                    LITERAL_typename66=(Token)match(input,LITERAL_typename,FOLLOW_LITERAL_typename_in_type_parameter47410); if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2368:26: ( ELLIPSIS )?
                    int alt243=2;
                    int LA243_0 = input.LA(1);

                    if ( (LA243_0==ELLIPSIS) ) {
                        alt243=1;
                    }
                    switch (alt243) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2368:26: ELLIPSIS
                            {
                            ELLIPSIS67=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_type_parameter47412); if (state.failed) return ;

                            }
                            break;

                    }


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2368:36: ( IDENT )?
                    int alt244=2;
                    int LA244_0 = input.LA(1);

                    if ( (LA244_0==IDENT) ) {
                        alt244=1;
                    }
                    switch (alt244) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2368:36: IDENT
                            {
                            IDENT68=(Token)match(input,IDENT,FOLLOW_IDENT_in_type_parameter47415); if (state.failed) return ;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {action.type_parameter(action.TYPE_PARAMETER__TYPENAME, LITERAL_typename66, ELLIPSIS67, IDENT68);}

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2370:9: LITERAL_typename ( IDENT )? ASSIGNEQUAL type_id
                    {
                    LITERAL_typename69=(Token)match(input,LITERAL_typename,FOLLOW_LITERAL_typename_in_type_parameter47472); if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2370:26: ( IDENT )?
                    int alt245=2;
                    int LA245_0 = input.LA(1);

                    if ( (LA245_0==IDENT) ) {
                        alt245=1;
                    }
                    switch (alt245) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2370:26: IDENT
                            {
                            IDENT70=(Token)match(input,IDENT,FOLLOW_IDENT_in_type_parameter47474); if (state.failed) return ;

                            }
                            break;

                    }


                    ASSIGNEQUAL71=(Token)match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_type_parameter47477); if (state.failed) return ;

                    pushFollow(FOLLOW_type_id_in_type_parameter47479);
                    type_id();

                    state._fsp--;
                    if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.type_parameter(action.TYPE_PARAMETER__TYPENAME_ASSIGNEQUAL, LITERAL_typename69, IDENT70, ASSIGNEQUAL71);}

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2372:9: template_parameter_type LITERAL_class ( ELLIPSIS )? ( IDENT )? ( ASSIGNEQUAL id_expression )?
                    {
                    pushFollow(FOLLOW_template_parameter_type_in_type_parameter47525);
                    template_parameter_type();

                    state._fsp--;
                    if (state.failed) return ;

                    LITERAL_class72=(Token)match(input,LITERAL_class,FOLLOW_LITERAL_class_in_type_parameter47535); if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2373:23: ( ELLIPSIS )?
                    int alt246=2;
                    int LA246_0 = input.LA(1);

                    if ( (LA246_0==ELLIPSIS) ) {
                        alt246=1;
                    }
                    switch (alt246) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2373:23: ELLIPSIS
                            {
                            ELLIPSIS73=(Token)match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_type_parameter47537); if (state.failed) return ;

                            }
                            break;

                    }


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2373:33: ( IDENT )?
                    int alt247=2;
                    int LA247_0 = input.LA(1);

                    if ( (LA247_0==IDENT) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2373:33: IDENT
                            {
                            IDENT74=(Token)match(input,IDENT,FOLLOW_IDENT_in_type_parameter47540); if (state.failed) return ;

                            }
                            break;

                    }


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2373:40: ( ASSIGNEQUAL id_expression )?
                    int alt248=2;
                    int LA248_0 = input.LA(1);

                    if ( (LA248_0==ASSIGNEQUAL) ) {
                        alt248=1;
                    }
                    switch (alt248) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2373:41: ASSIGNEQUAL id_expression
                            {
                            ASSIGNEQUAL75=(Token)match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_type_parameter47544); if (state.failed) return ;

                            pushFollow(FOLLOW_id_expression_in_type_parameter47546);
                            id_expression();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {action.type_parameter(action.TYPE_PARAMETER__TEMPLATE_CLASS_ASSIGNEQUAL, LITERAL_class72, ELLIPSIS73, IDENT74, ASSIGNEQUAL75);}

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("type_parameter", 142);
        }
        return ;
    }
    // $ANTLR end "type_parameter"



    // $ANTLR start "template_parameter_type"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2376:1: template_parameter_type : LITERAL_template LESSTHAN template_parameter_list GREATERTHAN ;
    public final void template_parameter_type() throws RecognitionException {
        traceIn("template_parameter_type", 143);
        Token LITERAL_template76=null;
        Token LESSTHAN77=null;
        Token GREATERTHAN78=null;

        if(state.backtracking == 0){action.template_declaration(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2378:5: ( LITERAL_template LESSTHAN template_parameter_list GREATERTHAN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2379:9: LITERAL_template LESSTHAN template_parameter_list GREATERTHAN
            {
            LITERAL_template76=(Token)match(input,LITERAL_template,FOLLOW_LITERAL_template_in_template_parameter_type47741); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.template_declaration(action.TEMPLATE_DECLARATION__TEMPLATE, LITERAL_template76);}

            LESSTHAN77=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_template_parameter_type47808); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.template_declaration(action.TEMPLATE_DECLARATION__TEMPLATE_ARGUMENT_LIST, LESSTHAN77);}

            pushFollow(FOLLOW_template_parameter_list_in_template_parameter_type47883);
            template_parameter_list();

            state._fsp--;
            if (state.failed) return ;

            GREATERTHAN78=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_template_parameter_type47894); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.template_declaration(action.TEMPLATE_DECLARATION__END_TEMPLATE_ARGUMENT_LIST, GREATERTHAN78);}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("template_parameter_type", 143);
            if(state.backtracking == 0){action.end_template_declaration(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "template_parameter_type"



    // $ANTLR start "simple_template_id"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2386:1: simple_template_id : IDENT LESSTHAN {...}? ( template_argument_list )? GREATERTHAN ;
    public final void simple_template_id() throws RecognitionException {
        traceIn("simple_template_id", 144);
        Token IDENT79=null;
        Token LESSTHAN80=null;
        Token GREATERTHAN81=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2387:5: ( IDENT LESSTHAN {...}? ( template_argument_list )? GREATERTHAN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2388:9: IDENT LESSTHAN {...}? ( template_argument_list )? GREATERTHAN
            {
            IDENT79=(Token)match(input,IDENT,FOLLOW_IDENT_in_simple_template_id48053); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.simple_template_id(IDENT79);}

            LESSTHAN80=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_simple_template_id48131); if (state.failed) return ;

            if ( !(( (action.identifier_is(IDT_TEMPLATE_NAME, IDENT79)) )) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "simple_template_id", " (action.identifier_is(IDT_TEMPLATE_NAME, $IDENT)) ");
            }

            if ( state.backtracking==0 ) {action.simple_template_id(action.SIMPLE_TEMPLATE_ID__TEMPLATE_ARGUMENT_LIST, LESSTHAN80);}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2390:9: ( template_argument_list )?
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( ((LA250_0 >= ELLIPSIS && LA250_0 <= RSQUARE)||(LA250_0 >= EQUAL && LA250_0 <= GREATERTHANOREQUALTO)||(LA250_0 >= DIVIDE && LA250_0 <= LITERAL_typeid)) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2390:9: template_argument_list
                    {
                    pushFollow(FOLLOW_template_argument_list_in_simple_template_id48153);
                    template_argument_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            GREATERTHAN81=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_simple_template_id48165); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.simple_template_id(action.SIMPLE_TEMPLATE_ID__END_TEMPLATE_ARGUMENT_LIST, GREATERTHAN81);}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("simple_template_id", 144);
        }
        return ;
    }
    // $ANTLR end "simple_template_id"



    // $ANTLR start "lookup_simple_template_id"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2393:1: lookup_simple_template_id : IDENT LESSTHAN {...}? look_after_tmpl_args ;
    public final void lookup_simple_template_id() throws RecognitionException {
        traceIn("lookup_simple_template_id", 145);
        Token IDENT82=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2394:5: ( IDENT LESSTHAN {...}? look_after_tmpl_args )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2395:9: IDENT LESSTHAN {...}? look_after_tmpl_args
            {
            IDENT82=(Token)match(input,IDENT,FOLLOW_IDENT_in_lookup_simple_template_id48251); if (state.failed) return ;

            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_lookup_simple_template_id48253); if (state.failed) return ;

            if ( !(( (action.identifier_is(IDT_TEMPLATE_NAME, IDENT82)) )) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "lookup_simple_template_id", " (action.identifier_is(IDT_TEMPLATE_NAME, $IDENT)) ");
            }

            pushFollow(FOLLOW_look_after_tmpl_args_in_lookup_simple_template_id48269);
            look_after_tmpl_args();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("lookup_simple_template_id", 145);
        }
        return ;
    }
    // $ANTLR end "lookup_simple_template_id"



    // $ANTLR start "simple_template_id_nocheck"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2399:1: simple_template_id_nocheck : IDENT LESSTHAN ( template_argument_list )? GREATERTHAN ;
    public final void simple_template_id_nocheck() throws RecognitionException {
        traceIn("simple_template_id_nocheck", 146);
        Token IDENT83=null;
        Token LESSTHAN84=null;
        Token GREATERTHAN85=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2400:5: ( IDENT LESSTHAN ( template_argument_list )? GREATERTHAN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2401:9: IDENT LESSTHAN ( template_argument_list )? GREATERTHAN
            {
            IDENT83=(Token)match(input,IDENT,FOLLOW_IDENT_in_simple_template_id_nocheck48294); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.simple_template_id_nocheck(IDENT83);}

            LESSTHAN84=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_simple_template_id_nocheck48372); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.simple_template_id_nocheck(action.SIMPLE_TEMPLATE_ID_NOCHECK__TEMPLATE_ARGUMENT_LIST, LESSTHAN84);}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2403:9: ( template_argument_list )?
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( ((LA251_0 >= ELLIPSIS && LA251_0 <= RSQUARE)||(LA251_0 >= EQUAL && LA251_0 <= GREATERTHANOREQUALTO)||(LA251_0 >= DIVIDE && LA251_0 <= LITERAL_typeid)) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2403:9: template_argument_list
                    {
                    pushFollow(FOLLOW_template_argument_list_in_simple_template_id_nocheck48447);
                    template_argument_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            GREATERTHAN85=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_simple_template_id_nocheck48459); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.simple_template_id_nocheck(action.SIMPLE_TEMPLATE_ID_NOCHECK__END_TEMPLATE_ARGUMENT_LIST, GREATERTHAN85);}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("simple_template_id_nocheck", 146);
        }
        return ;
    }
    // $ANTLR end "simple_template_id_nocheck"



    // $ANTLR start "lookup_simple_template_id_nocheck"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2406:1: lookup_simple_template_id_nocheck : IDENT LESSTHAN look_after_tmpl_args ;
    public final void lookup_simple_template_id_nocheck() throws RecognitionException {
        traceIn("lookup_simple_template_id_nocheck", 147);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2407:5: ( IDENT LESSTHAN look_after_tmpl_args )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2408:9: IDENT LESSTHAN look_after_tmpl_args
            {
            match(input,IDENT,FOLLOW_IDENT_in_lookup_simple_template_id_nocheck48545); if (state.failed) return ;

            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_lookup_simple_template_id_nocheck48547); if (state.failed) return ;

            pushFollow(FOLLOW_look_after_tmpl_args_in_lookup_simple_template_id_nocheck48549);
            look_after_tmpl_args();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("lookup_simple_template_id_nocheck", 147);
        }
        return ;
    }
    // $ANTLR end "lookup_simple_template_id_nocheck"



    // $ANTLR start "simple_template_id_or_IDENT"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2411:1: simple_template_id_or_IDENT : ( ( IDENT LESSTHAN )=> ({...}? => IDENT LESSTHAN ( template_argument_list )? GREATERTHAN | IDENT ) | IDENT ) ;
    public final void simple_template_id_or_IDENT() throws RecognitionException {
        traceIn("simple_template_id_or_IDENT", 148);
        Token LESSTHAN86=null;
        Token GREATERTHAN87=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2412:5: ( ( ( IDENT LESSTHAN )=> ({...}? => IDENT LESSTHAN ( template_argument_list )? GREATERTHAN | IDENT ) | IDENT ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2413:9: ( ( IDENT LESSTHAN )=> ({...}? => IDENT LESSTHAN ( template_argument_list )? GREATERTHAN | IDENT ) | IDENT )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2413:9: ( ( IDENT LESSTHAN )=> ({...}? => IDENT LESSTHAN ( template_argument_list )? GREATERTHAN | IDENT ) | IDENT )
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==IDENT) ) {
                int LA254_1 = input.LA(2);

                if ( (synpred46_CXXParser()) ) {
                    alt254=1;
                }
                else if ( (true) ) {
                    alt254=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 254, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 254, 0, input);

                throw nvae;

            }
            switch (alt254) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2413:11: ( IDENT LESSTHAN )=> ({...}? => IDENT LESSTHAN ( template_argument_list )? GREATERTHAN | IDENT )
                    {
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2414:17: ({...}? => IDENT LESSTHAN ( template_argument_list )? GREATERTHAN | IDENT )
                    int alt253=2;
                    int LA253_0 = input.LA(1);

                    if ( (LA253_0==IDENT) ) {
                        int LA253_1 = input.LA(2);

                        if ( (( action.identifier_is(IDT_TEMPLATE_NAME, input.LT(1)) )) ) {
                            alt253=1;
                        }
                        else if ( (true) ) {
                            alt253=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 253, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 0, input);

                        throw nvae;

                    }
                    switch (alt253) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2414:19: {...}? => IDENT LESSTHAN ( template_argument_list )? GREATERTHAN
                            {
                            if ( !(( action.identifier_is(IDT_TEMPLATE_NAME, input.LT(1)) )) ) {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                throw new FailedPredicateException(input, "simple_template_id_or_IDENT", " action.identifier_is(IDT_TEMPLATE_NAME, input.LT(1)) ");
                            }

                            match(input,IDENT,FOLLOW_IDENT_in_simple_template_id_or_IDENT48623); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.simple_template_id_or_ident(input.LT(0));}

                            LESSTHAN86=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_simple_template_id_or_IDENT48701); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.simple_template_id_or_ident(action.SIMPLE_TEMPLATE_ID_OR_IDENT__TEMPLATE_ARGUMENT_LIST, LESSTHAN86);}

                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2417:17: ( template_argument_list )?
                            int alt252=2;
                            int LA252_0 = input.LA(1);

                            if ( ((LA252_0 >= ELLIPSIS && LA252_0 <= RSQUARE)||(LA252_0 >= EQUAL && LA252_0 <= GREATERTHANOREQUALTO)||(LA252_0 >= DIVIDE && LA252_0 <= LITERAL_typeid)) ) {
                                alt252=1;
                            }
                            switch (alt252) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2417:17: template_argument_list
                                    {
                                    pushFollow(FOLLOW_template_argument_list_in_simple_template_id_or_IDENT48776);
                                    template_argument_list();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }


                            GREATERTHAN87=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_simple_template_id_or_IDENT48795); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.simple_template_id_or_ident(action.SIMPLE_TEMPLATE_ID_OR_IDENT__END_TEMPLATE_ARGUMENT_LIST, GREATERTHAN87);}

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2420:17: IDENT
                            {
                            match(input,IDENT,FOLLOW_IDENT_in_simple_template_id_or_IDENT48884); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.simple_template_id_or_ident(input.LT(0));}

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2423:13: IDENT
                    {
                    match(input,IDENT,FOLLOW_IDENT_in_simple_template_id_or_IDENT48985); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.simple_template_id_or_ident(input.LT(0));}

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("simple_template_id_or_IDENT", 148);
        }
        return ;
    }
    // $ANTLR end "simple_template_id_or_IDENT"



    // $ANTLR start "simple_template_id_or_IDENT_nested"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2427:1: simple_template_id_or_IDENT_nested[Token t] : ( ( IDENT LESSTHAN )=> ({...}? => IDENT LESSTHAN ( template_argument_list )? GREATERTHAN | IDENT ) | IDENT ) ;
    public final void simple_template_id_or_IDENT_nested(Token t) throws RecognitionException {
        traceIn("simple_template_id_or_IDENT_nested", 149);
        Token LESSTHAN88=null;
        Token GREATERTHAN89=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2428:5: ( ( ( IDENT LESSTHAN )=> ({...}? => IDENT LESSTHAN ( template_argument_list )? GREATERTHAN | IDENT ) | IDENT ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2429:9: ( ( IDENT LESSTHAN )=> ({...}? => IDENT LESSTHAN ( template_argument_list )? GREATERTHAN | IDENT ) | IDENT )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2429:9: ( ( IDENT LESSTHAN )=> ({...}? => IDENT LESSTHAN ( template_argument_list )? GREATERTHAN | IDENT ) | IDENT )
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==IDENT) ) {
                int LA257_1 = input.LA(2);

                if ( (synpred47_CXXParser()) ) {
                    alt257=1;
                }
                else if ( (true) ) {
                    alt257=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;

            }
            switch (alt257) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2429:11: ( IDENT LESSTHAN )=> ({...}? => IDENT LESSTHAN ( template_argument_list )? GREATERTHAN | IDENT )
                    {
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2430:17: ({...}? => IDENT LESSTHAN ( template_argument_list )? GREATERTHAN | IDENT )
                    int alt256=2;
                    int LA256_0 = input.LA(1);

                    if ( (LA256_0==IDENT) ) {
                        int LA256_1 = input.LA(2);

                        if ( (( action.identifier_is(IDT_TEMPLATE_NAME, t) )) ) {
                            alt256=1;
                        }
                        else if ( (true) ) {
                            alt256=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 256, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 256, 0, input);

                        throw nvae;

                    }
                    switch (alt256) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2430:19: {...}? => IDENT LESSTHAN ( template_argument_list )? GREATERTHAN
                            {
                            if ( !(( action.identifier_is(IDT_TEMPLATE_NAME, t) )) ) {
                                if (state.backtracking>0) {state.failed=true; return ;}
                                throw new FailedPredicateException(input, "simple_template_id_or_IDENT_nested", " action.identifier_is(IDT_TEMPLATE_NAME, t) ");
                            }

                            match(input,IDENT,FOLLOW_IDENT_in_simple_template_id_or_IDENT_nested49135); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.simple_template_id_or_ident(input.LT(0));}

                            LESSTHAN88=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_simple_template_id_or_IDENT_nested49213); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.simple_template_id_or_ident(action.SIMPLE_TEMPLATE_ID_OR_IDENT__TEMPLATE_ARGUMENT_LIST, LESSTHAN88);}

                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2433:17: ( template_argument_list )?
                            int alt255=2;
                            int LA255_0 = input.LA(1);

                            if ( ((LA255_0 >= ELLIPSIS && LA255_0 <= RSQUARE)||(LA255_0 >= EQUAL && LA255_0 <= GREATERTHANOREQUALTO)||(LA255_0 >= DIVIDE && LA255_0 <= LITERAL_typeid)) ) {
                                alt255=1;
                            }
                            switch (alt255) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2433:17: template_argument_list
                                    {
                                    pushFollow(FOLLOW_template_argument_list_in_simple_template_id_or_IDENT_nested49288);
                                    template_argument_list();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }


                            GREATERTHAN89=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_simple_template_id_or_IDENT_nested49307); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.simple_template_id_or_ident(action.SIMPLE_TEMPLATE_ID_OR_IDENT__END_TEMPLATE_ARGUMENT_LIST, GREATERTHAN89);}

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2436:17: IDENT
                            {
                            match(input,IDENT,FOLLOW_IDENT_in_simple_template_id_or_IDENT_nested49396); if (state.failed) return ;

                            if ( state.backtracking==0 ) {action.simple_template_id_or_ident(input.LT(0));}

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2439:13: IDENT
                    {
                    match(input,IDENT,FOLLOW_IDENT_in_simple_template_id_or_IDENT_nested49497); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.simple_template_id_or_ident(input.LT(0));}

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("simple_template_id_or_IDENT_nested", 149);
        }
        return ;
    }
    // $ANTLR end "simple_template_id_or_IDENT_nested"



    // $ANTLR start "lookup_simple_template_id_or_IDENT"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2443:1: lookup_simple_template_id_or_IDENT : IDENT ({...}? => LESSTHAN look_after_tmpl_args )? ;
    public final void lookup_simple_template_id_or_IDENT() throws RecognitionException {
        traceIn("lookup_simple_template_id_or_IDENT", 150);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2444:5: ( IDENT ({...}? => LESSTHAN look_after_tmpl_args )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2445:9: IDENT ({...}? => LESSTHAN look_after_tmpl_args )?
            {
            match(input,IDENT,FOLLOW_IDENT_in_lookup_simple_template_id_or_IDENT49596); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2446:9: ({...}? => LESSTHAN look_after_tmpl_args )?
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==LESSTHAN) && (( (identifier_is(IDT_TEMPLATE_NAME)) ))) {
                alt258=1;
            }
            switch (alt258) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2446:11: {...}? => LESSTHAN look_after_tmpl_args
                    {
                    if ( !(( (identifier_is(IDT_TEMPLATE_NAME)) )) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "lookup_simple_template_id_or_IDENT", " (identifier_is(IDT_TEMPLATE_NAME)) ");
                    }

                    match(input,LESSTHAN,FOLLOW_LESSTHAN_in_lookup_simple_template_id_or_IDENT49623); if (state.failed) return ;

                    pushFollow(FOLLOW_look_after_tmpl_args_in_lookup_simple_template_id_or_IDENT49625);
                    look_after_tmpl_args();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("lookup_simple_template_id_or_IDENT", 150);
        }
        return ;
    }
    // $ANTLR end "lookup_simple_template_id_or_IDENT"



    // $ANTLR start "template_argument_list"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2459:1: template_argument_list : template_argument ( ELLIPSIS )? ( COMMA template_argument ( ELLIPSIS )? )* ;
    public final void template_argument_list() throws RecognitionException {
        traceIn("template_argument_list", 151);
        if(state.backtracking == 0){action.template_argument_list(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2461:5: ( template_argument ( ELLIPSIS )? ( COMMA template_argument ( ELLIPSIS )? )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2462:9: template_argument ( ELLIPSIS )? ( COMMA template_argument ( ELLIPSIS )? )*
            {
            pushFollow(FOLLOW_template_argument_in_template_argument_list49818);
            template_argument();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2463:9: ( ELLIPSIS )?
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==ELLIPSIS) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2464:13: ELLIPSIS
                    {
                    match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_template_argument_list49843); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.template_argument_list(action.TEMPLATE_ARGUMENT_LIST__ELLIPSIS, input.LT(0));}

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2466:9: ( COMMA template_argument ( ELLIPSIS )? )*
            loop261:
            do {
                int alt261=2;
                int LA261_0 = input.LA(1);

                if ( (LA261_0==COMMA) ) {
                    alt261=1;
                }


                switch (alt261) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2467:13: COMMA template_argument ( ELLIPSIS )?
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_template_argument_list49941); if (state.failed) return ;

            	    if ( state.backtracking==0 ) {action.template_argument_list(action.TEMPLATE_ARGUMENT_LIST__COMMA, input.LT(0));}

            	    pushFollow(FOLLOW_template_argument_in_template_argument_list50019);
            	    template_argument();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2469:13: ( ELLIPSIS )?
            	    int alt260=2;
            	    int LA260_0 = input.LA(1);

            	    if ( (LA260_0==ELLIPSIS) ) {
            	        alt260=1;
            	    }
            	    switch (alt260) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2470:17: ELLIPSIS
            	            {
            	            match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_template_argument_list50052); if (state.failed) return ;

            	            if ( state.backtracking==0 ) {action.template_argument_list(action.TEMPLATE_ARGUMENT_LIST__ELLIPSIS, input.LT(0));}

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop261;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("template_argument_list", 151);
            if(state.backtracking == 0){action.end_template_argument_list(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "template_argument_list"



    // $ANTLR start "template_argument"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2476:1: template_argument : ({...}? (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY ) )* ( lazy_template (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY | COMMA | ELLIPSIS ) )* )+ | ( id_expression ( ELLIPSIS )? ( COMMA | GREATERTHAN ) )=> id_expression | ( type_id )=> type_id | assignment_expression ) ;
    public final void template_argument() throws RecognitionException {
        traceIn("template_argument", 152);
        if(state.backtracking == 0){action.template_argument(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2478:5: ( ({...}? (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY ) )* ( lazy_template (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY | COMMA | ELLIPSIS ) )* )+ | ( id_expression ( ELLIPSIS )? ( COMMA | GREATERTHAN ) )=> id_expression | ( type_id )=> type_id | assignment_expression ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2479:5: ({...}? (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY ) )* ( lazy_template (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY | COMMA | ELLIPSIS ) )* )+ | ( id_expression ( ELLIPSIS )? ( COMMA | GREATERTHAN ) )=> id_expression | ( type_id )=> type_id | assignment_expression )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2479:5: ({...}? (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY ) )* ( lazy_template (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY | COMMA | ELLIPSIS ) )* )+ | ( id_expression ( ELLIPSIS )? ( COMMA | GREATERTHAN ) )=> id_expression | ( type_id )=> type_id | assignment_expression )
            int alt265=4;
            alt265 = dfa265.predict(input);
            switch (alt265) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2480:9: {...}? (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY ) )* ( lazy_template (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY | COMMA | ELLIPSIS ) )* )+
                    {
                    if ( !(((isTemplateTooDeep(1, 10)))) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "template_argument", "(isTemplateTooDeep(1, 10))");
                    }

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2481:9: (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY ) )*
                    loop262:
                    do {
                        int alt262=2;
                        int LA262_0 = input.LA(1);

                        if ( ((LA262_0 >= ELLIPSIS && LA262_0 <= RSQUARE)||(LA262_0 >= EQUAL && LA262_0 <= LESSTHANOREQUALTO)||LA262_0==GREATERTHANOREQUALTO||(LA262_0 >= DIVIDE && LA262_0 <= LITERAL_typeid)) ) {
                            alt262=1;
                        }


                        switch (alt262) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
                    	    {
                    	    if ( (input.LA(1) >= ELLIPSIS && input.LA(1) <= RSQUARE)||(input.LA(1) >= EQUAL && input.LA(1) <= LESSTHANOREQUALTO)||input.LA(1)==GREATERTHANOREQUALTO||(input.LA(1) >= DIVIDE && input.LA(1) <= LITERAL_typeid) ) {
                    	        input.consume();
                    	        state.errorRecovery=false;
                    	        state.failed=false;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return ;}
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        throw mse;
                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop262;
                        }
                    } while (true);


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2482:9: ( lazy_template (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY | COMMA | ELLIPSIS ) )* )+
                    int cnt264=0;
                    loop264:
                    do {
                        int alt264=2;
                        int LA264_0 = input.LA(1);

                        if ( (LA264_0==LESSTHAN) ) {
                            alt264=1;
                        }


                        switch (alt264) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2483:13: lazy_template (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY | COMMA | ELLIPSIS ) )*
                    	    {
                    	    pushFollow(FOLLOW_lazy_template_in_template_argument50521);
                    	    lazy_template();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2484:13: (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY | COMMA | ELLIPSIS ) )*
                    	    loop263:
                    	    do {
                    	        int alt263=2;
                    	        int LA263_0 = input.LA(1);

                    	        if ( ((LA263_0 >= DOT && LA263_0 <= COLON)||(LA263_0 >= QUESTIONMARK && LA263_0 <= RSQUARE)||(LA263_0 >= EQUAL && LA263_0 <= LESSTHANOREQUALTO)||LA263_0==GREATERTHANOREQUALTO||(LA263_0 >= DIVIDE && LA263_0 <= LITERAL_typeid)) ) {
                    	            alt263=1;
                    	        }


                    	        switch (alt263) {
                    	    	case 1 :
                    	    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
                    	    	    {
                    	    	    if ( (input.LA(1) >= DOT && input.LA(1) <= COLON)||(input.LA(1) >= QUESTIONMARK && input.LA(1) <= RSQUARE)||(input.LA(1) >= EQUAL && input.LA(1) <= LESSTHANOREQUALTO)||input.LA(1)==GREATERTHANOREQUALTO||(input.LA(1) >= DIVIDE && input.LA(1) <= LITERAL_typeid) ) {
                    	    	        input.consume();
                    	    	        state.errorRecovery=false;
                    	    	        state.failed=false;
                    	    	    }
                    	    	    else {
                    	    	        if (state.backtracking>0) {state.failed=true; return ;}
                    	    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	    	        throw mse;
                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop263;
                    	        }
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt264 >= 1 ) break loop264;
                    	    if (state.backtracking>0) {state.failed=true; return ;}
                                EarlyExitException eee =
                                    new EarlyExitException(264, input);
                                throw eee;
                        }
                        cnt264++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2488:9: ( id_expression ( ELLIPSIS )? ( COMMA | GREATERTHAN ) )=> id_expression
                    {
                    pushFollow(FOLLOW_id_expression_in_template_argument50614);
                    id_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2490:9: ( type_id )=> type_id
                    {
                    pushFollow(FOLLOW_type_id_in_template_argument50635);
                    type_id();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2492:9: assignment_expression
                    {
                    pushFollow(FOLLOW_assignment_expression_in_template_argument50651);
                    assignment_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("template_argument", 152);
            if(state.backtracking == 0){action.end_template_argument(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "template_argument"



    // $ANTLR start "explicit_instantiation"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2497:1: explicit_instantiation[decl_kind kind] : ( LITERAL_extern )? LITERAL_template declaration[kind] ;
    public final void explicit_instantiation(decl_kind kind) throws RecognitionException {
        traceIn("explicit_instantiation", 153);
        if(state.backtracking == 0){action.explicit_instantiation(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2499:5: ( ( LITERAL_extern )? LITERAL_template declaration[kind] )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2500:9: ( LITERAL_extern )? LITERAL_template declaration[kind]
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2500:9: ( LITERAL_extern )?
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==LITERAL_extern) ) {
                alt266=1;
            }
            switch (alt266) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2501:13: LITERAL_extern
                    {
                    match(input,LITERAL_extern,FOLLOW_LITERAL_extern_in_explicit_instantiation51003); if (state.failed) return ;

                    if ( state.backtracking==0 ) {action.explicit_instantiation(action.EXPLICIT_INSTANTIATION__EXTERN, input.LT(0));}

                    }
                    break;

            }


            match(input,LITERAL_template,FOLLOW_LITERAL_template_in_explicit_instantiation51080); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.explicit_instantiation(action.EXPLICIT_INSTANTIATION__TEMPLATE, input.LT(0));}

            pushFollow(FOLLOW_declaration_in_explicit_instantiation51147);
            declaration(kind);

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("explicit_instantiation", 153);
            if(state.backtracking == 0){action.end_explicit_instantiation(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "explicit_instantiation"



    // $ANTLR start "explicit_specialization"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2508:1: explicit_specialization[decl_kind kind] : LITERAL_template LESSTHAN GREATERTHAN declaration[kind] ;
    public final void explicit_specialization(decl_kind kind) throws RecognitionException {
        traceIn("explicit_specialization", 154);
        Token LITERAL_template90=null;
        Token LESSTHAN91=null;
        Token GREATERTHAN92=null;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2509:5: ( LITERAL_template LESSTHAN GREATERTHAN declaration[kind] )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2510:9: LITERAL_template LESSTHAN GREATERTHAN declaration[kind]
            {
            LITERAL_template90=(Token)match(input,LITERAL_template,FOLLOW_LITERAL_template_in_explicit_specialization51381); if (state.failed) return ;

            LESSTHAN91=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_explicit_specialization51383); if (state.failed) return ;

            GREATERTHAN92=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_explicit_specialization51385); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.explicit_specialization(LITERAL_template90, LESSTHAN91, GREATERTHAN92);}

            pushFollow(FOLLOW_declaration_in_explicit_specialization51431);
            declaration(kind);

            state._fsp--;
            if (state.failed) return ;

            if ( state.backtracking==0 ) {action.end_explicit_specialization(input.LT(0));}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("explicit_specialization", 154);
        }
        return ;
    }
    // $ANTLR end "explicit_specialization"



    // $ANTLR start "try_block"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2515:1: try_block : LITERAL_try compound_statement[false] ( handler[false] )+ ;
    public final void try_block() throws RecognitionException {
        traceIn("try_block", 155);
        if(state.backtracking == 0){action.try_block(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2517:5: ( LITERAL_try compound_statement[false] ( handler[false] )+ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2518:9: LITERAL_try compound_statement[false] ( handler[false] )+
            {
            match(input,LITERAL_try,FOLLOW_LITERAL_try_in_try_block51668); if (state.failed) return ;

            pushFollow(FOLLOW_compound_statement_in_try_block51670);
            compound_statement(false);

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2519:9: ( handler[false] )+
            int cnt267=0;
            loop267:
            do {
                int alt267=2;
                int LA267_0 = input.LA(1);

                if ( (LA267_0==LITERAL_catch) ) {
                    alt267=1;
                }


                switch (alt267) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2519:9: handler[false]
            	    {
            	    pushFollow(FOLLOW_handler_in_try_block51682);
            	    handler(false);

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt267 >= 1 ) break loop267;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(267, input);
                        throw eee;
                }
                cnt267++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("try_block", 155);
            if(state.backtracking == 0){action.end_try_block(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "try_block"



    // $ANTLR start "function_try_block"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2523:1: function_try_block[boolean class_late_binding] : LITERAL_try ( ctor_initializer )? function_body[class_late_binding] ( handler[class_late_binding] )+ ;
    public final void function_try_block(boolean class_late_binding) throws RecognitionException {
        traceIn("function_try_block", 156);
        if(state.backtracking == 0){action.function_try_block(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2525:5: ( LITERAL_try ( ctor_initializer )? function_body[class_late_binding] ( handler[class_late_binding] )+ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2526:9: LITERAL_try ( ctor_initializer )? function_body[class_late_binding] ( handler[class_late_binding] )+
            {
            match(input,LITERAL_try,FOLLOW_LITERAL_try_in_function_try_block51997); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2526:21: ( ctor_initializer )?
            int alt268=2;
            int LA268_0 = input.LA(1);

            if ( (LA268_0==COLON) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2526:21: ctor_initializer
                    {
                    pushFollow(FOLLOW_ctor_initializer_in_function_try_block51999);
                    ctor_initializer();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            pushFollow(FOLLOW_function_body_in_function_try_block52002);
            function_body(class_late_binding);

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2527:9: ( handler[class_late_binding] )+
            int cnt269=0;
            loop269:
            do {
                int alt269=2;
                int LA269_0 = input.LA(1);

                if ( (LA269_0==LITERAL_catch) ) {
                    alt269=1;
                }


                switch (alt269) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2527:9: handler[class_late_binding]
            	    {
            	    pushFollow(FOLLOW_handler_in_function_try_block52014);
            	    handler(class_late_binding);

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt269 >= 1 ) break loop269;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(269, input);
                        throw eee;
                }
                cnt269++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("function_try_block", 156);
            if(state.backtracking == 0){action.end_function_try_block(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "function_try_block"



    // $ANTLR start "handler"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2531:1: handler[boolean class_late_binding] : LITERAL_catch LPAREN exception_declaration RPAREN compound_statement[class_late_binding] ;
    public final void handler(boolean class_late_binding) throws RecognitionException {
        traceIn("handler", 157);
        if(state.backtracking == 0){action.handler(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2533:5: ( LITERAL_catch LPAREN exception_declaration RPAREN compound_statement[class_late_binding] )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2534:9: LITERAL_catch LPAREN exception_declaration RPAREN compound_statement[class_late_binding]
            {
            match(input,LITERAL_catch,FOLLOW_LITERAL_catch_in_handler52309); if (state.failed) return ;

            match(input,LPAREN,FOLLOW_LPAREN_in_handler52320); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.handler(action.HANDLER__LPAREN, input.LT(0));}

            pushFollow(FOLLOW_exception_declaration_in_handler52397);
            exception_declaration();

            state._fsp--;
            if (state.failed) return ;

            match(input,RPAREN,FOLLOW_RPAREN_in_handler52408); if (state.failed) return ;

            if ( state.backtracking==0 ) {action.handler(action.HANDLER__RPAREN, input.LT(0));}

            pushFollow(FOLLOW_compound_statement_in_handler52485);
            compound_statement(class_late_binding);

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("handler", 157);
            if(state.backtracking == 0){action.end_handler(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "handler"



    // $ANTLR start "exception_declaration"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2554:1: exception_declaration : ( ( attribute_specifiers )? ( type_specifier )+ ( universal_declarator )? | ELLIPSIS );
    public final void exception_declaration() throws RecognitionException {
        traceIn("exception_declaration", 158);
        Declaration_stack.push(new Declaration_scope());

         init_declaration(CTX, blockscope_decl); 
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2557:5: ( ( attribute_specifiers )? ( type_specifier )+ ( universal_declarator )? | ELLIPSIS )
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==LSQUARE||(LA273_0 >= LITERAL_typeof && LA273_0 <= LITERAL___typeof)||LA273_0==LITERAL_auto||(LA273_0 >= LITERAL_char && LA273_0 <= LITERAL_signed)||LA273_0==LITERAL_unsigned||(LA273_0 >= LITERAL_float && LA273_0 <= LITERAL_void)||(LA273_0 >= LITERAL___extension__ && LA273_0 <= LITERAL___attribute__)||LA273_0==LITERAL_decltype||(LA273_0 >= LITERAL_alignas && LA273_0 <= LITERAL_char32_t)||LA273_0==LITERAL___decltype||LA273_0==LITERAL___builtin_va_list) ) {
                alt273=1;
            }
            else if ( (LA273_0==SCOPE||LA273_0==IDENT) && (( action.type_specifier_already_present(input) ))) {
                alt273=1;
            }
            else if ( (LA273_0==LITERAL_enum||LA273_0==LITERAL_typename||(LA273_0 >= LITERAL_const && LA273_0 <= LITERAL___const)||LA273_0==LITERAL_volatile||(LA273_0 >= LITERAL_class && LA273_0 <= LITERAL_union)) ) {
                alt273=1;
            }
            else if ( (LA273_0==ELLIPSIS) ) {
                alt273=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                throw nvae;

            }
            switch (alt273) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2558:9: ( attribute_specifiers )? ( type_specifier )+ ( universal_declarator )?
                    {
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2558:9: ( attribute_specifiers )?
                    int alt270=2;
                    int LA270_0 = input.LA(1);

                    if ( (LA270_0==LSQUARE||(LA270_0 >= LITERAL___extension__ && LA270_0 <= LITERAL___attribute__)||LA270_0==LITERAL_alignas) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2558:9: attribute_specifiers
                            {
                            pushFollow(FOLLOW_attribute_specifiers_in_exception_declaration52626);
                            attribute_specifiers();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2558:31: ( type_specifier )+
                    int cnt271=0;
                    loop271:
                    do {
                        int alt271=2;
                        switch ( input.LA(1) ) {
                        case SCOPE:
                            {
                            int LA271_2 = input.LA(2);

                            if ( (LA271_2==IDENT) ) {
                                int LA271_5 = input.LA(3);

                                if ( (( action.type_specifier_already_present(input) )) ) {
                                    alt271=1;
                                }


                            }


                            }
                            break;
                        case IDENT:
                            {
                            int LA271_3 = input.LA(2);

                            if ( (( action.type_specifier_already_present(input) )) ) {
                                alt271=1;
                            }


                            }
                            break;
                        case LITERAL_typeof:
                        case LITERAL___typeof__:
                        case LITERAL___typeof:
                        case LITERAL_enum:
                        case LITERAL_typename:
                        case LITERAL_auto:
                        case LITERAL_const:
                        case LITERAL___const__:
                        case LITERAL___const:
                        case LITERAL_volatile:
                        case LITERAL_char:
                        case LITERAL_wchar_t:
                        case LITERAL_bool:
                        case LITERAL_short:
                        case LITERAL_int:
                        case LITERAL_long:
                        case LITERAL_signed:
                        case LITERAL_unsigned:
                        case LITERAL_float:
                        case LITERAL_double:
                        case LITERAL_void:
                        case LITERAL_class:
                        case LITERAL_struct:
                        case LITERAL_union:
                        case LITERAL_decltype:
                        case LITERAL_char16_t:
                        case LITERAL_char32_t:
                        case LITERAL___decltype:
                        case LITERAL___builtin_va_list:
                            {
                            alt271=1;
                            }
                            break;

                        }

                        switch (alt271) {
                    	case 1 :
                    	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2558:31: type_specifier
                    	    {
                    	    pushFollow(FOLLOW_type_specifier_in_exception_declaration52629);
                    	    type_specifier();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt271 >= 1 ) break loop271;
                    	    if (state.backtracking>0) {state.failed=true; return ;}
                                EarlyExitException eee =
                                    new EarlyExitException(271, input);
                                throw eee;
                        }
                        cnt271++;
                    } while (true);


                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2558:47: ( universal_declarator )?
                    int alt272=2;
                    int LA272_0 = input.LA(1);

                    if ( (LA272_0==ELLIPSIS||LA272_0==LPAREN||LA272_0==LSQUARE||LA272_0==STAR||LA272_0==AND||LA272_0==AMPERSAND||LA272_0==TILDE||LA272_0==SCOPE||LA272_0==IDENT||LA272_0==LITERAL_OPERATOR) ) {
                        alt272=1;
                    }
                    switch (alt272) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2558:47: universal_declarator
                            {
                            pushFollow(FOLLOW_universal_declarator_in_exception_declaration52632);
                            universal_declarator();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2560:9: ELLIPSIS
                    {
                    match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_exception_declaration52649); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("exception_declaration", 158);
            Declaration_stack.pop();

        }
        return ;
    }
    // $ANTLR end "exception_declaration"



    // $ANTLR start "throw_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2562:1: throw_expression : LITERAL_throw ( assignment_expression )? ;
    public final void throw_expression() throws RecognitionException {
        traceIn("throw_expression", 159);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2562:17: ( LITERAL_throw ( assignment_expression )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2563:9: LITERAL_throw ( assignment_expression )?
            {
            match(input,LITERAL_throw,FOLLOW_LITERAL_throw_in_throw_expression52668); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2563:23: ( assignment_expression )?
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==QUESTIONMARK||LA274_0==LPAREN||LA274_0==LSQUARE||LA274_0==PLUS||(LA274_0 >= PLUSPLUS && LA274_0 <= MINUS)||(LA274_0 >= MINUSMINUS && LA274_0 <= STAR)||LA274_0==NOT||LA274_0==AMPERSAND||LA274_0==TILDE||LA274_0==SCOPE||LA274_0==FLOATONE||(LA274_0 >= HEXADECIMALINT && LA274_0 <= DECIMALINT)||(LA274_0 >= CHAR_LITERAL && LA274_0 <= STRING_LITERAL)||(LA274_0 >= NUMBER && LA274_0 <= IDENT)||LA274_0==LITERAL_OPERATOR||(LA274_0 >= LITERAL_typeof && LA274_0 <= LITERAL___typeof)||(LA274_0 >= LITERAL_typename && LA274_0 <= LITERAL_auto)||LA274_0==LITERAL_const_cast||(LA274_0 >= LITERAL_char && LA274_0 <= LITERAL_signed)||LA274_0==LITERAL_unsigned||(LA274_0 >= LITERAL_float && LA274_0 <= LITERAL_void)||(LA274_0 >= LITERAL_this && LA274_0 <= LITERAL_false)||LA274_0==LITERAL_throw||(LA274_0 >= LITERAL_sizeof && LA274_0 <= LITERAL_new)||LA274_0==LITERAL_delete||LA274_0==LITERAL_decltype||(LA274_0 >= LITERAL_char16_t && LA274_0 <= LITERAL___decltype)||LA274_0==LITERAL___null||LA274_0==LITERAL___is_class||LA274_0==LITERAL___is_pod||(LA274_0 >= LITERAL___has_nothrow_assign && LA274_0 <= LITERAL___builtin_va_list)||LA274_0==LITERAL_typeid) ) {
                alt274=1;
            }
            switch (alt274) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2563:23: assignment_expression
                    {
                    pushFollow(FOLLOW_assignment_expression_in_throw_expression52670);
                    assignment_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("throw_expression", 159);
        }
        return ;
    }
    // $ANTLR end "throw_expression"



    // $ANTLR start "exception_specification"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2565:1: exception_specification : ( dynamic_exception_specification ( gnu_attribute_or_extension_specifiers )? | noexcept_specification ( gnu_attribute_or_extension_specifiers )? );
    public final void exception_specification() throws RecognitionException {
        traceIn("exception_specification", 160);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2565:24: ( dynamic_exception_specification ( gnu_attribute_or_extension_specifiers )? | noexcept_specification ( gnu_attribute_or_extension_specifiers )? )
            int alt277=2;
            int LA277_0 = input.LA(1);

            if ( (LA277_0==LITERAL_throw) ) {
                alt277=1;
            }
            else if ( (LA277_0==LITERAL_noexcept) ) {
                alt277=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);

                throw nvae;

            }
            switch (alt277) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2566:9: dynamic_exception_specification ( gnu_attribute_or_extension_specifiers )?
                    {
                    pushFollow(FOLLOW_dynamic_exception_specification_in_exception_specification52691);
                    dynamic_exception_specification();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2566:41: ( gnu_attribute_or_extension_specifiers )?
                    int alt275=2;
                    int LA275_0 = input.LA(1);

                    if ( ((LA275_0 >= LITERAL___extension__ && LA275_0 <= LITERAL___attribute__)) ) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2566:41: gnu_attribute_or_extension_specifiers
                            {
                            pushFollow(FOLLOW_gnu_attribute_or_extension_specifiers_in_exception_specification52693);
                            gnu_attribute_or_extension_specifiers();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2568:9: noexcept_specification ( gnu_attribute_or_extension_specifiers )?
                    {
                    pushFollow(FOLLOW_noexcept_specification_in_exception_specification52710);
                    noexcept_specification();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2568:32: ( gnu_attribute_or_extension_specifiers )?
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( ((LA276_0 >= LITERAL___extension__ && LA276_0 <= LITERAL___attribute__)) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2568:32: gnu_attribute_or_extension_specifiers
                            {
                            pushFollow(FOLLOW_gnu_attribute_or_extension_specifiers_in_exception_specification52712);
                            gnu_attribute_or_extension_specifiers();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("exception_specification", 160);
        }
        return ;
    }
    // $ANTLR end "exception_specification"



    // $ANTLR start "dynamic_exception_specification"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2570:1: dynamic_exception_specification : LITERAL_throw LPAREN ( type_id_list )? RPAREN ;
    public final void dynamic_exception_specification() throws RecognitionException {
        traceIn("dynamic_exception_specification", 161);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2570:32: ( LITERAL_throw LPAREN ( type_id_list )? RPAREN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2571:9: LITERAL_throw LPAREN ( type_id_list )? RPAREN
            {
            match(input,LITERAL_throw,FOLLOW_LITERAL_throw_in_dynamic_exception_specification52732); if (state.failed) return ;

            match(input,LPAREN,FOLLOW_LPAREN_in_dynamic_exception_specification52734); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2571:30: ( type_id_list )?
            int alt278=2;
            int LA278_0 = input.LA(1);

            if ( ((LA278_0 >= LITERAL_typeof && LA278_0 <= LITERAL___typeof)||LA278_0==LITERAL_auto||(LA278_0 >= LITERAL_char && LA278_0 <= LITERAL_signed)||LA278_0==LITERAL_unsigned||(LA278_0 >= LITERAL_float && LA278_0 <= LITERAL_void)||(LA278_0 >= LITERAL___extension__ && LA278_0 <= LITERAL___attribute__)||LA278_0==LITERAL_decltype||(LA278_0 >= LITERAL_char16_t && LA278_0 <= LITERAL_char32_t)||LA278_0==LITERAL___decltype||LA278_0==LITERAL___builtin_va_list) ) {
                alt278=1;
            }
            else if ( (LA278_0==SCOPE||LA278_0==IDENT) && (( action.type_specifier_already_present(input) ))) {
                alt278=1;
            }
            else if ( (LA278_0==LITERAL_enum||LA278_0==LITERAL_typename||(LA278_0 >= LITERAL_const && LA278_0 <= LITERAL___const)||LA278_0==LITERAL_volatile||(LA278_0 >= LITERAL_class && LA278_0 <= LITERAL_union)) ) {
                alt278=1;
            }
            switch (alt278) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2571:30: type_id_list
                    {
                    pushFollow(FOLLOW_type_id_list_in_dynamic_exception_specification52736);
                    type_id_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            match(input,RPAREN,FOLLOW_RPAREN_in_dynamic_exception_specification52739); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("dynamic_exception_specification", 161);
        }
        return ;
    }
    // $ANTLR end "dynamic_exception_specification"



    // $ANTLR start "type_id_list"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2573:1: type_id_list : type_id ( ELLIPSIS )? ( COMMA type_id ( ELLIPSIS )? )* ;
    public final void type_id_list() throws RecognitionException {
        traceIn("type_id_list", 162);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2573:13: ( type_id ( ELLIPSIS )? ( COMMA type_id ( ELLIPSIS )? )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2574:9: type_id ( ELLIPSIS )? ( COMMA type_id ( ELLIPSIS )? )*
            {
            pushFollow(FOLLOW_type_id_in_type_id_list52759);
            type_id();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2574:17: ( ELLIPSIS )?
            int alt279=2;
            int LA279_0 = input.LA(1);

            if ( (LA279_0==ELLIPSIS) ) {
                alt279=1;
            }
            switch (alt279) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2574:17: ELLIPSIS
                    {
                    match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_type_id_list52761); if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2574:27: ( COMMA type_id ( ELLIPSIS )? )*
            loop281:
            do {
                int alt281=2;
                int LA281_0 = input.LA(1);

                if ( (LA281_0==COMMA) ) {
                    alt281=1;
                }


                switch (alt281) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2574:29: COMMA type_id ( ELLIPSIS )?
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_type_id_list52766); if (state.failed) return ;

            	    pushFollow(FOLLOW_type_id_in_type_id_list52768);
            	    type_id();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2574:43: ( ELLIPSIS )?
            	    int alt280=2;
            	    int LA280_0 = input.LA(1);

            	    if ( (LA280_0==ELLIPSIS) ) {
            	        alt280=1;
            	    }
            	    switch (alt280) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2574:43: ELLIPSIS
            	            {
            	            match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_type_id_list52770); if (state.failed) return ;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop281;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("type_id_list", 162);
        }
        return ;
    }
    // $ANTLR end "type_id_list"



    // $ANTLR start "noexcept_specification"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2576:1: noexcept_specification : LITERAL_noexcept ;
    public final void noexcept_specification() throws RecognitionException {
        traceIn("noexcept_specification", 163);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2576:23: ( LITERAL_noexcept )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2577:9: LITERAL_noexcept
            {
            match(input,LITERAL_noexcept,FOLLOW_LITERAL_noexcept_in_noexcept_specification52793); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("noexcept_specification", 163);
        }
        return ;
    }
    // $ANTLR end "noexcept_specification"



    // $ANTLR start "primary_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2582:1: primary_expression : ( literal | LITERAL_this | LPAREN expression RPAREN | id_expression | lambda_expression );
    public final void primary_expression() throws RecognitionException {
        traceIn("primary_expression", 164);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2582:19: ( literal | LITERAL_this | LPAREN expression RPAREN | id_expression | lambda_expression )
            int alt282=5;
            switch ( input.LA(1) ) {
            case FLOATONE:
            case HEXADECIMALINT:
            case OCTALINT:
            case DECIMALINT:
            case CHAR_LITERAL:
            case STRING_LITERAL:
            case NUMBER:
            case LITERAL_true:
            case LITERAL_false:
            case LITERAL___null:
                {
                alt282=1;
                }
                break;
            case LITERAL_this:
                {
                alt282=2;
                }
                break;
            case LPAREN:
                {
                alt282=3;
                }
                break;
            case TILDE:
            case SCOPE:
            case IDENT:
            case LITERAL_OPERATOR:
                {
                alt282=4;
                }
                break;
            case LSQUARE:
                {
                alt282=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 282, 0, input);

                throw nvae;

            }

            switch (alt282) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2583:9: literal
                    {
                    pushFollow(FOLLOW_literal_in_primary_expression52816);
                    literal();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2585:9: LITERAL_this
                    {
                    match(input,LITERAL_this,FOLLOW_LITERAL_this_in_primary_expression52832); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2587:9: LPAREN expression RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_primary_expression52848); if (state.failed) return ;

                    pushFollow(FOLLOW_expression_in_primary_expression52850);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RPAREN,FOLLOW_RPAREN_in_primary_expression52852); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2589:9: id_expression
                    {
                    pushFollow(FOLLOW_id_expression_in_primary_expression52869);
                    id_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2591:9: lambda_expression
                    {
                    pushFollow(FOLLOW_lambda_expression_in_primary_expression52886);
                    lambda_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("primary_expression", 164);
        }
        return ;
    }
    // $ANTLR end "primary_expression"



    // $ANTLR start "lambda_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2594:1: lambda_expression : lambda_introduser ( lambda_declarator )? compound_statement[false] ;
    public final void lambda_expression() throws RecognitionException {
        traceIn("lambda_expression", 165);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2594:18: ( lambda_introduser ( lambda_declarator )? compound_statement[false] )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2595:9: lambda_introduser ( lambda_declarator )? compound_statement[false]
            {
            pushFollow(FOLLOW_lambda_introduser_in_lambda_expression52906);
            lambda_introduser();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2595:27: ( lambda_declarator )?
            int alt283=2;
            int LA283_0 = input.LA(1);

            if ( (LA283_0==LPAREN) ) {
                alt283=1;
            }
            switch (alt283) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2595:27: lambda_declarator
                    {
                    pushFollow(FOLLOW_lambda_declarator_in_lambda_expression52908);
                    lambda_declarator();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            pushFollow(FOLLOW_compound_statement_in_lambda_expression52911);
            compound_statement(false);

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("lambda_expression", 165);
        }
        return ;
    }
    // $ANTLR end "lambda_expression"



    // $ANTLR start "lambda_introduser"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2598:1: lambda_introduser : LSQUARE ( lambda_capture )? RSQUARE ;
    public final void lambda_introduser() throws RecognitionException {
        traceIn("lambda_introduser", 166);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2598:18: ( LSQUARE ( lambda_capture )? RSQUARE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2599:9: LSQUARE ( lambda_capture )? RSQUARE
            {
            match(input,LSQUARE,FOLLOW_LSQUARE_in_lambda_introduser52932); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2599:17: ( lambda_capture )?
            int alt284=2;
            int LA284_0 = input.LA(1);

            if ( (LA284_0==ASSIGNEQUAL||LA284_0==AMPERSAND||LA284_0==IDENT||LA284_0==LITERAL_this) ) {
                alt284=1;
            }
            switch (alt284) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2599:17: lambda_capture
                    {
                    pushFollow(FOLLOW_lambda_capture_in_lambda_introduser52934);
                    lambda_capture();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            match(input,RSQUARE,FOLLOW_RSQUARE_in_lambda_introduser52937); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("lambda_introduser", 166);
        }
        return ;
    }
    // $ANTLR end "lambda_introduser"



    // $ANTLR start "lambda_capture"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2601:1: lambda_capture : ( capture_default ( COMMA capture_list )? | capture_list );
    public final void lambda_capture() throws RecognitionException {
        traceIn("lambda_capture", 167);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2601:15: ( capture_default ( COMMA capture_list )? | capture_list )
            int alt286=2;
            switch ( input.LA(1) ) {
            case AMPERSAND:
                {
                int LA286_1 = input.LA(2);

                if ( (LA286_1==IDENT) ) {
                    alt286=2;
                }
                else if ( (LA286_1==COMMA||LA286_1==RSQUARE) ) {
                    alt286=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 286, 1, input);

                    throw nvae;

                }
                }
                break;
            case IDENT:
            case LITERAL_this:
                {
                alt286=2;
                }
                break;
            case ASSIGNEQUAL:
                {
                alt286=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 286, 0, input);

                throw nvae;

            }

            switch (alt286) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2602:9: capture_default ( COMMA capture_list )?
                    {
                    pushFollow(FOLLOW_capture_default_in_lambda_capture52956);
                    capture_default();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2602:25: ( COMMA capture_list )?
                    int alt285=2;
                    int LA285_0 = input.LA(1);

                    if ( (LA285_0==COMMA) ) {
                        alt285=1;
                    }
                    switch (alt285) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2602:26: COMMA capture_list
                            {
                            match(input,COMMA,FOLLOW_COMMA_in_lambda_capture52959); if (state.failed) return ;

                            pushFollow(FOLLOW_capture_list_in_lambda_capture52961);
                            capture_list();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2604:9: capture_list
                    {
                    pushFollow(FOLLOW_capture_list_in_lambda_capture52979);
                    capture_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("lambda_capture", 167);
        }
        return ;
    }
    // $ANTLR end "lambda_capture"



    // $ANTLR start "capture_default"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2606:1: capture_default : ( AMPERSAND | ASSIGNEQUAL );
    public final void capture_default() throws RecognitionException {
        traceIn("capture_default", 168);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2606:16: ( AMPERSAND | ASSIGNEQUAL )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( input.LA(1)==ASSIGNEQUAL||input.LA(1)==AMPERSAND ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("capture_default", 168);
        }
        return ;
    }
    // $ANTLR end "capture_default"



    // $ANTLR start "capture_list"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2611:1: capture_list : capture ( ELLIPSIS )? ( COMMA capture ( ELLIPSIS )? )* ;
    public final void capture_list() throws RecognitionException {
        traceIn("capture_list", 169);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2611:13: ( capture ( ELLIPSIS )? ( COMMA capture ( ELLIPSIS )? )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2612:9: capture ( ELLIPSIS )? ( COMMA capture ( ELLIPSIS )? )*
            {
            pushFollow(FOLLOW_capture_in_capture_list53033);
            capture();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2612:17: ( ELLIPSIS )?
            int alt287=2;
            int LA287_0 = input.LA(1);

            if ( (LA287_0==ELLIPSIS) ) {
                alt287=1;
            }
            switch (alt287) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2612:17: ELLIPSIS
                    {
                    match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_capture_list53035); if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2612:27: ( COMMA capture ( ELLIPSIS )? )*
            loop289:
            do {
                int alt289=2;
                int LA289_0 = input.LA(1);

                if ( (LA289_0==COMMA) ) {
                    alt289=1;
                }


                switch (alt289) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2612:28: COMMA capture ( ELLIPSIS )?
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_capture_list53039); if (state.failed) return ;

            	    pushFollow(FOLLOW_capture_in_capture_list53041);
            	    capture();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2612:42: ( ELLIPSIS )?
            	    int alt288=2;
            	    int LA288_0 = input.LA(1);

            	    if ( (LA288_0==ELLIPSIS) ) {
            	        alt288=1;
            	    }
            	    switch (alt288) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2612:42: ELLIPSIS
            	            {
            	            match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_capture_list53043); if (state.failed) return ;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop289;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("capture_list", 169);
        }
        return ;
    }
    // $ANTLR end "capture_list"



    // $ANTLR start "capture"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2614:1: capture : ( IDENT | AMPERSAND IDENT | LITERAL_this );
    public final void capture() throws RecognitionException {
        traceIn("capture", 170);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2614:8: ( IDENT | AMPERSAND IDENT | LITERAL_this )
            int alt290=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt290=1;
                }
                break;
            case AMPERSAND:
                {
                alt290=2;
                }
                break;
            case LITERAL_this:
                {
                alt290=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 290, 0, input);

                throw nvae;

            }

            switch (alt290) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2615:9: IDENT
                    {
                    match(input,IDENT,FOLLOW_IDENT_in_capture53065); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2617:9: AMPERSAND IDENT
                    {
                    match(input,AMPERSAND,FOLLOW_AMPERSAND_in_capture53081); if (state.failed) return ;

                    match(input,IDENT,FOLLOW_IDENT_in_capture53083); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2619:9: LITERAL_this
                    {
                    match(input,LITERAL_this,FOLLOW_LITERAL_this_in_capture53099); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("capture", 170);
        }
        return ;
    }
    // $ANTLR end "capture"



    // $ANTLR start "lambda_declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2621:1: lambda_declarator : parameters ( LITERAL_mutable )? ( exception_specification )? ( trailing_return_type )? ;
    public final void lambda_declarator() throws RecognitionException {
        traceIn("lambda_declarator", 171);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2621:18: ( parameters ( LITERAL_mutable )? ( exception_specification )? ( trailing_return_type )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2622:9: parameters ( LITERAL_mutable )? ( exception_specification )? ( trailing_return_type )?
            {
            pushFollow(FOLLOW_parameters_in_lambda_declarator53118);
            parameters();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2622:20: ( LITERAL_mutable )?
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==LITERAL_mutable) ) {
                alt291=1;
            }
            switch (alt291) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2622:20: LITERAL_mutable
                    {
                    match(input,LITERAL_mutable,FOLLOW_LITERAL_mutable_in_lambda_declarator53120); if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2622:37: ( exception_specification )?
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==LITERAL_throw||LA292_0==LITERAL_noexcept) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2622:37: exception_specification
                    {
                    pushFollow(FOLLOW_exception_specification_in_lambda_declarator53123);
                    exception_specification();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2622:62: ( trailing_return_type )?
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==LITERAL_POINTERTO) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2622:62: trailing_return_type
                    {
                    pushFollow(FOLLOW_trailing_return_type_in_lambda_declarator53126);
                    trailing_return_type();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("lambda_declarator", 171);
        }
        return ;
    }
    // $ANTLR end "lambda_declarator"



    // $ANTLR start "postfix_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2672:1: postfix_expression : basic_postfix_expression ( LSQUARE expression RSQUARE | LPAREN ( expression_list )? RPAREN | DOT ( ( LITERAL_template )? id_expression ) | POINTERTO ( ( LITERAL_template )? id_expression ) | PLUSPLUS | MINUSMINUS )* ;
    public final void postfix_expression() throws RecognitionException {
        traceIn("postfix_expression", 172);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2672:19: ( basic_postfix_expression ( LSQUARE expression RSQUARE | LPAREN ( expression_list )? RPAREN | DOT ( ( LITERAL_template )? id_expression ) | POINTERTO ( ( LITERAL_template )? id_expression ) | PLUSPLUS | MINUSMINUS )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2673:9: basic_postfix_expression ( LSQUARE expression RSQUARE | LPAREN ( expression_list )? RPAREN | DOT ( ( LITERAL_template )? id_expression ) | POINTERTO ( ( LITERAL_template )? id_expression ) | PLUSPLUS | MINUSMINUS )*
            {
            pushFollow(FOLLOW_basic_postfix_expression_in_postfix_expression53149);
            basic_postfix_expression();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2674:9: ( LSQUARE expression RSQUARE | LPAREN ( expression_list )? RPAREN | DOT ( ( LITERAL_template )? id_expression ) | POINTERTO ( ( LITERAL_template )? id_expression ) | PLUSPLUS | MINUSMINUS )*
            loop297:
            do {
                int alt297=7;
                switch ( input.LA(1) ) {
                case LSQUARE:
                    {
                    alt297=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt297=2;
                    }
                    break;
                case DOT:
                    {
                    alt297=3;
                    }
                    break;
                case POINTERTO:
                    {
                    alt297=4;
                    }
                    break;
                case PLUSPLUS:
                    {
                    alt297=5;
                    }
                    break;
                case MINUSMINUS:
                    {
                    alt297=6;
                    }
                    break;

                }

                switch (alt297) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2675:13: LSQUARE expression RSQUARE
            	    {
            	    match(input,LSQUARE,FOLLOW_LSQUARE_in_postfix_expression53173); if (state.failed) return ;

            	    pushFollow(FOLLOW_expression_in_postfix_expression53175);
            	    expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    match(input,RSQUARE,FOLLOW_RSQUARE_in_postfix_expression53177); if (state.failed) return ;

            	    }
            	    break;
            	case 2 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2677:13: LPAREN ( expression_list )? RPAREN
            	    {
            	    match(input,LPAREN,FOLLOW_LPAREN_in_postfix_expression53201); if (state.failed) return ;

            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2677:20: ( expression_list )?
            	    int alt294=2;
            	    int LA294_0 = input.LA(1);

            	    if ( (LA294_0==QUESTIONMARK||LA294_0==LPAREN||LA294_0==LSQUARE||LA294_0==LCURLY||LA294_0==PLUS||(LA294_0 >= PLUSPLUS && LA294_0 <= MINUS)||(LA294_0 >= MINUSMINUS && LA294_0 <= STAR)||LA294_0==NOT||LA294_0==AMPERSAND||LA294_0==TILDE||LA294_0==SCOPE||LA294_0==FLOATONE||(LA294_0 >= HEXADECIMALINT && LA294_0 <= DECIMALINT)||(LA294_0 >= CHAR_LITERAL && LA294_0 <= STRING_LITERAL)||(LA294_0 >= NUMBER && LA294_0 <= IDENT)||LA294_0==LITERAL_OPERATOR||(LA294_0 >= LITERAL_typeof && LA294_0 <= LITERAL___typeof)||(LA294_0 >= LITERAL_typename && LA294_0 <= LITERAL_auto)||LA294_0==LITERAL_const_cast||(LA294_0 >= LITERAL_char && LA294_0 <= LITERAL_signed)||LA294_0==LITERAL_unsigned||(LA294_0 >= LITERAL_float && LA294_0 <= LITERAL_void)||(LA294_0 >= LITERAL_this && LA294_0 <= LITERAL_false)||LA294_0==LITERAL_throw||(LA294_0 >= LITERAL_sizeof && LA294_0 <= LITERAL_new)||LA294_0==LITERAL_delete||LA294_0==LITERAL_decltype||(LA294_0 >= LITERAL_char16_t && LA294_0 <= LITERAL___decltype)||LA294_0==LITERAL___null||LA294_0==LITERAL___is_class||LA294_0==LITERAL___is_pod||(LA294_0 >= LITERAL___has_nothrow_assign && LA294_0 <= LITERAL___builtin_va_list)||LA294_0==LITERAL_typeid) ) {
            	        alt294=1;
            	    }
            	    switch (alt294) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2677:20: expression_list
            	            {
            	            pushFollow(FOLLOW_expression_list_in_postfix_expression53203);
            	            expression_list();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }


            	    match(input,RPAREN,FOLLOW_RPAREN_in_postfix_expression53206); if (state.failed) return ;

            	    }
            	    break;
            	case 3 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2679:13: DOT ( ( LITERAL_template )? id_expression )
            	    {
            	    match(input,DOT,FOLLOW_DOT_in_postfix_expression53230); if (state.failed) return ;

            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2680:13: ( ( LITERAL_template )? id_expression )
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2681:17: ( LITERAL_template )? id_expression
            	    {
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2681:17: ( LITERAL_template )?
            	    int alt295=2;
            	    int LA295_0 = input.LA(1);

            	    if ( (LA295_0==LITERAL_template) ) {
            	        alt295=1;
            	    }
            	    switch (alt295) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2681:17: LITERAL_template
            	            {
            	            match(input,LITERAL_template,FOLLOW_LITERAL_template_in_postfix_expression53262); if (state.failed) return ;

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_id_expression_in_postfix_expression53265);
            	    id_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2686:13: POINTERTO ( ( LITERAL_template )? id_expression )
            	    {
            	    match(input,POINTERTO,FOLLOW_POINTERTO_in_postfix_expression53305); if (state.failed) return ;

            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2687:13: ( ( LITERAL_template )? id_expression )
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2688:17: ( LITERAL_template )? id_expression
            	    {
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2688:17: ( LITERAL_template )?
            	    int alt296=2;
            	    int LA296_0 = input.LA(1);

            	    if ( (LA296_0==LITERAL_template) ) {
            	        alt296=1;
            	    }
            	    switch (alt296) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2688:17: LITERAL_template
            	            {
            	            match(input,LITERAL_template,FOLLOW_LITERAL_template_in_postfix_expression53337); if (state.failed) return ;

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_id_expression_in_postfix_expression53340);
            	    id_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }


            	    }
            	    break;
            	case 5 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2693:13: PLUSPLUS
            	    {
            	    match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_postfix_expression53380); if (state.failed) return ;

            	    }
            	    break;
            	case 6 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2695:13: MINUSMINUS
            	    {
            	    match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_postfix_expression53404); if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop297;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("postfix_expression", 172);
        }
        return ;
    }
    // $ANTLR end "postfix_expression"



    // $ANTLR start "basic_postfix_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2699:1: basic_postfix_expression : ( primary_expression | simple_type_specifier LPAREN ( expression_list )? RPAREN | LITERAL_typename ( SCOPE )? nested_name_specifier ( IDENT LPAREN ( expression_list )? RPAREN | ( LITERAL_template )? simple_template_id LPAREN ( expression_list )? RPAREN ) | LITERAL_dynamic_cast LESSTHAN type_id GREATERTHAN LPAREN expression RPAREN | LITERAL_static_cast LESSTHAN type_id GREATERTHAN LPAREN expression RPAREN | LITERAL_reinterpret_cast LESSTHAN type_id GREATERTHAN LPAREN expression RPAREN | LITERAL_const_cast LESSTHAN type_id GREATERTHAN LPAREN expression RPAREN | LITERAL_typeid LPAREN ( ( type_id )=> type_id | expression ) RPAREN );
    public final void basic_postfix_expression() throws RecognitionException {
        traceIn("basic_postfix_expression", 173);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2699:25: ( primary_expression | simple_type_specifier LPAREN ( expression_list )? RPAREN | LITERAL_typename ( SCOPE )? nested_name_specifier ( IDENT LPAREN ( expression_list )? RPAREN | ( LITERAL_template )? simple_template_id LPAREN ( expression_list )? RPAREN ) | LITERAL_dynamic_cast LESSTHAN type_id GREATERTHAN LPAREN expression RPAREN | LITERAL_static_cast LESSTHAN type_id GREATERTHAN LPAREN expression RPAREN | LITERAL_reinterpret_cast LESSTHAN type_id GREATERTHAN LPAREN expression RPAREN | LITERAL_const_cast LESSTHAN type_id GREATERTHAN LPAREN expression RPAREN | LITERAL_typeid LPAREN ( ( type_id )=> type_id | expression ) RPAREN )
            int alt305=8;
            switch ( input.LA(1) ) {
            case LPAREN:
            case LSQUARE:
            case TILDE:
            case FLOATONE:
            case HEXADECIMALINT:
            case OCTALINT:
            case DECIMALINT:
            case CHAR_LITERAL:
            case STRING_LITERAL:
            case NUMBER:
            case LITERAL_OPERATOR:
            case LITERAL_this:
            case LITERAL_true:
            case LITERAL_false:
            case LITERAL___null:
                {
                alt305=1;
                }
                break;
            case IDENT:
                {
                int LA305_15 = input.LA(2);

                if ( (!((( action.type_specifier_already_present(input) )))) ) {
                    alt305=1;
                }
                else if ( (( action.type_specifier_already_present(input) )) ) {
                    alt305=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 305, 15, input);

                    throw nvae;

                }
                }
                break;
            case SCOPE:
                {
                int LA305_16 = input.LA(2);

                if ( (!((( action.type_specifier_already_present(input) )))) ) {
                    alt305=1;
                }
                else if ( (( action.type_specifier_already_present(input) )) ) {
                    alt305=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 305, 16, input);

                    throw nvae;

                }
                }
                break;
            case LITERAL_typeof:
            case LITERAL___typeof__:
            case LITERAL___typeof:
            case LITERAL_auto:
            case LITERAL_char:
            case LITERAL_wchar_t:
            case LITERAL_bool:
            case LITERAL_short:
            case LITERAL_int:
            case LITERAL_long:
            case LITERAL_signed:
            case LITERAL_unsigned:
            case LITERAL_float:
            case LITERAL_double:
            case LITERAL_void:
            case LITERAL_decltype:
            case LITERAL_char16_t:
            case LITERAL_char32_t:
            case LITERAL___decltype:
            case LITERAL___builtin_va_list:
                {
                alt305=2;
                }
                break;
            case LITERAL_typename:
                {
                alt305=3;
                }
                break;
            case LITERAL_dynamic_cast:
                {
                alt305=4;
                }
                break;
            case LITERAL_static_cast:
                {
                alt305=5;
                }
                break;
            case LITERAL_reinterpret_cast:
                {
                alt305=6;
                }
                break;
            case LITERAL_const_cast:
                {
                alt305=7;
                }
                break;
            case LITERAL_typeid:
                {
                alt305=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 305, 0, input);

                throw nvae;

            }

            switch (alt305) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2700:9: primary_expression
                    {
                    pushFollow(FOLLOW_primary_expression_in_basic_postfix_expression53435);
                    primary_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2702:9: simple_type_specifier LPAREN ( expression_list )? RPAREN
                    {
                    pushFollow(FOLLOW_simple_type_specifier_in_basic_postfix_expression53451);
                    simple_type_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,LPAREN,FOLLOW_LPAREN_in_basic_postfix_expression53453); if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2702:38: ( expression_list )?
                    int alt298=2;
                    int LA298_0 = input.LA(1);

                    if ( (LA298_0==QUESTIONMARK||LA298_0==LPAREN||LA298_0==LSQUARE||LA298_0==LCURLY||LA298_0==PLUS||(LA298_0 >= PLUSPLUS && LA298_0 <= MINUS)||(LA298_0 >= MINUSMINUS && LA298_0 <= STAR)||LA298_0==NOT||LA298_0==AMPERSAND||LA298_0==TILDE||LA298_0==SCOPE||LA298_0==FLOATONE||(LA298_0 >= HEXADECIMALINT && LA298_0 <= DECIMALINT)||(LA298_0 >= CHAR_LITERAL && LA298_0 <= STRING_LITERAL)||(LA298_0 >= NUMBER && LA298_0 <= IDENT)||LA298_0==LITERAL_OPERATOR||(LA298_0 >= LITERAL_typeof && LA298_0 <= LITERAL___typeof)||(LA298_0 >= LITERAL_typename && LA298_0 <= LITERAL_auto)||LA298_0==LITERAL_const_cast||(LA298_0 >= LITERAL_char && LA298_0 <= LITERAL_signed)||LA298_0==LITERAL_unsigned||(LA298_0 >= LITERAL_float && LA298_0 <= LITERAL_void)||(LA298_0 >= LITERAL_this && LA298_0 <= LITERAL_false)||LA298_0==LITERAL_throw||(LA298_0 >= LITERAL_sizeof && LA298_0 <= LITERAL_new)||LA298_0==LITERAL_delete||LA298_0==LITERAL_decltype||(LA298_0 >= LITERAL_char16_t && LA298_0 <= LITERAL___decltype)||LA298_0==LITERAL___null||LA298_0==LITERAL___is_class||LA298_0==LITERAL___is_pod||(LA298_0 >= LITERAL___has_nothrow_assign && LA298_0 <= LITERAL___builtin_va_list)||LA298_0==LITERAL_typeid) ) {
                        alt298=1;
                    }
                    switch (alt298) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2702:38: expression_list
                            {
                            pushFollow(FOLLOW_expression_list_in_basic_postfix_expression53455);
                            expression_list();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    match(input,RPAREN,FOLLOW_RPAREN_in_basic_postfix_expression53458); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2704:9: LITERAL_typename ( SCOPE )? nested_name_specifier ( IDENT LPAREN ( expression_list )? RPAREN | ( LITERAL_template )? simple_template_id LPAREN ( expression_list )? RPAREN )
                    {
                    match(input,LITERAL_typename,FOLLOW_LITERAL_typename_in_basic_postfix_expression53474); if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2704:26: ( SCOPE )?
                    int alt299=2;
                    int LA299_0 = input.LA(1);

                    if ( (LA299_0==SCOPE) ) {
                        alt299=1;
                    }
                    switch (alt299) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2704:26: SCOPE
                            {
                            match(input,SCOPE,FOLLOW_SCOPE_in_basic_postfix_expression53476); if (state.failed) return ;

                            }
                            break;

                    }


                    pushFollow(FOLLOW_nested_name_specifier_in_basic_postfix_expression53479);
                    nested_name_specifier();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2704:55: ( IDENT LPAREN ( expression_list )? RPAREN | ( LITERAL_template )? simple_template_id LPAREN ( expression_list )? RPAREN )
                    int alt303=2;
                    int LA303_0 = input.LA(1);

                    if ( (LA303_0==IDENT) ) {
                        int LA303_1 = input.LA(2);

                        if ( (LA303_1==LPAREN) ) {
                            alt303=1;
                        }
                        else if ( (LA303_1==LESSTHAN) ) {
                            alt303=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 303, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA303_0==LITERAL_template) ) {
                        alt303=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 303, 0, input);

                        throw nvae;

                    }
                    switch (alt303) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2705:13: IDENT LPAREN ( expression_list )? RPAREN
                            {
                            match(input,IDENT,FOLLOW_IDENT_in_basic_postfix_expression53495); if (state.failed) return ;

                            match(input,LPAREN,FOLLOW_LPAREN_in_basic_postfix_expression53497); if (state.failed) return ;

                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2705:26: ( expression_list )?
                            int alt300=2;
                            int LA300_0 = input.LA(1);

                            if ( (LA300_0==QUESTIONMARK||LA300_0==LPAREN||LA300_0==LSQUARE||LA300_0==LCURLY||LA300_0==PLUS||(LA300_0 >= PLUSPLUS && LA300_0 <= MINUS)||(LA300_0 >= MINUSMINUS && LA300_0 <= STAR)||LA300_0==NOT||LA300_0==AMPERSAND||LA300_0==TILDE||LA300_0==SCOPE||LA300_0==FLOATONE||(LA300_0 >= HEXADECIMALINT && LA300_0 <= DECIMALINT)||(LA300_0 >= CHAR_LITERAL && LA300_0 <= STRING_LITERAL)||(LA300_0 >= NUMBER && LA300_0 <= IDENT)||LA300_0==LITERAL_OPERATOR||(LA300_0 >= LITERAL_typeof && LA300_0 <= LITERAL___typeof)||(LA300_0 >= LITERAL_typename && LA300_0 <= LITERAL_auto)||LA300_0==LITERAL_const_cast||(LA300_0 >= LITERAL_char && LA300_0 <= LITERAL_signed)||LA300_0==LITERAL_unsigned||(LA300_0 >= LITERAL_float && LA300_0 <= LITERAL_void)||(LA300_0 >= LITERAL_this && LA300_0 <= LITERAL_false)||LA300_0==LITERAL_throw||(LA300_0 >= LITERAL_sizeof && LA300_0 <= LITERAL_new)||LA300_0==LITERAL_delete||LA300_0==LITERAL_decltype||(LA300_0 >= LITERAL_char16_t && LA300_0 <= LITERAL___decltype)||LA300_0==LITERAL___null||LA300_0==LITERAL___is_class||LA300_0==LITERAL___is_pod||(LA300_0 >= LITERAL___has_nothrow_assign && LA300_0 <= LITERAL___builtin_va_list)||LA300_0==LITERAL_typeid) ) {
                                alt300=1;
                            }
                            switch (alt300) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2705:26: expression_list
                                    {
                                    pushFollow(FOLLOW_expression_list_in_basic_postfix_expression53499);
                                    expression_list();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }


                            match(input,RPAREN,FOLLOW_RPAREN_in_basic_postfix_expression53502); if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2707:13: ( LITERAL_template )? simple_template_id LPAREN ( expression_list )? RPAREN
                            {
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2707:13: ( LITERAL_template )?
                            int alt301=2;
                            int LA301_0 = input.LA(1);

                            if ( (LA301_0==LITERAL_template) ) {
                                alt301=1;
                            }
                            switch (alt301) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2707:13: LITERAL_template
                                    {
                                    match(input,LITERAL_template,FOLLOW_LITERAL_template_in_basic_postfix_expression53526); if (state.failed) return ;

                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_simple_template_id_in_basic_postfix_expression53529);
                            simple_template_id();

                            state._fsp--;
                            if (state.failed) return ;

                            match(input,LPAREN,FOLLOW_LPAREN_in_basic_postfix_expression53531); if (state.failed) return ;

                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2707:57: ( expression_list )?
                            int alt302=2;
                            int LA302_0 = input.LA(1);

                            if ( (LA302_0==QUESTIONMARK||LA302_0==LPAREN||LA302_0==LSQUARE||LA302_0==LCURLY||LA302_0==PLUS||(LA302_0 >= PLUSPLUS && LA302_0 <= MINUS)||(LA302_0 >= MINUSMINUS && LA302_0 <= STAR)||LA302_0==NOT||LA302_0==AMPERSAND||LA302_0==TILDE||LA302_0==SCOPE||LA302_0==FLOATONE||(LA302_0 >= HEXADECIMALINT && LA302_0 <= DECIMALINT)||(LA302_0 >= CHAR_LITERAL && LA302_0 <= STRING_LITERAL)||(LA302_0 >= NUMBER && LA302_0 <= IDENT)||LA302_0==LITERAL_OPERATOR||(LA302_0 >= LITERAL_typeof && LA302_0 <= LITERAL___typeof)||(LA302_0 >= LITERAL_typename && LA302_0 <= LITERAL_auto)||LA302_0==LITERAL_const_cast||(LA302_0 >= LITERAL_char && LA302_0 <= LITERAL_signed)||LA302_0==LITERAL_unsigned||(LA302_0 >= LITERAL_float && LA302_0 <= LITERAL_void)||(LA302_0 >= LITERAL_this && LA302_0 <= LITERAL_false)||LA302_0==LITERAL_throw||(LA302_0 >= LITERAL_sizeof && LA302_0 <= LITERAL_new)||LA302_0==LITERAL_delete||LA302_0==LITERAL_decltype||(LA302_0 >= LITERAL_char16_t && LA302_0 <= LITERAL___decltype)||LA302_0==LITERAL___null||LA302_0==LITERAL___is_class||LA302_0==LITERAL___is_pod||(LA302_0 >= LITERAL___has_nothrow_assign && LA302_0 <= LITERAL___builtin_va_list)||LA302_0==LITERAL_typeid) ) {
                                alt302=1;
                            }
                            switch (alt302) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2707:57: expression_list
                                    {
                                    pushFollow(FOLLOW_expression_list_in_basic_postfix_expression53533);
                                    expression_list();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }


                            match(input,RPAREN,FOLLOW_RPAREN_in_basic_postfix_expression53536); if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2710:9: LITERAL_dynamic_cast LESSTHAN type_id GREATERTHAN LPAREN expression RPAREN
                    {
                    match(input,LITERAL_dynamic_cast,FOLLOW_LITERAL_dynamic_cast_in_basic_postfix_expression53562); if (state.failed) return ;

                    match(input,LESSTHAN,FOLLOW_LESSTHAN_in_basic_postfix_expression53564); if (state.failed) return ;

                    pushFollow(FOLLOW_type_id_in_basic_postfix_expression53566);
                    type_id();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_basic_postfix_expression53568); if (state.failed) return ;

                    match(input,LPAREN,FOLLOW_LPAREN_in_basic_postfix_expression53570); if (state.failed) return ;

                    pushFollow(FOLLOW_expression_in_basic_postfix_expression53572);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RPAREN,FOLLOW_RPAREN_in_basic_postfix_expression53574); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2712:9: LITERAL_static_cast LESSTHAN type_id GREATERTHAN LPAREN expression RPAREN
                    {
                    match(input,LITERAL_static_cast,FOLLOW_LITERAL_static_cast_in_basic_postfix_expression53590); if (state.failed) return ;

                    match(input,LESSTHAN,FOLLOW_LESSTHAN_in_basic_postfix_expression53592); if (state.failed) return ;

                    pushFollow(FOLLOW_type_id_in_basic_postfix_expression53594);
                    type_id();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_basic_postfix_expression53596); if (state.failed) return ;

                    match(input,LPAREN,FOLLOW_LPAREN_in_basic_postfix_expression53598); if (state.failed) return ;

                    pushFollow(FOLLOW_expression_in_basic_postfix_expression53600);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RPAREN,FOLLOW_RPAREN_in_basic_postfix_expression53602); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2714:9: LITERAL_reinterpret_cast LESSTHAN type_id GREATERTHAN LPAREN expression RPAREN
                    {
                    match(input,LITERAL_reinterpret_cast,FOLLOW_LITERAL_reinterpret_cast_in_basic_postfix_expression53618); if (state.failed) return ;

                    match(input,LESSTHAN,FOLLOW_LESSTHAN_in_basic_postfix_expression53620); if (state.failed) return ;

                    pushFollow(FOLLOW_type_id_in_basic_postfix_expression53622);
                    type_id();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_basic_postfix_expression53624); if (state.failed) return ;

                    match(input,LPAREN,FOLLOW_LPAREN_in_basic_postfix_expression53626); if (state.failed) return ;

                    pushFollow(FOLLOW_expression_in_basic_postfix_expression53628);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RPAREN,FOLLOW_RPAREN_in_basic_postfix_expression53630); if (state.failed) return ;

                    }
                    break;
                case 7 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2716:9: LITERAL_const_cast LESSTHAN type_id GREATERTHAN LPAREN expression RPAREN
                    {
                    match(input,LITERAL_const_cast,FOLLOW_LITERAL_const_cast_in_basic_postfix_expression53646); if (state.failed) return ;

                    match(input,LESSTHAN,FOLLOW_LESSTHAN_in_basic_postfix_expression53648); if (state.failed) return ;

                    pushFollow(FOLLOW_type_id_in_basic_postfix_expression53650);
                    type_id();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_basic_postfix_expression53652); if (state.failed) return ;

                    match(input,LPAREN,FOLLOW_LPAREN_in_basic_postfix_expression53654); if (state.failed) return ;

                    pushFollow(FOLLOW_expression_in_basic_postfix_expression53656);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RPAREN,FOLLOW_RPAREN_in_basic_postfix_expression53658); if (state.failed) return ;

                    }
                    break;
                case 8 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2721:9: LITERAL_typeid LPAREN ( ( type_id )=> type_id | expression ) RPAREN
                    {
                    match(input,LITERAL_typeid,FOLLOW_LITERAL_typeid_in_basic_postfix_expression53701); if (state.failed) return ;

                    match(input,LPAREN,FOLLOW_LPAREN_in_basic_postfix_expression53703); if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2721:31: ( ( type_id )=> type_id | expression )
                    int alt304=2;
                    int LA304_0 = input.LA(1);

                    if ( (LA304_0==LITERAL___attribute__) && (synpred50_CXXParser())) {
                        alt304=1;
                    }
                    else if ( (LA304_0==LITERAL___extension__) && (synpred50_CXXParser())) {
                        alt304=1;
                    }
                    else if ( (LA304_0==LITERAL_char) ) {
                        int LA304_3 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 3, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL_wchar_t) ) {
                        int LA304_4 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 4, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL_char16_t) ) {
                        int LA304_5 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 5, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL_char32_t) ) {
                        int LA304_6 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 6, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL_bool) ) {
                        int LA304_7 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 7, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL_short) ) {
                        int LA304_8 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 8, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL_int) ) {
                        int LA304_9 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 9, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL_long) ) {
                        int LA304_10 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 10, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL_signed) ) {
                        int LA304_11 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 11, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL_unsigned) ) {
                        int LA304_12 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 12, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL_float) ) {
                        int LA304_13 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 13, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL_double) ) {
                        int LA304_14 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 14, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL_void) ) {
                        int LA304_15 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 15, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL_auto) ) {
                        int LA304_16 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 16, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL___builtin_va_list) ) {
                        int LA304_17 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 17, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL_decltype||LA304_0==LITERAL___decltype) ) {
                        int LA304_18 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 18, input);

                            throw nvae;

                        }
                    }
                    else if ( ((LA304_0 >= LITERAL_typeof && LA304_0 <= LITERAL___typeof)) ) {
                        int LA304_19 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 19, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==SCOPE) ) {
                        int LA304_20 = input.LA(2);

                        if ( (((( action.type_specifier_already_present(input) )&&( action.type_specifier_already_present(input) ))&&synpred50_CXXParser())) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 20, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==IDENT) ) {
                        int LA304_21 = input.LA(2);

                        if ( (((( action.type_specifier_already_present(input) )&&( action.type_specifier_already_present(input) ))&&synpred50_CXXParser())) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 21, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA304_0==LITERAL_class) && (synpred50_CXXParser())) {
                        alt304=1;
                    }
                    else if ( (LA304_0==LITERAL_struct) && (synpred50_CXXParser())) {
                        alt304=1;
                    }
                    else if ( (LA304_0==LITERAL_union) && (synpred50_CXXParser())) {
                        alt304=1;
                    }
                    else if ( (LA304_0==LITERAL_enum) && (synpred50_CXXParser())) {
                        alt304=1;
                    }
                    else if ( (LA304_0==LITERAL_typename) ) {
                        int LA304_26 = input.LA(2);

                        if ( (synpred50_CXXParser()) ) {
                            alt304=1;
                        }
                        else if ( (true) ) {
                            alt304=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return ;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 304, 26, input);

                            throw nvae;

                        }
                    }
                    else if ( ((LA304_0 >= LITERAL_const && LA304_0 <= LITERAL___const)) && (synpred50_CXXParser())) {
                        alt304=1;
                    }
                    else if ( (LA304_0==LITERAL_volatile) && (synpred50_CXXParser())) {
                        alt304=1;
                    }
                    else if ( (LA304_0==QUESTIONMARK||LA304_0==LPAREN||LA304_0==LSQUARE||LA304_0==PLUS||(LA304_0 >= PLUSPLUS && LA304_0 <= MINUS)||(LA304_0 >= MINUSMINUS && LA304_0 <= STAR)||LA304_0==NOT||LA304_0==AMPERSAND||LA304_0==TILDE||LA304_0==FLOATONE||(LA304_0 >= HEXADECIMALINT && LA304_0 <= DECIMALINT)||(LA304_0 >= CHAR_LITERAL && LA304_0 <= STRING_LITERAL)||LA304_0==NUMBER||LA304_0==LITERAL_OPERATOR||LA304_0==LITERAL_const_cast||(LA304_0 >= LITERAL_this && LA304_0 <= LITERAL_false)||LA304_0==LITERAL_throw||(LA304_0 >= LITERAL_sizeof && LA304_0 <= LITERAL_new)||LA304_0==LITERAL_delete||LA304_0==LITERAL_noexcept||LA304_0==LITERAL___null||LA304_0==LITERAL___is_class||LA304_0==LITERAL___is_pod||(LA304_0 >= LITERAL___has_nothrow_assign && LA304_0 <= LITERAL___underlying_type)||LA304_0==LITERAL_typeid) ) {
                        alt304=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 304, 0, input);

                        throw nvae;

                    }
                    switch (alt304) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2721:33: ( type_id )=> type_id
                            {
                            pushFollow(FOLLOW_type_id_in_basic_postfix_expression53712);
                            type_id();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2721:56: expression
                            {
                            pushFollow(FOLLOW_expression_in_basic_postfix_expression53717);
                            expression();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    match(input,RPAREN,FOLLOW_RPAREN_in_basic_postfix_expression53721); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("basic_postfix_expression", 173);
        }
        return ;
    }
    // $ANTLR end "basic_postfix_expression"



    // $ANTLR start "expression_list"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2724:1: expression_list : initializer_list ;
    public final void expression_list() throws RecognitionException {
        traceIn("expression_list", 174);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2724:16: ( initializer_list )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2725:9: initializer_list
            {
            pushFollow(FOLLOW_initializer_list_in_expression_list53741);
            initializer_list();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("expression_list", 174);
        }
        return ;
    }
    // $ANTLR end "expression_list"



    // $ANTLR start "unary_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2762:1: unary_expression : ( ( TILDE cast_expression )=> TILDE cast_expression | ( new_expression )=> new_expression | ( delete_expression )=> delete_expression | ( type_trait_literal )=> type_trait_expression | postfix_expression | PLUSPLUS cast_expression | MINUSMINUS cast_expression | unary_operator_but_not_TILDE cast_expression | noexcept_expression );
    public final void unary_expression() throws RecognitionException {
        traceIn("unary_expression", 175);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2762:17: ( ( TILDE cast_expression )=> TILDE cast_expression | ( new_expression )=> new_expression | ( delete_expression )=> delete_expression | ( type_trait_literal )=> type_trait_expression | postfix_expression | PLUSPLUS cast_expression | MINUSMINUS cast_expression | unary_operator_but_not_TILDE cast_expression | noexcept_expression )
            int alt306=9;
            alt306 = dfa306.predict(input);
            switch (alt306) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2763:8: ( TILDE cast_expression )=> TILDE cast_expression
                    {
                    match(input,TILDE,FOLLOW_TILDE_in_unary_expression53784); if (state.failed) return ;

                    pushFollow(FOLLOW_cast_expression_in_unary_expression53786);
                    cast_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2766:9: ( new_expression )=> new_expression
                    {
                    pushFollow(FOLLOW_new_expression_in_unary_expression53819);
                    new_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2769:9: ( delete_expression )=> delete_expression
                    {
                    pushFollow(FOLLOW_delete_expression_in_unary_expression53852);
                    delete_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2772:9: ( type_trait_literal )=> type_trait_expression
                    {
                    pushFollow(FOLLOW_type_trait_expression_in_unary_expression53885);
                    type_trait_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2775:9: postfix_expression
                    {
                    pushFollow(FOLLOW_postfix_expression_in_unary_expression53901);
                    postfix_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2777:9: PLUSPLUS cast_expression
                    {
                    match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_unary_expression53917); if (state.failed) return ;

                    pushFollow(FOLLOW_cast_expression_in_unary_expression53919);
                    cast_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 7 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2779:9: MINUSMINUS cast_expression
                    {
                    match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_unary_expression53935); if (state.failed) return ;

                    pushFollow(FOLLOW_cast_expression_in_unary_expression53937);
                    cast_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 8 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2781:9: unary_operator_but_not_TILDE cast_expression
                    {
                    pushFollow(FOLLOW_unary_operator_but_not_TILDE_in_unary_expression53953);
                    unary_operator_but_not_TILDE();

                    state._fsp--;
                    if (state.failed) return ;

                    pushFollow(FOLLOW_cast_expression_in_unary_expression53955);
                    cast_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 9 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2783:9: noexcept_expression
                    {
                    pushFollow(FOLLOW_noexcept_expression_in_unary_expression53971);
                    noexcept_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("unary_expression", 175);
        }
        return ;
    }
    // $ANTLR end "unary_expression"



    // $ANTLR start "unary_operator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2786:1: unary_operator : ( unary_operator_but_not_TILDE | TILDE );
    public final void unary_operator() throws RecognitionException {
        traceIn("unary_operator", 176);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2786:15: ( unary_operator_but_not_TILDE | TILDE )
            int alt307=2;
            int LA307_0 = input.LA(1);

            if ( (LA307_0==PLUS||LA307_0==MINUS||LA307_0==STAR||LA307_0==NOT||LA307_0==AMPERSAND) ) {
                alt307=1;
            }
            else if ( (LA307_0==TILDE) ) {
                alt307=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 307, 0, input);

                throw nvae;

            }
            switch (alt307) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2787:9: unary_operator_but_not_TILDE
                    {
                    pushFollow(FOLLOW_unary_operator_but_not_TILDE_in_unary_operator53991);
                    unary_operator_but_not_TILDE();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2787:40: TILDE
                    {
                    match(input,TILDE,FOLLOW_TILDE_in_unary_operator53995); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("unary_operator", 176);
        }
        return ;
    }
    // $ANTLR end "unary_operator"



    // $ANTLR start "unary_operator_but_not_TILDE"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2789:1: unary_operator_but_not_TILDE : ( STAR | AMPERSAND | PLUS | MINUS | NOT );
    public final void unary_operator_but_not_TILDE() throws RecognitionException {
        traceIn("unary_operator_but_not_TILDE", 177);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2789:29: ( STAR | AMPERSAND | PLUS | MINUS | NOT )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( input.LA(1)==PLUS||input.LA(1)==MINUS||input.LA(1)==STAR||input.LA(1)==NOT||input.LA(1)==AMPERSAND ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("unary_operator_but_not_TILDE", 177);
        }
        return ;
    }
    // $ANTLR end "unary_operator_but_not_TILDE"



    // $ANTLR start "new_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2806:1: new_expression : ( SCOPE )? LITERAL_new ( new_placement ( new_type_id | LPAREN type_id RPAREN ) | ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN | new_type_id ) ( new_initializer )? ;
    public final void new_expression() throws RecognitionException {
        traceIn("new_expression", 178);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2806:15: ( ( SCOPE )? LITERAL_new ( new_placement ( new_type_id | LPAREN type_id RPAREN ) | ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN | new_type_id ) ( new_initializer )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2807:9: ( SCOPE )? LITERAL_new ( new_placement ( new_type_id | LPAREN type_id RPAREN ) | ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN | new_type_id ) ( new_initializer )?
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2807:9: ( SCOPE )?
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( (LA308_0==SCOPE) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2807:9: SCOPE
                    {
                    match(input,SCOPE,FOLLOW_SCOPE_in_new_expression54052); if (state.failed) return ;

                    }
                    break;

            }


            match(input,LITERAL_new,FOLLOW_LITERAL_new_in_new_expression54055); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2808:9: ( new_placement ( new_type_id | LPAREN type_id RPAREN ) | ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN | new_type_id )
            int alt310=3;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==LPAREN) ) {
                int LA310_1 = input.LA(2);

                if ( (true) ) {
                    alt310=1;
                }
                else if ( (synpred55_CXXParser()) ) {
                    alt310=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 310, 1, input);

                    throw nvae;

                }
            }
            else if ( ((LA310_0 >= LITERAL_typeof && LA310_0 <= LITERAL___typeof)||LA310_0==LITERAL_auto||(LA310_0 >= LITERAL_char && LA310_0 <= LITERAL_signed)||LA310_0==LITERAL_unsigned||(LA310_0 >= LITERAL_float && LA310_0 <= LITERAL_void)||LA310_0==LITERAL_decltype||(LA310_0 >= LITERAL_char16_t && LA310_0 <= LITERAL_char32_t)||LA310_0==LITERAL___decltype||LA310_0==LITERAL___builtin_va_list) ) {
                alt310=3;
            }
            else if ( (LA310_0==SCOPE||LA310_0==IDENT) && (( action.type_specifier_already_present(input) ))) {
                alt310=3;
            }
            else if ( (LA310_0==LITERAL_enum||LA310_0==LITERAL_typename||(LA310_0 >= LITERAL_const && LA310_0 <= LITERAL___const)||LA310_0==LITERAL_volatile||(LA310_0 >= LITERAL_class && LA310_0 <= LITERAL_union)) ) {
                alt310=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 310, 0, input);

                throw nvae;

            }
            switch (alt310) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2809:13: new_placement ( new_type_id | LPAREN type_id RPAREN )
                    {
                    pushFollow(FOLLOW_new_placement_in_new_expression54079);
                    new_placement();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2809:27: ( new_type_id | LPAREN type_id RPAREN )
                    int alt309=2;
                    int LA309_0 = input.LA(1);

                    if ( ((LA309_0 >= LITERAL_typeof && LA309_0 <= LITERAL___typeof)||LA309_0==LITERAL_auto||(LA309_0 >= LITERAL_char && LA309_0 <= LITERAL_signed)||LA309_0==LITERAL_unsigned||(LA309_0 >= LITERAL_float && LA309_0 <= LITERAL_void)||LA309_0==LITERAL_decltype||(LA309_0 >= LITERAL_char16_t && LA309_0 <= LITERAL_char32_t)||LA309_0==LITERAL___decltype||LA309_0==LITERAL___builtin_va_list) ) {
                        alt309=1;
                    }
                    else if ( (LA309_0==SCOPE||LA309_0==IDENT) && (( action.type_specifier_already_present(input) ))) {
                        alt309=1;
                    }
                    else if ( (LA309_0==LITERAL_enum||LA309_0==LITERAL_typename||(LA309_0 >= LITERAL_const && LA309_0 <= LITERAL___const)||LA309_0==LITERAL_volatile||(LA309_0 >= LITERAL_class && LA309_0 <= LITERAL_union)) ) {
                        alt309=1;
                    }
                    else if ( (LA309_0==LPAREN) ) {
                        alt309=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 309, 0, input);

                        throw nvae;

                    }
                    switch (alt309) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2809:29: new_type_id
                            {
                            pushFollow(FOLLOW_new_type_id_in_new_expression54083);
                            new_type_id();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2809:43: LPAREN type_id RPAREN
                            {
                            match(input,LPAREN,FOLLOW_LPAREN_in_new_expression54087); if (state.failed) return ;

                            pushFollow(FOLLOW_type_id_in_new_expression54089);
                            type_id();

                            state._fsp--;
                            if (state.failed) return ;

                            match(input,RPAREN,FOLLOW_RPAREN_in_new_expression54091); if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2811:13: ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_new_expression54142); if (state.failed) return ;

                    pushFollow(FOLLOW_type_id_in_new_expression54144);
                    type_id();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RPAREN,FOLLOW_RPAREN_in_new_expression54146); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2814:13: new_type_id
                    {
                    pushFollow(FOLLOW_new_type_id_in_new_expression54170);
                    new_type_id();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2815:11: ( new_initializer )?
            int alt311=2;
            int LA311_0 = input.LA(1);

            if ( (LA311_0==LPAREN||LA311_0==LCURLY) ) {
                alt311=1;
            }
            switch (alt311) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2815:11: new_initializer
                    {
                    pushFollow(FOLLOW_new_initializer_in_new_expression54182);
                    new_initializer();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("new_expression", 178);
        }
        return ;
    }
    // $ANTLR end "new_expression"



    // $ANTLR start "new_placement"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2818:1: new_placement : LPAREN expression_list RPAREN ;
    public final void new_placement() throws RecognitionException {
        traceIn("new_placement", 179);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2818:14: ( LPAREN expression_list RPAREN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2819:9: LPAREN expression_list RPAREN
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_new_placement54203); if (state.failed) return ;

            pushFollow(FOLLOW_expression_list_in_new_placement54205);
            expression_list();

            state._fsp--;
            if (state.failed) return ;

            match(input,RPAREN,FOLLOW_RPAREN_in_new_placement54207); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("new_placement", 179);
        }
        return ;
    }
    // $ANTLR end "new_placement"



    // $ANTLR start "new_type_id"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2832:1: new_type_id : type_specifier ( type_specifier )* ( ( LSQUARE | ptr_operator )=> new_declarator )? ;
    public final void new_type_id() throws RecognitionException {
        traceIn("new_type_id", 180);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2832:12: ( type_specifier ( type_specifier )* ( ( LSQUARE | ptr_operator )=> new_declarator )? )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2833:9: type_specifier ( type_specifier )* ( ( LSQUARE | ptr_operator )=> new_declarator )?
            {
            pushFollow(FOLLOW_type_specifier_in_new_type_id54230);
            type_specifier();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2834:9: ( type_specifier )*
            loop312:
            do {
                int alt312=2;
                alt312 = dfa312.predict(input);
                switch (alt312) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2834:10: type_specifier
            	    {
            	    pushFollow(FOLLOW_type_specifier_in_new_type_id54241);
            	    type_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop312;
                }
            } while (true);


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2835:9: ( ( LSQUARE | ptr_operator )=> new_declarator )?
            int alt313=2;
            int LA313_0 = input.LA(1);

            if ( (LA313_0==STAR) ) {
                int LA313_1 = input.LA(2);

                if ( (synpred56_CXXParser()) ) {
                    alt313=1;
                }
            }
            else if ( (LA313_0==AMPERSAND) ) {
                int LA313_2 = input.LA(2);

                if ( (synpred56_CXXParser()) ) {
                    alt313=1;
                }
            }
            else if ( (LA313_0==AND) ) {
                int LA313_3 = input.LA(2);

                if ( (synpred56_CXXParser()) ) {
                    alt313=1;
                }
            }
            else if ( (LA313_0==SCOPE) && (synpred56_CXXParser())) {
                alt313=1;
            }
            else if ( (LA313_0==IDENT) && (synpred56_CXXParser())) {
                alt313=1;
            }
            else if ( (LA313_0==LSQUARE) && (synpred56_CXXParser())) {
                alt313=1;
            }
            switch (alt313) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2835:10: ( LSQUARE | ptr_operator )=> new_declarator
                    {
                    pushFollow(FOLLOW_new_declarator_in_new_type_id54275);
                    new_declarator();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("new_type_id", 180);
        }
        return ;
    }
    // $ANTLR end "new_type_id"



    // $ANTLR start "new_declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2839:1: new_declarator : ( ( ptr_operator )=> ptr_operator new_declarator | direct_new_declarator );
    public final void new_declarator() throws RecognitionException {
        traceIn("new_declarator", 181);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2839:15: ( ( ptr_operator )=> ptr_operator new_declarator | direct_new_declarator )
            int alt314=2;
            int LA314_0 = input.LA(1);

            if ( (LA314_0==STAR) && (synpred57_CXXParser())) {
                alt314=1;
            }
            else if ( (LA314_0==AMPERSAND) && (synpred57_CXXParser())) {
                alt314=1;
            }
            else if ( (LA314_0==AND) && (synpred57_CXXParser())) {
                alt314=1;
            }
            else if ( (LA314_0==SCOPE) && (synpred57_CXXParser())) {
                alt314=1;
            }
            else if ( (LA314_0==IDENT) && (synpred57_CXXParser())) {
                alt314=1;
            }
            else if ( (LA314_0==LSQUARE) ) {
                alt314=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 314, 0, input);

                throw nvae;

            }
            switch (alt314) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2840:9: ( ptr_operator )=> ptr_operator new_declarator
                    {
                    pushFollow(FOLLOW_ptr_operator_in_new_declarator54314);
                    ptr_operator();

                    state._fsp--;
                    if (state.failed) return ;

                    pushFollow(FOLLOW_new_declarator_in_new_declarator54316);
                    new_declarator();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2843:9: direct_new_declarator
                    {
                    pushFollow(FOLLOW_direct_new_declarator_in_new_declarator54332);
                    direct_new_declarator();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("new_declarator", 181);
        }
        return ;
    }
    // $ANTLR end "new_declarator"



    // $ANTLR start "direct_new_declarator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2846:1: direct_new_declarator : LSQUARE expression RSQUARE ( LSQUARE constant_expression RSQUARE )* ;
    public final void direct_new_declarator() throws RecognitionException {
        traceIn("direct_new_declarator", 182);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2846:22: ( LSQUARE expression RSQUARE ( LSQUARE constant_expression RSQUARE )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2847:9: LSQUARE expression RSQUARE ( LSQUARE constant_expression RSQUARE )*
            {
            match(input,LSQUARE,FOLLOW_LSQUARE_in_direct_new_declarator54352); if (state.failed) return ;

            pushFollow(FOLLOW_expression_in_direct_new_declarator54354);
            expression();

            state._fsp--;
            if (state.failed) return ;

            match(input,RSQUARE,FOLLOW_RSQUARE_in_direct_new_declarator54356); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2847:36: ( LSQUARE constant_expression RSQUARE )*
            loop315:
            do {
                int alt315=2;
                int LA315_0 = input.LA(1);

                if ( (LA315_0==LSQUARE) ) {
                    alt315=1;
                }


                switch (alt315) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2847:38: LSQUARE constant_expression RSQUARE
            	    {
            	    match(input,LSQUARE,FOLLOW_LSQUARE_in_direct_new_declarator54360); if (state.failed) return ;

            	    pushFollow(FOLLOW_constant_expression_in_direct_new_declarator54362);
            	    constant_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    match(input,RSQUARE,FOLLOW_RSQUARE_in_direct_new_declarator54364); if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop315;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("direct_new_declarator", 182);
        }
        return ;
    }
    // $ANTLR end "direct_new_declarator"



    // $ANTLR start "new_initializer"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2850:1: new_initializer : ( LPAREN ( expression_list )? RPAREN | braced_init_list );
    public final void new_initializer() throws RecognitionException {
        traceIn("new_initializer", 183);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2850:16: ( LPAREN ( expression_list )? RPAREN | braced_init_list )
            int alt317=2;
            int LA317_0 = input.LA(1);

            if ( (LA317_0==LPAREN) ) {
                alt317=1;
            }
            else if ( (LA317_0==LCURLY) ) {
                alt317=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 317, 0, input);

                throw nvae;

            }
            switch (alt317) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2851:9: LPAREN ( expression_list )? RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_new_initializer54387); if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2851:16: ( expression_list )?
                    int alt316=2;
                    int LA316_0 = input.LA(1);

                    if ( (LA316_0==QUESTIONMARK||LA316_0==LPAREN||LA316_0==LSQUARE||LA316_0==LCURLY||LA316_0==PLUS||(LA316_0 >= PLUSPLUS && LA316_0 <= MINUS)||(LA316_0 >= MINUSMINUS && LA316_0 <= STAR)||LA316_0==NOT||LA316_0==AMPERSAND||LA316_0==TILDE||LA316_0==SCOPE||LA316_0==FLOATONE||(LA316_0 >= HEXADECIMALINT && LA316_0 <= DECIMALINT)||(LA316_0 >= CHAR_LITERAL && LA316_0 <= STRING_LITERAL)||(LA316_0 >= NUMBER && LA316_0 <= IDENT)||LA316_0==LITERAL_OPERATOR||(LA316_0 >= LITERAL_typeof && LA316_0 <= LITERAL___typeof)||(LA316_0 >= LITERAL_typename && LA316_0 <= LITERAL_auto)||LA316_0==LITERAL_const_cast||(LA316_0 >= LITERAL_char && LA316_0 <= LITERAL_signed)||LA316_0==LITERAL_unsigned||(LA316_0 >= LITERAL_float && LA316_0 <= LITERAL_void)||(LA316_0 >= LITERAL_this && LA316_0 <= LITERAL_false)||LA316_0==LITERAL_throw||(LA316_0 >= LITERAL_sizeof && LA316_0 <= LITERAL_new)||LA316_0==LITERAL_delete||LA316_0==LITERAL_decltype||(LA316_0 >= LITERAL_char16_t && LA316_0 <= LITERAL___decltype)||LA316_0==LITERAL___null||LA316_0==LITERAL___is_class||LA316_0==LITERAL___is_pod||(LA316_0 >= LITERAL___has_nothrow_assign && LA316_0 <= LITERAL___builtin_va_list)||LA316_0==LITERAL_typeid) ) {
                        alt316=1;
                    }
                    switch (alt316) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2851:16: expression_list
                            {
                            pushFollow(FOLLOW_expression_list_in_new_initializer54389);
                            expression_list();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    match(input,RPAREN,FOLLOW_RPAREN_in_new_initializer54392); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2853:9: braced_init_list
                    {
                    pushFollow(FOLLOW_braced_init_list_in_new_initializer54408);
                    braced_init_list();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("new_initializer", 183);
        }
        return ;
    }
    // $ANTLR end "new_initializer"



    // $ANTLR start "delete_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2855:1: delete_expression : ( SCOPE )? LITERAL_delete ( ( LSQUARE RSQUARE )=> LSQUARE RSQUARE cast_expression | cast_expression ) ;
    public final void delete_expression() throws RecognitionException {
        traceIn("delete_expression", 184);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2855:18: ( ( SCOPE )? LITERAL_delete ( ( LSQUARE RSQUARE )=> LSQUARE RSQUARE cast_expression | cast_expression ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2856:9: ( SCOPE )? LITERAL_delete ( ( LSQUARE RSQUARE )=> LSQUARE RSQUARE cast_expression | cast_expression )
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2856:9: ( SCOPE )?
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( (LA318_0==SCOPE) ) {
                alt318=1;
            }
            switch (alt318) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2856:9: SCOPE
                    {
                    match(input,SCOPE,FOLLOW_SCOPE_in_delete_expression54427); if (state.failed) return ;

                    }
                    break;

            }


            match(input,LITERAL_delete,FOLLOW_LITERAL_delete_in_delete_expression54430); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2857:9: ( ( LSQUARE RSQUARE )=> LSQUARE RSQUARE cast_expression | cast_expression )
            int alt319=2;
            int LA319_0 = input.LA(1);

            if ( (LA319_0==LSQUARE) ) {
                int LA319_1 = input.LA(2);

                if ( (synpred58_CXXParser()) ) {
                    alt319=1;
                }
                else if ( (true) ) {
                    alt319=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 319, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA319_0==LPAREN||LA319_0==PLUS||(LA319_0 >= PLUSPLUS && LA319_0 <= MINUS)||(LA319_0 >= MINUSMINUS && LA319_0 <= STAR)||LA319_0==NOT||LA319_0==AMPERSAND||LA319_0==TILDE||LA319_0==SCOPE||LA319_0==FLOATONE||(LA319_0 >= HEXADECIMALINT && LA319_0 <= DECIMALINT)||(LA319_0 >= CHAR_LITERAL && LA319_0 <= STRING_LITERAL)||(LA319_0 >= NUMBER && LA319_0 <= IDENT)||LA319_0==LITERAL_OPERATOR||(LA319_0 >= LITERAL_typeof && LA319_0 <= LITERAL___typeof)||(LA319_0 >= LITERAL_typename && LA319_0 <= LITERAL_auto)||LA319_0==LITERAL_const_cast||(LA319_0 >= LITERAL_char && LA319_0 <= LITERAL_signed)||LA319_0==LITERAL_unsigned||(LA319_0 >= LITERAL_float && LA319_0 <= LITERAL_void)||(LA319_0 >= LITERAL_this && LA319_0 <= LITERAL_false)||(LA319_0 >= LITERAL_sizeof && LA319_0 <= LITERAL_new)||LA319_0==LITERAL_delete||LA319_0==LITERAL_decltype||(LA319_0 >= LITERAL_char16_t && LA319_0 <= LITERAL___decltype)||LA319_0==LITERAL___null||LA319_0==LITERAL___is_class||LA319_0==LITERAL___is_pod||(LA319_0 >= LITERAL___has_nothrow_assign && LA319_0 <= LITERAL___builtin_va_list)||LA319_0==LITERAL_typeid) ) {
                alt319=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 319, 0, input);

                throw nvae;

            }
            switch (alt319) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2858:13: ( LSQUARE RSQUARE )=> LSQUARE RSQUARE cast_expression
                    {
                    match(input,LSQUARE,FOLLOW_LSQUARE_in_delete_expression54463); if (state.failed) return ;

                    match(input,RSQUARE,FOLLOW_RSQUARE_in_delete_expression54465); if (state.failed) return ;

                    pushFollow(FOLLOW_cast_expression_in_delete_expression54467);
                    cast_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2860:13: cast_expression
                    {
                    pushFollow(FOLLOW_cast_expression_in_delete_expression54491);
                    cast_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("delete_expression", 184);
        }
        return ;
    }
    // $ANTLR end "delete_expression"



    // $ANTLR start "noexcept_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2863:1: noexcept_expression : LITERAL_noexcept LPAREN expression RPAREN ;
    public final void noexcept_expression() throws RecognitionException {
        traceIn("noexcept_expression", 185);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2863:20: ( LITERAL_noexcept LPAREN expression RPAREN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2864:9: LITERAL_noexcept LPAREN expression RPAREN
            {
            match(input,LITERAL_noexcept,FOLLOW_LITERAL_noexcept_in_noexcept_expression54520); if (state.failed) return ;

            match(input,LPAREN,FOLLOW_LPAREN_in_noexcept_expression54522); if (state.failed) return ;

            pushFollow(FOLLOW_expression_in_noexcept_expression54524);
            expression();

            state._fsp--;
            if (state.failed) return ;

            match(input,RPAREN,FOLLOW_RPAREN_in_noexcept_expression54526); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("noexcept_expression", 185);
        }
        return ;
    }
    // $ANTLR end "noexcept_expression"



    // $ANTLR start "cast_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2866:1: cast_expression : ( ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN cast_expression | unary_expression );
    public final void cast_expression() throws RecognitionException {
        traceIn("cast_expression", 186);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2866:17: ( ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN cast_expression | unary_expression )
            int alt320=2;
            int LA320_0 = input.LA(1);

            if ( (LA320_0==LPAREN) ) {
                int LA320_1 = input.LA(2);

                if ( (synpred59_CXXParser()) ) {
                    alt320=1;
                }
                else if ( (true) ) {
                    alt320=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 320, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA320_0==LSQUARE||LA320_0==PLUS||(LA320_0 >= PLUSPLUS && LA320_0 <= MINUS)||(LA320_0 >= MINUSMINUS && LA320_0 <= STAR)||LA320_0==NOT||LA320_0==AMPERSAND||LA320_0==TILDE||LA320_0==SCOPE||LA320_0==FLOATONE||(LA320_0 >= HEXADECIMALINT && LA320_0 <= DECIMALINT)||(LA320_0 >= CHAR_LITERAL && LA320_0 <= STRING_LITERAL)||(LA320_0 >= NUMBER && LA320_0 <= IDENT)||LA320_0==LITERAL_OPERATOR||(LA320_0 >= LITERAL_typeof && LA320_0 <= LITERAL___typeof)||(LA320_0 >= LITERAL_typename && LA320_0 <= LITERAL_auto)||LA320_0==LITERAL_const_cast||(LA320_0 >= LITERAL_char && LA320_0 <= LITERAL_signed)||LA320_0==LITERAL_unsigned||(LA320_0 >= LITERAL_float && LA320_0 <= LITERAL_void)||(LA320_0 >= LITERAL_this && LA320_0 <= LITERAL_false)||(LA320_0 >= LITERAL_sizeof && LA320_0 <= LITERAL_new)||LA320_0==LITERAL_delete||LA320_0==LITERAL_decltype||(LA320_0 >= LITERAL_char16_t && LA320_0 <= LITERAL___decltype)||LA320_0==LITERAL___null||LA320_0==LITERAL___is_class||LA320_0==LITERAL___is_pod||(LA320_0 >= LITERAL___has_nothrow_assign && LA320_0 <= LITERAL___builtin_va_list)||LA320_0==LITERAL_typeid) ) {
                alt320=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 320, 0, input);

                throw nvae;

            }
            switch (alt320) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2867:9: ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN cast_expression
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_cast_expression54567); if (state.failed) return ;

                    pushFollow(FOLLOW_type_id_in_cast_expression54569);
                    type_id();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RPAREN,FOLLOW_RPAREN_in_cast_expression54571); if (state.failed) return ;

                    pushFollow(FOLLOW_cast_expression_in_cast_expression54573);
                    cast_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2870:9: unary_expression
                    {
                    pushFollow(FOLLOW_unary_expression_in_cast_expression54589);
                    unary_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("cast_expression", 186);
        }
        return ;
    }
    // $ANTLR end "cast_expression"



    // $ANTLR start "pm_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2873:1: pm_expression : cast_expression ( DOTMBR cast_expression | POINTERTOMBR cast_expression )* ;
    public final void pm_expression() throws RecognitionException {
        traceIn("pm_expression", 187);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2873:15: ( cast_expression ( DOTMBR cast_expression | POINTERTOMBR cast_expression )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2874:9: cast_expression ( DOTMBR cast_expression | POINTERTOMBR cast_expression )*
            {
            pushFollow(FOLLOW_cast_expression_in_pm_expression54610);
            cast_expression();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2874:25: ( DOTMBR cast_expression | POINTERTOMBR cast_expression )*
            loop321:
            do {
                int alt321=3;
                int LA321_0 = input.LA(1);

                if ( (LA321_0==DOTMBR) ) {
                    alt321=1;
                }
                else if ( (LA321_0==POINTERTOMBR) ) {
                    alt321=2;
                }


                switch (alt321) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2874:27: DOTMBR cast_expression
            	    {
            	    match(input,DOTMBR,FOLLOW_DOTMBR_in_pm_expression54614); if (state.failed) return ;

            	    pushFollow(FOLLOW_cast_expression_in_pm_expression54616);
            	    cast_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 2 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2874:52: POINTERTOMBR cast_expression
            	    {
            	    match(input,POINTERTOMBR,FOLLOW_POINTERTOMBR_in_pm_expression54620); if (state.failed) return ;

            	    pushFollow(FOLLOW_cast_expression_in_pm_expression54622);
            	    cast_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop321;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("pm_expression", 187);
        }
        return ;
    }
    // $ANTLR end "pm_expression"



    // $ANTLR start "multiplicative_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2877:1: multiplicative_expression : pm_expression ( STAR pm_expression | DIVIDE pm_expression | MOD pm_expression )* ;
    public final void multiplicative_expression() throws RecognitionException {
        traceIn("multiplicative_expression", 188);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2877:26: ( pm_expression ( STAR pm_expression | DIVIDE pm_expression | MOD pm_expression )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2878:9: pm_expression ( STAR pm_expression | DIVIDE pm_expression | MOD pm_expression )*
            {
            pushFollow(FOLLOW_pm_expression_in_multiplicative_expression54646);
            pm_expression();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2879:9: ( STAR pm_expression | DIVIDE pm_expression | MOD pm_expression )*
            loop322:
            do {
                int alt322=4;
                switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt322=1;
                    }
                    break;
                case DIVIDE:
                    {
                    alt322=2;
                    }
                    break;
                case MOD:
                    {
                    alt322=3;
                    }
                    break;

                }

                switch (alt322) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2880:13: STAR pm_expression
            	    {
            	    match(input,STAR,FOLLOW_STAR_in_multiplicative_expression54670); if (state.failed) return ;

            	    pushFollow(FOLLOW_pm_expression_in_multiplicative_expression54672);
            	    pm_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 2 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2882:13: DIVIDE pm_expression
            	    {
            	    match(input,DIVIDE,FOLLOW_DIVIDE_in_multiplicative_expression54696); if (state.failed) return ;

            	    pushFollow(FOLLOW_pm_expression_in_multiplicative_expression54698);
            	    pm_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 3 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2884:13: MOD pm_expression
            	    {
            	    match(input,MOD,FOLLOW_MOD_in_multiplicative_expression54722); if (state.failed) return ;

            	    pushFollow(FOLLOW_pm_expression_in_multiplicative_expression54724);
            	    pm_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop322;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("multiplicative_expression", 188);
        }
        return ;
    }
    // $ANTLR end "multiplicative_expression"



    // $ANTLR start "additive_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2888:1: additive_expression : multiplicative_expression ( PLUS multiplicative_expression | MINUS multiplicative_expression )* ;
    public final void additive_expression() throws RecognitionException {
        traceIn("additive_expression", 189);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2888:20: ( multiplicative_expression ( PLUS multiplicative_expression | MINUS multiplicative_expression )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2889:9: multiplicative_expression ( PLUS multiplicative_expression | MINUS multiplicative_expression )*
            {
            pushFollow(FOLLOW_multiplicative_expression_in_additive_expression54755);
            multiplicative_expression();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2889:35: ( PLUS multiplicative_expression | MINUS multiplicative_expression )*
            loop323:
            do {
                int alt323=3;
                int LA323_0 = input.LA(1);

                if ( (LA323_0==PLUS) ) {
                    alt323=1;
                }
                else if ( (LA323_0==MINUS) ) {
                    alt323=2;
                }


                switch (alt323) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2889:37: PLUS multiplicative_expression
            	    {
            	    match(input,PLUS,FOLLOW_PLUS_in_additive_expression54759); if (state.failed) return ;

            	    pushFollow(FOLLOW_multiplicative_expression_in_additive_expression54761);
            	    multiplicative_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 2 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2889:70: MINUS multiplicative_expression
            	    {
            	    match(input,MINUS,FOLLOW_MINUS_in_additive_expression54765); if (state.failed) return ;

            	    pushFollow(FOLLOW_multiplicative_expression_in_additive_expression54767);
            	    multiplicative_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop323;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("additive_expression", 189);
        }
        return ;
    }
    // $ANTLR end "additive_expression"



    // $ANTLR start "shift_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2892:1: shift_expression : additive_expression ( ( SHIFTLEFT | shiftright_literal ) additive_expression )* ;
    public final void shift_expression() throws RecognitionException {
        traceIn("shift_expression", 190);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2892:17: ( additive_expression ( ( SHIFTLEFT | shiftright_literal ) additive_expression )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2893:9: additive_expression ( ( SHIFTLEFT | shiftright_literal ) additive_expression )*
            {
            pushFollow(FOLLOW_additive_expression_in_shift_expression54790);
            additive_expression();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2894:9: ( ( SHIFTLEFT | shiftright_literal ) additive_expression )*
            loop325:
            do {
                int alt325=2;
                int LA325_0 = input.LA(1);

                if ( (LA325_0==GREATERTHAN) ) {
                    int LA325_1 = input.LA(2);

                    if ( ((input.LA(1) == GREATERTHAN && input.LT(1).getText().equals(""))) ) {
                        alt325=1;
                    }


                }
                else if ( (LA325_0==SHIFTRIGHT||LA325_0==SHIFTLEFT) ) {
                    alt325=1;
                }


                switch (alt325) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2895:13: ( SHIFTLEFT | shiftright_literal ) additive_expression
            	    {
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2895:13: ( SHIFTLEFT | shiftright_literal )
            	    int alt324=2;
            	    int LA324_0 = input.LA(1);

            	    if ( (LA324_0==SHIFTLEFT) ) {
            	        alt324=1;
            	    }
            	    else if ( (LA324_0==SHIFTRIGHT) ) {
            	        alt324=2;
            	    }
            	    else if ( (LA324_0==GREATERTHAN) && ((input.LA(1) == GREATERTHAN && input.LT(1).getText().equals("")))) {
            	        alt324=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 324, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt324) {
            	        case 1 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2896:17: SHIFTLEFT
            	            {
            	            match(input,SHIFTLEFT,FOLLOW_SHIFTLEFT_in_shift_expression54833); if (state.failed) return ;

            	            }
            	            break;
            	        case 2 :
            	            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2898:17: shiftright_literal
            	            {
            	            pushFollow(FOLLOW_shiftright_literal_in_shift_expression54867);
            	            shiftright_literal();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_additive_expression_in_shift_expression54895);
            	    additive_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop325;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("shift_expression", 190);
        }
        return ;
    }
    // $ANTLR end "shift_expression"



    // $ANTLR start "relational_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2910:1: relational_expression : shift_expression ({...}? => GREATERTHAN shift_expression | LESSTHAN shift_expression | LESSTHANOREQUALTO shift_expression | GREATERTHANOREQUALTO shift_expression )* ;
    public final void relational_expression() throws RecognitionException {
        traceIn("relational_expression", 191);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2910:22: ( shift_expression ({...}? => GREATERTHAN shift_expression | LESSTHAN shift_expression | LESSTHANOREQUALTO shift_expression | GREATERTHANOREQUALTO shift_expression )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2911:9: shift_expression ({...}? => GREATERTHAN shift_expression | LESSTHAN shift_expression | LESSTHANOREQUALTO shift_expression | GREATERTHANOREQUALTO shift_expression )*
            {
            pushFollow(FOLLOW_shift_expression_in_relational_expression54928);
            shift_expression();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2912:9: ({...}? => GREATERTHAN shift_expression | LESSTHAN shift_expression | LESSTHANOREQUALTO shift_expression | GREATERTHANOREQUALTO shift_expression )*
            loop326:
            do {
                int alt326=5;
                switch ( input.LA(1) ) {
                case GREATERTHAN:
                    {
                    int LA326_17 = input.LA(2);

                    if ( (( !action.top_level_of_template_arguments() )) ) {
                        alt326=1;
                    }


                    }
                    break;
                case LESSTHAN:
                    {
                    alt326=2;
                    }
                    break;
                case LESSTHANOREQUALTO:
                    {
                    alt326=3;
                    }
                    break;
                case GREATERTHANOREQUALTO:
                    {
                    alt326=4;
                    }
                    break;

                }

                switch (alt326) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2913:13: {...}? => GREATERTHAN shift_expression
            	    {
            	    if ( !(( !action.top_level_of_template_arguments() )) ) {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        throw new FailedPredicateException(input, "relational_expression", " !action.top_level_of_template_arguments() ");
            	    }

            	    match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_relational_expression54968); if (state.failed) return ;

            	    pushFollow(FOLLOW_shift_expression_in_relational_expression54970);
            	    shift_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 2 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2916:13: LESSTHAN shift_expression
            	    {
            	    match(input,LESSTHAN,FOLLOW_LESSTHAN_in_relational_expression54996); if (state.failed) return ;

            	    pushFollow(FOLLOW_shift_expression_in_relational_expression54998);
            	    shift_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 3 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2918:13: LESSTHANOREQUALTO shift_expression
            	    {
            	    match(input,LESSTHANOREQUALTO,FOLLOW_LESSTHANOREQUALTO_in_relational_expression55024); if (state.failed) return ;

            	    pushFollow(FOLLOW_shift_expression_in_relational_expression55026);
            	    shift_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 4 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2920:13: GREATERTHANOREQUALTO shift_expression
            	    {
            	    match(input,GREATERTHANOREQUALTO,FOLLOW_GREATERTHANOREQUALTO_in_relational_expression55052); if (state.failed) return ;

            	    pushFollow(FOLLOW_shift_expression_in_relational_expression55054);
            	    shift_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop326;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("relational_expression", 191);
        }
        return ;
    }
    // $ANTLR end "relational_expression"



    // $ANTLR start "equality_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2923:1: equality_expression : relational_expression ( EQUAL relational_expression | NOTEQUAL relational_expression )* ;
    public final void equality_expression() throws RecognitionException {
        traceIn("equality_expression", 192);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2923:20: ( relational_expression ( EQUAL relational_expression | NOTEQUAL relational_expression )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2924:9: relational_expression ( EQUAL relational_expression | NOTEQUAL relational_expression )*
            {
            pushFollow(FOLLOW_relational_expression_in_equality_expression55084);
            relational_expression();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2924:31: ( EQUAL relational_expression | NOTEQUAL relational_expression )*
            loop327:
            do {
                int alt327=3;
                int LA327_0 = input.LA(1);

                if ( (LA327_0==EQUAL) ) {
                    alt327=1;
                }
                else if ( (LA327_0==NOTEQUAL) ) {
                    alt327=2;
                }


                switch (alt327) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2924:33: EQUAL relational_expression
            	    {
            	    match(input,EQUAL,FOLLOW_EQUAL_in_equality_expression55088); if (state.failed) return ;

            	    pushFollow(FOLLOW_relational_expression_in_equality_expression55090);
            	    relational_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 2 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2924:63: NOTEQUAL relational_expression
            	    {
            	    match(input,NOTEQUAL,FOLLOW_NOTEQUAL_in_equality_expression55094); if (state.failed) return ;

            	    pushFollow(FOLLOW_relational_expression_in_equality_expression55096);
            	    relational_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop327;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("equality_expression", 192);
        }
        return ;
    }
    // $ANTLR end "equality_expression"



    // $ANTLR start "and_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2926:1: and_expression : equality_expression ( AMPERSAND equality_expression )* ;
    public final void and_expression() throws RecognitionException {
        traceIn("and_expression", 193);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2926:15: ( equality_expression ( AMPERSAND equality_expression )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2927:9: equality_expression ( AMPERSAND equality_expression )*
            {
            pushFollow(FOLLOW_equality_expression_in_and_expression55117);
            equality_expression();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2927:29: ( AMPERSAND equality_expression )*
            loop328:
            do {
                int alt328=2;
                int LA328_0 = input.LA(1);

                if ( (LA328_0==AMPERSAND) ) {
                    alt328=1;
                }


                switch (alt328) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2927:31: AMPERSAND equality_expression
            	    {
            	    match(input,AMPERSAND,FOLLOW_AMPERSAND_in_and_expression55121); if (state.failed) return ;

            	    pushFollow(FOLLOW_equality_expression_in_and_expression55123);
            	    equality_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop328;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("and_expression", 193);
        }
        return ;
    }
    // $ANTLR end "and_expression"



    // $ANTLR start "exclusive_or_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2929:1: exclusive_or_expression : and_expression ( BITWISEXOR and_expression )* ;
    public final void exclusive_or_expression() throws RecognitionException {
        traceIn("exclusive_or_expression", 194);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2929:24: ( and_expression ( BITWISEXOR and_expression )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2930:9: and_expression ( BITWISEXOR and_expression )*
            {
            pushFollow(FOLLOW_and_expression_in_exclusive_or_expression55145);
            and_expression();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2930:24: ( BITWISEXOR and_expression )*
            loop329:
            do {
                int alt329=2;
                int LA329_0 = input.LA(1);

                if ( (LA329_0==BITWISEXOR) ) {
                    alt329=1;
                }


                switch (alt329) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2930:26: BITWISEXOR and_expression
            	    {
            	    match(input,BITWISEXOR,FOLLOW_BITWISEXOR_in_exclusive_or_expression55149); if (state.failed) return ;

            	    pushFollow(FOLLOW_and_expression_in_exclusive_or_expression55151);
            	    and_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop329;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("exclusive_or_expression", 194);
        }
        return ;
    }
    // $ANTLR end "exclusive_or_expression"



    // $ANTLR start "inclusive_or_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2932:1: inclusive_or_expression : exclusive_or_expression ( BITWISEOR exclusive_or_expression )* ;
    public final void inclusive_or_expression() throws RecognitionException {
        traceIn("inclusive_or_expression", 195);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2932:24: ( exclusive_or_expression ( BITWISEOR exclusive_or_expression )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2933:9: exclusive_or_expression ( BITWISEOR exclusive_or_expression )*
            {
            pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression55173);
            exclusive_or_expression();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2933:33: ( BITWISEOR exclusive_or_expression )*
            loop330:
            do {
                int alt330=2;
                int LA330_0 = input.LA(1);

                if ( (LA330_0==BITWISEOR) ) {
                    alt330=1;
                }


                switch (alt330) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2933:35: BITWISEOR exclusive_or_expression
            	    {
            	    match(input,BITWISEOR,FOLLOW_BITWISEOR_in_inclusive_or_expression55177); if (state.failed) return ;

            	    pushFollow(FOLLOW_exclusive_or_expression_in_inclusive_or_expression55179);
            	    exclusive_or_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop330;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("inclusive_or_expression", 195);
        }
        return ;
    }
    // $ANTLR end "inclusive_or_expression"



    // $ANTLR start "logical_and_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2935:1: logical_and_expression : inclusive_or_expression ( AND inclusive_or_expression )* ;
    public final void logical_and_expression() throws RecognitionException {
        traceIn("logical_and_expression", 196);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2935:23: ( inclusive_or_expression ( AND inclusive_or_expression )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2936:9: inclusive_or_expression ( AND inclusive_or_expression )*
            {
            pushFollow(FOLLOW_inclusive_or_expression_in_logical_and_expression55201);
            inclusive_or_expression();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2936:33: ( AND inclusive_or_expression )*
            loop331:
            do {
                int alt331=2;
                int LA331_0 = input.LA(1);

                if ( (LA331_0==AND) ) {
                    alt331=1;
                }


                switch (alt331) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2936:35: AND inclusive_or_expression
            	    {
            	    match(input,AND,FOLLOW_AND_in_logical_and_expression55205); if (state.failed) return ;

            	    pushFollow(FOLLOW_inclusive_or_expression_in_logical_and_expression55207);
            	    inclusive_or_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop331;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("logical_and_expression", 196);
        }
        return ;
    }
    // $ANTLR end "logical_and_expression"



    // $ANTLR start "logical_or_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2938:1: logical_or_expression : logical_and_expression ( OR logical_and_expression )* ;
    public final void logical_or_expression() throws RecognitionException {
        traceIn("logical_or_expression", 197);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2938:22: ( logical_and_expression ( OR logical_and_expression )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2939:9: logical_and_expression ( OR logical_and_expression )*
            {
            pushFollow(FOLLOW_logical_and_expression_in_logical_or_expression55229);
            logical_and_expression();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2939:32: ( OR logical_and_expression )*
            loop332:
            do {
                int alt332=2;
                int LA332_0 = input.LA(1);

                if ( (LA332_0==OR) ) {
                    alt332=1;
                }


                switch (alt332) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2939:34: OR logical_and_expression
            	    {
            	    match(input,OR,FOLLOW_OR_in_logical_or_expression55233); if (state.failed) return ;

            	    pushFollow(FOLLOW_logical_and_expression_in_logical_or_expression55235);
            	    logical_and_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop332;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("logical_or_expression", 197);
        }
        return ;
    }
    // $ANTLR end "logical_or_expression"



    // $ANTLR start "conditional_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2941:1: conditional_expression : ( logical_or_expression ( QUESTIONMARK expression COLON assignment_expression )? | QUESTIONMARK expression COLON assignment_expression );
    public final void conditional_expression() throws RecognitionException {
        traceIn("conditional_expression", 198);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2941:23: ( logical_or_expression ( QUESTIONMARK expression COLON assignment_expression )? | QUESTIONMARK expression COLON assignment_expression )
            int alt334=2;
            int LA334_0 = input.LA(1);

            if ( (LA334_0==LPAREN||LA334_0==LSQUARE||LA334_0==PLUS||(LA334_0 >= PLUSPLUS && LA334_0 <= MINUS)||(LA334_0 >= MINUSMINUS && LA334_0 <= STAR)||LA334_0==NOT||LA334_0==AMPERSAND||LA334_0==TILDE||LA334_0==SCOPE||LA334_0==FLOATONE||(LA334_0 >= HEXADECIMALINT && LA334_0 <= DECIMALINT)||(LA334_0 >= CHAR_LITERAL && LA334_0 <= STRING_LITERAL)||(LA334_0 >= NUMBER && LA334_0 <= IDENT)||LA334_0==LITERAL_OPERATOR||(LA334_0 >= LITERAL_typeof && LA334_0 <= LITERAL___typeof)||(LA334_0 >= LITERAL_typename && LA334_0 <= LITERAL_auto)||LA334_0==LITERAL_const_cast||(LA334_0 >= LITERAL_char && LA334_0 <= LITERAL_signed)||LA334_0==LITERAL_unsigned||(LA334_0 >= LITERAL_float && LA334_0 <= LITERAL_void)||(LA334_0 >= LITERAL_this && LA334_0 <= LITERAL_false)||(LA334_0 >= LITERAL_sizeof && LA334_0 <= LITERAL_new)||LA334_0==LITERAL_delete||LA334_0==LITERAL_decltype||(LA334_0 >= LITERAL_char16_t && LA334_0 <= LITERAL___decltype)||LA334_0==LITERAL___null||LA334_0==LITERAL___is_class||LA334_0==LITERAL___is_pod||(LA334_0 >= LITERAL___has_nothrow_assign && LA334_0 <= LITERAL___builtin_va_list)||LA334_0==LITERAL_typeid) ) {
                alt334=1;
            }
            else if ( (LA334_0==QUESTIONMARK) ) {
                alt334=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 334, 0, input);

                throw nvae;

            }
            switch (alt334) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2942:9: logical_or_expression ( QUESTIONMARK expression COLON assignment_expression )?
                    {
                    pushFollow(FOLLOW_logical_or_expression_in_conditional_expression55257);
                    logical_or_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2942:31: ( QUESTIONMARK expression COLON assignment_expression )?
                    int alt333=2;
                    int LA333_0 = input.LA(1);

                    if ( (LA333_0==QUESTIONMARK) ) {
                        alt333=1;
                    }
                    switch (alt333) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2942:32: QUESTIONMARK expression COLON assignment_expression
                            {
                            match(input,QUESTIONMARK,FOLLOW_QUESTIONMARK_in_conditional_expression55260); if (state.failed) return ;

                            pushFollow(FOLLOW_expression_in_conditional_expression55262);
                            expression();

                            state._fsp--;
                            if (state.failed) return ;

                            match(input,COLON,FOLLOW_COLON_in_conditional_expression55264); if (state.failed) return ;

                            pushFollow(FOLLOW_assignment_expression_in_conditional_expression55266);
                            assignment_expression();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2944:9: QUESTIONMARK expression COLON assignment_expression
                    {
                    match(input,QUESTIONMARK,FOLLOW_QUESTIONMARK_in_conditional_expression55284); if (state.failed) return ;

                    pushFollow(FOLLOW_expression_in_conditional_expression55286);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,COLON,FOLLOW_COLON_in_conditional_expression55288); if (state.failed) return ;

                    pushFollow(FOLLOW_assignment_expression_in_conditional_expression55290);
                    assignment_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("conditional_expression", 198);
        }
        return ;
    }
    // $ANTLR end "conditional_expression"



    // $ANTLR start "assignment_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2985:1: assignment_expression : ( QUESTIONMARK expression COLON assignment_expression | logical_or_expression ( ( QUESTIONMARK expression COLON assignment_expression )? | assignment_operator assignment_expression ) | throw_expression );
    public final void assignment_expression() throws RecognitionException {
        traceIn("assignment_expression", 199);
        if(state.backtracking == 0){action.assignment_expression(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2987:5: ( QUESTIONMARK expression COLON assignment_expression | logical_or_expression ( ( QUESTIONMARK expression COLON assignment_expression )? | assignment_operator assignment_expression ) | throw_expression )
            int alt337=3;
            switch ( input.LA(1) ) {
            case QUESTIONMARK:
                {
                alt337=1;
                }
                break;
            case LPAREN:
            case LSQUARE:
            case PLUS:
            case PLUSPLUS:
            case MINUS:
            case MINUSMINUS:
            case STAR:
            case NOT:
            case AMPERSAND:
            case TILDE:
            case SCOPE:
            case FLOATONE:
            case HEXADECIMALINT:
            case OCTALINT:
            case DECIMALINT:
            case CHAR_LITERAL:
            case STRING_LITERAL:
            case NUMBER:
            case IDENT:
            case LITERAL_OPERATOR:
            case LITERAL_typeof:
            case LITERAL___typeof__:
            case LITERAL___typeof:
            case LITERAL_typename:
            case LITERAL_auto:
            case LITERAL_const_cast:
            case LITERAL_char:
            case LITERAL_wchar_t:
            case LITERAL_bool:
            case LITERAL_short:
            case LITERAL_int:
            case LITERAL_long:
            case LITERAL_signed:
            case LITERAL_unsigned:
            case LITERAL_float:
            case LITERAL_double:
            case LITERAL_void:
            case LITERAL_this:
            case LITERAL_true:
            case LITERAL_false:
            case LITERAL_sizeof:
            case LITERAL_dynamic_cast:
            case LITERAL_static_cast:
            case LITERAL_reinterpret_cast:
            case LITERAL_new:
            case LITERAL_delete:
            case LITERAL_decltype:
            case LITERAL_char16_t:
            case LITERAL_char32_t:
            case LITERAL_noexcept:
            case LITERAL___decltype:
            case LITERAL___null:
            case LITERAL___is_class:
            case LITERAL___is_pod:
            case LITERAL___has_nothrow_assign:
            case LITERAL___has_nothrow_copy:
            case LITERAL___has_nothrow_constructor:
            case LITERAL___has_trivial_assign:
            case LITERAL___has_trivial_copy:
            case LITERAL___has_trivial_destructor:
            case LITERAL___has_virtual_destructor:
            case LITERAL___is_abstract:
            case LITERAL___is_empty:
            case LITERAL___is_literal_type:
            case LITERAL___is_polymorphic:
            case LITERAL___is_standard_layout:
            case LITERAL___is_trivial:
            case LITERAL___is_union:
            case LITERAL___underlying_type:
            case LITERAL___builtin_va_list:
            case LITERAL_typeid:
                {
                alt337=2;
                }
                break;
            case LITERAL_throw:
                {
                alt337=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 337, 0, input);

                throw nvae;

            }

            switch (alt337) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2989:9: QUESTIONMARK expression COLON assignment_expression
                    {
                    match(input,QUESTIONMARK,FOLLOW_QUESTIONMARK_in_assignment_expression55407); if (state.failed) return ;

                    pushFollow(FOLLOW_expression_in_assignment_expression55409);
                    expression();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,COLON,FOLLOW_COLON_in_assignment_expression55411); if (state.failed) return ;

                    pushFollow(FOLLOW_assignment_expression_in_assignment_expression55413);
                    assignment_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2991:9: logical_or_expression ( ( QUESTIONMARK expression COLON assignment_expression )? | assignment_operator assignment_expression )
                    {
                    pushFollow(FOLLOW_logical_or_expression_in_assignment_expression55429);
                    logical_or_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2991:31: ( ( QUESTIONMARK expression COLON assignment_expression )? | assignment_operator assignment_expression )
                    int alt336=2;
                    int LA336_0 = input.LA(1);

                    if ( (LA336_0==EOF||LA336_0==ELLIPSIS||(LA336_0 >= COLON && LA336_0 <= SEMICOLON)||(LA336_0 >= RPAREN && LA336_0 <= RSQUARE)||LA336_0==RCURLY||LA336_0==GREATERTHAN||LA336_0==SCOPE||LA336_0==IDENT||(LA336_0 >= LITERAL_typeof && LA336_0 <= LITERAL___typeof)||(LA336_0 >= LITERAL_typedef && LA336_0 <= LITERAL_enum)||(LA336_0 >= LITERAL_extern && LA336_0 <= LITERAL_inline)||(LA336_0 >= LITERAL___inline && LA336_0 <= LITERAL_friend)||(LA336_0 >= LITERAL_typename && LA336_0 <= LITERAL___const)||LA336_0==LITERAL_volatile||(LA336_0 >= LITERAL_char && LA336_0 <= LITERAL_signed)||LA336_0==LITERAL_unsigned||(LA336_0 >= LITERAL_float && LA336_0 <= LITERAL_void)||(LA336_0 >= LITERAL_class && LA336_0 <= LITERAL_union)||(LA336_0 >= LITERAL___extension__ && LA336_0 <= LITERAL___attribute__)||LA336_0==LITERAL___global||LA336_0==LITERAL___thread||(LA336_0 >= LITERAL___symbolic && LA336_0 <= LITERAL___hidden)||(LA336_0 >= LITERAL_constexpr && LA336_0 <= LITERAL_decltype)||LA336_0==LITERAL_thread_local||(LA336_0 >= LITERAL_alignas && LA336_0 <= LITERAL_char32_t)||LA336_0==LITERAL___decltype||LA336_0==LITERAL___builtin_va_list) ) {
                        alt336=1;
                    }
                    else if ( (LA336_0==ASSIGNEQUAL||LA336_0==DIVIDEEQUAL||LA336_0==PLUSEQUAL||LA336_0==MINUSEQUAL||LA336_0==TIMESEQUAL||LA336_0==MODEQUAL||LA336_0==SHIFTRIGHTEQUAL||LA336_0==SHIFTLEFTEQUAL||LA336_0==BITWISEANDEQUAL||LA336_0==BITWISEOREQUAL||LA336_0==BITWISEXOREQUAL) ) {
                        alt336=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 336, 0, input);

                        throw nvae;

                    }
                    switch (alt336) {
                        case 1 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2993:13: ( QUESTIONMARK expression COLON assignment_expression )?
                            {
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2993:13: ( QUESTIONMARK expression COLON assignment_expression )?
                            int alt335=2;
                            int LA335_0 = input.LA(1);

                            if ( (LA335_0==QUESTIONMARK) ) {
                                alt335=1;
                            }
                            switch (alt335) {
                                case 1 :
                                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2993:14: QUESTIONMARK expression COLON assignment_expression
                                    {
                                    match(input,QUESTIONMARK,FOLLOW_QUESTIONMARK_in_assignment_expression55459); if (state.failed) return ;

                                    pushFollow(FOLLOW_expression_in_assignment_expression55461);
                                    expression();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    match(input,COLON,FOLLOW_COLON_in_assignment_expression55463); if (state.failed) return ;

                                    pushFollow(FOLLOW_assignment_expression_in_assignment_expression55465);
                                    assignment_expression();

                                    state._fsp--;
                                    if (state.failed) return ;

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2995:13: assignment_operator assignment_expression
                            {
                            pushFollow(FOLLOW_assignment_operator_in_assignment_expression55491);
                            assignment_operator();

                            state._fsp--;
                            if (state.failed) return ;

                            pushFollow(FOLLOW_assignment_expression_in_assignment_expression55493);
                            assignment_expression();

                            state._fsp--;
                            if (state.failed) return ;

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2998:9: throw_expression
                    {
                    pushFollow(FOLLOW_throw_expression_in_assignment_expression55519);
                    throw_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("assignment_expression", 199);
            if(state.backtracking == 0){action.end_assignment_expression(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "assignment_expression"



    // $ANTLR start "assignment_operator"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3002:1: assignment_operator : ( ASSIGNEQUAL | TIMESEQUAL | DIVIDEEQUAL | MODEQUAL | PLUSEQUAL | MINUSEQUAL | SHIFTRIGHTEQUAL | SHIFTLEFTEQUAL | BITWISEANDEQUAL | BITWISEXOREQUAL | BITWISEOREQUAL );
    public final void assignment_operator() throws RecognitionException {
        traceIn("assignment_operator", 200);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3002:20: ( ASSIGNEQUAL | TIMESEQUAL | DIVIDEEQUAL | MODEQUAL | PLUSEQUAL | MINUSEQUAL | SHIFTRIGHTEQUAL | SHIFTLEFTEQUAL | BITWISEANDEQUAL | BITWISEXOREQUAL | BITWISEOREQUAL )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( input.LA(1)==ASSIGNEQUAL||input.LA(1)==DIVIDEEQUAL||input.LA(1)==PLUSEQUAL||input.LA(1)==MINUSEQUAL||input.LA(1)==TIMESEQUAL||input.LA(1)==MODEQUAL||input.LA(1)==SHIFTRIGHTEQUAL||input.LA(1)==SHIFTLEFTEQUAL||input.LA(1)==BITWISEANDEQUAL||input.LA(1)==BITWISEOREQUAL||input.LA(1)==BITWISEXOREQUAL ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("assignment_operator", 200);
        }
        return ;
    }
    // $ANTLR end "assignment_operator"



    // $ANTLR start "expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3007:1: expression : assignment_expression ( COMMA assignment_expression )* ;
    public final void expression() throws RecognitionException {
        traceIn("expression", 201);
        if(state.backtracking == 0){action.expression(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3009:5: ( assignment_expression ( COMMA assignment_expression )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3010:9: assignment_expression ( COMMA assignment_expression )*
            {
            pushFollow(FOLLOW_assignment_expression_in_expression55767);
            assignment_expression();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3010:31: ( COMMA assignment_expression )*
            loop338:
            do {
                int alt338=2;
                int LA338_0 = input.LA(1);

                if ( (LA338_0==COMMA) ) {
                    alt338=1;
                }


                switch (alt338) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3010:33: COMMA assignment_expression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_expression55771); if (state.failed) return ;

            	    pushFollow(FOLLOW_assignment_expression_in_expression55773);
            	    assignment_expression();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop338;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("expression", 201);
            if(state.backtracking == 0){action.end_expression(input.LT(0));}
        }
        return ;
    }
    // $ANTLR end "expression"



    // $ANTLR start "constant_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3014:1: constant_expression returns [ expression_t expr ] : conditional_expression ;
    public final expression_t constant_expression() throws RecognitionException {
        traceIn("constant_expression", 202);
        expression_t expr = null;


        if(state.backtracking == 0){action.constant_expression(input.LT(1));}
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3016:5: ( conditional_expression )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3017:9: conditional_expression
            {
            pushFollow(FOLLOW_conditional_expression_in_constant_expression55960);
            conditional_expression();

            state._fsp--;
            if (state.failed) return expr;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("constant_expression", 202);
            if(state.backtracking == 0){action.end_constant_expression(input.LT(0));}
        }
        return expr;
    }
    // $ANTLR end "constant_expression"



    // $ANTLR start "type_trait_expression"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3022:1: type_trait_expression : type_trait_literal ( ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN | unary_expression ) ;
    public final void type_trait_expression() throws RecognitionException {
        traceIn("type_trait_expression", 203);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3023:5: ( type_trait_literal ( ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN | unary_expression ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3024:9: type_trait_literal ( ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN | unary_expression )
            {
            pushFollow(FOLLOW_type_trait_literal_in_type_trait_expression56062);
            type_trait_literal();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3025:9: ( ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN | unary_expression )
            int alt339=2;
            int LA339_0 = input.LA(1);

            if ( (LA339_0==LPAREN) ) {
                int LA339_1 = input.LA(2);

                if ( (synpred60_CXXParser()) ) {
                    alt339=1;
                }
                else if ( (true) ) {
                    alt339=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 339, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA339_0==LSQUARE||LA339_0==PLUS||(LA339_0 >= PLUSPLUS && LA339_0 <= MINUS)||(LA339_0 >= MINUSMINUS && LA339_0 <= STAR)||LA339_0==NOT||LA339_0==AMPERSAND||LA339_0==TILDE||LA339_0==SCOPE||LA339_0==FLOATONE||(LA339_0 >= HEXADECIMALINT && LA339_0 <= DECIMALINT)||(LA339_0 >= CHAR_LITERAL && LA339_0 <= STRING_LITERAL)||(LA339_0 >= NUMBER && LA339_0 <= IDENT)||LA339_0==LITERAL_OPERATOR||(LA339_0 >= LITERAL_typeof && LA339_0 <= LITERAL___typeof)||(LA339_0 >= LITERAL_typename && LA339_0 <= LITERAL_auto)||LA339_0==LITERAL_const_cast||(LA339_0 >= LITERAL_char && LA339_0 <= LITERAL_signed)||LA339_0==LITERAL_unsigned||(LA339_0 >= LITERAL_float && LA339_0 <= LITERAL_void)||(LA339_0 >= LITERAL_this && LA339_0 <= LITERAL_false)||(LA339_0 >= LITERAL_sizeof && LA339_0 <= LITERAL_new)||LA339_0==LITERAL_delete||LA339_0==LITERAL_decltype||(LA339_0 >= LITERAL_char16_t && LA339_0 <= LITERAL___decltype)||LA339_0==LITERAL___null||LA339_0==LITERAL___is_class||LA339_0==LITERAL___is_pod||(LA339_0 >= LITERAL___has_nothrow_assign && LA339_0 <= LITERAL___builtin_va_list)||LA339_0==LITERAL_typeid) ) {
                alt339=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 339, 0, input);

                throw nvae;

            }
            switch (alt339) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3026:13: ( LPAREN type_id RPAREN )=> LPAREN type_id RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_type_trait_expression56112); if (state.failed) return ;

                    pushFollow(FOLLOW_type_id_in_type_trait_expression56114);
                    type_id();

                    state._fsp--;
                    if (state.failed) return ;

                    match(input,RPAREN,FOLLOW_RPAREN_in_type_trait_expression56116); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3029:13: unary_expression
                    {
                    pushFollow(FOLLOW_unary_expression_in_type_trait_expression56140);
                    unary_expression();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("type_trait_expression", 203);
        }
        return ;
    }
    // $ANTLR end "type_trait_expression"



    // $ANTLR start "type_trait_literal"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3033:1: type_trait_literal : ( LITERAL_sizeof | compiler_specific_type_trait_literal );
    public final void type_trait_literal() throws RecognitionException {
        traceIn("type_trait_literal", 204);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3034:5: ( LITERAL_sizeof | compiler_specific_type_trait_literal )
            int alt340=2;
            int LA340_0 = input.LA(1);

            if ( (LA340_0==LITERAL_sizeof) ) {
                alt340=1;
            }
            else if ( (LA340_0==LITERAL___is_class||LA340_0==LITERAL___is_pod||(LA340_0 >= LITERAL___has_nothrow_assign && LA340_0 <= LITERAL___underlying_type)) ) {
                alt340=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 340, 0, input);

                throw nvae;

            }
            switch (alt340) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3035:9: LITERAL_sizeof
                    {
                    match(input,LITERAL_sizeof,FOLLOW_LITERAL_sizeof_in_type_trait_literal56175); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3035:26: compiler_specific_type_trait_literal
                    {
                    pushFollow(FOLLOW_compiler_specific_type_trait_literal_in_type_trait_literal56179);
                    compiler_specific_type_trait_literal();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("type_trait_literal", 204);
        }
        return ;
    }
    // $ANTLR end "type_trait_literal"



    // $ANTLR start "compiler_specific_type_trait_literal"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3038:1: compiler_specific_type_trait_literal : ( LITERAL___is_pod | LITERAL___has_nothrow_assign | LITERAL___has_nothrow_copy | LITERAL___has_nothrow_constructor | LITERAL___has_trivial_assign | LITERAL___has_trivial_copy | LITERAL___has_trivial_destructor | LITERAL___has_virtual_destructor | LITERAL___is_abstract | LITERAL___is_empty | LITERAL___is_literal_type | LITERAL___is_polymorphic | LITERAL___is_standard_layout | LITERAL___is_trivial | LITERAL___is_union | LITERAL___underlying_type | LITERAL___is_class );
    public final void compiler_specific_type_trait_literal() throws RecognitionException {
        traceIn("compiler_specific_type_trait_literal", 205);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3039:5: ( LITERAL___is_pod | LITERAL___has_nothrow_assign | LITERAL___has_nothrow_copy | LITERAL___has_nothrow_constructor | LITERAL___has_trivial_assign | LITERAL___has_trivial_copy | LITERAL___has_trivial_destructor | LITERAL___has_virtual_destructor | LITERAL___is_abstract | LITERAL___is_empty | LITERAL___is_literal_type | LITERAL___is_polymorphic | LITERAL___is_standard_layout | LITERAL___is_trivial | LITERAL___is_union | LITERAL___underlying_type | LITERAL___is_class )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( input.LA(1)==LITERAL___is_class||input.LA(1)==LITERAL___is_pod||(input.LA(1) >= LITERAL___has_nothrow_assign && input.LA(1) <= LITERAL___underlying_type) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("compiler_specific_type_trait_literal", 205);
        }
        return ;
    }
    // $ANTLR end "compiler_specific_type_trait_literal"



    // $ANTLR start "shiftright_literal"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3047:1: shiftright_literal : ( SHIFTRIGHT |{...}? => GREATERTHAN GREATERTHAN );
    public final void shiftright_literal() throws RecognitionException {
        traceIn("shiftright_literal", 206);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3048:5: ( SHIFTRIGHT |{...}? => GREATERTHAN GREATERTHAN )
            int alt341=2;
            int LA341_0 = input.LA(1);

            if ( (LA341_0==SHIFTRIGHT) ) {
                alt341=1;
            }
            else if ( (LA341_0==GREATERTHAN) && ((input.LA(1) == GREATERTHAN && input.LT(1).getText().equals("")))) {
                alt341=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 341, 0, input);

                throw nvae;

            }
            switch (alt341) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3049:9: SHIFTRIGHT
                    {
                    match(input,SHIFTRIGHT,FOLLOW_SHIFTRIGHT_in_shiftright_literal56334); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3052:9: {...}? => GREATERTHAN GREATERTHAN
                    {
                    if ( !((input.LA(1) == GREATERTHAN && input.LT(1).getText().equals(""))) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "shiftright_literal", "input.LA(1) == GREATERTHAN && input.LT(1).getText().equals(\"\")");
                    }

                    match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_shiftright_literal56388); if (state.failed) return ;

                    match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_shiftright_literal56390); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("shiftright_literal", 206);
        }
        return ;
    }
    // $ANTLR end "shiftright_literal"



    // $ANTLR start "literal"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3059:1: literal : ( DECIMALINT | HEXADECIMALINT | FLOATONE | CHAR_LITERAL | adjacent_string_literals | NUMBER | OCTALINT | LITERAL_true | LITERAL_false | compiler_specific_literal );
    public final void literal() throws RecognitionException {
        traceIn("literal", 207);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3060:5: ( DECIMALINT | HEXADECIMALINT | FLOATONE | CHAR_LITERAL | adjacent_string_literals | NUMBER | OCTALINT | LITERAL_true | LITERAL_false | compiler_specific_literal )
            int alt342=10;
            switch ( input.LA(1) ) {
            case DECIMALINT:
                {
                alt342=1;
                }
                break;
            case HEXADECIMALINT:
                {
                alt342=2;
                }
                break;
            case FLOATONE:
                {
                alt342=3;
                }
                break;
            case CHAR_LITERAL:
                {
                alt342=4;
                }
                break;
            case STRING_LITERAL:
                {
                alt342=5;
                }
                break;
            case NUMBER:
                {
                alt342=6;
                }
                break;
            case OCTALINT:
                {
                alt342=7;
                }
                break;
            case LITERAL_true:
                {
                alt342=8;
                }
                break;
            case LITERAL_false:
                {
                alt342=9;
                }
                break;
            case LITERAL___null:
                {
                alt342=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 342, 0, input);

                throw nvae;

            }

            switch (alt342) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3061:5: DECIMALINT
                    {
                    match(input,DECIMALINT,FOLLOW_DECIMALINT_in_literal56414); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3061:16: HEXADECIMALINT
                    {
                    match(input,HEXADECIMALINT,FOLLOW_HEXADECIMALINT_in_literal56416); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3061:31: FLOATONE
                    {
                    match(input,FLOATONE,FOLLOW_FLOATONE_in_literal56418); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3061:40: CHAR_LITERAL
                    {
                    match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_literal56420); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3061:53: adjacent_string_literals
                    {
                    pushFollow(FOLLOW_adjacent_string_literals_in_literal56422);
                    adjacent_string_literals();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 6 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3061:78: NUMBER
                    {
                    match(input,NUMBER,FOLLOW_NUMBER_in_literal56424); if (state.failed) return ;

                    }
                    break;
                case 7 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3061:85: OCTALINT
                    {
                    match(input,OCTALINT,FOLLOW_OCTALINT_in_literal56426); if (state.failed) return ;

                    }
                    break;
                case 8 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3061:94: LITERAL_true
                    {
                    match(input,LITERAL_true,FOLLOW_LITERAL_true_in_literal56428); if (state.failed) return ;

                    }
                    break;
                case 9 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3061:107: LITERAL_false
                    {
                    match(input,LITERAL_false,FOLLOW_LITERAL_false_in_literal56430); if (state.failed) return ;

                    }
                    break;
                case 10 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3061:121: compiler_specific_literal
                    {
                    pushFollow(FOLLOW_compiler_specific_literal_in_literal56432);
                    compiler_specific_literal();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal", 207);
        }
        return ;
    }
    // $ANTLR end "literal"



    // $ANTLR start "adjacent_string_literals"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3064:1: adjacent_string_literals : ( STRING_LITERAL )+ ;
    public final void adjacent_string_literals() throws RecognitionException {
        traceIn("adjacent_string_literals", 208);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3065:5: ( ( STRING_LITERAL )+ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3066:9: ( STRING_LITERAL )+
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3066:9: ( STRING_LITERAL )+
            int cnt343=0;
            loop343:
            do {
                int alt343=2;
                int LA343_0 = input.LA(1);

                if ( (LA343_0==STRING_LITERAL) ) {
                    alt343=1;
                }


                switch (alt343) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3066:9: STRING_LITERAL
            	    {
            	    match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_adjacent_string_literals56457); if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt343 >= 1 ) break loop343;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(343, input);
                        throw eee;
                }
                cnt343++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("adjacent_string_literals", 208);
        }
        return ;
    }
    // $ANTLR end "adjacent_string_literals"



    // $ANTLR start "compiler_specific_literal"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3069:1: compiler_specific_literal : LITERAL___null ;
    public final void compiler_specific_literal() throws RecognitionException {
        traceIn("compiler_specific_literal", 209);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3070:5: ( LITERAL___null )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3071:9: LITERAL___null
            {
            match(input,LITERAL___null,FOLLOW_LITERAL___null_in_compiler_specific_literal56483); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("compiler_specific_literal", 209);
        }
        return ;
    }
    // $ANTLR end "compiler_specific_literal"



    // $ANTLR start "lookahead_tokenset_arg_syms"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3079:1: lookahead_tokenset_arg_syms : ( IDENT | DECIMALINT | HEXADECIMALINT | FLOATONE | CHAR_LITERAL | STRING_LITERAL | NUMBER | OCTALINT | PLUS | MINUS | STAR | AMPERSAND | LITERAL_sizeof | TILDE | NOT | PLUSPLUS | MINUSMINUS | LITERAL_OPERATOR | LITERAL_new | LITERAL_delete | LITERAL_this | LITERAL_void | LITERAL_char | LITERAL_short | LITERAL_long | LITERAL_float | LITERAL_double | LITERAL_signed | LITERAL_unsigned | LITERAL_int | DIVIDE | SHIFTLEFT | SHIFTRIGHT | BITWISEOR | AND | OR | BITWISEXOR | EQUAL | LESSTHANOREQUALTO | GREATERTHANOREQUALTO | NOTEQUAL | ASSIGNEQUAL | BITWISEANDEQUAL | DIVIDEEQUAL | SHIFTLEFTEQUAL | SHIFTRIGHTEQUAL | MINUSEQUAL | PLUSEQUAL | MODEQUAL | TIMESEQUAL | BITWISEOREQUAL | BITWISEXOREQUAL | DOT | MOD | POINTERTO | QUESTIONMARK | COLON | SCOPE | DOTMBR | POINTERTOMBR | COMMA | ELLIPSIS | LITERAL_typedef | LITERAL_extern | LITERAL_static | LITERAL_auto | LITERAL_register | LITERAL___thread | literal_const | LITERAL_volatile | LITERAL_struct | LITERAL_union | LITERAL_class | LITERAL_enum | LITERAL_typename | LITERAL___offsetof | LITERAL___alignof | LITERAL_throw | LITERAL_wchar_t | LITERAL_typeid | LITERAL_const_cast | LITERAL_static_cast | LITERAL_dynamic_cast | LITERAL_reinterpret_cast | LITERAL_bool | LITERAL_true | LITERAL_false | LITERAL___global | LITERAL___symbolic | LITERAL___hidden | LITERAL___declspec | LITERAL___attribute__ | LITERAL___typeof__ | IS_ENUM | IS_UNION | IS_CLASS | IS_POD | IS_ABSTRACT | HAS_VIRT_DESTR | IS_EMPTY | IS_BASEOF | IS_POLYMORPH );
    public final void lookahead_tokenset_arg_syms() throws RecognitionException {
        traceIn("lookahead_tokenset_arg_syms", 210);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3080:5: ( IDENT | DECIMALINT | HEXADECIMALINT | FLOATONE | CHAR_LITERAL | STRING_LITERAL | NUMBER | OCTALINT | PLUS | MINUS | STAR | AMPERSAND | LITERAL_sizeof | TILDE | NOT | PLUSPLUS | MINUSMINUS | LITERAL_OPERATOR | LITERAL_new | LITERAL_delete | LITERAL_this | LITERAL_void | LITERAL_char | LITERAL_short | LITERAL_long | LITERAL_float | LITERAL_double | LITERAL_signed | LITERAL_unsigned | LITERAL_int | DIVIDE | SHIFTLEFT | SHIFTRIGHT | BITWISEOR | AND | OR | BITWISEXOR | EQUAL | LESSTHANOREQUALTO | GREATERTHANOREQUALTO | NOTEQUAL | ASSIGNEQUAL | BITWISEANDEQUAL | DIVIDEEQUAL | SHIFTLEFTEQUAL | SHIFTRIGHTEQUAL | MINUSEQUAL | PLUSEQUAL | MODEQUAL | TIMESEQUAL | BITWISEOREQUAL | BITWISEXOREQUAL | DOT | MOD | POINTERTO | QUESTIONMARK | COLON | SCOPE | DOTMBR | POINTERTOMBR | COMMA | ELLIPSIS | LITERAL_typedef | LITERAL_extern | LITERAL_static | LITERAL_auto | LITERAL_register | LITERAL___thread | literal_const | LITERAL_volatile | LITERAL_struct | LITERAL_union | LITERAL_class | LITERAL_enum | LITERAL_typename | LITERAL___offsetof | LITERAL___alignof | LITERAL_throw | LITERAL_wchar_t | LITERAL_typeid | LITERAL_const_cast | LITERAL_static_cast | LITERAL_dynamic_cast | LITERAL_reinterpret_cast | LITERAL_bool | LITERAL_true | LITERAL_false | LITERAL___global | LITERAL___symbolic | LITERAL___hidden | LITERAL___declspec | LITERAL___attribute__ | LITERAL___typeof__ | IS_ENUM | IS_UNION | IS_CLASS | IS_POD | IS_ABSTRACT | HAS_VIRT_DESTR | IS_EMPTY | IS_BASEOF | IS_POLYMORPH )
            int alt344=102;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt344=1;
                }
                break;
            case DECIMALINT:
                {
                alt344=2;
                }
                break;
            case HEXADECIMALINT:
                {
                alt344=3;
                }
                break;
            case FLOATONE:
                {
                alt344=4;
                }
                break;
            case CHAR_LITERAL:
                {
                alt344=5;
                }
                break;
            case STRING_LITERAL:
                {
                alt344=6;
                }
                break;
            case NUMBER:
                {
                alt344=7;
                }
                break;
            case OCTALINT:
                {
                alt344=8;
                }
                break;
            case PLUS:
                {
                alt344=9;
                }
                break;
            case MINUS:
                {
                alt344=10;
                }
                break;
            case STAR:
                {
                alt344=11;
                }
                break;
            case AMPERSAND:
                {
                alt344=12;
                }
                break;
            case LITERAL_sizeof:
                {
                alt344=13;
                }
                break;
            case TILDE:
                {
                alt344=14;
                }
                break;
            case NOT:
                {
                alt344=15;
                }
                break;
            case PLUSPLUS:
                {
                alt344=16;
                }
                break;
            case MINUSMINUS:
                {
                alt344=17;
                }
                break;
            case LITERAL_OPERATOR:
                {
                alt344=18;
                }
                break;
            case LITERAL_new:
                {
                alt344=19;
                }
                break;
            case LITERAL_delete:
                {
                alt344=20;
                }
                break;
            case LITERAL_this:
                {
                alt344=21;
                }
                break;
            case LITERAL_void:
                {
                alt344=22;
                }
                break;
            case LITERAL_char:
                {
                alt344=23;
                }
                break;
            case LITERAL_short:
                {
                alt344=24;
                }
                break;
            case LITERAL_long:
                {
                alt344=25;
                }
                break;
            case LITERAL_float:
                {
                alt344=26;
                }
                break;
            case LITERAL_double:
                {
                alt344=27;
                }
                break;
            case LITERAL_signed:
                {
                alt344=28;
                }
                break;
            case LITERAL_unsigned:
                {
                alt344=29;
                }
                break;
            case LITERAL_int:
                {
                alt344=30;
                }
                break;
            case DIVIDE:
                {
                alt344=31;
                }
                break;
            case SHIFTLEFT:
                {
                alt344=32;
                }
                break;
            case SHIFTRIGHT:
                {
                alt344=33;
                }
                break;
            case BITWISEOR:
                {
                alt344=34;
                }
                break;
            case AND:
                {
                alt344=35;
                }
                break;
            case OR:
                {
                alt344=36;
                }
                break;
            case BITWISEXOR:
                {
                alt344=37;
                }
                break;
            case EQUAL:
                {
                alt344=38;
                }
                break;
            case LESSTHANOREQUALTO:
                {
                alt344=39;
                }
                break;
            case GREATERTHANOREQUALTO:
                {
                alt344=40;
                }
                break;
            case NOTEQUAL:
                {
                alt344=41;
                }
                break;
            case ASSIGNEQUAL:
                {
                alt344=42;
                }
                break;
            case BITWISEANDEQUAL:
                {
                alt344=43;
                }
                break;
            case DIVIDEEQUAL:
                {
                alt344=44;
                }
                break;
            case SHIFTLEFTEQUAL:
                {
                alt344=45;
                }
                break;
            case SHIFTRIGHTEQUAL:
                {
                alt344=46;
                }
                break;
            case MINUSEQUAL:
                {
                alt344=47;
                }
                break;
            case PLUSEQUAL:
                {
                alt344=48;
                }
                break;
            case MODEQUAL:
                {
                alt344=49;
                }
                break;
            case TIMESEQUAL:
                {
                alt344=50;
                }
                break;
            case BITWISEOREQUAL:
                {
                alt344=51;
                }
                break;
            case BITWISEXOREQUAL:
                {
                alt344=52;
                }
                break;
            case DOT:
                {
                alt344=53;
                }
                break;
            case MOD:
                {
                alt344=54;
                }
                break;
            case POINTERTO:
                {
                alt344=55;
                }
                break;
            case QUESTIONMARK:
                {
                alt344=56;
                }
                break;
            case COLON:
                {
                alt344=57;
                }
                break;
            case SCOPE:
                {
                alt344=58;
                }
                break;
            case DOTMBR:
                {
                alt344=59;
                }
                break;
            case POINTERTOMBR:
                {
                alt344=60;
                }
                break;
            case COMMA:
                {
                alt344=61;
                }
                break;
            case ELLIPSIS:
                {
                alt344=62;
                }
                break;
            case LITERAL_typedef:
                {
                alt344=63;
                }
                break;
            case LITERAL_extern:
                {
                alt344=64;
                }
                break;
            case LITERAL_static:
                {
                alt344=65;
                }
                break;
            case LITERAL_auto:
                {
                alt344=66;
                }
                break;
            case LITERAL_register:
                {
                alt344=67;
                }
                break;
            case LITERAL___thread:
                {
                alt344=68;
                }
                break;
            case LITERAL_const:
            case LITERAL___const__:
            case LITERAL___const:
                {
                alt344=69;
                }
                break;
            case LITERAL_volatile:
                {
                alt344=70;
                }
                break;
            case LITERAL_struct:
                {
                alt344=71;
                }
                break;
            case LITERAL_union:
                {
                alt344=72;
                }
                break;
            case LITERAL_class:
                {
                alt344=73;
                }
                break;
            case LITERAL_enum:
                {
                alt344=74;
                }
                break;
            case LITERAL_typename:
                {
                alt344=75;
                }
                break;
            case LITERAL___offsetof:
                {
                alt344=76;
                }
                break;
            case LITERAL___alignof:
                {
                alt344=77;
                }
                break;
            case LITERAL_throw:
                {
                alt344=78;
                }
                break;
            case LITERAL_wchar_t:
                {
                alt344=79;
                }
                break;
            case LITERAL_typeid:
                {
                alt344=80;
                }
                break;
            case LITERAL_const_cast:
                {
                alt344=81;
                }
                break;
            case LITERAL_static_cast:
                {
                alt344=82;
                }
                break;
            case LITERAL_dynamic_cast:
                {
                alt344=83;
                }
                break;
            case LITERAL_reinterpret_cast:
                {
                alt344=84;
                }
                break;
            case LITERAL_bool:
                {
                alt344=85;
                }
                break;
            case LITERAL_true:
                {
                alt344=86;
                }
                break;
            case LITERAL_false:
                {
                alt344=87;
                }
                break;
            case LITERAL___global:
                {
                alt344=88;
                }
                break;
            case LITERAL___symbolic:
                {
                alt344=89;
                }
                break;
            case LITERAL___hidden:
                {
                alt344=90;
                }
                break;
            case LITERAL___declspec:
                {
                alt344=91;
                }
                break;
            case LITERAL___attribute__:
                {
                alt344=92;
                }
                break;
            case LITERAL___typeof__:
                {
                alt344=93;
                }
                break;
            case IS_ENUM:
                {
                alt344=94;
                }
                break;
            case IS_UNION:
                {
                alt344=95;
                }
                break;
            case IS_CLASS:
                {
                alt344=96;
                }
                break;
            case IS_POD:
                {
                alt344=97;
                }
                break;
            case IS_ABSTRACT:
                {
                alt344=98;
                }
                break;
            case HAS_VIRT_DESTR:
                {
                alt344=99;
                }
                break;
            case IS_EMPTY:
                {
                alt344=100;
                }
                break;
            case IS_BASEOF:
                {
                alt344=101;
                }
                break;
            case IS_POLYMORPH:
                {
                alt344=102;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 0, input);

                throw nvae;

            }

            switch (alt344) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3081:9: IDENT
                    {
                    match(input,IDENT,FOLLOW_IDENT_in_lookahead_tokenset_arg_syms56513); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3081:15: DECIMALINT
                    {
                    match(input,DECIMALINT,FOLLOW_DECIMALINT_in_lookahead_tokenset_arg_syms56515); if (state.failed) return ;

                    }
                    break;
                case 3 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3081:26: HEXADECIMALINT
                    {
                    match(input,HEXADECIMALINT,FOLLOW_HEXADECIMALINT_in_lookahead_tokenset_arg_syms56517); if (state.failed) return ;

                    }
                    break;
                case 4 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3081:41: FLOATONE
                    {
                    match(input,FLOATONE,FOLLOW_FLOATONE_in_lookahead_tokenset_arg_syms56519); if (state.failed) return ;

                    }
                    break;
                case 5 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3081:50: CHAR_LITERAL
                    {
                    match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_lookahead_tokenset_arg_syms56521); if (state.failed) return ;

                    }
                    break;
                case 6 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3081:63: STRING_LITERAL
                    {
                    match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_lookahead_tokenset_arg_syms56523); if (state.failed) return ;

                    }
                    break;
                case 7 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3081:78: NUMBER
                    {
                    match(input,NUMBER,FOLLOW_NUMBER_in_lookahead_tokenset_arg_syms56525); if (state.failed) return ;

                    }
                    break;
                case 8 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3081:85: OCTALINT
                    {
                    match(input,OCTALINT,FOLLOW_OCTALINT_in_lookahead_tokenset_arg_syms56527); if (state.failed) return ;

                    }
                    break;
                case 9 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3082:9: PLUS
                    {
                    match(input,PLUS,FOLLOW_PLUS_in_lookahead_tokenset_arg_syms56538); if (state.failed) return ;

                    }
                    break;
                case 10 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3082:14: MINUS
                    {
                    match(input,MINUS,FOLLOW_MINUS_in_lookahead_tokenset_arg_syms56540); if (state.failed) return ;

                    }
                    break;
                case 11 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3082:20: STAR
                    {
                    match(input,STAR,FOLLOW_STAR_in_lookahead_tokenset_arg_syms56542); if (state.failed) return ;

                    }
                    break;
                case 12 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3082:25: AMPERSAND
                    {
                    match(input,AMPERSAND,FOLLOW_AMPERSAND_in_lookahead_tokenset_arg_syms56544); if (state.failed) return ;

                    }
                    break;
                case 13 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3082:35: LITERAL_sizeof
                    {
                    match(input,LITERAL_sizeof,FOLLOW_LITERAL_sizeof_in_lookahead_tokenset_arg_syms56546); if (state.failed) return ;

                    }
                    break;
                case 14 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3082:50: TILDE
                    {
                    match(input,TILDE,FOLLOW_TILDE_in_lookahead_tokenset_arg_syms56548); if (state.failed) return ;

                    }
                    break;
                case 15 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3083:9: NOT
                    {
                    match(input,NOT,FOLLOW_NOT_in_lookahead_tokenset_arg_syms56559); if (state.failed) return ;

                    }
                    break;
                case 16 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3083:13: PLUSPLUS
                    {
                    match(input,PLUSPLUS,FOLLOW_PLUSPLUS_in_lookahead_tokenset_arg_syms56561); if (state.failed) return ;

                    }
                    break;
                case 17 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3083:22: MINUSMINUS
                    {
                    match(input,MINUSMINUS,FOLLOW_MINUSMINUS_in_lookahead_tokenset_arg_syms56563); if (state.failed) return ;

                    }
                    break;
                case 18 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3083:33: LITERAL_OPERATOR
                    {
                    match(input,LITERAL_OPERATOR,FOLLOW_LITERAL_OPERATOR_in_lookahead_tokenset_arg_syms56565); if (state.failed) return ;

                    }
                    break;
                case 19 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3083:50: LITERAL_new
                    {
                    match(input,LITERAL_new,FOLLOW_LITERAL_new_in_lookahead_tokenset_arg_syms56567); if (state.failed) return ;

                    }
                    break;
                case 20 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3083:62: LITERAL_delete
                    {
                    match(input,LITERAL_delete,FOLLOW_LITERAL_delete_in_lookahead_tokenset_arg_syms56569); if (state.failed) return ;

                    }
                    break;
                case 21 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3084:9: LITERAL_this
                    {
                    match(input,LITERAL_this,FOLLOW_LITERAL_this_in_lookahead_tokenset_arg_syms56580); if (state.failed) return ;

                    }
                    break;
                case 22 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3085:9: LITERAL_void
                    {
                    match(input,LITERAL_void,FOLLOW_LITERAL_void_in_lookahead_tokenset_arg_syms56591); if (state.failed) return ;

                    }
                    break;
                case 23 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3085:22: LITERAL_char
                    {
                    match(input,LITERAL_char,FOLLOW_LITERAL_char_in_lookahead_tokenset_arg_syms56593); if (state.failed) return ;

                    }
                    break;
                case 24 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3085:35: LITERAL_short
                    {
                    match(input,LITERAL_short,FOLLOW_LITERAL_short_in_lookahead_tokenset_arg_syms56595); if (state.failed) return ;

                    }
                    break;
                case 25 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3085:49: LITERAL_long
                    {
                    match(input,LITERAL_long,FOLLOW_LITERAL_long_in_lookahead_tokenset_arg_syms56597); if (state.failed) return ;

                    }
                    break;
                case 26 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3085:62: LITERAL_float
                    {
                    match(input,LITERAL_float,FOLLOW_LITERAL_float_in_lookahead_tokenset_arg_syms56599); if (state.failed) return ;

                    }
                    break;
                case 27 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3085:76: LITERAL_double
                    {
                    match(input,LITERAL_double,FOLLOW_LITERAL_double_in_lookahead_tokenset_arg_syms56601); if (state.failed) return ;

                    }
                    break;
                case 28 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3085:91: LITERAL_signed
                    {
                    match(input,LITERAL_signed,FOLLOW_LITERAL_signed_in_lookahead_tokenset_arg_syms56603); if (state.failed) return ;

                    }
                    break;
                case 29 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3085:106: LITERAL_unsigned
                    {
                    match(input,LITERAL_unsigned,FOLLOW_LITERAL_unsigned_in_lookahead_tokenset_arg_syms56605); if (state.failed) return ;

                    }
                    break;
                case 30 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3085:123: LITERAL_int
                    {
                    match(input,LITERAL_int,FOLLOW_LITERAL_int_in_lookahead_tokenset_arg_syms56607); if (state.failed) return ;

                    }
                    break;
                case 31 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3086:9: DIVIDE
                    {
                    match(input,DIVIDE,FOLLOW_DIVIDE_in_lookahead_tokenset_arg_syms56618); if (state.failed) return ;

                    }
                    break;
                case 32 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3086:16: SHIFTLEFT
                    {
                    match(input,SHIFTLEFT,FOLLOW_SHIFTLEFT_in_lookahead_tokenset_arg_syms56620); if (state.failed) return ;

                    }
                    break;
                case 33 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3086:26: SHIFTRIGHT
                    {
                    match(input,SHIFTRIGHT,FOLLOW_SHIFTRIGHT_in_lookahead_tokenset_arg_syms56622); if (state.failed) return ;

                    }
                    break;
                case 34 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3086:37: BITWISEOR
                    {
                    match(input,BITWISEOR,FOLLOW_BITWISEOR_in_lookahead_tokenset_arg_syms56624); if (state.failed) return ;

                    }
                    break;
                case 35 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3086:47: AND
                    {
                    match(input,AND,FOLLOW_AND_in_lookahead_tokenset_arg_syms56626); if (state.failed) return ;

                    }
                    break;
                case 36 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3086:51: OR
                    {
                    match(input,OR,FOLLOW_OR_in_lookahead_tokenset_arg_syms56628); if (state.failed) return ;

                    }
                    break;
                case 37 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3086:54: BITWISEXOR
                    {
                    match(input,BITWISEXOR,FOLLOW_BITWISEXOR_in_lookahead_tokenset_arg_syms56630); if (state.failed) return ;

                    }
                    break;
                case 38 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3087:9: EQUAL
                    {
                    match(input,EQUAL,FOLLOW_EQUAL_in_lookahead_tokenset_arg_syms56641); if (state.failed) return ;

                    }
                    break;
                case 39 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3087:15: LESSTHANOREQUALTO
                    {
                    match(input,LESSTHANOREQUALTO,FOLLOW_LESSTHANOREQUALTO_in_lookahead_tokenset_arg_syms56643); if (state.failed) return ;

                    }
                    break;
                case 40 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3087:33: GREATERTHANOREQUALTO
                    {
                    match(input,GREATERTHANOREQUALTO,FOLLOW_GREATERTHANOREQUALTO_in_lookahead_tokenset_arg_syms56645); if (state.failed) return ;

                    }
                    break;
                case 41 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3087:54: NOTEQUAL
                    {
                    match(input,NOTEQUAL,FOLLOW_NOTEQUAL_in_lookahead_tokenset_arg_syms56647); if (state.failed) return ;

                    }
                    break;
                case 42 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3088:9: ASSIGNEQUAL
                    {
                    match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_lookahead_tokenset_arg_syms56658); if (state.failed) return ;

                    }
                    break;
                case 43 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3088:21: BITWISEANDEQUAL
                    {
                    match(input,BITWISEANDEQUAL,FOLLOW_BITWISEANDEQUAL_in_lookahead_tokenset_arg_syms56660); if (state.failed) return ;

                    }
                    break;
                case 44 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3088:37: DIVIDEEQUAL
                    {
                    match(input,DIVIDEEQUAL,FOLLOW_DIVIDEEQUAL_in_lookahead_tokenset_arg_syms56662); if (state.failed) return ;

                    }
                    break;
                case 45 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3088:49: SHIFTLEFTEQUAL
                    {
                    match(input,SHIFTLEFTEQUAL,FOLLOW_SHIFTLEFTEQUAL_in_lookahead_tokenset_arg_syms56664); if (state.failed) return ;

                    }
                    break;
                case 46 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3088:64: SHIFTRIGHTEQUAL
                    {
                    match(input,SHIFTRIGHTEQUAL,FOLLOW_SHIFTRIGHTEQUAL_in_lookahead_tokenset_arg_syms56666); if (state.failed) return ;

                    }
                    break;
                case 47 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3088:80: MINUSEQUAL
                    {
                    match(input,MINUSEQUAL,FOLLOW_MINUSEQUAL_in_lookahead_tokenset_arg_syms56668); if (state.failed) return ;

                    }
                    break;
                case 48 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3088:91: PLUSEQUAL
                    {
                    match(input,PLUSEQUAL,FOLLOW_PLUSEQUAL_in_lookahead_tokenset_arg_syms56670); if (state.failed) return ;

                    }
                    break;
                case 49 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3089:9: MODEQUAL
                    {
                    match(input,MODEQUAL,FOLLOW_MODEQUAL_in_lookahead_tokenset_arg_syms56681); if (state.failed) return ;

                    }
                    break;
                case 50 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3089:18: TIMESEQUAL
                    {
                    match(input,TIMESEQUAL,FOLLOW_TIMESEQUAL_in_lookahead_tokenset_arg_syms56683); if (state.failed) return ;

                    }
                    break;
                case 51 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3089:29: BITWISEOREQUAL
                    {
                    match(input,BITWISEOREQUAL,FOLLOW_BITWISEOREQUAL_in_lookahead_tokenset_arg_syms56685); if (state.failed) return ;

                    }
                    break;
                case 52 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3089:44: BITWISEXOREQUAL
                    {
                    match(input,BITWISEXOREQUAL,FOLLOW_BITWISEXOREQUAL_in_lookahead_tokenset_arg_syms56687); if (state.failed) return ;

                    }
                    break;
                case 53 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3089:60: DOT
                    {
                    match(input,DOT,FOLLOW_DOT_in_lookahead_tokenset_arg_syms56689); if (state.failed) return ;

                    }
                    break;
                case 54 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3089:64: MOD
                    {
                    match(input,MOD,FOLLOW_MOD_in_lookahead_tokenset_arg_syms56691); if (state.failed) return ;

                    }
                    break;
                case 55 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3090:9: POINTERTO
                    {
                    match(input,POINTERTO,FOLLOW_POINTERTO_in_lookahead_tokenset_arg_syms56702); if (state.failed) return ;

                    }
                    break;
                case 56 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3090:19: QUESTIONMARK
                    {
                    match(input,QUESTIONMARK,FOLLOW_QUESTIONMARK_in_lookahead_tokenset_arg_syms56704); if (state.failed) return ;

                    }
                    break;
                case 57 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3090:32: COLON
                    {
                    match(input,COLON,FOLLOW_COLON_in_lookahead_tokenset_arg_syms56706); if (state.failed) return ;

                    }
                    break;
                case 58 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3090:38: SCOPE
                    {
                    match(input,SCOPE,FOLLOW_SCOPE_in_lookahead_tokenset_arg_syms56708); if (state.failed) return ;

                    }
                    break;
                case 59 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3090:44: DOTMBR
                    {
                    match(input,DOTMBR,FOLLOW_DOTMBR_in_lookahead_tokenset_arg_syms56710); if (state.failed) return ;

                    }
                    break;
                case 60 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3090:51: POINTERTOMBR
                    {
                    match(input,POINTERTOMBR,FOLLOW_POINTERTOMBR_in_lookahead_tokenset_arg_syms56712); if (state.failed) return ;

                    }
                    break;
                case 61 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3090:64: COMMA
                    {
                    match(input,COMMA,FOLLOW_COMMA_in_lookahead_tokenset_arg_syms56714); if (state.failed) return ;

                    }
                    break;
                case 62 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3090:70: ELLIPSIS
                    {
                    match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_lookahead_tokenset_arg_syms56716); if (state.failed) return ;

                    }
                    break;
                case 63 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3091:9: LITERAL_typedef
                    {
                    match(input,LITERAL_typedef,FOLLOW_LITERAL_typedef_in_lookahead_tokenset_arg_syms56727); if (state.failed) return ;

                    }
                    break;
                case 64 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3091:25: LITERAL_extern
                    {
                    match(input,LITERAL_extern,FOLLOW_LITERAL_extern_in_lookahead_tokenset_arg_syms56729); if (state.failed) return ;

                    }
                    break;
                case 65 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3091:40: LITERAL_static
                    {
                    match(input,LITERAL_static,FOLLOW_LITERAL_static_in_lookahead_tokenset_arg_syms56731); if (state.failed) return ;

                    }
                    break;
                case 66 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3091:55: LITERAL_auto
                    {
                    match(input,LITERAL_auto,FOLLOW_LITERAL_auto_in_lookahead_tokenset_arg_syms56733); if (state.failed) return ;

                    }
                    break;
                case 67 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3091:68: LITERAL_register
                    {
                    match(input,LITERAL_register,FOLLOW_LITERAL_register_in_lookahead_tokenset_arg_syms56735); if (state.failed) return ;

                    }
                    break;
                case 68 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3091:85: LITERAL___thread
                    {
                    match(input,LITERAL___thread,FOLLOW_LITERAL___thread_in_lookahead_tokenset_arg_syms56737); if (state.failed) return ;

                    }
                    break;
                case 69 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3092:9: literal_const
                    {
                    pushFollow(FOLLOW_literal_const_in_lookahead_tokenset_arg_syms56748);
                    literal_const();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 70 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3092:23: LITERAL_volatile
                    {
                    match(input,LITERAL_volatile,FOLLOW_LITERAL_volatile_in_lookahead_tokenset_arg_syms56750); if (state.failed) return ;

                    }
                    break;
                case 71 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3092:40: LITERAL_struct
                    {
                    match(input,LITERAL_struct,FOLLOW_LITERAL_struct_in_lookahead_tokenset_arg_syms56752); if (state.failed) return ;

                    }
                    break;
                case 72 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3092:55: LITERAL_union
                    {
                    match(input,LITERAL_union,FOLLOW_LITERAL_union_in_lookahead_tokenset_arg_syms56754); if (state.failed) return ;

                    }
                    break;
                case 73 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3092:69: LITERAL_class
                    {
                    match(input,LITERAL_class,FOLLOW_LITERAL_class_in_lookahead_tokenset_arg_syms56756); if (state.failed) return ;

                    }
                    break;
                case 74 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3092:83: LITERAL_enum
                    {
                    match(input,LITERAL_enum,FOLLOW_LITERAL_enum_in_lookahead_tokenset_arg_syms56758); if (state.failed) return ;

                    }
                    break;
                case 75 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3092:96: LITERAL_typename
                    {
                    match(input,LITERAL_typename,FOLLOW_LITERAL_typename_in_lookahead_tokenset_arg_syms56760); if (state.failed) return ;

                    }
                    break;
                case 76 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3093:9: LITERAL___offsetof
                    {
                    match(input,LITERAL___offsetof,FOLLOW_LITERAL___offsetof_in_lookahead_tokenset_arg_syms56771); if (state.failed) return ;

                    }
                    break;
                case 77 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3093:28: LITERAL___alignof
                    {
                    match(input,LITERAL___alignof,FOLLOW_LITERAL___alignof_in_lookahead_tokenset_arg_syms56773); if (state.failed) return ;

                    }
                    break;
                case 78 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3093:46: LITERAL_throw
                    {
                    match(input,LITERAL_throw,FOLLOW_LITERAL_throw_in_lookahead_tokenset_arg_syms56775); if (state.failed) return ;

                    }
                    break;
                case 79 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3093:60: LITERAL_wchar_t
                    {
                    match(input,LITERAL_wchar_t,FOLLOW_LITERAL_wchar_t_in_lookahead_tokenset_arg_syms56777); if (state.failed) return ;

                    }
                    break;
                case 80 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3093:76: LITERAL_typeid
                    {
                    match(input,LITERAL_typeid,FOLLOW_LITERAL_typeid_in_lookahead_tokenset_arg_syms56779); if (state.failed) return ;

                    }
                    break;
                case 81 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3094:9: LITERAL_const_cast
                    {
                    match(input,LITERAL_const_cast,FOLLOW_LITERAL_const_cast_in_lookahead_tokenset_arg_syms56790); if (state.failed) return ;

                    }
                    break;
                case 82 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3094:28: LITERAL_static_cast
                    {
                    match(input,LITERAL_static_cast,FOLLOW_LITERAL_static_cast_in_lookahead_tokenset_arg_syms56792); if (state.failed) return ;

                    }
                    break;
                case 83 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3094:48: LITERAL_dynamic_cast
                    {
                    match(input,LITERAL_dynamic_cast,FOLLOW_LITERAL_dynamic_cast_in_lookahead_tokenset_arg_syms56794); if (state.failed) return ;

                    }
                    break;
                case 84 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3094:69: LITERAL_reinterpret_cast
                    {
                    match(input,LITERAL_reinterpret_cast,FOLLOW_LITERAL_reinterpret_cast_in_lookahead_tokenset_arg_syms56796); if (state.failed) return ;

                    }
                    break;
                case 85 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3095:9: LITERAL_bool
                    {
                    match(input,LITERAL_bool,FOLLOW_LITERAL_bool_in_lookahead_tokenset_arg_syms56807); if (state.failed) return ;

                    }
                    break;
                case 86 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3095:22: LITERAL_true
                    {
                    match(input,LITERAL_true,FOLLOW_LITERAL_true_in_lookahead_tokenset_arg_syms56809); if (state.failed) return ;

                    }
                    break;
                case 87 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3095:35: LITERAL_false
                    {
                    match(input,LITERAL_false,FOLLOW_LITERAL_false_in_lookahead_tokenset_arg_syms56811); if (state.failed) return ;

                    }
                    break;
                case 88 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3096:9: LITERAL___global
                    {
                    match(input,LITERAL___global,FOLLOW_LITERAL___global_in_lookahead_tokenset_arg_syms56822); if (state.failed) return ;

                    }
                    break;
                case 89 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3096:26: LITERAL___symbolic
                    {
                    match(input,LITERAL___symbolic,FOLLOW_LITERAL___symbolic_in_lookahead_tokenset_arg_syms56824); if (state.failed) return ;

                    }
                    break;
                case 90 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3096:45: LITERAL___hidden
                    {
                    match(input,LITERAL___hidden,FOLLOW_LITERAL___hidden_in_lookahead_tokenset_arg_syms56826); if (state.failed) return ;

                    }
                    break;
                case 91 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3096:62: LITERAL___declspec
                    {
                    match(input,LITERAL___declspec,FOLLOW_LITERAL___declspec_in_lookahead_tokenset_arg_syms56828); if (state.failed) return ;

                    }
                    break;
                case 92 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3097:9: LITERAL___attribute__
                    {
                    match(input,LITERAL___attribute__,FOLLOW_LITERAL___attribute___in_lookahead_tokenset_arg_syms56839); if (state.failed) return ;

                    }
                    break;
                case 93 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3097:31: LITERAL___typeof__
                    {
                    match(input,LITERAL___typeof__,FOLLOW_LITERAL___typeof___in_lookahead_tokenset_arg_syms56841); if (state.failed) return ;

                    }
                    break;
                case 94 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3098:9: IS_ENUM
                    {
                    match(input,IS_ENUM,FOLLOW_IS_ENUM_in_lookahead_tokenset_arg_syms56852); if (state.failed) return ;

                    }
                    break;
                case 95 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3098:17: IS_UNION
                    {
                    match(input,IS_UNION,FOLLOW_IS_UNION_in_lookahead_tokenset_arg_syms56854); if (state.failed) return ;

                    }
                    break;
                case 96 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3098:26: IS_CLASS
                    {
                    match(input,IS_CLASS,FOLLOW_IS_CLASS_in_lookahead_tokenset_arg_syms56856); if (state.failed) return ;

                    }
                    break;
                case 97 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3098:35: IS_POD
                    {
                    match(input,IS_POD,FOLLOW_IS_POD_in_lookahead_tokenset_arg_syms56858); if (state.failed) return ;

                    }
                    break;
                case 98 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3098:42: IS_ABSTRACT
                    {
                    match(input,IS_ABSTRACT,FOLLOW_IS_ABSTRACT_in_lookahead_tokenset_arg_syms56860); if (state.failed) return ;

                    }
                    break;
                case 99 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3098:54: HAS_VIRT_DESTR
                    {
                    match(input,HAS_VIRT_DESTR,FOLLOW_HAS_VIRT_DESTR_in_lookahead_tokenset_arg_syms56862); if (state.failed) return ;

                    }
                    break;
                case 100 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3098:69: IS_EMPTY
                    {
                    match(input,IS_EMPTY,FOLLOW_IS_EMPTY_in_lookahead_tokenset_arg_syms56864); if (state.failed) return ;

                    }
                    break;
                case 101 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3098:78: IS_BASEOF
                    {
                    match(input,IS_BASEOF,FOLLOW_IS_BASEOF_in_lookahead_tokenset_arg_syms56866); if (state.failed) return ;

                    }
                    break;
                case 102 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3098:88: IS_POLYMORPH
                    {
                    match(input,IS_POLYMORPH,FOLLOW_IS_POLYMORPH_in_lookahead_tokenset_arg_syms56868); if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("lookahead_tokenset_arg_syms", 210);
        }
        return ;
    }
    // $ANTLR end "lookahead_tokenset_arg_syms"


    protected static class look_after_tmpl_args_scope {
        int level;
    }
    protected Stack look_after_tmpl_args_stack = new Stack();



    // $ANTLR start "look_after_tmpl_args"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3101:1: look_after_tmpl_args : ( ( GREATERTHAN {...}?)=> GREATERTHAN | LESSTHAN | LPAREN | RPAREN | LSQUARE | RSQUARE | lookahead_tokenset_arg_syms )* GREATERTHAN ;
    public final void look_after_tmpl_args() throws RecognitionException {
        traceIn("look_after_tmpl_args", 211);
        look_after_tmpl_args_stack.push(new look_after_tmpl_args_scope());
         
            ((look_after_tmpl_args_scope)look_after_tmpl_args_stack.peek()).level = 0;
            int npar = 0;
            int nbrac = 0;

        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3110:5: ( ( ( GREATERTHAN {...}?)=> GREATERTHAN | LESSTHAN | LPAREN | RPAREN | LSQUARE | RSQUARE | lookahead_tokenset_arg_syms )* GREATERTHAN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3111:9: ( ( GREATERTHAN {...}?)=> GREATERTHAN | LESSTHAN | LPAREN | RPAREN | LSQUARE | RSQUARE | lookahead_tokenset_arg_syms )* GREATERTHAN
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3111:9: ( ( GREATERTHAN {...}?)=> GREATERTHAN | LESSTHAN | LPAREN | RPAREN | LSQUARE | RSQUARE | lookahead_tokenset_arg_syms )*
            loop345:
            do {
                int alt345=8;
                alt345 = dfa345.predict(input);
                switch (alt345) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3113:13: ( GREATERTHAN {...}?)=> GREATERTHAN
            	    {
            	    match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_look_after_tmpl_args56948); if (state.failed) return ;

            	     if (npar == 0 && nbrac == 0) {
            	                                ((look_after_tmpl_args_scope)look_after_tmpl_args_stack.peek()).level--;
            	                                println("level-- (", ((look_after_tmpl_args_scope)look_after_tmpl_args_stack.peek()).level);
            	                            }
            	                    

            	    }
            	    break;
            	case 2 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3123:13: LESSTHAN
            	    {
            	    match(input,LESSTHAN,FOLLOW_LESSTHAN_in_look_after_tmpl_args56990); if (state.failed) return ;

            	     if (npar == 0 && nbrac == 0) {
            	                                ((look_after_tmpl_args_scope)look_after_tmpl_args_stack.peek()).level++;
            	                                println("level++ (", ((look_after_tmpl_args_scope)look_after_tmpl_args_stack.peek()).level);
            	                        }
            	                    

            	    }
            	    break;
            	case 3 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3129:13: LPAREN
            	    {
            	    match(input,LPAREN,FOLLOW_LPAREN_in_look_after_tmpl_args57016); if (state.failed) return ;

            	     npar++; 

            	    }
            	    break;
            	case 4 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3131:13: RPAREN
            	    {
            	    match(input,RPAREN,FOLLOW_RPAREN_in_look_after_tmpl_args57042); if (state.failed) return ;

            	     if (npar > 0) npar--; 

            	    }
            	    break;
            	case 5 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3133:13: LSQUARE
            	    {
            	    match(input,LSQUARE,FOLLOW_LSQUARE_in_look_after_tmpl_args57068); if (state.failed) return ;

            	     nbrac++; 

            	    }
            	    break;
            	case 6 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3135:13: RSQUARE
            	    {
            	    match(input,RSQUARE,FOLLOW_RSQUARE_in_look_after_tmpl_args57094); if (state.failed) return ;

            	     if (nbrac > 0) nbrac--; 

            	    }
            	    break;
            	case 7 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3137:13: lookahead_tokenset_arg_syms
            	    {
            	    pushFollow(FOLLOW_lookahead_tokenset_arg_syms_in_look_after_tmpl_args57120);
            	    lookahead_tokenset_arg_syms();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop345;
                }
            } while (true);


            match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_look_after_tmpl_args57133); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("look_after_tmpl_args", 211);
            look_after_tmpl_args_stack.pop();
        }
        return ;
    }
    // $ANTLR end "look_after_tmpl_args"



    // $ANTLR start "skip_balanced_Curl"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3141:1: skip_balanced_Curl : LCURLY ( options {greedy=false; } : skip_balanced_Curl |~ ( RCURLY | LCURLY ) )* RCURLY ;
    public final void skip_balanced_Curl() throws RecognitionException {
        traceIn("skip_balanced_Curl", 212);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3142:13: ( LCURLY ( options {greedy=false; } : skip_balanced_Curl |~ ( RCURLY | LCURLY ) )* RCURLY )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3143:13: LCURLY ( options {greedy=false; } : skip_balanced_Curl |~ ( RCURLY | LCURLY ) )* RCURLY
            {
            match(input,LCURLY,FOLLOW_LCURLY_in_skip_balanced_Curl57170); if (state.failed) return ;

            if ( state.backtracking==0 ) {if(state.backtracking == 0){action.skip_balanced_curlies(input.LT(0));}}

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3144:13: ( options {greedy=false; } : skip_balanced_Curl |~ ( RCURLY | LCURLY ) )*
            loop346:
            do {
                int alt346=3;
                int LA346_0 = input.LA(1);

                if ( (LA346_0==LCURLY) ) {
                    alt346=1;
                }
                else if ( ((LA346_0 >= ELLIPSIS && LA346_0 <= RSQUARE)||(LA346_0 >= EQUAL && LA346_0 <= LITERAL_typeid)) ) {
                    alt346=2;
                }
                else if ( (LA346_0==RCURLY) ) {
                    alt346=3;
                }


                switch (alt346) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3145:17: skip_balanced_Curl
            	    {
            	    pushFollow(FOLLOW_skip_balanced_Curl_in_skip_balanced_Curl57272);
            	    skip_balanced_Curl();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;
            	case 2 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3145:38: ~ ( RCURLY | LCURLY )
            	    {
            	    if ( (input.LA(1) >= ELLIPSIS && input.LA(1) <= RSQUARE)||(input.LA(1) >= EQUAL && input.LA(1) <= LITERAL_typeid) ) {
            	        input.consume();
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    if ( state.backtracking==0 ) {if(state.backtracking == 0){action.skip_balanced_curlies(input.LT(0));}}

            	    }
            	    break;

            	default :
            	    break loop346;
                }
            } while (true);


            match(input,RCURLY,FOLLOW_RCURLY_in_skip_balanced_Curl57338); if (state.failed) return ;

            if ( state.backtracking==0 ) {if(state.backtracking == 0){action.skip_balanced_curlies(input.LT(0));}}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("skip_balanced_Curl", 212);
        }
        return ;
    }
    // $ANTLR end "skip_balanced_Curl"



    // $ANTLR start "lazy_template"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3152:1: lazy_template : LESSTHAN ( (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY ) | lazy_template )* ) GREATERTHAN ;
    public final void lazy_template() throws RecognitionException {
        traceIn("lazy_template", 213);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3153:5: ( LESSTHAN ( (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY ) | lazy_template )* ) GREATERTHAN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3154:9: LESSTHAN ( (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY ) | lazy_template )* ) GREATERTHAN
            {
            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_lazy_template57432); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3155:9: ( (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY ) | lazy_template )* )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3156:13: (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY ) | lazy_template )*
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3156:13: (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY ) | lazy_template )*
            loop347:
            do {
                int alt347=3;
                int LA347_0 = input.LA(1);

                if ( ((LA347_0 >= ELLIPSIS && LA347_0 <= RSQUARE)||(LA347_0 >= EQUAL && LA347_0 <= LESSTHANOREQUALTO)||LA347_0==GREATERTHANOREQUALTO||(LA347_0 >= DIVIDE && LA347_0 <= LITERAL_typeid)) ) {
                    alt347=1;
                }
                else if ( (LA347_0==LESSTHAN) ) {
                    alt347=2;
                }


                switch (alt347) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3156:17: ~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY )
            	    {
            	    if ( (input.LA(1) >= ELLIPSIS && input.LA(1) <= RSQUARE)||(input.LA(1) >= EQUAL && input.LA(1) <= LESSTHANOREQUALTO)||input.LA(1)==GREATERTHANOREQUALTO||(input.LA(1) >= DIVIDE && input.LA(1) <= LITERAL_typeid) ) {
            	        input.consume();
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return ;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;
            	case 2 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3157:17: lazy_template
            	    {
            	    pushFollow(FOLLOW_lazy_template_in_lazy_template57493);
            	    lazy_template();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop347;
                }
            } while (true);


            }


            match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_lazy_template57528); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("lazy_template", 213);
        }
        return ;
    }
    // $ANTLR end "lazy_template"



    // $ANTLR start "literal_asm"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3164:1: protected literal_asm : ( LITERAL_asm | LITERAL__asm | LITERAL___asm | LITERAL___asm__ );
    public final void literal_asm() throws RecognitionException {
        traceIn("literal_asm", 214);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3164:13: ( LITERAL_asm | LITERAL__asm | LITERAL___asm | LITERAL___asm__ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( (input.LA(1) >= LITERAL_asm && input.LA(1) <= LITERAL___asm) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_asm", 214);
        }
        return ;
    }
    // $ANTLR end "literal_asm"



    // $ANTLR start "literal_cdecl"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3167:1: protected literal_cdecl : ( LITERAL__cdecl | LITERAL___cdecl );
    public final void literal_cdecl() throws RecognitionException {
        traceIn("literal_cdecl", 215);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3167:15: ( LITERAL__cdecl | LITERAL___cdecl )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( (input.LA(1) >= LITERAL__cdecl && input.LA(1) <= LITERAL___cdecl) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_cdecl", 215);
        }
        return ;
    }
    // $ANTLR end "literal_cdecl"



    // $ANTLR start "literal_const"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3170:1: protected literal_const : ( LITERAL_const | LITERAL___const | LITERAL___const__ );
    public final void literal_const() throws RecognitionException {
        traceIn("literal_const", 216);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3170:15: ( LITERAL_const | LITERAL___const | LITERAL___const__ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( (input.LA(1) >= LITERAL_const && input.LA(1) <= LITERAL___const) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_const", 216);
        }
        return ;
    }
    // $ANTLR end "literal_const"



    // $ANTLR start "literal_declspec"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3173:1: protected literal_declspec : ( LITERAL__declspec | LITERAL___declspec );
    public final void literal_declspec() throws RecognitionException {
        traceIn("literal_declspec", 217);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3173:18: ( LITERAL__declspec | LITERAL___declspec )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( (input.LA(1) >= LITERAL__declspec && input.LA(1) <= LITERAL___declspec) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_declspec", 217);
        }
        return ;
    }
    // $ANTLR end "literal_declspec"



    // $ANTLR start "literal_far"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3176:1: protected literal_far : ( LITERAL__far | LITERAL___far );
    public final void literal_far() throws RecognitionException {
        traceIn("literal_far", 218);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3176:13: ( LITERAL__far | LITERAL___far )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( (input.LA(1) >= LITERAL__far && input.LA(1) <= LITERAL___far) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_far", 218);
        }
        return ;
    }
    // $ANTLR end "literal_far"



    // $ANTLR start "literal_inline"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3179:1: protected literal_inline : ( LITERAL_inline | LITERAL__inline | LITERAL___inline | LITERAL___inline__ | LITERAL___forceinline );
    public final void literal_inline() throws RecognitionException {
        traceIn("literal_inline", 219);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3179:16: ( LITERAL_inline | LITERAL__inline | LITERAL___inline | LITERAL___inline__ | LITERAL___forceinline )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( (input.LA(1) >= LITERAL_inline && input.LA(1) <= LITERAL___inline)||input.LA(1)==LITERAL___forceinline ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_inline", 219);
        }
        return ;
    }
    // $ANTLR end "literal_inline"



    // $ANTLR start "literal_int64"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3182:1: protected literal_int64 : ( LITERAL__int64 | LITERAL___int64 );
    public final void literal_int64() throws RecognitionException {
        traceIn("literal_int64", 220);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3182:15: ( LITERAL__int64 | LITERAL___int64 )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( (input.LA(1) >= LITERAL__int64 && input.LA(1) <= LITERAL___int64) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_int64", 220);
        }
        return ;
    }
    // $ANTLR end "literal_int64"



    // $ANTLR start "literal_signed"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3185:1: protected literal_signed : ( LITERAL_signed | LITERAL___signed | LITERAL___signed__ );
    public final void literal_signed() throws RecognitionException {
        traceIn("literal_signed", 221);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3185:15: ( LITERAL_signed | LITERAL___signed | LITERAL___signed__ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( (input.LA(1) >= LITERAL_signed && input.LA(1) <= LITERAL___signed) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_signed", 221);
        }
        return ;
    }
    // $ANTLR end "literal_signed"



    // $ANTLR start "literal_unsigned"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3188:1: protected literal_unsigned : ( LITERAL_unsigned | LITERAL___unsigned__ );
    public final void literal_unsigned() throws RecognitionException {
        traceIn("literal_unsigned", 222);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3188:17: ( LITERAL_unsigned | LITERAL___unsigned__ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( (input.LA(1) >= LITERAL_unsigned && input.LA(1) <= LITERAL___unsigned__) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_unsigned", 222);
        }
        return ;
    }
    // $ANTLR end "literal_unsigned"



    // $ANTLR start "literal_near"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3191:1: protected literal_near : ( LITERAL__near | LITERAL___near );
    public final void literal_near() throws RecognitionException {
        traceIn("literal_near", 223);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3191:14: ( LITERAL__near | LITERAL___near )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( (input.LA(1) >= LITERAL__near && input.LA(1) <= LITERAL___near) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_near", 223);
        }
        return ;
    }
    // $ANTLR end "literal_near"



    // $ANTLR start "literal_pascal"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3194:1: protected literal_pascal : ( LITERAL_pascal | LITERAL__pascal | LITERAL___pascal );
    public final void literal_pascal() throws RecognitionException {
        traceIn("literal_pascal", 224);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3194:16: ( LITERAL_pascal | LITERAL__pascal | LITERAL___pascal )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( (input.LA(1) >= LITERAL_pascal && input.LA(1) <= LITERAL___pascal) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_pascal", 224);
        }
        return ;
    }
    // $ANTLR end "literal_pascal"



    // $ANTLR start "literal_stdcall"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3197:1: protected literal_stdcall : ( LITERAL__stdcall | LITERAL___stdcall );
    public final void literal_stdcall() throws RecognitionException {
        traceIn("literal_stdcall", 225);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3197:17: ( LITERAL__stdcall | LITERAL___stdcall )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( (input.LA(1) >= LITERAL__stdcall && input.LA(1) <= LITERAL___stdcall) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_stdcall", 225);
        }
        return ;
    }
    // $ANTLR end "literal_stdcall"



    // $ANTLR start "literal_clrcall"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3200:1: protected literal_clrcall : LITERAL___clrcall ;
    public final void literal_clrcall() throws RecognitionException {
        traceIn("literal_clrcall", 226);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3200:17: ( LITERAL___clrcall )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3200:19: LITERAL___clrcall
            {
            match(input,LITERAL___clrcall,FOLLOW_LITERAL___clrcall_in_literal_clrcall57739); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_clrcall", 226);
        }
        return ;
    }
    // $ANTLR end "literal_clrcall"



    // $ANTLR start "literal_volatile"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3203:1: protected literal_volatile : ( LITERAL_volatile | LITERAL___volatile | LITERAL___volatile__ );
    public final void literal_volatile() throws RecognitionException {
        traceIn("literal_volatile", 227);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3203:18: ( LITERAL_volatile | LITERAL___volatile | LITERAL___volatile__ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( (input.LA(1) >= LITERAL_volatile && input.LA(1) <= LITERAL___volatile) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_volatile", 227);
        }
        return ;
    }
    // $ANTLR end "literal_volatile"



    // $ANTLR start "literal_typeof"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3206:1: protected literal_typeof : ( LITERAL_typeof | LITERAL___typeof | LITERAL___typeof__ );
    public final void literal_typeof() throws RecognitionException {
        traceIn("literal_typeof", 228);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3206:16: ( LITERAL_typeof | LITERAL___typeof | LITERAL___typeof__ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( (input.LA(1) >= LITERAL_typeof && input.LA(1) <= LITERAL___typeof) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_typeof", 228);
        }
        return ;
    }
    // $ANTLR end "literal_typeof"



    // $ANTLR start "literal_restrict"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3209:1: protected literal_restrict : ( LITERAL_restrict | LITERAL___restrict | LITERAL___restrict__ );
    public final void literal_restrict() throws RecognitionException {
        traceIn("literal_restrict", 229);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3209:18: ( LITERAL_restrict | LITERAL___restrict | LITERAL___restrict__ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( (input.LA(1) >= LITERAL_restrict && input.LA(1) <= LITERAL___restrict)||input.LA(1)==LITERAL___restrict__ ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_restrict", 229);
        }
        return ;
    }
    // $ANTLR end "literal_restrict"



    // $ANTLR start "literal_complex"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3212:1: protected literal_complex : ( LITERAL__Complex | LITERAL___complex__ | LITERAL___complex );
    public final void literal_complex() throws RecognitionException {
        traceIn("literal_complex", 230);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3212:17: ( LITERAL__Complex | LITERAL___complex__ | LITERAL___complex )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( input.LA(1)==LITERAL___complex__||input.LA(1)==LITERAL__Complex||input.LA(1)==LITERAL___complex ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_complex", 230);
        }
        return ;
    }
    // $ANTLR end "literal_complex"



    // $ANTLR start "literal_attribute"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3215:1: protected literal_attribute : ( LITERAL___attribute | LITERAL___attribute__ );
    public final void literal_attribute() throws RecognitionException {
        traceIn("literal_attribute", 231);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3215:19: ( LITERAL___attribute | LITERAL___attribute__ )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( input.LA(1)==LITERAL___attribute__||input.LA(1)==LITERAL___attribute ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_attribute", 231);
        }
        return ;
    }
    // $ANTLR end "literal_attribute"



    // $ANTLR start "literal_try"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3218:1: protected literal_try : ( LITERAL_try | LITERAL___try );
    public final void literal_try() throws RecognitionException {
        traceIn("literal_try", 232);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3218:13: ( LITERAL_try | LITERAL___try )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( input.LA(1)==LITERAL_try||input.LA(1)==LITERAL___try ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_try", 232);
        }
        return ;
    }
    // $ANTLR end "literal_try"



    // $ANTLR start "literal_finally"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3221:1: protected literal_finally : LITERAL___finally ;
    public final void literal_finally() throws RecognitionException {
        traceIn("literal_finally", 233);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3221:17: ( LITERAL___finally )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3221:19: LITERAL___finally
            {
            match(input,LITERAL___finally,FOLLOW_LITERAL___finally_in_literal_finally57850); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_finally", 233);
        }
        return ;
    }
    // $ANTLR end "literal_finally"



    // $ANTLR start "literal_decltype"
    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3224:1: protected literal_decltype : ( LITERAL_decltype | LITERAL___decltype );
    public final void literal_decltype() throws RecognitionException {
        traceIn("literal_decltype", 234);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3224:18: ( LITERAL_decltype | LITERAL___decltype )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:
            {
            if ( input.LA(1)==LITERAL_decltype||input.LA(1)==LITERAL___decltype ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
            traceOut("literal_decltype", 234);
        }
        return ;
    }
    // $ANTLR end "literal_decltype"

    // $ANTLR start synpred1_CXXParser
    public final void synpred1_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred1_CXXParser_fragment", 235);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:322:9: ( expression SEMICOLON )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:322:10: expression SEMICOLON
            {
            pushFollow(FOLLOW_expression_in_synpred1_CXXParser1692);
            expression();

            state._fsp--;
            if (state.failed) return ;

            match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred1_CXXParser1694); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred1_CXXParser_fragment", 235);
        }
    }
    // $ANTLR end synpred1_CXXParser

    // $ANTLR start synpred2_CXXParser
    public final void synpred2_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred2_CXXParser_fragment", 236);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:355:11: ( LITERAL_else )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:355:12: LITERAL_else
            {
            match(input,LITERAL_else,FOLLOW_LITERAL_else_in_synpred2_CXXParser2600); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred2_CXXParser_fragment", 236);
        }
    }
    // $ANTLR end synpred2_CXXParser

    // $ANTLR start synpred3_CXXParser
    public final void synpred3_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred3_CXXParser_fragment", 237);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:377:9: ( ( attribute_specifiers )? ( type_specifier )+ declarator EQUAL )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:377:10: ( attribute_specifiers )? ( type_specifier )+ declarator EQUAL
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:377:10: ( attribute_specifiers )?
            int alt348=2;
            int LA348_0 = input.LA(1);

            if ( (LA348_0==LSQUARE||(LA348_0 >= LITERAL___extension__ && LA348_0 <= LITERAL___attribute__)||LA348_0==LITERAL_alignas) ) {
                alt348=1;
            }
            switch (alt348) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:377:10: attribute_specifiers
                    {
                    pushFollow(FOLLOW_attribute_specifiers_in_synpred3_CXXParser3300);
                    attribute_specifiers();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:377:32: ( type_specifier )+
            int cnt349=0;
            loop349:
            do {
                int alt349=2;
                switch ( input.LA(1) ) {
                case SCOPE:
                    {
                    int LA349_4 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt349=1;
                    }


                    }
                    break;
                case IDENT:
                    {
                    int LA349_5 = input.LA(2);

                    if ( (( action.type_specifier_already_present(input) )) ) {
                        alt349=1;
                    }


                    }
                    break;
                case LITERAL_typeof:
                case LITERAL___typeof__:
                case LITERAL___typeof:
                case LITERAL_enum:
                case LITERAL_typename:
                case LITERAL_auto:
                case LITERAL_const:
                case LITERAL___const__:
                case LITERAL___const:
                case LITERAL_volatile:
                case LITERAL_char:
                case LITERAL_wchar_t:
                case LITERAL_bool:
                case LITERAL_short:
                case LITERAL_int:
                case LITERAL_long:
                case LITERAL_signed:
                case LITERAL_unsigned:
                case LITERAL_float:
                case LITERAL_double:
                case LITERAL_void:
                case LITERAL_class:
                case LITERAL_struct:
                case LITERAL_union:
                case LITERAL_decltype:
                case LITERAL_char16_t:
                case LITERAL_char32_t:
                case LITERAL___decltype:
                case LITERAL___builtin_va_list:
                    {
                    alt349=1;
                    }
                    break;

                }

                switch (alt349) {
            	case 1 :
            	    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:377:32: type_specifier
            	    {
            	    pushFollow(FOLLOW_type_specifier_in_synpred3_CXXParser3303);
            	    type_specifier();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    if ( cnt349 >= 1 ) break loop349;
            	    if (state.backtracking>0) {state.failed=true; return ;}
                        EarlyExitException eee =
                            new EarlyExitException(349, input);
                        throw eee;
                }
                cnt349++;
            } while (true);


            pushFollow(FOLLOW_declarator_in_synpred3_CXXParser3306);
            declarator();

            state._fsp--;
            if (state.failed) return ;

            match(input,EQUAL,FOLLOW_EQUAL_in_synpred3_CXXParser3308); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred3_CXXParser_fragment", 237);
        }
    }
    // $ANTLR end synpred3_CXXParser

    // $ANTLR start synpred4_CXXParser
    public final void synpred4_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred4_CXXParser_fragment", 238);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:423:13: ( for_range_declaration COLON )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:423:14: for_range_declaration COLON
            {
            pushFollow(FOLLOW_for_range_declaration_in_synpred4_CXXParser4894);
            for_range_declaration();

            state._fsp--;
            if (state.failed) return ;

            match(input,COLON,FOLLOW_COLON_in_synpred4_CXXParser4896); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred4_CXXParser_fragment", 238);
        }
    }
    // $ANTLR end synpred4_CXXParser

    // $ANTLR start synpred5_CXXParser
    public final void synpred5_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred5_CXXParser_fragment", 239);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:446:9: ( simple_declaration[blockscope_decl] )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:446:10: simple_declaration[blockscope_decl]
            {
            pushFollow(FOLLOW_simple_declaration_in_synpred5_CXXParser5579);
            simple_declaration(blockscope_decl);

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred5_CXXParser_fragment", 239);
        }
    }
    // $ANTLR end synpred5_CXXParser

    // $ANTLR start synpred6_CXXParser
    public final void synpred6_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred6_CXXParser_fragment", 240);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:595:9: ( LITERAL_OPERATOR operator_id )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:595:10: LITERAL_OPERATOR operator_id
            {
            match(input,LITERAL_OPERATOR,FOLLOW_LITERAL_OPERATOR_in_synpred6_CXXParser8951); if (state.failed) return ;

            pushFollow(FOLLOW_operator_id_in_synpred6_CXXParser8953);
            operator_id();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred6_CXXParser_fragment", 240);
        }
    }
    // $ANTLR end synpred6_CXXParser

    // $ANTLR start synpred7_CXXParser
    public final void synpred7_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred7_CXXParser_fragment", 241);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:610:21: ( LITERAL_OPERATOR operator_id )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:610:22: LITERAL_OPERATOR operator_id
            {
            match(input,LITERAL_OPERATOR,FOLLOW_LITERAL_OPERATOR_in_synpred7_CXXParser9133); if (state.failed) return ;

            pushFollow(FOLLOW_operator_id_in_synpred7_CXXParser9135);
            operator_id();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred7_CXXParser_fragment", 241);
        }
    }
    // $ANTLR end synpred7_CXXParser

    // $ANTLR start synpred8_CXXParser
    public final void synpred8_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred8_CXXParser_fragment", 242);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:625:13: ( simple_template_id_or_IDENT SCOPE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:625:14: simple_template_id_or_IDENT SCOPE
            {
            pushFollow(FOLLOW_simple_template_id_or_IDENT_in_synpred8_CXXParser9400);
            simple_template_id_or_IDENT();

            state._fsp--;
            if (state.failed) return ;

            match(input,SCOPE,FOLLOW_SCOPE_in_synpred8_CXXParser9402); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred8_CXXParser_fragment", 242);
        }
    }
    // $ANTLR end synpred8_CXXParser

    // $ANTLR start synpred9_CXXParser
    public final void synpred9_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred9_CXXParser_fragment", 243);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:630:13: ( LITERAL_OPERATOR STRING_LITERAL IDENT )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:630:14: LITERAL_OPERATOR STRING_LITERAL IDENT
            {
            match(input,LITERAL_OPERATOR,FOLLOW_LITERAL_OPERATOR_in_synpred9_CXXParser9473); if (state.failed) return ;

            match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_synpred9_CXXParser9475); if (state.failed) return ;

            match(input,IDENT,FOLLOW_IDENT_in_synpred9_CXXParser9477); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred9_CXXParser_fragment", 243);
        }
    }
    // $ANTLR end synpred9_CXXParser

    // $ANTLR start synpred10_CXXParser
    public final void synpred10_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred10_CXXParser_fragment", 244);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:647:17: ( LITERAL_template lookup_simple_template_id_nocheck SCOPE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:647:18: LITERAL_template lookup_simple_template_id_nocheck SCOPE
            {
            match(input,LITERAL_template,FOLLOW_LITERAL_template_in_synpred10_CXXParser9619); if (state.failed) return ;

            pushFollow(FOLLOW_lookup_simple_template_id_nocheck_in_synpred10_CXXParser9621);
            lookup_simple_template_id_nocheck();

            state._fsp--;
            if (state.failed) return ;

            match(input,SCOPE,FOLLOW_SCOPE_in_synpred10_CXXParser9623); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred10_CXXParser_fragment", 244);
        }
    }
    // $ANTLR end synpred10_CXXParser

    // $ANTLR start synpred11_CXXParser
    public final void synpred11_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred11_CXXParser_fragment", 245);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:657:9: ( LITERAL_OPERATOR operator_id )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:657:10: LITERAL_OPERATOR operator_id
            {
            match(input,LITERAL_OPERATOR,FOLLOW_LITERAL_OPERATOR_in_synpred11_CXXParser9742); if (state.failed) return ;

            pushFollow(FOLLOW_operator_id_in_synpred11_CXXParser9744);
            operator_id();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred11_CXXParser_fragment", 245);
        }
    }
    // $ANTLR end synpred11_CXXParser

    // $ANTLR start synpred12_CXXParser
    public final void synpred12_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred12_CXXParser_fragment", 246);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:676:13: ( simple_template_id_or_IDENT SCOPE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:676:14: simple_template_id_or_IDENT SCOPE
            {
            pushFollow(FOLLOW_simple_template_id_or_IDENT_in_synpred12_CXXParser9913);
            simple_template_id_or_IDENT();

            state._fsp--;
            if (state.failed) return ;

            match(input,SCOPE,FOLLOW_SCOPE_in_synpred12_CXXParser9915); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred12_CXXParser_fragment", 246);
        }
    }
    // $ANTLR end synpred12_CXXParser

    // $ANTLR start synpred13_CXXParser
    public final void synpred13_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred13_CXXParser_fragment", 247);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:680:13: ( LITERAL_OPERATOR STRING_LITERAL IDENT )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:680:14: LITERAL_OPERATOR STRING_LITERAL IDENT
            {
            match(input,LITERAL_OPERATOR,FOLLOW_LITERAL_OPERATOR_in_synpred13_CXXParser9975); if (state.failed) return ;

            match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_synpred13_CXXParser9977); if (state.failed) return ;

            match(input,IDENT,FOLLOW_IDENT_in_synpred13_CXXParser9979); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred13_CXXParser_fragment", 247);
        }
    }
    // $ANTLR end synpred13_CXXParser

    // $ANTLR start synpred14_CXXParser
    public final void synpred14_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred14_CXXParser_fragment", 248);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:710:13: ( LITERAL_template lookup_simple_template_id_nocheck SCOPE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:710:14: LITERAL_template lookup_simple_template_id_nocheck SCOPE
            {
            match(input,LITERAL_template,FOLLOW_LITERAL_template_in_synpred14_CXXParser10122); if (state.failed) return ;

            pushFollow(FOLLOW_lookup_simple_template_id_nocheck_in_synpred14_CXXParser10124);
            lookup_simple_template_id_nocheck();

            state._fsp--;
            if (state.failed) return ;

            match(input,SCOPE,FOLLOW_SCOPE_in_synpred14_CXXParser10126); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred14_CXXParser_fragment", 248);
        }
    }
    // $ANTLR end synpred14_CXXParser

    // $ANTLR start synpred15_CXXParser
    public final void synpred15_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred15_CXXParser_fragment", 249);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:713:13: ( IDENT SCOPE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:713:14: IDENT SCOPE
            {
            match(input,IDENT,FOLLOW_IDENT_in_synpred15_CXXParser10177); if (state.failed) return ;

            match(input,SCOPE,FOLLOW_SCOPE_in_synpred15_CXXParser10179); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred15_CXXParser_fragment", 249);
        }
    }
    // $ANTLR end synpred15_CXXParser

    // $ANTLR start synpred16_CXXParser
    public final void synpred16_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred16_CXXParser_fragment", 250);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:717:13: ( lookup_simple_template_id SCOPE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:717:14: lookup_simple_template_id SCOPE
            {
            pushFollow(FOLLOW_lookup_simple_template_id_in_synpred16_CXXParser10308);
            lookup_simple_template_id();

            state._fsp--;
            if (state.failed) return ;

            match(input,SCOPE,FOLLOW_SCOPE_in_synpred16_CXXParser10310); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred16_CXXParser_fragment", 250);
        }
    }
    // $ANTLR end synpred16_CXXParser

    // $ANTLR start synpred17_CXXParser
    public final void synpred17_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred17_CXXParser_fragment", 251);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:762:17: ( constructor_declarator )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:762:18: constructor_declarator
            {
            pushFollow(FOLLOW_constructor_declarator_in_synpred17_CXXParser10842);
            constructor_declarator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred17_CXXParser_fragment", 251);
        }
    }
    // $ANTLR end synpred17_CXXParser

    // $ANTLR start synpred18_CXXParser
    public final void synpred18_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred18_CXXParser_fragment", 252);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:802:13: ( constructor_declarator )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:802:14: constructor_declarator
            {
            pushFollow(FOLLOW_constructor_declarator_in_synpred18_CXXParser11632);
            constructor_declarator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred18_CXXParser_fragment", 252);
        }
    }
    // $ANTLR end synpred18_CXXParser

    // $ANTLR start synpred19_CXXParser
    public final void synpred19_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred19_CXXParser_fragment", 253);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:915:9: ( LITERAL_class SCOPE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:915:10: LITERAL_class SCOPE
            {
            match(input,LITERAL_class,FOLLOW_LITERAL_class_in_synpred19_CXXParser13806); if (state.failed) return ;

            match(input,SCOPE,FOLLOW_SCOPE_in_synpred19_CXXParser13808); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred19_CXXParser_fragment", 253);
        }
    }
    // $ANTLR end synpred19_CXXParser

    // $ANTLR start synpred20_CXXParser
    public final void synpred20_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred20_CXXParser_fragment", 254);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:919:9: ( class_head LCURLY )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:919:10: class_head LCURLY
            {
            pushFollow(FOLLOW_class_head_in_synpred20_CXXParser13850);
            class_head();

            state._fsp--;
            if (state.failed) return ;

            match(input,LCURLY,FOLLOW_LCURLY_in_synpred20_CXXParser13852); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred20_CXXParser_fragment", 254);
        }
    }
    // $ANTLR end synpred20_CXXParser

    // $ANTLR start synpred21_CXXParser
    public final void synpred21_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred21_CXXParser_fragment", 255);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:923:9: ( LITERAL_enum ( attribute_specifiers )? ( IDENT )? LCURLY )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:923:10: LITERAL_enum ( attribute_specifiers )? ( IDENT )? LCURLY
            {
            match(input,LITERAL_enum,FOLLOW_LITERAL_enum_in_synpred21_CXXParser13894); if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:923:23: ( attribute_specifiers )?
            int alt350=2;
            int LA350_0 = input.LA(1);

            if ( (LA350_0==LSQUARE||(LA350_0 >= LITERAL___extension__ && LA350_0 <= LITERAL___attribute__)||LA350_0==LITERAL_alignas) ) {
                alt350=1;
            }
            switch (alt350) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:923:23: attribute_specifiers
                    {
                    pushFollow(FOLLOW_attribute_specifiers_in_synpred21_CXXParser13896);
                    attribute_specifiers();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:923:45: ( IDENT )?
            int alt351=2;
            int LA351_0 = input.LA(1);

            if ( (LA351_0==IDENT) ) {
                alt351=1;
            }
            switch (alt351) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:923:45: IDENT
                    {
                    match(input,IDENT,FOLLOW_IDENT_in_synpred21_CXXParser13899); if (state.failed) return ;

                    }
                    break;

            }


            match(input,LCURLY,FOLLOW_LCURLY_in_synpred21_CXXParser13902); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred21_CXXParser_fragment", 255);
        }
    }
    // $ANTLR end synpred21_CXXParser

    // $ANTLR start synpred22_CXXParser
    public final void synpred22_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred22_CXXParser_fragment", 256);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:991:17: ( lookup_nested_name_specifier )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:991:18: lookup_nested_name_specifier
            {
            pushFollow(FOLLOW_lookup_nested_name_specifier_in_synpred22_CXXParser15718);
            lookup_nested_name_specifier();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred22_CXXParser_fragment", 256);
        }
    }
    // $ANTLR end synpred22_CXXParser

    // $ANTLR start synpred23_CXXParser
    public final void synpred23_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred23_CXXParser_fragment", 257);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1042:13: ( IDENT SCOPE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1042:14: IDENT SCOPE
            {
            match(input,IDENT,FOLLOW_IDENT_in_synpred23_CXXParser16699); if (state.failed) return ;

            match(input,SCOPE,FOLLOW_SCOPE_in_synpred23_CXXParser16701); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred23_CXXParser_fragment", 257);
        }
    }
    // $ANTLR end synpred23_CXXParser

    // $ANTLR start synpred24_CXXParser
    public final void synpred24_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred24_CXXParser_fragment", 258);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1053:13: ( IDENT SCOPE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1053:14: IDENT SCOPE
            {
            match(input,IDENT,FOLLOW_IDENT_in_synpred24_CXXParser16906); if (state.failed) return ;

            match(input,SCOPE,FOLLOW_SCOPE_in_synpred24_CXXParser16908); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred24_CXXParser_fragment", 258);
        }
    }
    // $ANTLR end synpred24_CXXParser

    // $ANTLR start synpred25_CXXParser
    public final void synpred25_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred25_CXXParser_fragment", 259);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1056:13: ( IDENT )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1056:14: IDENT
            {
            match(input,IDENT,FOLLOW_IDENT_in_synpred25_CXXParser16955); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred25_CXXParser_fragment", 259);
        }
    }
    // $ANTLR end synpred25_CXXParser

    // $ANTLR start synpred26_CXXParser
    public final void synpred26_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred26_CXXParser_fragment", 260);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1228:10: ( simple_template_id_or_IDENT SCOPE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1228:11: simple_template_id_or_IDENT SCOPE
            {
            pushFollow(FOLLOW_simple_template_id_or_IDENT_in_synpred26_CXXParser19398);
            simple_template_id_or_IDENT();

            state._fsp--;
            if (state.failed) return ;

            match(input,SCOPE,FOLLOW_SCOPE_in_synpred26_CXXParser19400); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred26_CXXParser_fragment", 260);
        }
    }
    // $ANTLR end synpred26_CXXParser

    // $ANTLR start synpred27_CXXParser
    public final void synpred27_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred27_CXXParser_fragment", 261);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1284:13: ( type_id )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1284:14: type_id
            {
            pushFollow(FOLLOW_type_id_in_synpred27_CXXParser20446);
            type_id();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred27_CXXParser_fragment", 261);
        }
    }
    // $ANTLR end synpred27_CXXParser

    // $ANTLR start synpred28_CXXParser
    public final void synpred28_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred28_CXXParser_fragment", 262);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1407:9: ( ptr_operator )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1407:10: ptr_operator
            {
            pushFollow(FOLLOW_ptr_operator_in_synpred28_CXXParser21825);
            ptr_operator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred28_CXXParser_fragment", 262);
        }
    }
    // $ANTLR end synpred28_CXXParser

    // $ANTLR start synpred29_CXXParser
    public final void synpred29_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred29_CXXParser_fragment", 263);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1449:6: ( abstract_declarator )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1449:7: abstract_declarator
            {
            pushFollow(FOLLOW_abstract_declarator_in_synpred29_CXXParser22831);
            abstract_declarator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred29_CXXParser_fragment", 263);
        }
    }
    // $ANTLR end synpred29_CXXParser

    // $ANTLR start synpred30_CXXParser
    public final void synpred30_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred30_CXXParser_fragment", 264);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1461:9: ( constructor_declarator )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1461:10: constructor_declarator
            {
            pushFollow(FOLLOW_constructor_declarator_in_synpred30_CXXParser23030);
            constructor_declarator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred30_CXXParser_fragment", 264);
        }
    }
    // $ANTLR end synpred30_CXXParser

    // $ANTLR start synpred31_CXXParser
    public final void synpred31_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred31_CXXParser_fragment", 265);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1505:41: ( abstract_declarator )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1505:42: abstract_declarator
            {
            pushFollow(FOLLOW_abstract_declarator_in_synpred31_CXXParser23776);
            abstract_declarator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred31_CXXParser_fragment", 265);
        }
    }
    // $ANTLR end synpred31_CXXParser

    // $ANTLR start synpred32_CXXParser
    public final void synpred32_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred32_CXXParser_fragment", 266);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1519:9: ( LPAREN abstract_declarator RPAREN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1519:10: LPAREN abstract_declarator RPAREN
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_synpred32_CXXParser24215); if (state.failed) return ;

            pushFollow(FOLLOW_abstract_declarator_in_synpred32_CXXParser24217);
            abstract_declarator();

            state._fsp--;
            if (state.failed) return ;

            match(input,RPAREN,FOLLOW_RPAREN_in_synpred32_CXXParser24219); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred32_CXXParser_fragment", 266);
        }
    }
    // $ANTLR end synpred32_CXXParser

    // $ANTLR start synpred33_CXXParser
    public final void synpred33_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred33_CXXParser_fragment", 267);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1546:9: ( declarator )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1546:9: declarator
            {
            pushFollow(FOLLOW_declarator_in_synpred33_CXXParser25196);
            declarator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred33_CXXParser_fragment", 267);
        }
    }
    // $ANTLR end synpred33_CXXParser

    // $ANTLR start synpred34_CXXParser
    public final void synpred34_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred34_CXXParser_fragment", 268);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1557:9: ( ptr_operator )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1557:10: ptr_operator
            {
            pushFollow(FOLLOW_ptr_operator_in_synpred34_CXXParser25489);
            ptr_operator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred34_CXXParser_fragment", 268);
        }
    }
    // $ANTLR end synpred34_CXXParser

    // $ANTLR start synpred35_CXXParser
    public final void synpred35_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred35_CXXParser_fragment", 269);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1587:13: ( parameters_and_qualifiers )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1587:14: parameters_and_qualifiers
            {
            pushFollow(FOLLOW_parameters_and_qualifiers_in_synpred35_CXXParser26161);
            parameters_and_qualifiers();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred35_CXXParser_fragment", 269);
        }
    }
    // $ANTLR end synpred35_CXXParser

    // $ANTLR start synpred36_CXXParser
    public final void synpred36_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred36_CXXParser_fragment", 270);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1668:10: ( abstract_declarator )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1668:11: abstract_declarator
            {
            pushFollow(FOLLOW_abstract_declarator_in_synpred36_CXXParser28354);
            abstract_declarator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred36_CXXParser_fragment", 270);
        }
    }
    // $ANTLR end synpred36_CXXParser

    // $ANTLR start synpred37_CXXParser
    public final void synpred37_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred37_CXXParser_fragment", 271);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1772:9: ( ASSIGNEQUAL )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1772:10: ASSIGNEQUAL
            {
            match(input,ASSIGNEQUAL,FOLLOW_ASSIGNEQUAL_in_synpred37_CXXParser31853); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred37_CXXParser_fragment", 271);
        }
    }
    // $ANTLR end synpred37_CXXParser

    // $ANTLR start synpred38_CXXParser
    public final void synpred38_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred38_CXXParser_fragment", 272);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1782:14: ( COLON )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1782:15: COLON
            {
            match(input,COLON,FOLLOW_COLON_in_synpred38_CXXParser32141); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred38_CXXParser_fragment", 272);
        }
    }
    // $ANTLR end synpred38_CXXParser

    // $ANTLR start synpred39_CXXParser
    public final void synpred39_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred39_CXXParser_fragment", 273);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1931:10: ( ( lookup_simple_template_id | IDENT ) SCOPE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1931:11: ( lookup_simple_template_id | IDENT ) SCOPE
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1931:11: ( lookup_simple_template_id | IDENT )
            int alt352=2;
            int LA352_0 = input.LA(1);

            if ( (LA352_0==IDENT) ) {
                int LA352_1 = input.LA(2);

                if ( (LA352_1==LESSTHAN) ) {
                    alt352=1;
                }
                else if ( (LA352_1==SCOPE) ) {
                    alt352=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 352, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 352, 0, input);

                throw nvae;

            }
            switch (alt352) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1931:12: lookup_simple_template_id
                    {
                    pushFollow(FOLLOW_lookup_simple_template_id_in_synpred39_CXXParser36021);
                    lookup_simple_template_id();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:1931:40: IDENT
                    {
                    match(input,IDENT,FOLLOW_IDENT_in_synpred39_CXXParser36025); if (state.failed) return ;

                    }
                    break;

            }


            match(input,SCOPE,FOLLOW_SCOPE_in_synpred39_CXXParser36028); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred39_CXXParser_fragment", 273);
        }
    }
    // $ANTLR end synpred39_CXXParser

    // $ANTLR start synpred40_CXXParser
    public final void synpred40_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred40_CXXParser_fragment", 274);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2025:13: ( ( IDENT )? COLON )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2025:14: ( IDENT )? COLON
            {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2025:14: ( IDENT )?
            int alt353=2;
            int LA353_0 = input.LA(1);

            if ( (LA353_0==IDENT) ) {
                alt353=1;
            }
            switch (alt353) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2025:14: IDENT
                    {
                    match(input,IDENT,FOLLOW_IDENT_in_synpred40_CXXParser37729); if (state.failed) return ;

                    }
                    break;

            }


            match(input,COLON,FOLLOW_COLON_in_synpred40_CXXParser37732); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred40_CXXParser_fragment", 274);
        }
    }
    // $ANTLR end synpred40_CXXParser

    // $ANTLR start synpred41_CXXParser
    public final void synpred41_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred41_CXXParser_fragment", 275);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2033:13: ( constructor_declarator )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2033:14: constructor_declarator
            {
            pushFollow(FOLLOW_constructor_declarator_in_synpred41_CXXParser37992);
            constructor_declarator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred41_CXXParser_fragment", 275);
        }
    }
    // $ANTLR end synpred41_CXXParser

    // $ANTLR start synpred42_CXXParser
    public final void synpred42_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred42_CXXParser_fragment", 276);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2215:10: ( ptr_operator )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2215:11: ptr_operator
            {
            pushFollow(FOLLOW_ptr_operator_in_synpred42_CXXParser42741);
            ptr_operator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred42_CXXParser_fragment", 276);
        }
    }
    // $ANTLR end synpred42_CXXParser

    // $ANTLR start synpred43_CXXParser
    public final void synpred43_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred43_CXXParser_fragment", 277);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2294:9: ( LITERAL_new LSQUARE RSQUARE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2294:10: LITERAL_new LSQUARE RSQUARE
            {
            match(input,LITERAL_new,FOLLOW_LITERAL_new_in_synpred43_CXXParser45309); if (state.failed) return ;

            match(input,LSQUARE,FOLLOW_LSQUARE_in_synpred43_CXXParser45311); if (state.failed) return ;

            match(input,RSQUARE,FOLLOW_RSQUARE_in_synpred43_CXXParser45313); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred43_CXXParser_fragment", 277);
        }
    }
    // $ANTLR end synpred43_CXXParser

    // $ANTLR start synpred44_CXXParser
    public final void synpred44_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred44_CXXParser_fragment", 278);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2296:9: ( LITERAL_delete LSQUARE RSQUARE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2296:10: LITERAL_delete LSQUARE RSQUARE
            {
            match(input,LITERAL_delete,FOLLOW_LITERAL_delete_in_synpred44_CXXParser45346); if (state.failed) return ;

            match(input,LSQUARE,FOLLOW_LSQUARE_in_synpred44_CXXParser45348); if (state.failed) return ;

            match(input,RSQUARE,FOLLOW_RSQUARE_in_synpred44_CXXParser45350); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred44_CXXParser_fragment", 278);
        }
    }
    // $ANTLR end synpred44_CXXParser

    // $ANTLR start synpred45_CXXParser
    public final void synpred45_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred45_CXXParser_fragment", 279);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2352:5: ( LITERAL_class ( IDENT | GREATERTHAN | COMMA | ASSIGNEQUAL ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2352:6: LITERAL_class ( IDENT | GREATERTHAN | COMMA | ASSIGNEQUAL )
            {
            match(input,LITERAL_class,FOLLOW_LITERAL_class_in_synpred45_CXXParser47039); if (state.failed) return ;

            if ( input.LA(1)==ASSIGNEQUAL||input.LA(1)==COMMA||input.LA(1)==GREATERTHAN||input.LA(1)==IDENT ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        finally {
            traceOut("synpred45_CXXParser_fragment", 279);
        }
    }
    // $ANTLR end synpred45_CXXParser

    // $ANTLR start synpred46_CXXParser
    public final void synpred46_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred46_CXXParser_fragment", 280);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2413:11: ( IDENT LESSTHAN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2413:12: IDENT LESSTHAN
            {
            match(input,IDENT,FOLLOW_IDENT_in_synpred46_CXXParser48577); if (state.failed) return ;

            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_synpred46_CXXParser48579); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred46_CXXParser_fragment", 280);
        }
    }
    // $ANTLR end synpred46_CXXParser

    // $ANTLR start synpred47_CXXParser
    public final void synpred47_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred47_CXXParser_fragment", 281);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2429:11: ( IDENT LESSTHAN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2429:12: IDENT LESSTHAN
            {
            match(input,IDENT,FOLLOW_IDENT_in_synpred47_CXXParser49089); if (state.failed) return ;

            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_synpred47_CXXParser49091); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred47_CXXParser_fragment", 281);
        }
    }
    // $ANTLR end synpred47_CXXParser

    // $ANTLR start synpred48_CXXParser
    public final void synpred48_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred48_CXXParser_fragment", 282);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2488:9: ( id_expression ( ELLIPSIS )? ( COMMA | GREATERTHAN ) )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2488:10: id_expression ( ELLIPSIS )? ( COMMA | GREATERTHAN )
            {
            pushFollow(FOLLOW_id_expression_in_synpred48_CXXParser50599);
            id_expression();

            state._fsp--;
            if (state.failed) return ;

            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2488:24: ( ELLIPSIS )?
            int alt354=2;
            int LA354_0 = input.LA(1);

            if ( (LA354_0==ELLIPSIS) ) {
                alt354=1;
            }
            switch (alt354) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2488:24: ELLIPSIS
                    {
                    match(input,ELLIPSIS,FOLLOW_ELLIPSIS_in_synpred48_CXXParser50601); if (state.failed) return ;

                    }
                    break;

            }


            if ( input.LA(1)==COMMA||input.LA(1)==GREATERTHAN ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        finally {
            traceOut("synpred48_CXXParser_fragment", 282);
        }
    }
    // $ANTLR end synpred48_CXXParser

    // $ANTLR start synpred49_CXXParser
    public final void synpred49_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred49_CXXParser_fragment", 283);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2490:9: ( type_id )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2490:10: type_id
            {
            pushFollow(FOLLOW_type_id_in_synpred49_CXXParser50631);
            type_id();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred49_CXXParser_fragment", 283);
        }
    }
    // $ANTLR end synpred49_CXXParser

    // $ANTLR start synpred50_CXXParser
    public final void synpred50_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred50_CXXParser_fragment", 284);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2721:33: ( type_id )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2721:34: type_id
            {
            pushFollow(FOLLOW_type_id_in_synpred50_CXXParser53708);
            type_id();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred50_CXXParser_fragment", 284);
        }
    }
    // $ANTLR end synpred50_CXXParser

    // $ANTLR start synpred51_CXXParser
    public final void synpred51_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred51_CXXParser_fragment", 285);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2763:8: ( TILDE cast_expression )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2763:9: TILDE cast_expression
            {
            match(input,TILDE,FOLLOW_TILDE_in_synpred51_CXXParser53765); if (state.failed) return ;

            pushFollow(FOLLOW_cast_expression_in_synpred51_CXXParser53767);
            cast_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred51_CXXParser_fragment", 285);
        }
    }
    // $ANTLR end synpred51_CXXParser

    // $ANTLR start synpred52_CXXParser
    public final void synpred52_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred52_CXXParser_fragment", 286);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2766:9: ( new_expression )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2766:10: new_expression
            {
            pushFollow(FOLLOW_new_expression_in_synpred52_CXXParser53803);
            new_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred52_CXXParser_fragment", 286);
        }
    }
    // $ANTLR end synpred52_CXXParser

    // $ANTLR start synpred53_CXXParser
    public final void synpred53_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred53_CXXParser_fragment", 287);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2769:9: ( delete_expression )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2769:10: delete_expression
            {
            pushFollow(FOLLOW_delete_expression_in_synpred53_CXXParser53836);
            delete_expression();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred53_CXXParser_fragment", 287);
        }
    }
    // $ANTLR end synpred53_CXXParser

    // $ANTLR start synpred54_CXXParser
    public final void synpred54_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred54_CXXParser_fragment", 288);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2772:9: ( type_trait_literal )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2772:10: type_trait_literal
            {
            pushFollow(FOLLOW_type_trait_literal_in_synpred54_CXXParser53869);
            type_trait_literal();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred54_CXXParser_fragment", 288);
        }
    }
    // $ANTLR end synpred54_CXXParser

    // $ANTLR start synpred55_CXXParser
    public final void synpred55_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred55_CXXParser_fragment", 289);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2811:13: ( LPAREN type_id RPAREN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2811:14: LPAREN type_id RPAREN
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_synpred55_CXXParser54118); if (state.failed) return ;

            pushFollow(FOLLOW_type_id_in_synpred55_CXXParser54120);
            type_id();

            state._fsp--;
            if (state.failed) return ;

            match(input,RPAREN,FOLLOW_RPAREN_in_synpred55_CXXParser54122); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred55_CXXParser_fragment", 289);
        }
    }
    // $ANTLR end synpred55_CXXParser

    // $ANTLR start synpred56_CXXParser
    public final void synpred56_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred56_CXXParser_fragment", 290);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2835:10: ( LSQUARE | ptr_operator )
            int alt355=2;
            int LA355_0 = input.LA(1);

            if ( (LA355_0==LSQUARE) ) {
                alt355=1;
            }
            else if ( (LA355_0==STAR||LA355_0==AND||LA355_0==AMPERSAND||LA355_0==SCOPE||LA355_0==IDENT) ) {
                alt355=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 355, 0, input);

                throw nvae;

            }
            switch (alt355) {
                case 1 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2835:11: LSQUARE
                    {
                    match(input,LSQUARE,FOLLOW_LSQUARE_in_synpred56_CXXParser54255); if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2835:21: ptr_operator
                    {
                    pushFollow(FOLLOW_ptr_operator_in_synpred56_CXXParser54259);
                    ptr_operator();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        finally {
            traceOut("synpred56_CXXParser_fragment", 290);
        }
    }
    // $ANTLR end synpred56_CXXParser

    // $ANTLR start synpred57_CXXParser
    public final void synpred57_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred57_CXXParser_fragment", 291);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2840:9: ( ptr_operator )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2840:10: ptr_operator
            {
            pushFollow(FOLLOW_ptr_operator_in_synpred57_CXXParser54298);
            ptr_operator();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred57_CXXParser_fragment", 291);
        }
    }
    // $ANTLR end synpred57_CXXParser

    // $ANTLR start synpred58_CXXParser
    public final void synpred58_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred58_CXXParser_fragment", 292);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2858:13: ( LSQUARE RSQUARE )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2858:14: LSQUARE RSQUARE
            {
            match(input,LSQUARE,FOLLOW_LSQUARE_in_synpred58_CXXParser54456); if (state.failed) return ;

            match(input,RSQUARE,FOLLOW_RSQUARE_in_synpred58_CXXParser54458); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred58_CXXParser_fragment", 292);
        }
    }
    // $ANTLR end synpred58_CXXParser

    // $ANTLR start synpred59_CXXParser
    public final void synpred59_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred59_CXXParser_fragment", 293);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2867:9: ( LPAREN type_id RPAREN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:2867:10: LPAREN type_id RPAREN
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_synpred59_CXXParser54547); if (state.failed) return ;

            pushFollow(FOLLOW_type_id_in_synpred59_CXXParser54549);
            type_id();

            state._fsp--;
            if (state.failed) return ;

            match(input,RPAREN,FOLLOW_RPAREN_in_synpred59_CXXParser54551); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred59_CXXParser_fragment", 293);
        }
    }
    // $ANTLR end synpred59_CXXParser

    // $ANTLR start synpred60_CXXParser
    public final void synpred60_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred60_CXXParser_fragment", 294);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3026:13: ( LPAREN type_id RPAREN )
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3026:14: LPAREN type_id RPAREN
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_synpred60_CXXParser56088); if (state.failed) return ;

            pushFollow(FOLLOW_type_id_in_synpred60_CXXParser56090);
            type_id();

            state._fsp--;
            if (state.failed) return ;

            match(input,RPAREN,FOLLOW_RPAREN_in_synpred60_CXXParser56092); if (state.failed) return ;

            }

        }
        finally {
            traceOut("synpred60_CXXParser_fragment", 294);
        }
    }
    // $ANTLR end synpred60_CXXParser

    // $ANTLR start synpred61_CXXParser
    public final void synpred61_CXXParser_fragment() throws RecognitionException {
        traceIn("synpred61_CXXParser_fragment", 295);
        try {
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3113:13: ( GREATERTHAN {...}?)
            // D:\\projects\\nbp\\main-silver\\cnd.modelimpl\\src\\org\\netbeans\\modules\\cnd\\modelimpl\\parser/CXXParser.g:3113:14: GREATERTHAN {...}?
            {
            match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_synpred61_CXXParser56929); if (state.failed) return ;

            if ( !((
                                (((look_after_tmpl_args_scope)look_after_tmpl_args_stack.peek()).level > 0)
                              )) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "synpred61_CXXParser", "\n                    ($look_after_tmpl_args::level > 0)\n                  ");
            }

            }

        }
        finally {
            traceOut("synpred61_CXXParser_fragment", 295);
        }
    }
    // $ANTLR end synpred61_CXXParser

    // Delegated rules

    public final boolean synpred23_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_CXXParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_CXXParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA6 dfa6 = new DFA6(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA215 dfa215 = new DFA215(this);
    protected DFA227 dfa227 = new DFA227(this);
    protected DFA265 dfa265 = new DFA265(this);
    protected DFA306 dfa306 = new DFA306(this);
    protected DFA312 dfa312 = new DFA312(this);
    protected DFA345 dfa345 = new DFA345(this);
    static final String DFA6_eotS =
        "\117\uffff";
    static final String DFA6_eofS =
        "\117\uffff";
    static final String DFA6_minS =
        "\1\4\1\uffff\3\0\17\uffff\2\0\1\uffff\22\0\7\uffff\1\0\26\uffff"+
        "\1\0\7\uffff";
    static final String DFA6_maxS =
        "\1\u0209\1\uffff\3\0\17\uffff\2\0\1\uffff\22\0\7\uffff\1\0\26\uffff"+
        "\1\0\7\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\1\3\uffff\17\1\2\uffff\1\1\22\uffff\7\1\1\uffff\2\1\1"+
        "\2\24\uffff\1\1\6\uffff";
    static final String DFA6_specialS =
        "\1\0\1\uffff\1\1\1\2\1\3\17\uffff\1\4\1\5\1\uffff\1\6\1\7\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
        "\1\26\1\27\7\uffff\1\30\26\uffff\1\31\7\uffff}>";
    static final String[] DFA6_transitionS = {
            "\1\63\4\uffff\1\1\1\63\1\uffff\1\2\1\uffff\1\26\13\uffff\1\110"+
            "\1\uffff\1\56\1\110\1\uffff\1\57\1\60\7\uffff\1\63\1\110\1\uffff"+
            "\1\107\1\uffff\1\3\6\uffff\1\4\12\uffff\1\13\1\uffff\1\12\1"+
            "\17\1\11\12\uffff\1\14\1\15\12\uffff\1\16\1\25\22\uffff\1\24"+
            "\2\uffff\3\47\1\uffff\5\63\2\uffff\4\63\2\uffff\1\50\1\44\6"+
            "\63\1\54\1\63\2\uffff\1\27\1\30\1\33\1\34\1\35\1\36\1\37\2\uffff"+
            "\1\40\1\uffff\1\41\1\42\1\43\2\uffff\3\63\1\23\1\20\1\21\3\uffff"+
            "\1\62\16\uffff\1\63\1\uffff\4\63\1\uffff\1\7\1\51\1\52\1\53"+
            "\1\5\12\uffff\1\6\12\uffff\1\63\2\uffff\1\63\3\uffff\2\63\2"+
            "\uffff\1\63\1\46\1\uffff\2\63\1\uffff\1\31\1\32\1\61\1\46\5"+
            "\uffff\1\22\1\uffff\1\10\1\uffff\1\10\4\uffff\17\10\1\45\u00ff"+
            "\uffff\1\55",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "320:1: expression_or_declaration_statement : ( ( expression SEMICOLON )=> expression SEMICOLON | declaration_statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA6_0 = input.LA(1);

                         
                        int index6_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA6_0==QUESTIONMARK) && (synpred1_CXXParser())) {s = 1;}

                        else if ( (LA6_0==LPAREN) ) {s = 2;}

                        else if ( (LA6_0==TILDE) ) {s = 3;}

                        else if ( (LA6_0==SCOPE) ) {s = 4;}

                        else if ( (LA6_0==LITERAL_new) && (synpred1_CXXParser())) {s = 5;}

                        else if ( (LA6_0==LITERAL_delete) && (synpred1_CXXParser())) {s = 6;}

                        else if ( (LA6_0==LITERAL_sizeof) && (synpred1_CXXParser())) {s = 7;}

                        else if ( (LA6_0==LITERAL___is_class||LA6_0==LITERAL___is_pod||(LA6_0 >= LITERAL___has_nothrow_assign && LA6_0 <= LITERAL___underlying_type)) && (synpred1_CXXParser())) {s = 8;}

                        else if ( (LA6_0==DECIMALINT) && (synpred1_CXXParser())) {s = 9;}

                        else if ( (LA6_0==HEXADECIMALINT) && (synpred1_CXXParser())) {s = 10;}

                        else if ( (LA6_0==FLOATONE) && (synpred1_CXXParser())) {s = 11;}

                        else if ( (LA6_0==CHAR_LITERAL) && (synpred1_CXXParser())) {s = 12;}

                        else if ( (LA6_0==STRING_LITERAL) && (synpred1_CXXParser())) {s = 13;}

                        else if ( (LA6_0==NUMBER) && (synpred1_CXXParser())) {s = 14;}

                        else if ( (LA6_0==OCTALINT) && (synpred1_CXXParser())) {s = 15;}

                        else if ( (LA6_0==LITERAL_true) && (synpred1_CXXParser())) {s = 16;}

                        else if ( (LA6_0==LITERAL_false) && (synpred1_CXXParser())) {s = 17;}

                        else if ( (LA6_0==LITERAL___null) && (synpred1_CXXParser())) {s = 18;}

                        else if ( (LA6_0==LITERAL_this) && (synpred1_CXXParser())) {s = 19;}

                        else if ( (LA6_0==LITERAL_OPERATOR) ) {s = 20;}

                        else if ( (LA6_0==IDENT) ) {s = 21;}

                        else if ( (LA6_0==LSQUARE) && (synpred1_CXXParser())) {s = 22;}

                        else if ( (LA6_0==LITERAL_char) ) {s = 23;}

                        else if ( (LA6_0==LITERAL_wchar_t) ) {s = 24;}

                        else if ( (LA6_0==LITERAL_char16_t) ) {s = 25;}

                        else if ( (LA6_0==LITERAL_char32_t) ) {s = 26;}

                        else if ( (LA6_0==LITERAL_bool) ) {s = 27;}

                        else if ( (LA6_0==LITERAL_short) ) {s = 28;}

                        else if ( (LA6_0==LITERAL_int) ) {s = 29;}

                        else if ( (LA6_0==LITERAL_long) ) {s = 30;}

                        else if ( (LA6_0==LITERAL_signed) ) {s = 31;}

                        else if ( (LA6_0==LITERAL_unsigned) ) {s = 32;}

                        else if ( (LA6_0==LITERAL_float) ) {s = 33;}

                        else if ( (LA6_0==LITERAL_double) ) {s = 34;}

                        else if ( (LA6_0==LITERAL_void) ) {s = 35;}

                        else if ( (LA6_0==LITERAL_auto) ) {s = 36;}

                        else if ( (LA6_0==LITERAL___builtin_va_list) ) {s = 37;}

                        else if ( (LA6_0==LITERAL_decltype||LA6_0==LITERAL___decltype) ) {s = 38;}

                        else if ( ((LA6_0 >= LITERAL_typeof && LA6_0 <= LITERAL___typeof)) ) {s = 39;}

                        else if ( (LA6_0==LITERAL_typename) ) {s = 40;}

                        else if ( (LA6_0==LITERAL_dynamic_cast) && (synpred1_CXXParser())) {s = 41;}

                        else if ( (LA6_0==LITERAL_static_cast) && (synpred1_CXXParser())) {s = 42;}

                        else if ( (LA6_0==LITERAL_reinterpret_cast) && (synpred1_CXXParser())) {s = 43;}

                        else if ( (LA6_0==LITERAL_const_cast) && (synpred1_CXXParser())) {s = 44;}

                        else if ( (LA6_0==LITERAL_typeid) && (synpred1_CXXParser())) {s = 45;}

                        else if ( (LA6_0==PLUSPLUS) && (synpred1_CXXParser())) {s = 46;}

                        else if ( (LA6_0==MINUSMINUS) && (synpred1_CXXParser())) {s = 47;}

                        else if ( (LA6_0==STAR) ) {s = 48;}

                        else if ( (LA6_0==LITERAL_noexcept) && (synpred1_CXXParser())) {s = 49;}

                        else if ( (LA6_0==LITERAL_throw) && (synpred1_CXXParser())) {s = 50;}

                        else if ( (LA6_0==ELLIPSIS||LA6_0==SEMICOLON||LA6_0==AND||(LA6_0 >= LITERAL_typedef && LA6_0 <= LITERAL_inline)||(LA6_0 >= LITERAL___inline && LA6_0 <= LITERAL_friend)||(LA6_0 >= LITERAL_register && LA6_0 <= LITERAL___const)||LA6_0==LITERAL_volatile||(LA6_0 >= LITERAL_class && LA6_0 <= LITERAL_union)||LA6_0==LITERAL_using||(LA6_0 >= LITERAL_asm && LA6_0 <= LITERAL___asm)||LA6_0==LITERAL___global||LA6_0==LITERAL___thread||(LA6_0 >= LITERAL___symbolic && LA6_0 <= LITERAL___hidden)||LA6_0==LITERAL_constexpr||(LA6_0 >= LITERAL_thread_local && LA6_0 <= LITERAL_static_assert)) ) {s = 51;}

                        else if ( (LA6_0==AMPERSAND) ) {s = 71;}

                        else if ( (LA6_0==PLUS||LA6_0==MINUS||LA6_0==NOT) && (synpred1_CXXParser())) {s = 72;}

                         
                        input.seek(index6_0);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA6_2 = input.LA(1);

                         
                        int index6_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_2);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA6_3 = input.LA(1);

                         
                        int index6_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_3);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA6_4 = input.LA(1);

                         
                        int index6_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_4);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA6_20 = input.LA(1);

                         
                        int index6_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_20);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA6_21 = input.LA(1);

                         
                        int index6_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_21);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA6_23 = input.LA(1);

                         
                        int index6_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_23);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA6_24 = input.LA(1);

                         
                        int index6_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_24);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA6_25 = input.LA(1);

                         
                        int index6_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_25);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA6_26 = input.LA(1);

                         
                        int index6_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_26);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA6_27 = input.LA(1);

                         
                        int index6_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_27);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA6_28 = input.LA(1);

                         
                        int index6_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_28);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA6_29 = input.LA(1);

                         
                        int index6_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_29);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA6_30 = input.LA(1);

                         
                        int index6_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_30);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA6_31 = input.LA(1);

                         
                        int index6_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_31);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA6_32 = input.LA(1);

                         
                        int index6_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_32);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA6_33 = input.LA(1);

                         
                        int index6_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_33);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA6_34 = input.LA(1);

                         
                        int index6_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_34);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA6_35 = input.LA(1);

                         
                        int index6_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_35);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA6_36 = input.LA(1);

                         
                        int index6_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_36);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA6_37 = input.LA(1);

                         
                        int index6_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_37);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA6_38 = input.LA(1);

                         
                        int index6_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_38);

                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA6_39 = input.LA(1);

                         
                        int index6_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_39);

                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA6_40 = input.LA(1);

                         
                        int index6_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_40);

                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA6_48 = input.LA(1);

                         
                        int index6_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_48);

                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA6_71 = input.LA(1);

                         
                        int index6_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_CXXParser()) ) {s = 72;}

                        else if ( (true) ) {s = 51;}

                         
                        input.seek(index6_71);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA11_eotS =
        "\74\uffff";
    static final String DFA11_eofS =
        "\74\uffff";
    static final String DFA11_minS =
        "\1\11\1\0\3\uffff\23\0\4\uffff\1\0\37\uffff";
    static final String DFA11_maxS =
        "\1\u0209\1\0\3\uffff\23\0\4\uffff\1\0\37\uffff";
    static final String DFA11_acceptS =
        "\2\uffff\3\1\23\uffff\4\1\1\uffff\2\1\1\2\34\uffff";
    static final String DFA11_specialS =
        "\1\0\1\1\3\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\4\uffff\1\25\37\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\37\2\uffff\1\37\1\uffff\1\1\13\uffff\1\37\1\uffff\2\37\1"+
            "\uffff\2\37\10\uffff\1\37\1\uffff\1\37\1\uffff\1\37\6\uffff"+
            "\1\26\12\uffff\1\37\1\uffff\3\37\12\uffff\2\37\12\uffff\1\37"+
            "\1\27\22\uffff\1\37\2\uffff\3\25\2\uffff\1\33\13\uffff\1\34"+
            "\1\22\3\uffff\3\35\1\37\1\36\2\uffff\1\5\1\6\1\11\1\12\1\13"+
            "\1\14\1\15\2\uffff\1\16\1\uffff\1\17\1\20\1\21\2\uffff\1\30"+
            "\1\31\1\32\3\37\3\uffff\1\37\25\uffff\5\37\12\uffff\1\37\3\uffff"+
            "\1\4\1\3\21\uffff\1\24\3\uffff\1\2\1\7\1\10\1\37\1\24\5\uffff"+
            "\1\37\1\uffff\1\37\1\uffff\1\37\4\uffff\17\37\1\23\u00ff\uffff"+
            "\1\37",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "376:5: ( ( ( attribute_specifiers )? ( type_specifier )+ declarator EQUAL )=> condition_declaration | condition_expression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_0 = input.LA(1);

                         
                        int index11_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA11_0==LSQUARE) ) {s = 1;}

                        else if ( (LA11_0==LITERAL_alignas) && (synpred3_CXXParser())) {s = 2;}

                        else if ( (LA11_0==LITERAL___attribute__) && (synpred3_CXXParser())) {s = 3;}

                        else if ( (LA11_0==LITERAL___extension__) && (synpred3_CXXParser())) {s = 4;}

                        else if ( (LA11_0==LITERAL_char) ) {s = 5;}

                        else if ( (LA11_0==LITERAL_wchar_t) ) {s = 6;}

                        else if ( (LA11_0==LITERAL_char16_t) ) {s = 7;}

                        else if ( (LA11_0==LITERAL_char32_t) ) {s = 8;}

                        else if ( (LA11_0==LITERAL_bool) ) {s = 9;}

                        else if ( (LA11_0==LITERAL_short) ) {s = 10;}

                        else if ( (LA11_0==LITERAL_int) ) {s = 11;}

                        else if ( (LA11_0==LITERAL_long) ) {s = 12;}

                        else if ( (LA11_0==LITERAL_signed) ) {s = 13;}

                        else if ( (LA11_0==LITERAL_unsigned) ) {s = 14;}

                        else if ( (LA11_0==LITERAL_float) ) {s = 15;}

                        else if ( (LA11_0==LITERAL_double) ) {s = 16;}

                        else if ( (LA11_0==LITERAL_void) ) {s = 17;}

                        else if ( (LA11_0==LITERAL_auto) ) {s = 18;}

                        else if ( (LA11_0==LITERAL___builtin_va_list) ) {s = 19;}

                        else if ( (LA11_0==LITERAL_decltype||LA11_0==LITERAL___decltype) ) {s = 20;}

                        else if ( ((LA11_0 >= LITERAL_typeof && LA11_0 <= LITERAL___typeof)) ) {s = 21;}

                        else if ( (LA11_0==SCOPE) ) {s = 22;}

                        else if ( (LA11_0==IDENT) ) {s = 23;}

                        else if ( (LA11_0==LITERAL_class) && (synpred3_CXXParser())) {s = 24;}

                        else if ( (LA11_0==LITERAL_struct) && (synpred3_CXXParser())) {s = 25;}

                        else if ( (LA11_0==LITERAL_union) && (synpred3_CXXParser())) {s = 26;}

                        else if ( (LA11_0==LITERAL_enum) && (synpred3_CXXParser())) {s = 27;}

                        else if ( (LA11_0==LITERAL_typename) ) {s = 28;}

                        else if ( ((LA11_0 >= LITERAL_const && LA11_0 <= LITERAL___const)) && (synpred3_CXXParser())) {s = 29;}

                        else if ( (LA11_0==LITERAL_volatile) && (synpred3_CXXParser())) {s = 30;}

                        else if ( (LA11_0==QUESTIONMARK||LA11_0==LPAREN||LA11_0==PLUS||(LA11_0 >= PLUSPLUS && LA11_0 <= MINUS)||(LA11_0 >= MINUSMINUS && LA11_0 <= STAR)||LA11_0==NOT||LA11_0==AMPERSAND||LA11_0==TILDE||LA11_0==FLOATONE||(LA11_0 >= HEXADECIMALINT && LA11_0 <= DECIMALINT)||(LA11_0 >= CHAR_LITERAL && LA11_0 <= STRING_LITERAL)||LA11_0==NUMBER||LA11_0==LITERAL_OPERATOR||LA11_0==LITERAL_const_cast||(LA11_0 >= LITERAL_this && LA11_0 <= LITERAL_false)||LA11_0==LITERAL_throw||(LA11_0 >= LITERAL_sizeof && LA11_0 <= LITERAL_new)||LA11_0==LITERAL_delete||LA11_0==LITERAL_noexcept||LA11_0==LITERAL___null||LA11_0==LITERAL___is_class||LA11_0==LITERAL___is_pod||(LA11_0 >= LITERAL___has_nothrow_assign && LA11_0 <= LITERAL___underlying_type)||LA11_0==LITERAL_typeid) ) {s = 31;}

                         
                        input.seek(index11_0);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA11_1 = input.LA(1);

                         
                        int index11_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_1);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA11_5 = input.LA(1);

                         
                        int index11_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_5);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA11_6 = input.LA(1);

                         
                        int index11_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_6);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA11_7 = input.LA(1);

                         
                        int index11_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_7);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA11_8 = input.LA(1);

                         
                        int index11_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_8);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA11_9 = input.LA(1);

                         
                        int index11_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_9);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA11_10 = input.LA(1);

                         
                        int index11_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_10);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA11_11 = input.LA(1);

                         
                        int index11_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_11);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA11_12 = input.LA(1);

                         
                        int index11_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_12);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA11_13 = input.LA(1);

                         
                        int index11_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_13);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA11_14 = input.LA(1);

                         
                        int index11_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_14);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA11_15 = input.LA(1);

                         
                        int index11_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_15);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA11_16 = input.LA(1);

                         
                        int index11_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_16);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA11_17 = input.LA(1);

                         
                        int index11_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_17);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA11_18 = input.LA(1);

                         
                        int index11_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_18);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA11_19 = input.LA(1);

                         
                        int index11_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_19);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA11_20 = input.LA(1);

                         
                        int index11_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_20);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA11_21 = input.LA(1);

                         
                        int index11_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_21);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA11_22 = input.LA(1);

                         
                        int index11_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((( action.type_specifier_already_present(input) )&&( action.type_specifier_already_present(input) ))&&synpred3_CXXParser())) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_22);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA11_23 = input.LA(1);

                         
                        int index11_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((( action.type_specifier_already_present(input) )&&( action.type_specifier_already_present(input) ))&&synpred3_CXXParser())) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_23);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA11_28 = input.LA(1);

                         
                        int index11_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_CXXParser()) ) {s = 30;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index11_28);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA16_eotS =
        "\116\uffff";
    static final String DFA16_eofS =
        "\116\uffff";
    static final String DFA16_minS =
        "\1\4\1\0\3\uffff\32\0\57\uffff";
    static final String DFA16_maxS =
        "\1\u0209\1\0\3\uffff\32\0\57\uffff";
    static final String DFA16_acceptS =
        "\2\uffff\3\1\32\uffff\1\2\56\uffff";
    static final String DFA16_specialS =
        "\1\0\1\1\3\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\57\uffff}>";
    static final String[] DFA16_transitionS = {
            "\1\37\4\uffff\2\37\1\uffff\1\37\1\uffff\1\1\13\uffff\1\37\1"+
            "\uffff\2\37\1\uffff\2\37\7\uffff\2\37\1\uffff\1\37\1\uffff\1"+
            "\37\6\uffff\1\26\12\uffff\1\37\1\uffff\3\37\12\uffff\2\37\12"+
            "\uffff\1\37\1\27\22\uffff\1\37\2\uffff\3\25\1\uffff\1\37\1\33"+
            "\1\uffff\2\37\2\uffff\4\37\2\uffff\1\34\1\22\3\37\3\35\1\37"+
            "\1\36\2\uffff\1\5\1\6\1\11\1\12\1\13\1\14\1\15\2\uffff\1\16"+
            "\1\uffff\1\17\1\20\1\21\2\uffff\1\30\1\31\1\32\3\37\3\uffff"+
            "\1\37\25\uffff\5\37\12\uffff\1\37\3\uffff\1\4\1\3\5\uffff\1"+
            "\37\2\uffff\1\37\3\uffff\2\37\2\uffff\1\37\1\24\1\uffff\1\37"+
            "\1\uffff\1\2\1\7\1\10\1\37\1\24\5\uffff\1\37\1\uffff\1\37\1"+
            "\uffff\1\37\4\uffff\17\37\1\23\u00ff\uffff\1\37",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "422:9: ( ( for_range_declaration COLON )=> for_range_declaration COLON for_range_initializer | for_init_statement ( condition )? SEMICOLON ( expression )? )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA16_0 = input.LA(1);

                         
                        int index16_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA16_0==LSQUARE) ) {s = 1;}

                        else if ( (LA16_0==LITERAL_alignas) && (synpred4_CXXParser())) {s = 2;}

                        else if ( (LA16_0==LITERAL___attribute__) && (synpred4_CXXParser())) {s = 3;}

                        else if ( (LA16_0==LITERAL___extension__) && (synpred4_CXXParser())) {s = 4;}

                        else if ( (LA16_0==LITERAL_char) ) {s = 5;}

                        else if ( (LA16_0==LITERAL_wchar_t) ) {s = 6;}

                        else if ( (LA16_0==LITERAL_char16_t) ) {s = 7;}

                        else if ( (LA16_0==LITERAL_char32_t) ) {s = 8;}

                        else if ( (LA16_0==LITERAL_bool) ) {s = 9;}

                        else if ( (LA16_0==LITERAL_short) ) {s = 10;}

                        else if ( (LA16_0==LITERAL_int) ) {s = 11;}

                        else if ( (LA16_0==LITERAL_long) ) {s = 12;}

                        else if ( (LA16_0==LITERAL_signed) ) {s = 13;}

                        else if ( (LA16_0==LITERAL_unsigned) ) {s = 14;}

                        else if ( (LA16_0==LITERAL_float) ) {s = 15;}

                        else if ( (LA16_0==LITERAL_double) ) {s = 16;}

                        else if ( (LA16_0==LITERAL_void) ) {s = 17;}

                        else if ( (LA16_0==LITERAL_auto) ) {s = 18;}

                        else if ( (LA16_0==LITERAL___builtin_va_list) ) {s = 19;}

                        else if ( (LA16_0==LITERAL_decltype||LA16_0==LITERAL___decltype) ) {s = 20;}

                        else if ( ((LA16_0 >= LITERAL_typeof && LA16_0 <= LITERAL___typeof)) ) {s = 21;}

                        else if ( (LA16_0==SCOPE) ) {s = 22;}

                        else if ( (LA16_0==IDENT) ) {s = 23;}

                        else if ( (LA16_0==LITERAL_class) ) {s = 24;}

                        else if ( (LA16_0==LITERAL_struct) ) {s = 25;}

                        else if ( (LA16_0==LITERAL_union) ) {s = 26;}

                        else if ( (LA16_0==LITERAL_enum) ) {s = 27;}

                        else if ( (LA16_0==LITERAL_typename) ) {s = 28;}

                        else if ( ((LA16_0 >= LITERAL_const && LA16_0 <= LITERAL___const)) ) {s = 29;}

                        else if ( (LA16_0==LITERAL_volatile) ) {s = 30;}

                        else if ( (LA16_0==ELLIPSIS||(LA16_0 >= QUESTIONMARK && LA16_0 <= SEMICOLON)||LA16_0==LPAREN||LA16_0==PLUS||(LA16_0 >= PLUSPLUS && LA16_0 <= MINUS)||(LA16_0 >= MINUSMINUS && LA16_0 <= STAR)||(LA16_0 >= AND && LA16_0 <= NOT)||LA16_0==AMPERSAND||LA16_0==TILDE||LA16_0==FLOATONE||(LA16_0 >= HEXADECIMALINT && LA16_0 <= DECIMALINT)||(LA16_0 >= CHAR_LITERAL && LA16_0 <= STRING_LITERAL)||LA16_0==NUMBER||LA16_0==LITERAL_OPERATOR||LA16_0==LITERAL_typedef||(LA16_0 >= LITERAL_extern && LA16_0 <= LITERAL_inline)||(LA16_0 >= LITERAL___inline && LA16_0 <= LITERAL_friend)||(LA16_0 >= LITERAL_register && LA16_0 <= LITERAL_mutable)||LA16_0==LITERAL_const_cast||(LA16_0 >= LITERAL_this && LA16_0 <= LITERAL_false)||LA16_0==LITERAL_throw||(LA16_0 >= LITERAL_sizeof && LA16_0 <= LITERAL_new)||LA16_0==LITERAL_delete||LA16_0==LITERAL___global||LA16_0==LITERAL___thread||(LA16_0 >= LITERAL___symbolic && LA16_0 <= LITERAL___hidden)||LA16_0==LITERAL_constexpr||LA16_0==LITERAL_thread_local||LA16_0==LITERAL_noexcept||LA16_0==LITERAL___null||LA16_0==LITERAL___is_class||LA16_0==LITERAL___is_pod||(LA16_0 >= LITERAL___has_nothrow_assign && LA16_0 <= LITERAL___underlying_type)||LA16_0==LITERAL_typeid) ) {s = 31;}

                         
                        input.seek(index16_0);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA16_1 = input.LA(1);

                         
                        int index16_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_1);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA16_5 = input.LA(1);

                         
                        int index16_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_5);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA16_6 = input.LA(1);

                         
                        int index16_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_6);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA16_7 = input.LA(1);

                         
                        int index16_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_7);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_8);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA16_9 = input.LA(1);

                         
                        int index16_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_9);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA16_10 = input.LA(1);

                         
                        int index16_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_10);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA16_11 = input.LA(1);

                         
                        int index16_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_11);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA16_12 = input.LA(1);

                         
                        int index16_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_12);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA16_13 = input.LA(1);

                         
                        int index16_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_13);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA16_14 = input.LA(1);

                         
                        int index16_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_14);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA16_15 = input.LA(1);

                         
                        int index16_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_15);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA16_16 = input.LA(1);

                         
                        int index16_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_16);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA16_17 = input.LA(1);

                         
                        int index16_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_17);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA16_18 = input.LA(1);

                         
                        int index16_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_18);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA16_19 = input.LA(1);

                         
                        int index16_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_19);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA16_20 = input.LA(1);

                         
                        int index16_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_20);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA16_21 = input.LA(1);

                         
                        int index16_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_21);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA16_22 = input.LA(1);

                         
                        int index16_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((( action.type_specifier_already_present(input) )&&( action.type_specifier_already_present(input) ))&&synpred4_CXXParser())) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_22);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA16_23 = input.LA(1);

                         
                        int index16_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((( action.type_specifier_already_present(input) )&&( action.type_specifier_already_present(input) ))&&synpred4_CXXParser())) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_23);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA16_24 = input.LA(1);

                         
                        int index16_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_24);

                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA16_25 = input.LA(1);

                         
                        int index16_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_25);

                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA16_26 = input.LA(1);

                         
                        int index16_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_26);

                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA16_27 = input.LA(1);

                         
                        int index16_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_27);

                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA16_28 = input.LA(1);

                         
                        int index16_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_28);

                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA16_29 = input.LA(1);

                         
                        int index16_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_29);

                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA16_30 = input.LA(1);

                         
                        int index16_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_CXXParser()) ) {s = 4;}

                        else if ( (true) ) {s = 31;}

                         
                        input.seek(index16_30);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA18_eotS =
        "\113\uffff";
    static final String DFA18_eofS =
        "\113\uffff";
    static final String DFA18_minS =
        "\1\4\14\uffff\23\0\4\uffff\1\0\3\uffff\4\0\2\uffff\2\0\33\uffff";
    static final String DFA18_maxS =
        "\1\u0209\14\uffff\23\0\4\uffff\1\0\3\uffff\4\0\2\uffff\2\0\33\uffff";
    static final String DFA18_acceptS =
        "\1\uffff\14\1\23\uffff\4\1\1\uffff\3\1\4\uffff\2\1\2\uffff\1\2\32"+
        "\uffff";
    static final String DFA18_specialS =
        "\1\0\14\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\4\uffff\1\24\3\uffff\1\25"+
        "\1\26\1\27\1\30\2\uffff\1\31\1\32\33\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\55\4\uffff\1\60\1\50\1\uffff\1\51\1\uffff\1\60\13\uffff\1"+
            "\60\1\uffff\2\60\1\uffff\1\60\1\52\7\uffff\1\54\1\60\1\uffff"+
            "\1\53\1\uffff\1\57\6\uffff\1\36\12\uffff\1\60\1\uffff\3\60\12"+
            "\uffff\2\60\12\uffff\1\60\1\37\22\uffff\1\56\2\uffff\3\35\1"+
            "\uffff\1\14\1\43\1\uffff\1\3\1\12\2\uffff\3\12\1\13\2\uffff"+
            "\1\44\1\32\1\1\1\2\1\4\3\45\1\60\1\46\2\uffff\1\15\1\16\1\21"+
            "\1\22\1\23\1\24\1\25\2\uffff\1\26\1\uffff\1\27\1\30\1\31\2\uffff"+
            "\1\40\1\41\1\42\3\60\3\uffff\1\60\25\uffff\5\60\12\uffff\1\60"+
            "\12\uffff\1\10\2\uffff\1\5\3\uffff\1\11\1\7\2\uffff\1\47\1\34"+
            "\1\uffff\1\6\2\uffff\1\17\1\20\1\60\1\34\5\uffff\1\60\1\uffff"+
            "\1\60\1\uffff\1\60\4\uffff\17\60\1\33\u00ff\uffff\1\60",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "445:5: ( ( simple_declaration[blockscope_decl] )=> simple_declaration[blockscope_decl] | expression_statement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_0 = input.LA(1);

                         
                        int index18_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_0==LITERAL_register) && (synpred5_CXXParser())) {s = 1;}

                        else if ( (LA18_0==LITERAL_static) && (synpred5_CXXParser())) {s = 2;}

                        else if ( (LA18_0==LITERAL_extern) && (synpred5_CXXParser())) {s = 3;}

                        else if ( (LA18_0==LITERAL_mutable) && (synpred5_CXXParser())) {s = 4;}

                        else if ( (LA18_0==LITERAL___thread) && (synpred5_CXXParser())) {s = 5;}

                        else if ( (LA18_0==LITERAL_thread_local) && (synpred5_CXXParser())) {s = 6;}

                        else if ( (LA18_0==LITERAL___hidden) && (synpred5_CXXParser())) {s = 7;}

                        else if ( (LA18_0==LITERAL___global) && (synpred5_CXXParser())) {s = 8;}

                        else if ( (LA18_0==LITERAL___symbolic) && (synpred5_CXXParser())) {s = 9;}

                        else if ( (LA18_0==LITERAL_inline||(LA18_0 >= LITERAL___inline && LA18_0 <= LITERAL_explicit)) && (synpred5_CXXParser())) {s = 10;}

                        else if ( (LA18_0==LITERAL_friend) && (synpred5_CXXParser())) {s = 11;}

                        else if ( (LA18_0==LITERAL_typedef) && (synpred5_CXXParser())) {s = 12;}

                        else if ( (LA18_0==LITERAL_char) ) {s = 13;}

                        else if ( (LA18_0==LITERAL_wchar_t) ) {s = 14;}

                        else if ( (LA18_0==LITERAL_char16_t) ) {s = 15;}

                        else if ( (LA18_0==LITERAL_char32_t) ) {s = 16;}

                        else if ( (LA18_0==LITERAL_bool) ) {s = 17;}

                        else if ( (LA18_0==LITERAL_short) ) {s = 18;}

                        else if ( (LA18_0==LITERAL_int) ) {s = 19;}

                        else if ( (LA18_0==LITERAL_long) ) {s = 20;}

                        else if ( (LA18_0==LITERAL_signed) ) {s = 21;}

                        else if ( (LA18_0==LITERAL_unsigned) ) {s = 22;}

                        else if ( (LA18_0==LITERAL_float) ) {s = 23;}

                        else if ( (LA18_0==LITERAL_double) ) {s = 24;}

                        else if ( (LA18_0==LITERAL_void) ) {s = 25;}

                        else if ( (LA18_0==LITERAL_auto) ) {s = 26;}

                        else if ( (LA18_0==LITERAL___builtin_va_list) ) {s = 27;}

                        else if ( (LA18_0==LITERAL_decltype||LA18_0==LITERAL___decltype) ) {s = 28;}

                        else if ( ((LA18_0 >= LITERAL_typeof && LA18_0 <= LITERAL___typeof)) ) {s = 29;}

                        else if ( (LA18_0==SCOPE) ) {s = 30;}

                        else if ( (LA18_0==IDENT) ) {s = 31;}

                        else if ( (LA18_0==LITERAL_class) && (synpred5_CXXParser())) {s = 32;}

                        else if ( (LA18_0==LITERAL_struct) && (synpred5_CXXParser())) {s = 33;}

                        else if ( (LA18_0==LITERAL_union) && (synpred5_CXXParser())) {s = 34;}

                        else if ( (LA18_0==LITERAL_enum) && (synpred5_CXXParser())) {s = 35;}

                        else if ( (LA18_0==LITERAL_typename) ) {s = 36;}

                        else if ( ((LA18_0 >= LITERAL_const && LA18_0 <= LITERAL___const)) && (synpred5_CXXParser())) {s = 37;}

                        else if ( (LA18_0==LITERAL_volatile) && (synpred5_CXXParser())) {s = 38;}

                        else if ( (LA18_0==LITERAL_constexpr) && (synpred5_CXXParser())) {s = 39;}

                        else if ( (LA18_0==SEMICOLON) ) {s = 40;}

                        else if ( (LA18_0==LPAREN) ) {s = 41;}

                        else if ( (LA18_0==STAR) ) {s = 42;}

                        else if ( (LA18_0==AMPERSAND) ) {s = 43;}

                        else if ( (LA18_0==AND) && (synpred5_CXXParser())) {s = 44;}

                        else if ( (LA18_0==ELLIPSIS) && (synpred5_CXXParser())) {s = 45;}

                        else if ( (LA18_0==LITERAL_OPERATOR) ) {s = 46;}

                        else if ( (LA18_0==TILDE) ) {s = 47;}

                        else if ( (LA18_0==QUESTIONMARK||LA18_0==LSQUARE||LA18_0==PLUS||(LA18_0 >= PLUSPLUS && LA18_0 <= MINUS)||LA18_0==MINUSMINUS||LA18_0==NOT||LA18_0==FLOATONE||(LA18_0 >= HEXADECIMALINT && LA18_0 <= DECIMALINT)||(LA18_0 >= CHAR_LITERAL && LA18_0 <= STRING_LITERAL)||LA18_0==NUMBER||LA18_0==LITERAL_const_cast||(LA18_0 >= LITERAL_this && LA18_0 <= LITERAL_false)||LA18_0==LITERAL_throw||(LA18_0 >= LITERAL_sizeof && LA18_0 <= LITERAL_new)||LA18_0==LITERAL_delete||LA18_0==LITERAL_noexcept||LA18_0==LITERAL___null||LA18_0==LITERAL___is_class||LA18_0==LITERAL___is_pod||(LA18_0 >= LITERAL___has_nothrow_assign && LA18_0 <= LITERAL___underlying_type)||LA18_0==LITERAL_typeid) ) {s = 48;}

                         
                        input.seek(index18_0);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_13);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_14);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA18_15 = input.LA(1);

                         
                        int index18_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_15);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA18_16 = input.LA(1);

                         
                        int index18_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_16);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA18_17 = input.LA(1);

                         
                        int index18_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_17);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA18_18 = input.LA(1);

                         
                        int index18_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_18);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA18_19 = input.LA(1);

                         
                        int index18_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_19);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA18_20 = input.LA(1);

                         
                        int index18_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_20);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA18_21 = input.LA(1);

                         
                        int index18_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_21);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA18_22 = input.LA(1);

                         
                        int index18_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_22);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA18_23 = input.LA(1);

                         
                        int index18_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_23);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA18_24 = input.LA(1);

                         
                        int index18_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_24);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA18_25 = input.LA(1);

                         
                        int index18_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_25);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA18_26 = input.LA(1);

                         
                        int index18_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_26);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA18_27 = input.LA(1);

                         
                        int index18_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_27);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA18_28 = input.LA(1);

                         
                        int index18_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_28);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA18_29 = input.LA(1);

                         
                        int index18_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_29);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA18_30 = input.LA(1);

                         
                        int index18_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_30);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA18_31 = input.LA(1);

                         
                        int index18_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_31);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA18_36 = input.LA(1);

                         
                        int index18_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_36);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA18_40 = input.LA(1);

                         
                        int index18_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_40);

                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA18_41 = input.LA(1);

                         
                        int index18_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_41);

                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA18_42 = input.LA(1);

                         
                        int index18_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_42);

                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA18_43 = input.LA(1);

                         
                        int index18_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_43);

                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA18_46 = input.LA(1);

                         
                        int index18_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_46);

                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA18_47 = input.LA(1);

                         
                        int index18_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_CXXParser()) ) {s = 45;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index18_47);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA215_eotS =
        "\11\uffff";
    static final String DFA215_eofS =
        "\11\uffff";
    static final String DFA215_minS =
        "\1\4\1\uffff\1\6\3\uffff\3\6";
    static final String DFA215_maxS =
        "\1\u00e1\1\uffff\1\u0207\3\uffff\3\u00e1";
    static final String DFA215_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\2\1\3\uffff";
    static final String DFA215_specialS =
        "\2\uffff\1\0\6\uffff}>";
    static final String[] DFA215_transitionS = {
            "\1\1\2\uffff\1\3\4\uffff\1\1\23\uffff\1\1\7\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\1\1\6\uffff\1\1\46\uffff\1\2\22\uffff\1\1\122\uffff"+
            "\1\3\36\uffff\2\3",
            "",
            "\1\5\1\3\1\5\1\uffff\1\5\1\uffff\1\5\1\uffff\1\5\1\uffff\1"+
            "\5\4\uffff\1\4\36\uffff\1\5\u008c\uffff\1\10\16\uffff\2\5\16"+
            "\uffff\1\7\1\6\5\uffff\1\5\u011f\uffff\1\5",
            "",
            "",
            "",
            "\1\5\1\3\1\5\1\uffff\1\5\5\uffff\1\5\u00b0\uffff\1\10\36\uffff"+
            "\1\7\1\6",
            "\1\5\1\3\1\5\1\uffff\1\5\5\uffff\1\5\u00b0\uffff\1\10\36\uffff"+
            "\1\7\1\6",
            "\1\5\1\3\1\5\1\uffff\1\5\5\uffff\1\5\u00b0\uffff\1\10\36\uffff"+
            "\1\7\1\6"
    };

    static final short[] DFA215_eot = DFA.unpackEncodedString(DFA215_eotS);
    static final short[] DFA215_eof = DFA.unpackEncodedString(DFA215_eofS);
    static final char[] DFA215_min = DFA.unpackEncodedStringToUnsignedChars(DFA215_minS);
    static final char[] DFA215_max = DFA.unpackEncodedStringToUnsignedChars(DFA215_maxS);
    static final short[] DFA215_accept = DFA.unpackEncodedString(DFA215_acceptS);
    static final short[] DFA215_special = DFA.unpackEncodedString(DFA215_specialS);
    static final short[][] DFA215_transition;

    static {
        int numStates = DFA215_transitionS.length;
        DFA215_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA215_transition[i] = DFA.unpackEncodedString(DFA215_transitionS[i]);
        }
    }

    class DFA215 extends DFA {

        public DFA215(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 215;
            this.eot = DFA215_eot;
            this.eof = DFA215_eof;
            this.min = DFA215_min;
            this.max = DFA215_max;
            this.accept = DFA215_accept;
            this.special = DFA215_special;
            this.transition = DFA215_transition;
        }
        public String getDescription() {
            return "2078:5: ( declarator ( virt_specifier )* ( brace_or_equal_initializer )? | member_bitfield_declarator )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA215_2 = input.LA(1);

                         
                        int index215_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA215_2==LESSTHAN) && (( action.identifier_is(IDT_TEMPLATE_NAME, input.LT(1)) ))) {s = 4;}

                        else if ( (LA215_2==ASSIGNEQUAL||LA215_2==COMMA||LA215_2==SEMICOLON||LA215_2==LPAREN||LA215_2==LSQUARE||LA215_2==LCURLY||LA215_2==SCOPE||(LA215_2 >= LITERAL___extension__ && LA215_2 <= LITERAL___attribute__)||LA215_2==LITERAL_alignas||LA215_2==LITERAL_POINTERTO) ) {s = 5;}

                        else if ( (LA215_2==LITERAL_override) ) {s = 6;}

                        else if ( (LA215_2==LITERAL_final) ) {s = 7;}

                        else if ( (LA215_2==LITERAL_new) ) {s = 8;}

                        else if ( (LA215_2==COLON) ) {s = 3;}

                         
                        input.seek(index215_2);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 215, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA227_eotS =
        "\112\uffff";
    static final String DFA227_eofS =
        "\1\1\111\uffff";
    static final String DFA227_minS =
        "\1\4\3\uffff\2\0\104\uffff";
    static final String DFA227_maxS =
        "\1\u0207\3\uffff\2\0\104\uffff";
    static final String DFA227_acceptS =
        "\1\uffff\1\2\60\uffff\1\1\27\uffff";
    static final String DFA227_specialS =
        "\4\uffff\1\0\1\1\104\uffff}>";
    static final String[] DFA227_transitionS = {
            "\45\1\1\uffff\3\1\1\uffff\6\1\1\4\46\uffff\1\5\25\uffff\3\62"+
            "\2\uffff\1\62\13\uffff\2\62\3\uffff\3\62\1\uffff\1\62\2\uffff"+
            "\7\62\2\uffff\1\62\1\uffff\3\62\2\uffff\3\62\23\uffff\1\1\3"+
            "\uffff\4\1\5\uffff\1\1\16\uffff\2\1\16\uffff\2\1\1\uffff\1\62"+
            "\3\uffff\1\1\2\62\1\uffff\1\62\35\uffff\1\62\u00fd\uffff\1\1",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA227_eot = DFA.unpackEncodedString(DFA227_eotS);
    static final short[] DFA227_eof = DFA.unpackEncodedString(DFA227_eofS);
    static final char[] DFA227_min = DFA.unpackEncodedStringToUnsignedChars(DFA227_minS);
    static final char[] DFA227_max = DFA.unpackEncodedStringToUnsignedChars(DFA227_maxS);
    static final short[] DFA227_accept = DFA.unpackEncodedString(DFA227_acceptS);
    static final short[] DFA227_special = DFA.unpackEncodedString(DFA227_specialS);
    static final short[][] DFA227_transition;

    static {
        int numStates = DFA227_transitionS.length;
        DFA227_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA227_transition[i] = DFA.unpackEncodedString(DFA227_transitionS[i]);
        }
    }

    class DFA227 extends DFA {

        public DFA227(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 227;
            this.eot = DFA227_eot;
            this.eof = DFA227_eof;
            this.min = DFA227_min;
            this.max = DFA227_max;
            this.accept = DFA227_accept;
            this.special = DFA227_special;
            this.transition = DFA227_transition;
        }
        public String getDescription() {
            return "()* loopback of 2214:9: ( type_specifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA227_4 = input.LA(1);

                         
                        int index227_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (( action.type_specifier_already_present(input) )) ) {s = 50;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index227_4);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA227_5 = input.LA(1);

                         
                        int index227_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (( action.type_specifier_already_present(input) )) ) {s = 50;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index227_5);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 227, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA265_eotS =
        "\100\uffff";
    static final String DFA265_eofS =
        "\100\uffff";
    static final String DFA265_minS =
        "\1\4\1\0\1\uffff\71\0\4\uffff";
    static final String DFA265_maxS =
        "\1\u0209\1\0\1\uffff\71\0\4\uffff";
    static final String DFA265_acceptS =
        "\2\uffff\1\1\72\uffff\1\2\1\4\1\3";
    static final String DFA265_specialS =
        "\1\uffff\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
        "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
        "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
        "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\4\uffff}>";
    static final String[] DFA265_transitionS = {
            "\5\2\1\40\2\2\1\41\1\2\1\61\1\2\2\uffff\5\2\1\uffff\2\2\1\71"+
            "\1\2\1\67\1\71\1\2\1\70\1\71\10\2\1\71\1\2\1\71\1\2\1\3\6\2"+
            "\1\5\12\2\1\50\1\2\1\47\1\54\1\46\12\2\1\51\1\52\12\2\1\53\1"+
            "\4\22\2\1\1\2\2\3\30\2\2\1\34\13\2\1\35\1\25\3\2\3\36\1\65\1"+
            "\37\2\2\1\10\1\11\1\14\1\15\1\16\1\17\1\20\2\2\1\21\1\2\1\22"+
            "\1\23\1\24\2\2\1\31\1\32\1\33\1\60\1\55\1\56\3\2\1\73\25\2\1"+
            "\44\1\62\1\63\1\64\1\42\12\2\1\43\3\2\1\7\1\6\21\2\1\27\4\2"+
            "\1\12\1\13\1\72\1\27\5\2\1\57\1\2\1\45\1\2\1\45\4\2\17\45\1"+
            "\26\u00ff\2\1\66",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA265_eot = DFA.unpackEncodedString(DFA265_eotS);
    static final short[] DFA265_eof = DFA.unpackEncodedString(DFA265_eofS);
    static final char[] DFA265_min = DFA.unpackEncodedStringToUnsignedChars(DFA265_minS);
    static final char[] DFA265_max = DFA.unpackEncodedStringToUnsignedChars(DFA265_maxS);
    static final short[] DFA265_accept = DFA.unpackEncodedString(DFA265_acceptS);
    static final short[] DFA265_special = DFA.unpackEncodedString(DFA265_specialS);
    static final short[][] DFA265_transition;

    static {
        int numStates = DFA265_transitionS.length;
        DFA265_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA265_transition[i] = DFA.unpackEncodedString(DFA265_transitionS[i]);
        }
    }

    class DFA265 extends DFA {

        public DFA265(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 265;
            this.eot = DFA265_eot;
            this.eof = DFA265_eof;
            this.min = DFA265_min;
            this.max = DFA265_max;
            this.accept = DFA265_accept;
            this.special = DFA265_special;
            this.transition = DFA265_transition;
        }
        public String getDescription() {
            return "2479:5: ({...}? (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY ) )* ( lazy_template (~ ( GREATERTHAN | LESSTHAN | RCURLY | LCURLY | COMMA | ELLIPSIS ) )* )+ | ( id_expression ( ELLIPSIS )? ( COMMA | GREATERTHAN ) )=> id_expression | ( type_id )=> type_id | assignment_expression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA265_1 = input.LA(1);

                         
                        int index265_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred48_CXXParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_1);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA265_3 = input.LA(1);

                         
                        int index265_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred48_CXXParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_3);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA265_4 = input.LA(1);

                         
                        int index265_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred48_CXXParser()) ) {s = 61;}

                        else if ( (((( action.type_specifier_already_present(input) )&&( action.type_specifier_already_present(input) ))&&synpred49_CXXParser())) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_4);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA265_5 = input.LA(1);

                         
                        int index265_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred48_CXXParser()) ) {s = 61;}

                        else if ( (((( action.type_specifier_already_present(input) )&&( action.type_specifier_already_present(input) ))&&synpred49_CXXParser())) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_5);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA265_6 = input.LA(1);

                         
                        int index265_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                         
                        input.seek(index265_6);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA265_7 = input.LA(1);

                         
                        int index265_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                         
                        input.seek(index265_7);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA265_8 = input.LA(1);

                         
                        int index265_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_8);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA265_9 = input.LA(1);

                         
                        int index265_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_9);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA265_10 = input.LA(1);

                         
                        int index265_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_10);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA265_11 = input.LA(1);

                         
                        int index265_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_11);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA265_12 = input.LA(1);

                         
                        int index265_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_12);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA265_13 = input.LA(1);

                         
                        int index265_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_13);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA265_14 = input.LA(1);

                         
                        int index265_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_14);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA265_15 = input.LA(1);

                         
                        int index265_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_15);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA265_16 = input.LA(1);

                         
                        int index265_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_16);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA265_17 = input.LA(1);

                         
                        int index265_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_17);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA265_18 = input.LA(1);

                         
                        int index265_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_18);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA265_19 = input.LA(1);

                         
                        int index265_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_19);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA265_20 = input.LA(1);

                         
                        int index265_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_20);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA265_21 = input.LA(1);

                         
                        int index265_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_21);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA265_22 = input.LA(1);

                         
                        int index265_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_22);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA265_23 = input.LA(1);

                         
                        int index265_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_23);

                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA265_24 = input.LA(1);

                         
                        int index265_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_24);

                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA265_25 = input.LA(1);

                         
                        int index265_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                         
                        input.seek(index265_25);

                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA265_26 = input.LA(1);

                         
                        int index265_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                         
                        input.seek(index265_26);

                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA265_27 = input.LA(1);

                         
                        int index265_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                         
                        input.seek(index265_27);

                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA265_28 = input.LA(1);

                         
                        int index265_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                         
                        input.seek(index265_28);

                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA265_29 = input.LA(1);

                         
                        int index265_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_29);

                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA265_30 = input.LA(1);

                         
                        int index265_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                         
                        input.seek(index265_30);

                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA265_31 = input.LA(1);

                         
                        int index265_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (synpred49_CXXParser()) ) {s = 63;}

                         
                        input.seek(index265_31);

                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA265_32 = input.LA(1);

                         
                        int index265_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_32);

                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA265_33 = input.LA(1);

                         
                        int index265_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_33);

                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA265_34 = input.LA(1);

                         
                        int index265_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_34);

                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA265_35 = input.LA(1);

                         
                        int index265_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_35);

                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA265_36 = input.LA(1);

                         
                        int index265_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_36);

                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA265_37 = input.LA(1);

                         
                        int index265_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_37);

                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA265_38 = input.LA(1);

                         
                        int index265_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_38);

                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA265_39 = input.LA(1);

                         
                        int index265_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_39);

                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA265_40 = input.LA(1);

                         
                        int index265_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_40);

                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA265_41 = input.LA(1);

                         
                        int index265_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_41);

                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA265_42 = input.LA(1);

                         
                        int index265_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_42);

                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA265_43 = input.LA(1);

                         
                        int index265_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_43);

                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA265_44 = input.LA(1);

                         
                        int index265_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_44);

                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA265_45 = input.LA(1);

                         
                        int index265_45 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_45);

                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA265_46 = input.LA(1);

                         
                        int index265_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_46);

                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA265_47 = input.LA(1);

                         
                        int index265_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_47);

                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA265_48 = input.LA(1);

                         
                        int index265_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_48);

                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA265_49 = input.LA(1);

                         
                        int index265_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_49);

                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA265_50 = input.LA(1);

                         
                        int index265_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_50);

                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA265_51 = input.LA(1);

                         
                        int index265_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_51);

                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA265_52 = input.LA(1);

                         
                        int index265_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_52);

                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA265_53 = input.LA(1);

                         
                        int index265_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_53);

                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA265_54 = input.LA(1);

                         
                        int index265_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_54);

                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA265_55 = input.LA(1);

                         
                        int index265_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_55);

                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA265_56 = input.LA(1);

                         
                        int index265_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_56);

                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA265_57 = input.LA(1);

                         
                        int index265_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_57);

                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA265_58 = input.LA(1);

                         
                        int index265_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_58);

                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA265_59 = input.LA(1);

                         
                        int index265_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((isTemplateTooDeep(1, 10)))) ) {s = 2;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index265_59);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 265, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA306_eotS =
        "\74\uffff";
    static final String DFA306_eofS =
        "\74\uffff";
    static final String DFA306_minS =
        "\2\14\1\133\34\uffff\1\0\34\uffff";
    static final String DFA306_maxS =
        "\2\u0209\1\u00cc\34\uffff\1\0\34\uffff";
    static final String DFA306_acceptS =
        "\3\uffff\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11\23\1\1\uffff\34\1";
    static final String DFA306_specialS =
        "\1\0\1\3\1\1\34\uffff\1\2\34\uffff}>";
    static final String[] DFA306_transitionS = {
            "\1\7\1\uffff\1\7\13\uffff\1\12\1\uffff\1\10\1\12\1\uffff\1\11"+
            "\1\12\10\uffff\1\12\1\uffff\1\12\1\uffff\1\1\6\uffff\1\2\12"+
            "\uffff\1\7\1\uffff\3\7\12\uffff\2\7\12\uffff\2\7\22\uffff\1"+
            "\7\2\uffff\3\7\16\uffff\2\7\6\uffff\1\7\3\uffff\7\7\2\uffff"+
            "\1\7\1\uffff\3\7\5\uffff\3\7\31\uffff\1\5\3\7\1\3\12\uffff\1"+
            "\4\26\uffff\1\7\4\uffff\2\7\1\13\1\7\5\uffff\1\7\1\uffff\1\6"+
            "\1\uffff\1\6\4\uffff\17\6\1\7\u00ff\uffff\1\7",
            "\1\14\1\uffff\1\40\13\uffff\1\72\1\uffff\1\70\1\72\1\uffff"+
            "\1\71\1\72\10\uffff\1\72\1\uffff\1\72\1\uffff\1\15\6\uffff\1"+
            "\16\12\uffff\1\25\1\uffff\1\24\1\31\1\23\12\uffff\1\26\1\27"+
            "\12\uffff\1\30\1\37\22\uffff\1\36\2\uffff\3\61\16\uffff\1\62"+
            "\1\56\6\uffff\1\66\3\uffff\1\41\1\42\1\45\1\46\1\47\1\50\1\51"+
            "\2\uffff\1\52\1\uffff\1\53\1\54\1\55\5\uffff\1\35\1\32\1\33"+
            "\31\uffff\1\21\1\63\1\64\1\65\1\17\12\uffff\1\20\26\uffff\1"+
            "\60\4\uffff\1\43\1\44\1\73\1\60\5\uffff\1\34\1\uffff\1\22\1"+
            "\uffff\1\22\4\uffff\17\22\1\57\u00ff\uffff\1\67",
            "\1\7\22\uffff\1\7\122\uffff\1\3\12\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA306_eot = DFA.unpackEncodedString(DFA306_eotS);
    static final short[] DFA306_eof = DFA.unpackEncodedString(DFA306_eofS);
    static final char[] DFA306_min = DFA.unpackEncodedStringToUnsignedChars(DFA306_minS);
    static final char[] DFA306_max = DFA.unpackEncodedStringToUnsignedChars(DFA306_maxS);
    static final short[] DFA306_accept = DFA.unpackEncodedString(DFA306_acceptS);
    static final short[] DFA306_special = DFA.unpackEncodedString(DFA306_specialS);
    static final short[][] DFA306_transition;

    static {
        int numStates = DFA306_transitionS.length;
        DFA306_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA306_transition[i] = DFA.unpackEncodedString(DFA306_transitionS[i]);
        }
    }

    class DFA306 extends DFA {

        public DFA306(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 306;
            this.eot = DFA306_eot;
            this.eof = DFA306_eof;
            this.min = DFA306_min;
            this.max = DFA306_max;
            this.accept = DFA306_accept;
            this.special = DFA306_special;
            this.transition = DFA306_transition;
        }
        public String getDescription() {
            return "2762:1: unary_expression : ( ( TILDE cast_expression )=> TILDE cast_expression | ( new_expression )=> new_expression | ( delete_expression )=> delete_expression | ( type_trait_literal )=> type_trait_expression | postfix_expression | PLUSPLUS cast_expression | MINUSMINUS cast_expression | unary_operator_but_not_TILDE cast_expression | noexcept_expression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA306_0 = input.LA(1);

                         
                        int index306_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA306_0==TILDE) ) {s = 1;}

                        else if ( (LA306_0==SCOPE) ) {s = 2;}

                        else if ( (LA306_0==LITERAL_new) && (synpred52_CXXParser())) {s = 3;}

                        else if ( (LA306_0==LITERAL_delete) && (synpred53_CXXParser())) {s = 4;}

                        else if ( (LA306_0==LITERAL_sizeof) && (synpred54_CXXParser())) {s = 5;}

                        else if ( (LA306_0==LITERAL___is_class||LA306_0==LITERAL___is_pod||(LA306_0 >= LITERAL___has_nothrow_assign && LA306_0 <= LITERAL___underlying_type)) && (synpred54_CXXParser())) {s = 6;}

                        else if ( (LA306_0==LPAREN||LA306_0==LSQUARE||LA306_0==FLOATONE||(LA306_0 >= HEXADECIMALINT && LA306_0 <= DECIMALINT)||(LA306_0 >= CHAR_LITERAL && LA306_0 <= STRING_LITERAL)||(LA306_0 >= NUMBER && LA306_0 <= IDENT)||LA306_0==LITERAL_OPERATOR||(LA306_0 >= LITERAL_typeof && LA306_0 <= LITERAL___typeof)||(LA306_0 >= LITERAL_typename && LA306_0 <= LITERAL_auto)||LA306_0==LITERAL_const_cast||(LA306_0 >= LITERAL_char && LA306_0 <= LITERAL_signed)||LA306_0==LITERAL_unsigned||(LA306_0 >= LITERAL_float && LA306_0 <= LITERAL_void)||(LA306_0 >= LITERAL_this && LA306_0 <= LITERAL_false)||(LA306_0 >= LITERAL_dynamic_cast && LA306_0 <= LITERAL_reinterpret_cast)||LA306_0==LITERAL_decltype||(LA306_0 >= LITERAL_char16_t && LA306_0 <= LITERAL_char32_t)||LA306_0==LITERAL___decltype||LA306_0==LITERAL___null||LA306_0==LITERAL___builtin_va_list||LA306_0==LITERAL_typeid) ) {s = 7;}

                        else if ( (LA306_0==PLUSPLUS) ) {s = 8;}

                        else if ( (LA306_0==MINUSMINUS) ) {s = 9;}

                        else if ( (LA306_0==PLUS||LA306_0==MINUS||LA306_0==STAR||LA306_0==NOT||LA306_0==AMPERSAND) ) {s = 10;}

                        else if ( (LA306_0==LITERAL_noexcept) ) {s = 11;}

                         
                        input.seek(index306_0);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA306_2 = input.LA(1);

                         
                        int index306_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA306_2==LITERAL_new) && (synpred52_CXXParser())) {s = 3;}

                        else if ( (LA306_2==LITERAL_delete) && (synpred53_CXXParser())) {s = 4;}

                        else if ( (LA306_2==IDENT||LA306_2==LITERAL_OPERATOR) ) {s = 7;}

                         
                        input.seek(index306_2);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA306_31 = input.LA(1);

                         
                        int index306_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred51_CXXParser()) ) {s = 59;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index306_31);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA306_1 = input.LA(1);

                         
                        int index306_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA306_1==LPAREN) && (synpred51_CXXParser())) {s = 12;}

                        else if ( (LA306_1==TILDE) && (synpred51_CXXParser())) {s = 13;}

                        else if ( (LA306_1==SCOPE) && (synpred51_CXXParser())) {s = 14;}

                        else if ( (LA306_1==LITERAL_new) && (synpred51_CXXParser())) {s = 15;}

                        else if ( (LA306_1==LITERAL_delete) && (synpred51_CXXParser())) {s = 16;}

                        else if ( (LA306_1==LITERAL_sizeof) && (synpred51_CXXParser())) {s = 17;}

                        else if ( (LA306_1==LITERAL___is_class||LA306_1==LITERAL___is_pod||(LA306_1 >= LITERAL___has_nothrow_assign && LA306_1 <= LITERAL___underlying_type)) && (synpred51_CXXParser())) {s = 18;}

                        else if ( (LA306_1==DECIMALINT) && (synpred51_CXXParser())) {s = 19;}

                        else if ( (LA306_1==HEXADECIMALINT) && (synpred51_CXXParser())) {s = 20;}

                        else if ( (LA306_1==FLOATONE) && (synpred51_CXXParser())) {s = 21;}

                        else if ( (LA306_1==CHAR_LITERAL) && (synpred51_CXXParser())) {s = 22;}

                        else if ( (LA306_1==STRING_LITERAL) && (synpred51_CXXParser())) {s = 23;}

                        else if ( (LA306_1==NUMBER) && (synpred51_CXXParser())) {s = 24;}

                        else if ( (LA306_1==OCTALINT) && (synpred51_CXXParser())) {s = 25;}

                        else if ( (LA306_1==LITERAL_true) && (synpred51_CXXParser())) {s = 26;}

                        else if ( (LA306_1==LITERAL_false) && (synpred51_CXXParser())) {s = 27;}

                        else if ( (LA306_1==LITERAL___null) && (synpred51_CXXParser())) {s = 28;}

                        else if ( (LA306_1==LITERAL_this) && (synpred51_CXXParser())) {s = 29;}

                        else if ( (LA306_1==LITERAL_OPERATOR) && (synpred51_CXXParser())) {s = 30;}

                        else if ( (LA306_1==IDENT) ) {s = 31;}

                        else if ( (LA306_1==LSQUARE) && (synpred51_CXXParser())) {s = 32;}

                        else if ( (LA306_1==LITERAL_char) && (synpred51_CXXParser())) {s = 33;}

                        else if ( (LA306_1==LITERAL_wchar_t) && (synpred51_CXXParser())) {s = 34;}

                        else if ( (LA306_1==LITERAL_char16_t) && (synpred51_CXXParser())) {s = 35;}

                        else if ( (LA306_1==LITERAL_char32_t) && (synpred51_CXXParser())) {s = 36;}

                        else if ( (LA306_1==LITERAL_bool) && (synpred51_CXXParser())) {s = 37;}

                        else if ( (LA306_1==LITERAL_short) && (synpred51_CXXParser())) {s = 38;}

                        else if ( (LA306_1==LITERAL_int) && (synpred51_CXXParser())) {s = 39;}

                        else if ( (LA306_1==LITERAL_long) && (synpred51_CXXParser())) {s = 40;}

                        else if ( (LA306_1==LITERAL_signed) && (synpred51_CXXParser())) {s = 41;}

                        else if ( (LA306_1==LITERAL_unsigned) && (synpred51_CXXParser())) {s = 42;}

                        else if ( (LA306_1==LITERAL_float) && (synpred51_CXXParser())) {s = 43;}

                        else if ( (LA306_1==LITERAL_double) && (synpred51_CXXParser())) {s = 44;}

                        else if ( (LA306_1==LITERAL_void) && (synpred51_CXXParser())) {s = 45;}

                        else if ( (LA306_1==LITERAL_auto) && (synpred51_CXXParser())) {s = 46;}

                        else if ( (LA306_1==LITERAL___builtin_va_list) && (synpred51_CXXParser())) {s = 47;}

                        else if ( (LA306_1==LITERAL_decltype||LA306_1==LITERAL___decltype) && (synpred51_CXXParser())) {s = 48;}

                        else if ( ((LA306_1 >= LITERAL_typeof && LA306_1 <= LITERAL___typeof)) && (synpred51_CXXParser())) {s = 49;}

                        else if ( (LA306_1==LITERAL_typename) && (synpred51_CXXParser())) {s = 50;}

                        else if ( (LA306_1==LITERAL_dynamic_cast) && (synpred51_CXXParser())) {s = 51;}

                        else if ( (LA306_1==LITERAL_static_cast) && (synpred51_CXXParser())) {s = 52;}

                        else if ( (LA306_1==LITERAL_reinterpret_cast) && (synpred51_CXXParser())) {s = 53;}

                        else if ( (LA306_1==LITERAL_const_cast) && (synpred51_CXXParser())) {s = 54;}

                        else if ( (LA306_1==LITERAL_typeid) && (synpred51_CXXParser())) {s = 55;}

                        else if ( (LA306_1==PLUSPLUS) && (synpred51_CXXParser())) {s = 56;}

                        else if ( (LA306_1==MINUSMINUS) && (synpred51_CXXParser())) {s = 57;}

                        else if ( (LA306_1==PLUS||LA306_1==MINUS||LA306_1==STAR||LA306_1==NOT||LA306_1==AMPERSAND) && (synpred51_CXXParser())) {s = 58;}

                        else if ( (LA306_1==LITERAL_noexcept) && (synpred51_CXXParser())) {s = 59;}

                         
                        input.seek(index306_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 306, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA312_eotS =
        "\74\uffff";
    static final String DFA312_eofS =
        "\1\1\73\uffff";
    static final String DFA312_minS =
        "\1\4\3\uffff\2\0\66\uffff";
    static final String DFA312_maxS =
        "\1\u0109\3\uffff\2\0\66\uffff";
    static final String DFA312_acceptS =
        "\1\uffff\1\2\42\uffff\1\1\27\uffff";
    static final String DFA312_specialS =
        "\4\uffff\1\0\1\1\66\uffff}>";
    static final String[] DFA312_transitionS = {
            "\1\1\1\uffff\5\1\1\uffff\20\1\1\uffff\2\1\1\uffff\11\1\1\uffff"+
            "\3\1\1\uffff\6\1\1\4\46\uffff\1\5\25\uffff\3\44\2\uffff\1\44"+
            "\13\uffff\2\44\3\uffff\3\44\1\uffff\1\44\2\uffff\7\44\2\uffff"+
            "\1\44\1\uffff\3\44\2\uffff\3\44\102\uffff\1\44\4\uffff\2\44"+
            "\1\uffff\1\44\35\uffff\1\44",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA312_eot = DFA.unpackEncodedString(DFA312_eotS);
    static final short[] DFA312_eof = DFA.unpackEncodedString(DFA312_eofS);
    static final char[] DFA312_min = DFA.unpackEncodedStringToUnsignedChars(DFA312_minS);
    static final char[] DFA312_max = DFA.unpackEncodedStringToUnsignedChars(DFA312_maxS);
    static final short[] DFA312_accept = DFA.unpackEncodedString(DFA312_acceptS);
    static final short[] DFA312_special = DFA.unpackEncodedString(DFA312_specialS);
    static final short[][] DFA312_transition;

    static {
        int numStates = DFA312_transitionS.length;
        DFA312_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA312_transition[i] = DFA.unpackEncodedString(DFA312_transitionS[i]);
        }
    }

    class DFA312 extends DFA {

        public DFA312(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 312;
            this.eot = DFA312_eot;
            this.eof = DFA312_eof;
            this.min = DFA312_min;
            this.max = DFA312_max;
            this.accept = DFA312_accept;
            this.special = DFA312_special;
            this.transition = DFA312_transition;
        }
        public String getDescription() {
            return "()* loopback of 2834:9: ( type_specifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA312_4 = input.LA(1);

                         
                        int index312_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (( action.type_specifier_already_present(input) )) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index312_4);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA312_5 = input.LA(1);

                         
                        int index312_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (( action.type_specifier_already_present(input) )) ) {s = 36;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index312_5);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 312, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA345_eotS =
        "\166\uffff";
    static final String DFA345_eofS =
        "\1\uffff\1\11\6\uffff\1\11\155\uffff";
    static final String DFA345_minS =
        "\2\4\6\uffff\1\4\155\uffff";
    static final String DFA345_maxS =
        "\2\u0209\6\uffff\1\u0209\155\uffff";
    static final String DFA345_acceptS =
        "\2\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\uffff\1\10\154\1";
    static final String DFA345_specialS =
        "\1\uffff\1\1\6\uffff\1\0\155\uffff}>";
    static final String[] DFA345_transitionS = {
            "\6\7\1\uffff\1\7\1\3\1\4\1\5\1\6\2\uffff\3\7\1\2\1\7\1\1\35"+
            "\7\12\uffff\1\7\1\uffff\3\7\12\uffff\2\7\12\uffff\2\7\22\uffff"+
            "\1\7\3\uffff\1\7\2\uffff\2\7\1\uffff\1\7\11\uffff\4\7\1\uffff"+
            "\5\7\2\uffff\7\7\2\uffff\1\7\1\uffff\3\7\1\uffff\7\7\3\uffff"+
            "\1\7\25\uffff\5\7\12\uffff\1\7\4\uffff\1\7\5\uffff\1\7\2\uffff"+
            "\1\7\3\uffff\2\7\22\uffff\1\7\u010b\uffff\11\7\1\uffff\2\7",
            "\1\114\1\104\1\71\1\110\1\113\1\107\1\uffff\1\106\1\14\1\15"+
            "\1\16\1\17\2\uffff\1\65\1\70\1\66\1\13\1\67\1\12\1\56\1\73\1"+
            "\30\1\77\1\37\1\31\1\76\1\40\1\32\1\101\1\105\1\100\1\60\1\75"+
            "\1\57\1\74\1\62\1\36\1\63\1\33\1\72\1\35\1\61\1\102\1\64\1\103"+
            "\1\112\1\111\1\10\12\uffff\1\23\1\uffff\1\22\1\27\1\21\12\uffff"+
            "\1\24\1\25\12\uffff\1\26\1\20\22\uffff\1\41\3\uffff\1\153\2"+
            "\uffff\1\115\1\130\1\uffff\1\116\11\uffff\1\131\1\120\1\121"+
            "\1\117\1\uffff\3\123\1\137\1\124\2\uffff\1\46\1\135\1\143\1"+
            "\47\1\55\1\50\1\53\2\uffff\1\54\1\uffff\1\51\1\52\1\45\1\uffff"+
            "\1\151\1\127\1\125\1\126\1\44\1\144\1\145\3\uffff\1\134\25\uffff"+
            "\1\34\1\141\1\140\1\142\1\42\12\uffff\1\43\4\uffff\1\152\5\uffff"+
            "\1\146\2\uffff\1\122\3\uffff\1\147\1\150\22\uffff\1\133\u010b"+
            "\uffff\1\161\1\160\1\163\1\156\1\162\1\154\1\157\1\164\1\155"+
            "\1\uffff\1\132\1\136",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\114\1\104\1\71\1\110\1\113\1\107\1\uffff\1\106\1\14\1\15"+
            "\1\16\1\17\2\uffff\1\65\1\70\1\66\1\13\1\67\1\12\1\56\1\73\1"+
            "\30\1\77\1\37\1\31\1\76\1\40\1\32\1\101\1\105\1\100\1\60\1\75"+
            "\1\57\1\74\1\62\1\36\1\63\1\33\1\72\1\35\1\61\1\102\1\64\1\103"+
            "\1\112\1\111\1\165\12\uffff\1\23\1\uffff\1\22\1\27\1\21\12\uffff"+
            "\1\24\1\25\12\uffff\1\26\1\20\22\uffff\1\41\3\uffff\1\153\2"+
            "\uffff\1\115\1\130\1\uffff\1\116\11\uffff\1\131\1\120\1\121"+
            "\1\117\1\uffff\3\123\1\137\1\124\2\uffff\1\46\1\135\1\143\1"+
            "\47\1\55\1\50\1\53\2\uffff\1\54\1\uffff\1\51\1\52\1\45\1\uffff"+
            "\1\151\1\127\1\125\1\126\1\44\1\144\1\145\3\uffff\1\134\25\uffff"+
            "\1\34\1\141\1\140\1\142\1\42\12\uffff\1\43\4\uffff\1\152\5\uffff"+
            "\1\146\2\uffff\1\122\3\uffff\1\147\1\150\22\uffff\1\133\u010b"+
            "\uffff\1\161\1\160\1\163\1\156\1\162\1\154\1\157\1\164\1\155"+
            "\1\uffff\1\132\1\136",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA345_eot = DFA.unpackEncodedString(DFA345_eotS);
    static final short[] DFA345_eof = DFA.unpackEncodedString(DFA345_eofS);
    static final char[] DFA345_min = DFA.unpackEncodedStringToUnsignedChars(DFA345_minS);
    static final char[] DFA345_max = DFA.unpackEncodedStringToUnsignedChars(DFA345_maxS);
    static final short[] DFA345_accept = DFA.unpackEncodedString(DFA345_acceptS);
    static final short[] DFA345_special = DFA.unpackEncodedString(DFA345_specialS);
    static final short[][] DFA345_transition;

    static {
        int numStates = DFA345_transitionS.length;
        DFA345_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA345_transition[i] = DFA.unpackEncodedString(DFA345_transitionS[i]);
        }
    }

    class DFA345 extends DFA {

        public DFA345(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 345;
            this.eot = DFA345_eot;
            this.eof = DFA345_eof;
            this.min = DFA345_min;
            this.max = DFA345_max;
            this.accept = DFA345_accept;
            this.special = DFA345_special;
            this.transition = DFA345_transition;
        }
        public String getDescription() {
            return "()* loopback of 3111:9: ( ( GREATERTHAN {...}?)=> GREATERTHAN | LESSTHAN | LPAREN | RPAREN | LSQUARE | RSQUARE | lookahead_tokenset_arg_syms )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA345_8 = input.LA(1);

                         
                        int index345_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA345_8==EOF) ) {s = 9;}

                        else if ( (LA345_8==GREATERTHAN) && (synpred61_CXXParser())) {s = 10;}

                        else if ( (LA345_8==LESSTHAN) && (synpred61_CXXParser())) {s = 11;}

                        else if ( (LA345_8==LPAREN) && (synpred61_CXXParser())) {s = 12;}

                        else if ( (LA345_8==RPAREN) && (synpred61_CXXParser())) {s = 13;}

                        else if ( (LA345_8==LSQUARE) && (synpred61_CXXParser())) {s = 14;}

                        else if ( (LA345_8==RSQUARE) && (synpred61_CXXParser())) {s = 15;}

                        else if ( (LA345_8==IDENT) && (synpred61_CXXParser())) {s = 16;}

                        else if ( (LA345_8==DECIMALINT) && (synpred61_CXXParser())) {s = 17;}

                        else if ( (LA345_8==HEXADECIMALINT) && (synpred61_CXXParser())) {s = 18;}

                        else if ( (LA345_8==FLOATONE) && (synpred61_CXXParser())) {s = 19;}

                        else if ( (LA345_8==CHAR_LITERAL) && (synpred61_CXXParser())) {s = 20;}

                        else if ( (LA345_8==STRING_LITERAL) && (synpred61_CXXParser())) {s = 21;}

                        else if ( (LA345_8==NUMBER) && (synpred61_CXXParser())) {s = 22;}

                        else if ( (LA345_8==OCTALINT) && (synpred61_CXXParser())) {s = 23;}

                        else if ( (LA345_8==PLUS) && (synpred61_CXXParser())) {s = 24;}

                        else if ( (LA345_8==MINUS) && (synpred61_CXXParser())) {s = 25;}

                        else if ( (LA345_8==STAR) && (synpred61_CXXParser())) {s = 26;}

                        else if ( (LA345_8==AMPERSAND) && (synpred61_CXXParser())) {s = 27;}

                        else if ( (LA345_8==LITERAL_sizeof) && (synpred61_CXXParser())) {s = 28;}

                        else if ( (LA345_8==TILDE) && (synpred61_CXXParser())) {s = 29;}

                        else if ( (LA345_8==NOT) && (synpred61_CXXParser())) {s = 30;}

                        else if ( (LA345_8==PLUSPLUS) && (synpred61_CXXParser())) {s = 31;}

                        else if ( (LA345_8==MINUSMINUS) && (synpred61_CXXParser())) {s = 32;}

                        else if ( (LA345_8==LITERAL_OPERATOR) && (synpred61_CXXParser())) {s = 33;}

                        else if ( (LA345_8==LITERAL_new) && (synpred61_CXXParser())) {s = 34;}

                        else if ( (LA345_8==LITERAL_delete) && (synpred61_CXXParser())) {s = 35;}

                        else if ( (LA345_8==LITERAL_this) && (synpred61_CXXParser())) {s = 36;}

                        else if ( (LA345_8==LITERAL_void) && (synpred61_CXXParser())) {s = 37;}

                        else if ( (LA345_8==LITERAL_char) && (synpred61_CXXParser())) {s = 38;}

                        else if ( (LA345_8==LITERAL_short) && (synpred61_CXXParser())) {s = 39;}

                        else if ( (LA345_8==LITERAL_long) && (synpred61_CXXParser())) {s = 40;}

                        else if ( (LA345_8==LITERAL_float) && (synpred61_CXXParser())) {s = 41;}

                        else if ( (LA345_8==LITERAL_double) && (synpred61_CXXParser())) {s = 42;}

                        else if ( (LA345_8==LITERAL_signed) && (synpred61_CXXParser())) {s = 43;}

                        else if ( (LA345_8==LITERAL_unsigned) && (synpred61_CXXParser())) {s = 44;}

                        else if ( (LA345_8==LITERAL_int) && (synpred61_CXXParser())) {s = 45;}

                        else if ( (LA345_8==DIVIDE) && (synpred61_CXXParser())) {s = 46;}

                        else if ( (LA345_8==SHIFTLEFT) && (synpred61_CXXParser())) {s = 47;}

                        else if ( (LA345_8==SHIFTRIGHT) && (synpred61_CXXParser())) {s = 48;}

                        else if ( (LA345_8==BITWISEOR) && (synpred61_CXXParser())) {s = 49;}

                        else if ( (LA345_8==AND) && (synpred61_CXXParser())) {s = 50;}

                        else if ( (LA345_8==OR) && (synpred61_CXXParser())) {s = 51;}

                        else if ( (LA345_8==BITWISEXOR) && (synpred61_CXXParser())) {s = 52;}

                        else if ( (LA345_8==EQUAL) && (synpred61_CXXParser())) {s = 53;}

                        else if ( (LA345_8==LESSTHANOREQUALTO) && (synpred61_CXXParser())) {s = 54;}

                        else if ( (LA345_8==GREATERTHANOREQUALTO) && (synpred61_CXXParser())) {s = 55;}

                        else if ( (LA345_8==NOTEQUAL) && (synpred61_CXXParser())) {s = 56;}

                        else if ( (LA345_8==ASSIGNEQUAL) && (synpred61_CXXParser())) {s = 57;}

                        else if ( (LA345_8==BITWISEANDEQUAL) && (synpred61_CXXParser())) {s = 58;}

                        else if ( (LA345_8==DIVIDEEQUAL) && (synpred61_CXXParser())) {s = 59;}

                        else if ( (LA345_8==SHIFTLEFTEQUAL) && (synpred61_CXXParser())) {s = 60;}

                        else if ( (LA345_8==SHIFTRIGHTEQUAL) && (synpred61_CXXParser())) {s = 61;}

                        else if ( (LA345_8==MINUSEQUAL) && (synpred61_CXXParser())) {s = 62;}

                        else if ( (LA345_8==PLUSEQUAL) && (synpred61_CXXParser())) {s = 63;}

                        else if ( (LA345_8==MODEQUAL) && (synpred61_CXXParser())) {s = 64;}

                        else if ( (LA345_8==TIMESEQUAL) && (synpred61_CXXParser())) {s = 65;}

                        else if ( (LA345_8==BITWISEOREQUAL) && (synpred61_CXXParser())) {s = 66;}

                        else if ( (LA345_8==BITWISEXOREQUAL) && (synpred61_CXXParser())) {s = 67;}

                        else if ( (LA345_8==DOT) && (synpred61_CXXParser())) {s = 68;}

                        else if ( (LA345_8==MOD) && (synpred61_CXXParser())) {s = 69;}

                        else if ( (LA345_8==POINTERTO) && (synpred61_CXXParser())) {s = 70;}

                        else if ( (LA345_8==QUESTIONMARK) && (synpred61_CXXParser())) {s = 71;}

                        else if ( (LA345_8==COLON) && (synpred61_CXXParser())) {s = 72;}

                        else if ( (LA345_8==SCOPE) && (synpred61_CXXParser())) {s = 117;}

                        else if ( (LA345_8==DOTMBR) && (synpred61_CXXParser())) {s = 73;}

                        else if ( (LA345_8==POINTERTOMBR) && (synpred61_CXXParser())) {s = 74;}

                        else if ( (LA345_8==COMMA) && (synpred61_CXXParser())) {s = 75;}

                        else if ( (LA345_8==ELLIPSIS) && (synpred61_CXXParser())) {s = 76;}

                        else if ( (LA345_8==LITERAL_typedef) && (synpred61_CXXParser())) {s = 77;}

                        else if ( (LA345_8==LITERAL_extern) && (synpred61_CXXParser())) {s = 78;}

                        else if ( (LA345_8==LITERAL_static) && (synpred61_CXXParser())) {s = 79;}

                        else if ( (LA345_8==LITERAL_auto) && (synpred61_CXXParser())) {s = 80;}

                        else if ( (LA345_8==LITERAL_register) && (synpred61_CXXParser())) {s = 81;}

                        else if ( (LA345_8==LITERAL___thread) && (synpred61_CXXParser())) {s = 82;}

                        else if ( ((LA345_8 >= LITERAL_const && LA345_8 <= LITERAL___const)) && (synpred61_CXXParser())) {s = 83;}

                        else if ( (LA345_8==LITERAL_volatile) && (synpred61_CXXParser())) {s = 84;}

                        else if ( (LA345_8==LITERAL_struct) && (synpred61_CXXParser())) {s = 85;}

                        else if ( (LA345_8==LITERAL_union) && (synpred61_CXXParser())) {s = 86;}

                        else if ( (LA345_8==LITERAL_class) && (synpred61_CXXParser())) {s = 87;}

                        else if ( (LA345_8==LITERAL_enum) && (synpred61_CXXParser())) {s = 88;}

                        else if ( (LA345_8==LITERAL_typename) && (synpred61_CXXParser())) {s = 89;}

                        else if ( (LA345_8==LITERAL___offsetof) && (synpred61_CXXParser())) {s = 90;}

                        else if ( (LA345_8==LITERAL___alignof) && (synpred61_CXXParser())) {s = 91;}

                        else if ( (LA345_8==LITERAL_throw) && (synpred61_CXXParser())) {s = 92;}

                        else if ( (LA345_8==LITERAL_wchar_t) && (synpred61_CXXParser())) {s = 93;}

                        else if ( (LA345_8==LITERAL_typeid) && (synpred61_CXXParser())) {s = 94;}

                        else if ( (LA345_8==LITERAL_const_cast) && (synpred61_CXXParser())) {s = 95;}

                        else if ( (LA345_8==LITERAL_static_cast) && (synpred61_CXXParser())) {s = 96;}

                        else if ( (LA345_8==LITERAL_dynamic_cast) && (synpred61_CXXParser())) {s = 97;}

                        else if ( (LA345_8==LITERAL_reinterpret_cast) && (synpred61_CXXParser())) {s = 98;}

                        else if ( (LA345_8==LITERAL_bool) && (synpred61_CXXParser())) {s = 99;}

                        else if ( (LA345_8==LITERAL_true) && (synpred61_CXXParser())) {s = 100;}

                        else if ( (LA345_8==LITERAL_false) && (synpred61_CXXParser())) {s = 101;}

                        else if ( (LA345_8==LITERAL___global) && (synpred61_CXXParser())) {s = 102;}

                        else if ( (LA345_8==LITERAL___symbolic) && (synpred61_CXXParser())) {s = 103;}

                        else if ( (LA345_8==LITERAL___hidden) && (synpred61_CXXParser())) {s = 104;}

                        else if ( (LA345_8==LITERAL___declspec) && (synpred61_CXXParser())) {s = 105;}

                        else if ( (LA345_8==LITERAL___attribute__) && (synpred61_CXXParser())) {s = 106;}

                        else if ( (LA345_8==LITERAL___typeof__) && (synpred61_CXXParser())) {s = 107;}

                        else if ( (LA345_8==IS_ENUM) && (synpred61_CXXParser())) {s = 108;}

                        else if ( (LA345_8==IS_UNION) && (synpred61_CXXParser())) {s = 109;}

                        else if ( (LA345_8==IS_CLASS) && (synpred61_CXXParser())) {s = 110;}

                        else if ( (LA345_8==IS_POD) && (synpred61_CXXParser())) {s = 111;}

                        else if ( (LA345_8==IS_ABSTRACT) && (synpred61_CXXParser())) {s = 112;}

                        else if ( (LA345_8==HAS_VIRT_DESTR) && (synpred61_CXXParser())) {s = 113;}

                        else if ( (LA345_8==IS_EMPTY) && (synpred61_CXXParser())) {s = 114;}

                        else if ( (LA345_8==IS_BASEOF) && (synpred61_CXXParser())) {s = 115;}

                        else if ( (LA345_8==IS_POLYMORPH) && (synpred61_CXXParser())) {s = 116;}

                         
                        input.seek(index345_8);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA345_1 = input.LA(1);

                         
                        int index345_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA345_1==SCOPE) ) {s = 8;}

                        else if ( (LA345_1==EOF) ) {s = 9;}

                        else if ( (LA345_1==GREATERTHAN) && (synpred61_CXXParser())) {s = 10;}

                        else if ( (LA345_1==LESSTHAN) && (synpred61_CXXParser())) {s = 11;}

                        else if ( (LA345_1==LPAREN) && (synpred61_CXXParser())) {s = 12;}

                        else if ( (LA345_1==RPAREN) && (synpred61_CXXParser())) {s = 13;}

                        else if ( (LA345_1==LSQUARE) && (synpred61_CXXParser())) {s = 14;}

                        else if ( (LA345_1==RSQUARE) && (synpred61_CXXParser())) {s = 15;}

                        else if ( (LA345_1==IDENT) && (synpred61_CXXParser())) {s = 16;}

                        else if ( (LA345_1==DECIMALINT) && (synpred61_CXXParser())) {s = 17;}

                        else if ( (LA345_1==HEXADECIMALINT) && (synpred61_CXXParser())) {s = 18;}

                        else if ( (LA345_1==FLOATONE) && (synpred61_CXXParser())) {s = 19;}

                        else if ( (LA345_1==CHAR_LITERAL) && (synpred61_CXXParser())) {s = 20;}

                        else if ( (LA345_1==STRING_LITERAL) && (synpred61_CXXParser())) {s = 21;}

                        else if ( (LA345_1==NUMBER) && (synpred61_CXXParser())) {s = 22;}

                        else if ( (LA345_1==OCTALINT) && (synpred61_CXXParser())) {s = 23;}

                        else if ( (LA345_1==PLUS) && (synpred61_CXXParser())) {s = 24;}

                        else if ( (LA345_1==MINUS) && (synpred61_CXXParser())) {s = 25;}

                        else if ( (LA345_1==STAR) && (synpred61_CXXParser())) {s = 26;}

                        else if ( (LA345_1==AMPERSAND) && (synpred61_CXXParser())) {s = 27;}

                        else if ( (LA345_1==LITERAL_sizeof) && (synpred61_CXXParser())) {s = 28;}

                        else if ( (LA345_1==TILDE) && (synpred61_CXXParser())) {s = 29;}

                        else if ( (LA345_1==NOT) && (synpred61_CXXParser())) {s = 30;}

                        else if ( (LA345_1==PLUSPLUS) && (synpred61_CXXParser())) {s = 31;}

                        else if ( (LA345_1==MINUSMINUS) && (synpred61_CXXParser())) {s = 32;}

                        else if ( (LA345_1==LITERAL_OPERATOR) && (synpred61_CXXParser())) {s = 33;}

                        else if ( (LA345_1==LITERAL_new) && (synpred61_CXXParser())) {s = 34;}

                        else if ( (LA345_1==LITERAL_delete) && (synpred61_CXXParser())) {s = 35;}

                        else if ( (LA345_1==LITERAL_this) && (synpred61_CXXParser())) {s = 36;}

                        else if ( (LA345_1==LITERAL_void) && (synpred61_CXXParser())) {s = 37;}

                        else if ( (LA345_1==LITERAL_char) && (synpred61_CXXParser())) {s = 38;}

                        else if ( (LA345_1==LITERAL_short) && (synpred61_CXXParser())) {s = 39;}

                        else if ( (LA345_1==LITERAL_long) && (synpred61_CXXParser())) {s = 40;}

                        else if ( (LA345_1==LITERAL_float) && (synpred61_CXXParser())) {s = 41;}

                        else if ( (LA345_1==LITERAL_double) && (synpred61_CXXParser())) {s = 42;}

                        else if ( (LA345_1==LITERAL_signed) && (synpred61_CXXParser())) {s = 43;}

                        else if ( (LA345_1==LITERAL_unsigned) && (synpred61_CXXParser())) {s = 44;}

                        else if ( (LA345_1==LITERAL_int) && (synpred61_CXXParser())) {s = 45;}

                        else if ( (LA345_1==DIVIDE) && (synpred61_CXXParser())) {s = 46;}

                        else if ( (LA345_1==SHIFTLEFT) && (synpred61_CXXParser())) {s = 47;}

                        else if ( (LA345_1==SHIFTRIGHT) && (synpred61_CXXParser())) {s = 48;}

                        else if ( (LA345_1==BITWISEOR) && (synpred61_CXXParser())) {s = 49;}

                        else if ( (LA345_1==AND) && (synpred61_CXXParser())) {s = 50;}

                        else if ( (LA345_1==OR) && (synpred61_CXXParser())) {s = 51;}

                        else if ( (LA345_1==BITWISEXOR) && (synpred61_CXXParser())) {s = 52;}

                        else if ( (LA345_1==EQUAL) && (synpred61_CXXParser())) {s = 53;}

                        else if ( (LA345_1==LESSTHANOREQUALTO) && (synpred61_CXXParser())) {s = 54;}

                        else if ( (LA345_1==GREATERTHANOREQUALTO) && (synpred61_CXXParser())) {s = 55;}

                        else if ( (LA345_1==NOTEQUAL) && (synpred61_CXXParser())) {s = 56;}

                        else if ( (LA345_1==ASSIGNEQUAL) && (synpred61_CXXParser())) {s = 57;}

                        else if ( (LA345_1==BITWISEANDEQUAL) && (synpred61_CXXParser())) {s = 58;}

                        else if ( (LA345_1==DIVIDEEQUAL) && (synpred61_CXXParser())) {s = 59;}

                        else if ( (LA345_1==SHIFTLEFTEQUAL) && (synpred61_CXXParser())) {s = 60;}

                        else if ( (LA345_1==SHIFTRIGHTEQUAL) && (synpred61_CXXParser())) {s = 61;}

                        else if ( (LA345_1==MINUSEQUAL) && (synpred61_CXXParser())) {s = 62;}

                        else if ( (LA345_1==PLUSEQUAL) && (synpred61_CXXParser())) {s = 63;}

                        else if ( (LA345_1==MODEQUAL) && (synpred61_CXXParser())) {s = 64;}

                        else if ( (LA345_1==TIMESEQUAL) && (synpred61_CXXParser())) {s = 65;}

                        else if ( (LA345_1==BITWISEOREQUAL) && (synpred61_CXXParser())) {s = 66;}

                        else if ( (LA345_1==BITWISEXOREQUAL) && (synpred61_CXXParser())) {s = 67;}

                        else if ( (LA345_1==DOT) && (synpred61_CXXParser())) {s = 68;}

                        else if ( (LA345_1==MOD) && (synpred61_CXXParser())) {s = 69;}

                        else if ( (LA345_1==POINTERTO) && (synpred61_CXXParser())) {s = 70;}

                        else if ( (LA345_1==QUESTIONMARK) && (synpred61_CXXParser())) {s = 71;}

                        else if ( (LA345_1==COLON) && (synpred61_CXXParser())) {s = 72;}

                        else if ( (LA345_1==DOTMBR) && (synpred61_CXXParser())) {s = 73;}

                        else if ( (LA345_1==POINTERTOMBR) && (synpred61_CXXParser())) {s = 74;}

                        else if ( (LA345_1==COMMA) && (synpred61_CXXParser())) {s = 75;}

                        else if ( (LA345_1==ELLIPSIS) && (synpred61_CXXParser())) {s = 76;}

                        else if ( (LA345_1==LITERAL_typedef) && (synpred61_CXXParser())) {s = 77;}

                        else if ( (LA345_1==LITERAL_extern) && (synpred61_CXXParser())) {s = 78;}

                        else if ( (LA345_1==LITERAL_static) && (synpred61_CXXParser())) {s = 79;}

                        else if ( (LA345_1==LITERAL_auto) && (synpred61_CXXParser())) {s = 80;}

                        else if ( (LA345_1==LITERAL_register) && (synpred61_CXXParser())) {s = 81;}

                        else if ( (LA345_1==LITERAL___thread) && (synpred61_CXXParser())) {s = 82;}

                        else if ( ((LA345_1 >= LITERAL_const && LA345_1 <= LITERAL___const)) && (synpred61_CXXParser())) {s = 83;}

                        else if ( (LA345_1==LITERAL_volatile) && (synpred61_CXXParser())) {s = 84;}

                        else if ( (LA345_1==LITERAL_struct) && (synpred61_CXXParser())) {s = 85;}

                        else if ( (LA345_1==LITERAL_union) && (synpred61_CXXParser())) {s = 86;}

                        else if ( (LA345_1==LITERAL_class) && (synpred61_CXXParser())) {s = 87;}

                        else if ( (LA345_1==LITERAL_enum) && (synpred61_CXXParser())) {s = 88;}

                        else if ( (LA345_1==LITERAL_typename) && (synpred61_CXXParser())) {s = 89;}

                        else if ( (LA345_1==LITERAL___offsetof) && (synpred61_CXXParser())) {s = 90;}

                        else if ( (LA345_1==LITERAL___alignof) && (synpred61_CXXParser())) {s = 91;}

                        else if ( (LA345_1==LITERAL_throw) && (synpred61_CXXParser())) {s = 92;}

                        else if ( (LA345_1==LITERAL_wchar_t) && (synpred61_CXXParser())) {s = 93;}

                        else if ( (LA345_1==LITERAL_typeid) && (synpred61_CXXParser())) {s = 94;}

                        else if ( (LA345_1==LITERAL_const_cast) && (synpred61_CXXParser())) {s = 95;}

                        else if ( (LA345_1==LITERAL_static_cast) && (synpred61_CXXParser())) {s = 96;}

                        else if ( (LA345_1==LITERAL_dynamic_cast) && (synpred61_CXXParser())) {s = 97;}

                        else if ( (LA345_1==LITERAL_reinterpret_cast) && (synpred61_CXXParser())) {s = 98;}

                        else if ( (LA345_1==LITERAL_bool) && (synpred61_CXXParser())) {s = 99;}

                        else if ( (LA345_1==LITERAL_true) && (synpred61_CXXParser())) {s = 100;}

                        else if ( (LA345_1==LITERAL_false) && (synpred61_CXXParser())) {s = 101;}

                        else if ( (LA345_1==LITERAL___global) && (synpred61_CXXParser())) {s = 102;}

                        else if ( (LA345_1==LITERAL___symbolic) && (synpred61_CXXParser())) {s = 103;}

                        else if ( (LA345_1==LITERAL___hidden) && (synpred61_CXXParser())) {s = 104;}

                        else if ( (LA345_1==LITERAL___declspec) && (synpred61_CXXParser())) {s = 105;}

                        else if ( (LA345_1==LITERAL___attribute__) && (synpred61_CXXParser())) {s = 106;}

                        else if ( (LA345_1==LITERAL___typeof__) && (synpred61_CXXParser())) {s = 107;}

                        else if ( (LA345_1==IS_ENUM) && (synpred61_CXXParser())) {s = 108;}

                        else if ( (LA345_1==IS_UNION) && (synpred61_CXXParser())) {s = 109;}

                        else if ( (LA345_1==IS_CLASS) && (synpred61_CXXParser())) {s = 110;}

                        else if ( (LA345_1==IS_POD) && (synpred61_CXXParser())) {s = 111;}

                        else if ( (LA345_1==IS_ABSTRACT) && (synpred61_CXXParser())) {s = 112;}

                        else if ( (LA345_1==HAS_VIRT_DESTR) && (synpred61_CXXParser())) {s = 113;}

                        else if ( (LA345_1==IS_EMPTY) && (synpred61_CXXParser())) {s = 114;}

                        else if ( (LA345_1==IS_BASEOF) && (synpred61_CXXParser())) {s = 115;}

                        else if ( (LA345_1==IS_POLYMORPH) && (synpred61_CXXParser())) {s = 116;}

                         
                        input.seek(index345_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 345, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_translation_unit_in_compilation_unit70 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sync_declaration_in_translation_unit174 = new BitSet(new long[]{0x0010290100005410L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_declaration_in_translation_unit199 = new BitSet(new long[]{0x0010290100005410L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_sync_declaration_in_translation_unit214 = new BitSet(new long[]{0x0010290100005410L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_EOF_in_translation_unit228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_specifiers_in_statement429 = new BitSet(new long[]{0x80102B01B4015610L,0xF3EE40000C00C00EL,0xEF5FF78FCE9FCFFCL,0xFC2A0F6CC4801003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_labeled_statement_in_statement454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_or_declaration_statement_in_statement478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_statement_in_statement502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selection_statement_in_statement527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iteration_statement_in_statement551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jump_statement_in_statement575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_block_in_statement599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_labeled_statement870 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_labeled_statement872 = new BitSet(new long[]{0x80102B01B4015610L,0xF3EE40000C00C00EL,0xEF5FF78FCE9FCFFCL,0xFC2A0FECC4831003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_statement_in_labeled_statement944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_case_in_labeled_statement960 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_constant_expression_in_labeled_statement1031 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_labeled_statement1042 = new BitSet(new long[]{0x80102B01B4015610L,0xF3EE40000C00C00EL,0xEF5FF78FCE9FCFFCL,0xFC2A0FECC4831003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_statement_in_labeled_statement1120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_default_in_labeled_statement1136 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_labeled_statement1138 = new BitSet(new long[]{0x80102B01B4015610L,0xF3EE40000C00C00EL,0xEF5FF78FCE9FCFFCL,0xFC2A0FECC4831003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_statement_in_labeled_statement1200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expression_statement1536 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_expression_statement1539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expression_or_declaration_statement1790 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_expression_or_declaration_statement1792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_statement_in_expression_or_declaration_statement1890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skip_balanced_Curl_in_compound_statement1998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_compound_statement2014 = new BitSet(new long[]{0x80102B01B4035610L,0xF3EE40000C00C00EL,0xEF5FF78FCE9FCFFCL,0xFC2A0FECC4831003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_sync_statement_in_compound_statement2025 = new BitSet(new long[]{0x80102B01B4035610L,0xF3EE40000C00C00EL,0xEF5FF78FCE9FCFFCL,0xFC2A0FECC4831003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_statement_in_compound_statement2050 = new BitSet(new long[]{0x80102B01B4035610L,0xF3EE40000C00C00EL,0xEF5FF78FCE9FCFFCL,0xFC2A0FECC4831003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_sync_statement_in_compound_statement2064 = new BitSet(new long[]{0x80102B01B4035610L,0xF3EE40000C00C00EL,0xEF5FF78FCE9FCFFCL,0xFC2A0FECC4831003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RCURLY_in_compound_statement2087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_if_in_selection_statement2348 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_selection_statement2421 = new BitSet(new long[]{0x80102A01B4005200L,0x004E40000C00C00EL,0xE000008FCE9FCF8CL,0xFC2A0F8800031003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_condition_in_selection_statement2498 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_selection_statement2509 = new BitSet(new long[]{0x80102B01B4015610L,0xF3EE40000C00C00EL,0xEF5FF78FCE9FCFFCL,0xFC2A0FECC4831003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_statement_in_selection_statement2586 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LITERAL_else_in_selection_statement2617 = new BitSet(new long[]{0x80102B01B4015610L,0xF3EE40000C00C00EL,0xEF5FF78FCE9FCFFCL,0xFC2A0FECC4831003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_statement_in_selection_statement2688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_switch_in_selection_statement2716 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_selection_statement2785 = new BitSet(new long[]{0x80102A01B4005200L,0x004E40000C00C00EL,0xE000008FCE9FCF8CL,0xFC2A0F8800031003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_condition_in_selection_statement2862 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_selection_statement2873 = new BitSet(new long[]{0x80102B01B4015610L,0xF3EE40000C00C00EL,0xEF5FF78FCE9FCFFCL,0xFC2A0FECC4831003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_statement_in_selection_statement2950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_declaration_in_condition3324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_expression_in_condition3340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_specifiers_in_condition_declaration3601 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_specifier_in_condition_declaration3612 = new BitSet(new long[]{0x0010290100001010L,0x004E400008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_declarator_in_condition_declaration3615 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_EQUAL_in_condition_declaration3626 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_assignment_expression_in_condition_declaration3704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_condition_expression3884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_while_in_iteration_statement4145 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_iteration_statement4215 = new BitSet(new long[]{0x80102A01B4005200L,0x004E40000C00C00EL,0xE000008FCE9FCF8CL,0xFC2A0F8800031003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_condition_in_iteration_statement4292 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_iteration_statement4302 = new BitSet(new long[]{0x80102B01B4015610L,0xF3EE40000C00C00EL,0xEF5FF78FCE9FCFFCL,0xFC2A0FECC4831003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_statement_in_iteration_statement4379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_do_in_iteration_statement4395 = new BitSet(new long[]{0x80102B01B4015610L,0xF3EE40000C00C00EL,0xEF5FF78FCE9FCFFCL,0xFC2A0FECC4831003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_statement_in_iteration_statement4468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_LITERAL_while_in_iteration_statement4479 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_iteration_statement4549 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_iteration_statement4626 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_iteration_statement4637 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_iteration_statement4714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_for_in_iteration_statement4730 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_iteration_statement4802 = new BitSet(new long[]{0x80102B01B4005610L,0xF36E40000C00C00EL,0xE000008FCE9FCFFCL,0xFC2A0FACC4831003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_for_range_declaration_in_iteration_statement4913 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_iteration_statement4928 = new BitSet(new long[]{0x80102A01B4015200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_for_range_initializer_in_iteration_statement5006 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_for_init_statement_in_iteration_statement5030 = new BitSet(new long[]{0x80102A01B4005600L,0x004E40000C00C00EL,0xE000008FCE9FCF8CL,0xFC2A0F8800031003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_condition_in_iteration_statement5045 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_iteration_statement5061 = new BitSet(new long[]{0x80102A01B4007200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_iteration_statement5135 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_iteration_statement5157 = new BitSet(new long[]{0x80102B01B4015610L,0xF3EE40000C00C00EL,0xEF5FF78FCE9FCFFCL,0xFC2A0FECC4831003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_statement_in_iteration_statement5234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_declaration_in_for_init_statement5596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_statement_in_for_init_statement5613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_specifiers_in_for_range_declaration5870 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_specifier_in_for_range_declaration5873 = new BitSet(new long[]{0x0010290100001010L,0x004E400008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_declarator_in_for_range_declaration5876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_for_range_initializer6165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_braced_init_list_in_for_range_initializer6185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_break_in_jump_statement6527 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_jump_statement6597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_continue_in_jump_statement6613 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_jump_statement6680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_return_in_jump_statement6696 = new BitSet(new long[]{0x80102A01B4015600L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_jump_statement6782 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_braced_init_list_in_jump_statement6810 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_jump_statement6845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_goto_in_jump_statement6861 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_jump_statement6863 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_jump_statement6928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_declaration_in_declaration_statement7191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_declaration_in_declaration_statement7208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_declaration_in_declaration7400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_declaration_or_function_definition_in_declaration7416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_declaration_in_declaration7433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_instantiation_in_declaration7450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicit_specialization_in_declaration7467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_linkage_specification_in_declaration7484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_definition_in_declaration7501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_declaration_in_declaration7518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_asm_definition_in_block_declaration8248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_namespace_alias_definition_in_block_declaration8265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_declaration_in_block_declaration8282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_directive_in_block_declaration8298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_assert_declaration_in_block_declaration8315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_declaration_in_block_declaration8331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unqualified_or_qualified_id_in_id_expression8666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_tilde_class_name8842 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_class_name_in_tilde_class_name8844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_function_id_in_unqualified_or_qualified_id8969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conversion_function_id_in_unqualified_or_qualified_id8985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_operator_id_in_unqualified_or_qualified_id9001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tilde_class_name_in_unqualified_or_qualified_id9017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_unqualified_or_qualified_id9033 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_SCOPE_in_unqualified_or_qualified_id9057 = new BitSet(new long[]{0x0000200000000000L,0x0010400008000000L});
    public static final BitSet FOLLOW_LITERAL_template_in_unqualified_or_qualified_id9090 = new BitSet(new long[]{0x0000200000000000L,0x0000400008000000L});
    public static final BitSet FOLLOW_operator_function_id_in_unqualified_or_qualified_id9163 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_conversion_function_id_in_unqualified_or_qualified_id9203 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_literal_operator_id_in_unqualified_or_qualified_id9243 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_tilde_class_name_in_unqualified_or_qualified_id9283 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_nested_in_unqualified_or_qualified_id9323 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_SCOPE_in_unqualified_or_qualified_id9383 = new BitSet(new long[]{0x0000000000000000L,0x0000400008000000L});
    public static final BitSet FOLLOW_nested_name_specifier_in_unqualified_or_qualified_id9419 = new BitSet(new long[]{0x0000200000000000L,0x0010400008000000L});
    public static final BitSet FOLLOW_LITERAL_template_in_unqualified_or_qualified_id9421 = new BitSet(new long[]{0x0000200000000000L,0x0000400008000000L});
    public static final BitSet FOLLOW_unqualified_id_in_unqualified_or_qualified_id9424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_function_id_in_unqualified_or_qualified_id9448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_operator_id_in_unqualified_or_qualified_id9494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_unqualified_or_qualified_id9518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_nested_simple_template_id_or_IDENT9561 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_SCOPE_in_nested_simple_template_id_or_IDENT9585 = new BitSet(new long[]{0x0000000000000000L,0x0010000008000000L});
    public static final BitSet FOLLOW_LITERAL_template_in_nested_simple_template_id_or_IDENT9649 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_simple_template_id_nocheck_in_nested_simple_template_id_or_IDENT9651 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_nested_in_nested_simple_template_id_or_IDENT9686 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_operator_function_id_in_unqualified_id9760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conversion_function_id_in_unqualified_id9776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_operator_id_in_unqualified_id9792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tilde_class_name_in_unqualified_id9808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_unqualified_id9824 = new BitSet(new long[]{0x0000000000000000L,0x000E000000000000L,0x0000000000000000L,0x0000080800000000L});
    public static final BitSet FOLLOW_decltype_specifier_in_unqualified_id9826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_unqualified_id9842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_name_specifier_in_qualified_id9862 = new BitSet(new long[]{0x0000200000000000L,0x0010400008000000L});
    public static final BitSet FOLLOW_LITERAL_template_in_qualified_id9864 = new BitSet(new long[]{0x0000200000000000L,0x0000400008000000L});
    public static final BitSet FOLLOW_unqualified_id_in_qualified_id9867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCOPE_in_qualified_id9883 = new BitSet(new long[]{0x0000000000000000L,0x0000400008000000L});
    public static final BitSet FOLLOW_nested_name_specifier_in_qualified_id9932 = new BitSet(new long[]{0x0000200000000000L,0x0010400008000000L});
    public static final BitSet FOLLOW_LITERAL_template_in_qualified_id9934 = new BitSet(new long[]{0x0000200000000000L,0x0000400008000000L});
    public static final BitSet FOLLOW_unqualified_id_in_qualified_id9937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_operator_id_in_qualified_id9996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_function_id_in_qualified_id10020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_qualified_id10044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_nested_name_specifier10086 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_nested_name_specifier10096 = new BitSet(new long[]{0x0000000000000002L,0x0010000008000000L});
    public static final BitSet FOLLOW_LITERAL_template_in_nested_name_specifier10148 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_simple_template_id_nocheck_in_nested_name_specifier10150 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_nested_name_specifier10152 = new BitSet(new long[]{0x0000000000000002L,0x0010000008000000L});
    public static final BitSet FOLLOW_IDENT_in_nested_name_specifier10200 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_nested_name_specifier10278 = new BitSet(new long[]{0x0000000000000002L,0x0010000008000000L});
    public static final BitSet FOLLOW_simple_template_id_in_nested_name_specifier10330 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_nested_name_specifier10332 = new BitSet(new long[]{0x0000000000000002L,0x0010000008000000L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_lookup_nested_name_specifier10363 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_lookup_nested_name_specifier10365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_using_in_alias_declaration10390 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_alias_declaration10392 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGNEQUAL_in_alias_declaration10394 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_alias_declaration10446 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_alias_declaration10453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_decl_specifier_in_simple_declaration10716 = new BitSet(new long[]{0x0010290100001410L,0xF36E400008000000L,0x00000001CE9FCBFCL,0x00000B2CC4800000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_declaration10799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declarator_in_simple_declaration10846 = new BitSet(new long[]{0x0000000000000500L});
    public static final BitSet FOLLOW_init_declarator_in_simple_declaration10878 = new BitSet(new long[]{0x0000000000000500L});
    public static final BitSet FOLLOW_COMMA_in_simple_declaration10937 = new BitSet(new long[]{0x0010290100001010L,0x0000400008000000L});
    public static final BitSet FOLLOW_init_declarator_in_simple_declaration11015 = new BitSet(new long[]{0x0000000000000500L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_declaration11045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gnu_attribute_or_extension_specifiers_in_simple_declaration_or_function_definition11313 = new BitSet(new long[]{0x0010290100001410L,0xF36E400008000000L,0x00000001CE9FCBFCL,0x00000B2CC4800000L,0x0000000000000200L});
    public static final BitSet FOLLOW_decl_specifier_in_simple_declaration_or_function_definition11407 = new BitSet(new long[]{0x0010290100001410L,0xF36E400008000000L,0x00000001CE9FCBFCL,0x00000B2CC4820000L,0x0000000000000200L});
    public static final BitSet FOLLOW_gnu_attribute_specifiers_in_simple_declaration_or_function_definition11409 = new BitSet(new long[]{0x0010290100001410L,0xF36E400008000000L,0x00000001CE9FCBFCL,0x00000B2CC4800000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_declaration_or_function_definition11547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declarator_in_simple_declaration_or_function_definition11652 = new BitSet(new long[]{0x00000000000105C0L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_COMMA_in_simple_declaration_or_function_definition11740 = new BitSet(new long[]{0x0010290100001010L,0x0000400008000000L});
    public static final BitSet FOLLOW_init_declarator_in_simple_declaration_or_function_definition11818 = new BitSet(new long[]{0x0000000000000500L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_declaration_or_function_definition11865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_definition_after_declarator_in_simple_declaration_or_function_definition11957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_greedy_declarator_in_simple_declaration_or_function_definition12013 = new BitSet(new long[]{0x00000000000115C0L,0x0000000000000000L,0x0F10000000000000L});
    public static final BitSet FOLLOW_asm_statement_in_simple_declaration_or_function_definition12015 = new BitSet(new long[]{0x00000000000115C0L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_function_definition_after_declarator_in_simple_declaration_or_function_definition12070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_initializer_in_simple_declaration_or_function_definition12137 = new BitSet(new long[]{0x0000000000000500L});
    public static final BitSet FOLLOW_COMMA_in_simple_declaration_or_function_definition12180 = new BitSet(new long[]{0x0010290100001010L,0x0000400008000000L});
    public static final BitSet FOLLOW_init_declarator_in_simple_declaration_or_function_definition12258 = new BitSet(new long[]{0x0000000000000500L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_declaration_or_function_definition12297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_static_assert_in_static_assert_declaration12473 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_static_assert_declaration12475 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_constant_expression_in_static_assert_declaration12477 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_COMMA_in_static_assert_declaration12479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_static_assert_declaration12481 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_static_assert_declaration12483 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_static_assert_declaration12485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cpp11_attribute_specifiers_in_attribute_declaration12505 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_attribute_declaration12507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_storage_class_specifier_in_decl_specifier12532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_specifier_in_decl_specifier12598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_friend_in_decl_specifier12669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_typedef_in_decl_specifier12744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_specifier_in_decl_specifier12818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_constexpr_in_decl_specifier12893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_register_in_storage_class_specifier12971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_static_in_storage_class_specifier13044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_extern_in_storage_class_specifier13119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_mutable_in_storage_class_specifier13194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___thread_in_storage_class_specifier13268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_thread_local_in_storage_class_specifier13341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___hidden_in_storage_class_specifier13410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___global_in_storage_class_specifier13483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___symbolic_in_storage_class_specifier13556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trailing_type_specifier_in_type_specifier13824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_specifier_in_type_specifier13868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_specifier_in_type_specifier13918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trailing_type_specifier_in_type_specifier13934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_specifier_in_trailing_type_specifier14117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elaborated_type_specifier_in_trailing_type_specifier14133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typename_specifier_in_trailing_type_specifier14149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cv_qualifier_in_trailing_type_specifier14165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_char_in_simple_type_specifier14354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_wchar_t_in_simple_type_specifier14431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_char16_t_in_simple_type_specifier14505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_char32_t_in_simple_type_specifier14578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_bool_in_simple_type_specifier14651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_short_in_simple_type_specifier14728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_int_in_simple_type_specifier14804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_long_in_simple_type_specifier14882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_signed_in_simple_type_specifier14959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_unsigned_in_simple_type_specifier15034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_float_in_simple_type_specifier15107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_double_in_simple_type_specifier15183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_void_in_simple_type_specifier15258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_auto_in_simple_type_specifier15335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___builtin_va_list_in_simple_type_specifier15412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_decltype_specifier_in_simple_type_specifier15476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCOPE_in_simple_type_specifier15619 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_nested_name_specifier_in_simple_type_specifier15742 = new BitSet(new long[]{0x0000000000000000L,0x0010000008000000L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_simple_type_specifier15766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_template_in_simple_type_specifier15822 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_simple_template_id_in_simple_type_specifier15824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_simple_type_specifier15857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_lookup_type_name16004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_decltype_in_decltype_specifier16110 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_literal_typeof_in_decltype_specifier16114 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_decltype_specifier16162 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_decltype_specifier16239 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_decltype_specifier16246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_key_in_elaborated_type_specifier16659 = new BitSet(new long[]{0x0010000000004000L,0x0010000008000000L,0x0000000000000000L,0x0000008000030000L});
    public static final BitSet FOLLOW_attribute_specifiers_in_elaborated_type_specifier16661 = new BitSet(new long[]{0x0010000000000000L,0x0010000008000000L});
    public static final BitSet FOLLOW_SCOPE_in_elaborated_type_specifier16664 = new BitSet(new long[]{0x0000000000000000L,0x0010000008000000L});
    public static final BitSet FOLLOW_nested_name_specifier_in_elaborated_type_specifier16722 = new BitSet(new long[]{0x0000000000000000L,0x0010000008000000L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_elaborated_type_specifier16725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_template_in_elaborated_type_specifier16729 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_simple_template_id_nocheck_in_elaborated_type_specifier16731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_elaborated_type_specifier16774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_template_in_elaborated_type_specifier16844 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_simple_template_id_nocheck_in_elaborated_type_specifier16846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_enum_in_elaborated_type_specifier16886 = new BitSet(new long[]{0x0010000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_SCOPE_in_elaborated_type_specifier16888 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_nested_name_specifier_in_elaborated_type_specifier16928 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_elaborated_type_specifier16930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elaborated_type_specifier16975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_typename_in_typename_specifier17251 = new BitSet(new long[]{0x0010000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_SCOPE_in_typename_specifier17253 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_nested_name_specifier_in_typename_specifier17256 = new BitSet(new long[]{0x0000000000000000L,0x0010000008000000L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_typename_specifier17260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_template_in_typename_specifier17265 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_simple_template_id_nocheck_in_typename_specifier17267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_head_in_enum_specifier17450 = new BitSet(new long[]{0x0000000000010400L});
    public static final BitSet FOLLOW_LCURLY_in_enum_specifier17475 = new BitSet(new long[]{0x0000000000020000L,0x0000000008000000L});
    public static final BitSet FOLLOW_enumerator_list_in_enum_specifier17553 = new BitSet(new long[]{0x0000000000020100L});
    public static final BitSet FOLLOW_COMMA_in_enum_specifier17555 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RCURLY_in_enum_specifier17573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_enum_specifier17742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_key_in_enum_head17827 = new BitSet(new long[]{0x0000000000004082L,0x0000000008000000L,0x0000000000000000L,0x0000008000030000L});
    public static final BitSet FOLLOW_attribute_specifiers_in_enum_head17829 = new BitSet(new long[]{0x0000000000000082L,0x0000000008000000L});
    public static final BitSet FOLLOW_nested_name_specifier_in_enum_head17846 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_enum_head17848 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_IDENT_in_enum_head17927 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_enum_base_in_enum_head18014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_enum_in_enum_key18033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_enum_base18049 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_specifier_in_enum_base18051 = new BitSet(new long[]{0x0010000000000002L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_enumerator_definition_in_enumerator_list18071 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_COMMA_in_enumerator_list18074 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_enumerator_definition_in_enumerator_list18076 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_enumerator_in_enumerator_definition18098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumerator_in_enumerator_definition18115 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGNEQUAL_in_enumerator_definition18117 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_constant_expression_in_enumerator_definition18119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_enumerator18140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_inline_in_namespace_definition18233 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LITERAL_namespace_in_namespace_definition18244 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_IDENT_in_namespace_definition18327 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_gnu_attribute_or_extension_specifiers_in_namespace_definition18412 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LCURLY_in_namespace_definition18423 = new BitSet(new long[]{0x0010290100025410L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_sync_declaration_in_namespace_definition18500 = new BitSet(new long[]{0x0010290100025410L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_declaration_in_namespace_definition18524 = new BitSet(new long[]{0x0010290100025410L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_sync_declaration_in_namespace_definition18539 = new BitSet(new long[]{0x0010290100025410L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RCURLY_in_namespace_definition18560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_namespace_body18731 = new BitSet(new long[]{0x0010290100005412L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENT_in_namespace_alias18754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_namespace_in_namespace_alias_definition18774 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_namespace_alias_definition18776 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGNEQUAL_in_namespace_alias_definition18778 = new BitSet(new long[]{0x0010000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_qualified_namespace_specifier_in_namespace_alias_definition18826 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_namespace_alias_definition18837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCOPE_in_qualified_namespace_specifier18935 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_nested_name_specifier_in_qualified_namespace_specifier19021 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_qualified_namespace_specifier19033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_using_in_using_declaration19130 = new BitSet(new long[]{0x0010200000000000L,0x0000400008000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_LITERAL_typename_in_using_declaration19214 = new BitSet(new long[]{0x0010200000000000L,0x0000400008000000L});
    public static final BitSet FOLLOW_SCOPE_in_using_declaration19302 = new BitSet(new long[]{0x0000200000000000L,0x0000400008000000L});
    public static final BitSet FOLLOW_nested_name_specifier_in_using_declaration19405 = new BitSet(new long[]{0x0000200000000000L,0x0000400008000000L});
    public static final BitSet FOLLOW_unqualified_id_in_using_declaration19418 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_using_declaration19428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_using_in_using_directive19512 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LITERAL_namespace_in_using_directive19514 = new BitSet(new long[]{0x0010000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_SCOPE_in_using_directive19580 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_nested_name_specifier_in_using_directive19666 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_using_directive19678 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_using_directive19756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_asm_in_asm_statement19841 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_asm_statement19843 = new BitSet(new long[]{0x0000000000002000L,0x0000000000008000L});
    public static final BitSet FOLLOW_adjacent_string_literals_in_asm_statement19845 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_asm_statement19848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_asm_statement_in_asm_definition19868 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_asm_definition19870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_extern_in_linkage_specification19914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_linkage_specification19916 = new BitSet(new long[]{0x0010290100015410L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LCURLY_in_linkage_specification19984 = new BitSet(new long[]{0x0010290100025410L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_sync_declaration_in_linkage_specification20061 = new BitSet(new long[]{0x0010290100025410L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_declaration_in_linkage_specification20093 = new BitSet(new long[]{0x0010290100025410L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_sync_declaration_in_linkage_specification20112 = new BitSet(new long[]{0x0010290100025410L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_RCURLY_in_linkage_specification20141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declaration_in_linkage_specification20224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_specifier_in_attribute_specifiers20328 = new BitSet(new long[]{0x0000000000004002L,0x0000000000000000L,0x0000000000000000L,0x0000008000030000L});
    public static final BitSet FOLLOW_gnu_attribute_or_extension_specifier_in_attribute_specifiers20332 = new BitSet(new long[]{0x0000000000004002L,0x0000000000000000L,0x0000000000000000L,0x0000008000030000L});
    public static final BitSet FOLLOW_attribute_specifier_in_cpp11_attribute_specifiers20354 = new BitSet(new long[]{0x0000000000004002L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LSQUARE_in_attribute_specifier20375 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_LSQUARE_in_attribute_specifier20377 = new BitSet(new long[]{0x0000000000008000L,0x0000000008000000L});
    public static final BitSet FOLLOW_attribute_list_in_attribute_specifier20379 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_attribute_specifier20381 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_attribute_specifier20383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aligment_specifier_in_attribute_specifier20399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_alignas_in_aligment_specifier20419 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_aligment_specifier20421 = new BitSet(new long[]{0x80102A01B4005200L,0x004E40000C00C00EL,0xE000008FCE9FCF8CL,0xFC2A0F0800031003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_aligment_specifier20450 = new BitSet(new long[]{0x0000000000002010L});
    public static final BitSet FOLLOW_assignment_expression_in_aligment_specifier20474 = new BitSet(new long[]{0x0000000000002010L});
    public static final BitSet FOLLOW_ELLIPSIS_in_aligment_specifier20494 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_aligment_specifier20497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_in_attribute_list20518 = new BitSet(new long[]{0x0000000000000092L});
    public static final BitSet FOLLOW_ELLIPSIS_in_attribute_list20520 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_COLON_in_attribute_list20524 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_attribute_in_attribute_list20527 = new BitSet(new long[]{0x0000000000000012L});
    public static final BitSet FOLLOW_ELLIPSIS_in_attribute_list20529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_token_in_attribute20556 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_attribute_argument_clouse_in_attribute20558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_attribute_token20579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_scoped_token_in_attribute_token20595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_namespace_in_attribute_scoped_token20615 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_attribute_scoped_token20617 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_attribute_scoped_token20619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_attribute_namespace20639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_attribute_argument_clouse20659 = new BitSet(new long[]{0xFFFFFFFFFFFD5FF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_balanced_tokens_in_attribute_argument_clouse20661 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_attribute_argument_clouse20663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_balanced_token_in_balanced_tokens20683 = new BitSet(new long[]{0xFFFFFFFFFFFD5FF2L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_LPAREN_in_balanced_token20704 = new BitSet(new long[]{0xFFFFFFFFFFFD5FF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_balanced_tokens_in_balanced_token20706 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_balanced_token20708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQUARE_in_balanced_token20724 = new BitSet(new long[]{0xFFFFFFFFFFFD5FF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_balanced_tokens_in_balanced_token20726 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_balanced_token20728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_balanced_token20744 = new BitSet(new long[]{0xFFFFFFFFFFFD5FF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_balanced_tokens_in_balanced_token20746 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RCURLY_in_balanced_token20748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_balanced_token20764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gnu_attribute_or_extension_specifier_in_gnu_attribute_or_extension_specifiers20807 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_gnu_attribute_specifier_in_gnu_attribute_or_extension_specifier20828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___extension___in_gnu_attribute_or_extension_specifier20844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gnu_attribute_specifier_in_gnu_attribute_specifiers20864 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LITERAL___attribute___in_gnu_attribute_specifier20885 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_gnu_attribute_specifier20887 = new BitSet(new long[]{0xFFFFFFFFFFFD5FF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_balanced_tokens_in_gnu_attribute_specifier20889 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_gnu_attribute_specifier20891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_init_declarator_in_init_declarator_list21066 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_COMMA_in_init_declarator_list21090 = new BitSet(new long[]{0x0010290100001010L,0x0000400008000000L});
    public static final BitSet FOLLOW_init_declarator_in_init_declarator_list21168 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_greedy_declarator_in_init_declarator21506 = new BitSet(new long[]{0x0000000000011042L,0x0000000000000000L,0x0F00000000000000L});
    public static final BitSet FOLLOW_asm_statement_in_init_declarator21508 = new BitSet(new long[]{0x0000000000011042L});
    public static final BitSet FOLLOW_initializer_in_init_declarator21511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ptr_operator_in_declarator21841 = new BitSet(new long[]{0x0010290100001010L,0x0000400008000000L,0x0000000000000000L,0x01000000000C0000L});
    public static final BitSet FOLLOW_literal_restrict_in_declarator21843 = new BitSet(new long[]{0x0010290100001010L,0x0000400008000000L});
    public static final BitSet FOLLOW_declarator_in_declarator21848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noptr_declarator_in_declarator21867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarator_id_in_noptr_declarator22224 = new BitSet(new long[]{0x0000000000005002L,0x0000000000000000L,0x0000000000000000L,0x0000008000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_attribute_specifiers_in_noptr_declarator22226 = new BitSet(new long[]{0x0000000000005002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_noptr_declarator22252 = new BitSet(new long[]{0x0010290100001010L,0x0000400008000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_gnu_attribute_specifier_in_noptr_declarator22329 = new BitSet(new long[]{0x0010290100001010L,0x0000400008000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_declarator_in_noptr_declarator22344 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_noptr_declarator22359 = new BitSet(new long[]{0x0000000000005002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_parameters_and_qualifiers_in_noptr_declarator22458 = new BitSet(new long[]{0x0000000000005002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LSQUARE_in_noptr_declarator22484 = new BitSet(new long[]{0x80102A01B400D200L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_constant_expression_in_noptr_declarator22560 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_noptr_declarator22576 = new BitSet(new long[]{0x0000000000005002L,0x0000000000000000L,0x0000000000000000L,0x0000008000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_attribute_specifiers_in_noptr_declarator22652 = new BitSet(new long[]{0x0000000000005002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_trailing_return_type_in_noptr_declarator22675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_POINTERTO_in_trailing_return_type22819 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_trailing_type_specifier_in_trailing_return_type22821 = new BitSet(new long[]{0x0010090100005012L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_abstract_declarator_in_trailing_return_type22836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declarator_in_function_declarator23046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarator_in_function_declarator23063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameters_and_qualifiers_in_constructor_declarator23404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noptr_abstract_declarator_in_abstract_declarator23732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_trailing_return_type_in_abstract_declarator23752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ptr_operator_in_abstract_declarator23769 = new BitSet(new long[]{0x0010090100005012L,0x0000000008000000L,0x0000000000000000L,0x01000000000C0000L});
    public static final BitSet FOLLOW_literal_restrict_in_abstract_declarator23771 = new BitSet(new long[]{0x0010090100005012L,0x0000000008000000L});
    public static final BitSet FOLLOW_abstract_declarator_in_abstract_declarator23781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELLIPSIS_in_abstract_declarator23803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_noptr_abstract_declarator24235 = new BitSet(new long[]{0x0010090100005010L,0x0000000008000000L});
    public static final BitSet FOLLOW_abstract_declarator_in_noptr_abstract_declarator24312 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_noptr_abstract_declarator24327 = new BitSet(new long[]{0x0000000000005002L});
    public static final BitSet FOLLOW_parameters_and_qualifiers_in_noptr_abstract_declarator24423 = new BitSet(new long[]{0x0000000000005002L});
    public static final BitSet FOLLOW_LSQUARE_in_noptr_abstract_declarator24457 = new BitSet(new long[]{0x80102A01B400D200L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_constant_expression_in_noptr_abstract_declarator24533 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_noptr_abstract_declarator24553 = new BitSet(new long[]{0x0000000000005002L});
    public static final BitSet FOLLOW_parameters_and_qualifiers_in_noptr_abstract_declarator24653 = new BitSet(new long[]{0x0000000000005002L});
    public static final BitSet FOLLOW_LSQUARE_in_noptr_abstract_declarator24674 = new BitSet(new long[]{0x80102A01B400D200L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_constant_expression_in_noptr_abstract_declarator24750 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_noptr_abstract_declarator24766 = new BitSet(new long[]{0x0000000000005002L});
    public static final BitSet FOLLOW_declarator_in_universal_declarator25196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstract_declarator_in_universal_declarator25213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ptr_operator_in_greedy_declarator25505 = new BitSet(new long[]{0x0010290100001010L,0x0000400008000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_gnu_attribute_specifier_in_greedy_declarator25507 = new BitSet(new long[]{0x0010290100001010L,0x0000400008000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_greedy_declarator_in_greedy_declarator25512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_greedy_nonptr_declarator_in_greedy_declarator25528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarator_id_in_greedy_nonptr_declarator25894 = new BitSet(new long[]{0x0000000000005002L,0x0000000000000000L,0x0000000000000000L,0x0000008000030000L});
    public static final BitSet FOLLOW_attribute_specifiers_in_greedy_nonptr_declarator25896 = new BitSet(new long[]{0x0000000000005002L});
    public static final BitSet FOLLOW_LPAREN_in_greedy_nonptr_declarator25938 = new BitSet(new long[]{0x0010290100001010L,0x0000400008000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_gnu_attribute_specifier_in_greedy_nonptr_declarator26015 = new BitSet(new long[]{0x0010290100001010L,0x0000400008000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_greedy_declarator_in_greedy_nonptr_declarator26030 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_greedy_nonptr_declarator26045 = new BitSet(new long[]{0x0000000000005002L});
    public static final BitSet FOLLOW_parameters_and_qualifiers_in_greedy_nonptr_declarator26181 = new BitSet(new long[]{0x0000000000005002L});
    public static final BitSet FOLLOW_LSQUARE_in_greedy_nonptr_declarator26222 = new BitSet(new long[]{0x80102A01B400D200L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_constant_expression_in_greedy_nonptr_declarator26298 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_greedy_nonptr_declarator26314 = new BitSet(new long[]{0x0000000000005002L});
    public static final BitSet FOLLOW_STAR_in_ptr_operator26750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000B80L});
    public static final BitSet FOLLOW_cv_qualifier_in_ptr_operator26829 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000B80L});
    public static final BitSet FOLLOW_AMPERSAND_in_ptr_operator26859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_ptr_operator26952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCOPE_in_ptr_operator27052 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_nested_name_specifier_in_ptr_operator27138 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_STAR_in_ptr_operator27149 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000B80L});
    public static final BitSet FOLLOW_cv_qualifier_in_ptr_operator27228 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000B80L});
    public static final BitSet FOLLOW_literal_const_in_cv_qualifier27411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_volatile_in_cv_qualifier27496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMPERSAND_in_ref_qualifier27582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_ref_qualifier27662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELLIPSIS_in_declarator_id27933 = new BitSet(new long[]{0x0010200000000000L,0x0000400008000000L});
    public static final BitSet FOLLOW_id_expression_in_declarator_id28016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gnu_attribute_or_extension_specifiers_in_type_id28324 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_specifier_in_type_id28336 = new BitSet(new long[]{0x0010090100005012L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800020000L,0x0000000000000200L});
    public static final BitSet FOLLOW_gnu_attribute_specifiers_in_type_id28338 = new BitSet(new long[]{0x0010090100005012L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_abstract_declarator_in_type_id28359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameters_in_parameters_and_qualifiers28621 = new BitSet(new long[]{0x0000090000004002L,0x0000000000000000L,0x0000008000000B80L,0x0000048000030000L});
    public static final BitSet FOLLOW_attribute_specifiers_in_parameters_and_qualifiers28631 = new BitSet(new long[]{0x0000090000000002L,0x0000000000000000L,0x0000008000000B80L,0x0000040000000000L});
    public static final BitSet FOLLOW_cv_qualifier_in_parameters_and_qualifiers28642 = new BitSet(new long[]{0x0000090000000002L,0x0000000000000000L,0x0000008000000B80L,0x0000040000000000L});
    public static final BitSet FOLLOW_ref_qualifier_in_parameters_and_qualifiers28654 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_exception_specification_in_parameters_and_qualifiers28666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parameters28977 = new BitSet(new long[]{0x0010000000006010L,0xF36E000008000000L,0x00000001CE9FCBFCL,0x00000BACC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ELLIPSIS_in_parameters29083 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_sync_parameter_in_parameters29194 = new BitSet(new long[]{0x0010000000004000L,0xF36E000008000000L,0x00000001CE9FCBFCL,0x00000BACC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_parameter_declaration_in_parameters29212 = new BitSet(new long[]{0x0000000000002100L});
    public static final BitSet FOLLOW_COMMA_in_parameters29254 = new BitSet(new long[]{0x0010000000004000L,0xF36E000008000000L,0x00000001CE9FCBFCL,0x00000BACC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_parameter_declaration_in_parameters29332 = new BitSet(new long[]{0x0000000000002100L});
    public static final BitSet FOLLOW_sync_parameter_in_parameters29355 = new BitSet(new long[]{0x0000000000002100L});
    public static final BitSet FOLLOW_COMMA_in_parameters29564 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ELLIPSIS_in_parameters29646 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_parameters29742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELLIPSIS_in_parameter_declaration_clause30091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_declaration_list_in_parameter_declaration_clause30179 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_COMMA_in_parameter_declaration_clause30204 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ELLIPSIS_in_parameter_declaration_clause30282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_declaration_in_parameter_declaration_list30690 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_COMMA_in_parameter_declaration_list30716 = new BitSet(new long[]{0x0010000000004000L,0xF36E000008000000L,0x00000001CE9FCBFCL,0x00000BACC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_parameter_declaration_in_parameter_declaration_list30794 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_attribute_specifiers_in_parameter_declaration31138 = new BitSet(new long[]{0x0010000000000000L,0xF36E000008000000L,0x00000001CE9FCBFCL,0x00000B2CC4800000L,0x0000000000000200L});
    public static final BitSet FOLLOW_decl_specifier_in_parameter_declaration31391 = new BitSet(new long[]{0x0010290100005052L,0xF36E400008000000L,0x00000001CE9FCBFCL,0x00000BACC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_attribute_specifiers_in_parameter_declaration31393 = new BitSet(new long[]{0x0010290100005052L,0xF36E400008000000L,0x00000001CE9FCBFCL,0x00000B2CC4800000L,0x0000000000000200L});
    public static final BitSet FOLLOW_decl_specifier_in_parameter_declaration31441 = new BitSet(new long[]{0x0010290100005052L,0xF36E400008000000L,0x00000001CE9FCBFCL,0x00000BACC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_attribute_specifiers_in_parameter_declaration31443 = new BitSet(new long[]{0x0010290100005052L,0xF36E400008000000L,0x00000001CE9FCBFCL,0x00000B2CC4800000L,0x0000000000000200L});
    public static final BitSet FOLLOW_universal_declarator_in_parameter_declaration31490 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASSIGNEQUAL_in_parameter_declaration31516 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_assignment_expression_in_parameter_declaration31588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGNEQUAL_in_function_definition_after_declarator31867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LITERAL_delete_in_function_definition_after_declarator31953 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_LITERAL_default_in_function_definition_after_declarator32033 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_function_definition_after_declarator32108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_function_definition_after_declarator32146 = new BitSet(new long[]{0xFFFFFFFFFFFDFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_set_in_function_definition_after_declarator32238 = new BitSet(new long[]{0xFFFFFFFFFFFDFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_skip_balanced_Curl_in_function_definition_after_declarator32336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ctor_initializer_in_function_definition_after_declarator32378 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_function_body_in_function_definition_after_declarator32381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_try_block_in_function_definition_after_declarator32414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_decl_specifier_in_function_declaration32704 = new BitSet(new long[]{0x0010290100001010L,0xF36E400008000000L,0x00000001CE9FCBFCL,0x00000B2CC4800000L,0x0000000000000200L});
    public static final BitSet FOLLOW_function_declarator_in_function_declaration32707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_statement_in_function_body32930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brace_or_equal_initializer_in_initializer33193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_initializer33209 = new BitSet(new long[]{0x80102A01B4015200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_list_in_initializer33286 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_initializer33297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGNEQUAL_in_brace_or_equal_initializer33706 = new BitSet(new long[]{0x80102A01B4015200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_initializer_clause_in_brace_or_equal_initializer33778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_braced_init_list_in_brace_or_equal_initializer33795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_expression_in_initializer_clause34063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_braced_init_list_in_initializer_clause34080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_initializer_clause_in_initializer_list34416 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_COMMA_in_initializer_list34444 = new BitSet(new long[]{0x80102A01B4015200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_initializer_clause_in_initializer_list34522 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_LCURLY_in_braced_init_list34855 = new BitSet(new long[]{0x80102A01B4035200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_initializer_list_in_braced_init_list34872 = new BitSet(new long[]{0x0000000000020100L});
    public static final BitSet FOLLOW_COMMA_in_braced_init_list34897 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_RCURLY_in_braced_init_list34986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_class_name35312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_head_in_class_specifier35537 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LCURLY_in_class_specifier35548 = new BitSet(new long[]{0x0010290100025490L,0xF37E400008000000L,0x00C00071CE9FCBFCL,0x00000BEFC4830002L,0x0000000000000200L});
    public static final BitSet FOLLOW_sync_member_in_class_specifier35625 = new BitSet(new long[]{0x0010290100025490L,0xF37E400008000000L,0x00C00071CE9FCBFCL,0x00000BEFC4830002L,0x0000000000000200L});
    public static final BitSet FOLLOW_member_specification_in_class_specifier35649 = new BitSet(new long[]{0x0010290100025490L,0xF37E400008000000L,0x00C00071CE9FCBFCL,0x00000BEFC4830002L,0x0000000000000200L});
    public static final BitSet FOLLOW_sync_member_in_class_specifier35664 = new BitSet(new long[]{0x0010290100025490L,0xF37E400008000000L,0x00C00071CE9FCBFCL,0x00000BEFC4830002L,0x0000000000000200L});
    public static final BitSet FOLLOW_RCURLY_in_class_specifier35685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_name_specifier_in_optionally_qualified_name36033 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_optionally_qualified_name36046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_key_in_class_head36346 = new BitSet(new long[]{0x0000000000004082L,0x4000000008000000L,0x0000000000000000L,0x0000008100030000L});
    public static final BitSet FOLLOW_attribute_specifiers_in_class_head36357 = new BitSet(new long[]{0x0000000000000082L,0x4000000008000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_optionally_qualified_name_in_class_head36368 = new BitSet(new long[]{0x0000000000000082L,0x4000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_class_virtual_specifier_in_class_head36380 = new BitSet(new long[]{0x0000000000000082L,0x4000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_base_clause_in_class_head36392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_final_in_class_virtual_specifier36549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_explicit_in_class_virtual_specifier36628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_class_in_class_key36705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_struct_in_class_key36781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_union_in_class_key36856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_specifier_in_member_specification37021 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_member_specification37032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_declaration_in_member_specification37116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_specifiers_in_member_declaration37302 = new BitSet(new long[]{0x0010290100001490L,0xF36E400008000000L,0x00000001CE9FCBFCL,0x00000B2FC4800002L,0x0000000000000200L});
    public static final BitSet FOLLOW_simple_member_declaration_or_function_definition_in_member_declaration37305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_declaration_in_member_declaration37333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_declaration_in_member_declaration37349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_assert_declaration_in_member_declaration37366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_declaration_in_member_declaration37382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_decl_specifier_in_simple_member_declaration_or_function_definition37645 = new BitSet(new long[]{0x0010290100001490L,0xF36E400008000000L,0x00000001CE9FCBFCL,0x00000B2FC4800002L,0x0000000000000200L});
    public static final BitSet FOLLOW_member_bitfield_declarator_in_simple_member_declaration_or_function_definition37752 = new BitSet(new long[]{0x0000000000000500L});
    public static final BitSet FOLLOW_COMMA_in_simple_member_declaration_or_function_definition37794 = new BitSet(new long[]{0x0010290100001090L,0x0000400008000000L,0x0000000000000000L,0x0000000300000002L});
    public static final BitSet FOLLOW_member_declarator_in_simple_member_declaration_or_function_definition37872 = new BitSet(new long[]{0x0000000000000500L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_member_declaration_or_function_definition37911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declarator_in_simple_member_declaration_or_function_definition38012 = new BitSet(new long[]{0x00000000000105C0L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_COMMA_in_simple_member_declaration_or_function_definition38100 = new BitSet(new long[]{0x0010290100001090L,0x0000400008000000L,0x0000000000000000L,0x0000000300000002L});
    public static final BitSet FOLLOW_member_declarator_in_simple_member_declaration_or_function_definition38178 = new BitSet(new long[]{0x0000000000000500L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_member_declaration_or_function_definition38225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_definition_after_declarator_in_simple_member_declaration_or_function_definition38317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarator_in_simple_member_declaration_or_function_definition38360 = new BitSet(new long[]{0x00000000000105C0L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_function_definition_after_declarator_in_simple_member_declaration_or_function_definition38414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_initializer_in_simple_member_declaration_or_function_definition38464 = new BitSet(new long[]{0x0000000000000500L});
    public static final BitSet FOLLOW_COMMA_in_simple_member_declaration_or_function_definition38507 = new BitSet(new long[]{0x0010290100001090L,0x0000400008000000L,0x0000000000000000L,0x0000000300000002L});
    public static final BitSet FOLLOW_member_declarator_in_simple_member_declaration_or_function_definition38585 = new BitSet(new long[]{0x0000000000000500L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_member_declaration_or_function_definition38624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_member_declaration_or_function_definition38718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_member_bitfield_declarator38903 = new BitSet(new long[]{0x0000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000300000002L});
    public static final BitSet FOLLOW_virt_specifier_in_member_bitfield_declarator38989 = new BitSet(new long[]{0x0000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000300000002L});
    public static final BitSet FOLLOW_COLON_in_member_bitfield_declarator39001 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_constant_expression_in_member_bitfield_declarator39012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarator_in_member_declarator39197 = new BitSet(new long[]{0x0000000000010042L,0x0000000000000000L,0x0000000000000000L,0x0000000300000002L});
    public static final BitSet FOLLOW_virt_specifier_in_member_declarator39199 = new BitSet(new long[]{0x0000000000010042L,0x0000000000000000L,0x0000000000000000L,0x0000000300000002L});
    public static final BitSet FOLLOW_brace_or_equal_initializer_in_member_declarator39202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_bitfield_declarator_in_member_declarator39219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGNEQUAL_in_pure_specifier39559 = new BitSet(new long[]{0x8000000000000000L,0x000000000400C00EL,0x0000000C00000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_literal_in_pure_specifier39561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGNEQUAL_in_constant_initializer39869 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_constant_expression_in_constant_initializer39871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_override_in_virt_specifier40008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_final_in_virt_specifier40081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_new_in_virt_specifier40157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_base_clause40399 = new BitSet(new long[]{0x0010000000004000L,0x200E000008000000L,0x0000007000000000L,0x0000088800030000L});
    public static final BitSet FOLLOW_base_specifier_list_in_base_clause40401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_base_specifier_in_base_specifier_list40703 = new BitSet(new long[]{0x0000000000000112L});
    public static final BitSet FOLLOW_ELLIPSIS_in_base_specifier_list40728 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_COMMA_in_base_specifier_list40826 = new BitSet(new long[]{0x0010000000004000L,0x200E000008000000L,0x0000007000000000L,0x0000088800030000L});
    public static final BitSet FOLLOW_base_specifier_in_base_specifier_list40904 = new BitSet(new long[]{0x0000000000000112L});
    public static final BitSet FOLLOW_ELLIPSIS_in_base_specifier_list40937 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_attribute_specifiers_in_base_specifier41183 = new BitSet(new long[]{0x0010000000000000L,0x200E000008000000L,0x0000007000000000L,0x0000080800000000L});
    public static final BitSet FOLLOW_base_type_specifier_in_base_specifier41200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_virtual_in_base_specifier41216 = new BitSet(new long[]{0x0010000000000000L,0x000E000008000000L,0x0000007000000000L,0x0000080800000000L});
    public static final BitSet FOLLOW_access_specifier_in_base_specifier41218 = new BitSet(new long[]{0x0010000000000000L,0x000E000008000000L,0x0000000000000000L,0x0000080800000000L});
    public static final BitSet FOLLOW_base_type_specifier_in_base_specifier41221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_specifier_in_base_specifier41237 = new BitSet(new long[]{0x0010000000000000L,0x200E000008000000L,0x0000000000000000L,0x0000080800000000L});
    public static final BitSet FOLLOW_LITERAL_virtual_in_base_specifier41239 = new BitSet(new long[]{0x0010000000000000L,0x000E000008000000L,0x0000000000000000L,0x0000080800000000L});
    public static final BitSet FOLLOW_base_type_specifier_in_base_specifier41242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCOPE_in_class_or_decltype41446 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_nested_simple_template_id_or_IDENT_in_class_or_decltype41532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_decltype_specifier_in_class_or_decltype41548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_or_decltype_in_base_type_specifier41884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_private_in_access_specifier42035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_protected_in_access_specifier42109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_public_in_access_specifier42181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_OPERATOR_in_conversion_function_id42420 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_conversion_type_id_in_conversion_function_id42422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_specifier_in_conversion_type_id42716 = new BitSet(new long[]{0x0010090100000002L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_specifier_in_conversion_type_id42727 = new BitSet(new long[]{0x0010090100000002L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ptr_operator_in_conversion_type_id42745 = new BitSet(new long[]{0x0010090100000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_COLON_in_ctor_initializer43042 = new BitSet(new long[]{0x0010000000000000L,0x000E000008000000L,0x0000000000000000L,0x0000080800000000L});
    public static final BitSet FOLLOW_mem_initializer_list_in_ctor_initializer43044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mem_initializer_in_mem_initializer_list43345 = new BitSet(new long[]{0x0000000000000112L});
    public static final BitSet FOLLOW_ELLIPSIS_in_mem_initializer_list43370 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_COMMA_in_mem_initializer_list43468 = new BitSet(new long[]{0x0010000000000000L,0x000E000008000000L,0x0000000000000000L,0x0000080800000000L});
    public static final BitSet FOLLOW_mem_initializer_in_mem_initializer_list43546 = new BitSet(new long[]{0x0000000000000112L});
    public static final BitSet FOLLOW_ELLIPSIS_in_mem_initializer_list43579 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_mem_initializer_id_in_mem_initializer43988 = new BitSet(new long[]{0x0000000000011000L});
    public static final BitSet FOLLOW_LPAREN_in_mem_initializer44013 = new BitSet(new long[]{0x80102A01B4017200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_list_in_mem_initializer44090 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_mem_initializer44106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_braced_init_list_in_mem_initializer44193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_or_decltype_in_mem_initializer_id44531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_OPERATOR_in_operator_function_id44771 = new BitSet(new long[]{0x0007FFFFFFFC5940L,0x0000000000000000L,0x0000000000000000L,0x0000000000001002L});
    public static final BitSet FOLLOW_operator_id_in_operator_function_id44782 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_LESSTHAN_in_operator_function_id44811 = new BitSet(new long[]{0xFFFFFFFFFFFCFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_template_argument_list_in_operator_function_id44886 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_operator_function_id44902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_new_in_operator_id45329 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_LSQUARE_in_operator_id45331 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_operator_id45333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_delete_in_operator_id45366 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_LSQUARE_in_operator_id45368 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_operator_id45370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_new_in_operator_id45382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_delete_in_operator_id45386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_operator_id45398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_operator_id45402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_operator_id45406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIVIDE_in_operator_id45410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_in_operator_id45414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISEXOR_in_operator_id45418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMPERSAND_in_operator_id45422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISEOR_in_operator_id45426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_operator_id45430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_operator_id45442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGNEQUAL_in_operator_id45446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESSTHAN_in_operator_id45450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATERTHAN_in_operator_id45454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUSEQUAL_in_operator_id45458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUSEQUAL_in_operator_id45462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMESEQUAL_in_operator_id45466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIVIDEEQUAL_in_operator_id45470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODEQUAL_in_operator_id45474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISEXOREQUAL_in_operator_id45486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISEANDEQUAL_in_operator_id45490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISEOREQUAL_in_operator_id45494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFTLEFT_in_operator_id45498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftright_literal_in_operator_id45502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFTRIGHTEQUAL_in_operator_id45506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFTLEFTEQUAL_in_operator_id45510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUAL_in_operator_id45514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOTEQUAL_in_operator_id45518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESSTHANOREQUALTO_in_operator_id45530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATERTHANOREQUALTO_in_operator_id45534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_operator_id45538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_operator_id45542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUSPLUS_in_operator_id45546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUSMINUS_in_operator_id45550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_operator_id45554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POINTERTOMBR_in_operator_id45558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POINTERTO_in_operator_id45562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_operator_id45575 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_operator_id45577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQUARE_in_operator_id45581 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_operator_id45583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_OPERATOR_in_literal_operator_id45766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_literal_operator_id45768 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_literal_operator_id45770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_export_in_template_declaration46002 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LITERAL_template_in_template_declaration46079 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_LESSTHAN_in_template_declaration46146 = new BitSet(new long[]{0x0010000000004000L,0xF37E000008000000L,0x00000001CE9FCBFCL,0x00000BACC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_template_parameter_list_in_template_declaration46221 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_template_declaration46232 = new BitSet(new long[]{0x0010290100005410L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_declaration_in_template_declaration46304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_parameter_in_template_parameter_list46540 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_COMMA_in_template_parameter_list46619 = new BitSet(new long[]{0x0010000000004000L,0xF37E000008000000L,0x00000001CE9FCBFCL,0x00000BACC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_template_parameter_in_template_parameter_list46697 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_type_parameter_in_template_parameter47070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_parameter_in_template_parameter47095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_declaration_in_template_parameter47111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_class_in_type_parameter47289 = new BitSet(new long[]{0x0000000000000012L,0x0000000008000000L});
    public static final BitSet FOLLOW_ELLIPSIS_in_type_parameter47291 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_type_parameter47294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_class_in_type_parameter47354 = new BitSet(new long[]{0x0000000000000040L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_type_parameter47356 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGNEQUAL_in_type_parameter47359 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_type_parameter47361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_typename_in_type_parameter47410 = new BitSet(new long[]{0x0000000000000012L,0x0000000008000000L});
    public static final BitSet FOLLOW_ELLIPSIS_in_type_parameter47412 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_type_parameter47415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_typename_in_type_parameter47472 = new BitSet(new long[]{0x0000000000000040L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_type_parameter47474 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGNEQUAL_in_type_parameter47477 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_type_parameter47479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_parameter_type_in_type_parameter47525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LITERAL_class_in_type_parameter47535 = new BitSet(new long[]{0x0000000000000052L,0x0000000008000000L});
    public static final BitSet FOLLOW_ELLIPSIS_in_type_parameter47537 = new BitSet(new long[]{0x0000000000000042L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_type_parameter47540 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASSIGNEQUAL_in_type_parameter47544 = new BitSet(new long[]{0x0010200000000000L,0x0000400008000000L});
    public static final BitSet FOLLOW_id_expression_in_type_parameter47546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_template_in_template_parameter_type47741 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_LESSTHAN_in_template_parameter_type47808 = new BitSet(new long[]{0x0010000000004000L,0xF37E000008000000L,0x00000001CE9FCBFCL,0x00000BACC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_template_parameter_list_in_template_parameter_type47883 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_template_parameter_type47894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_simple_template_id48053 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_LESSTHAN_in_simple_template_id48131 = new BitSet(new long[]{0xFFFFFFFFFFFCFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_template_argument_list_in_simple_template_id48153 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_simple_template_id48165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_lookup_simple_template_id48251 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_LESSTHAN_in_lookup_simple_template_id48253 = new BitSet(new long[]{0x801FFFFFFFFCFBF0L,0x016440000C00C00EL,0xE000008FEE9FCFBCL,0x00040000C4821003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC000000000000000L,0x000000000000037FL});
    public static final BitSet FOLLOW_look_after_tmpl_args_in_lookup_simple_template_id48269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_simple_template_id_nocheck48294 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_LESSTHAN_in_simple_template_id_nocheck48372 = new BitSet(new long[]{0xFFFFFFFFFFFCFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_template_argument_list_in_simple_template_id_nocheck48447 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_simple_template_id_nocheck48459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_lookup_simple_template_id_nocheck48545 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_LESSTHAN_in_lookup_simple_template_id_nocheck48547 = new BitSet(new long[]{0x801FFFFFFFFCFBF0L,0x016440000C00C00EL,0xE000008FEE9FCFBCL,0x00040000C4821003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC000000000000000L,0x000000000000037FL});
    public static final BitSet FOLLOW_look_after_tmpl_args_in_lookup_simple_template_id_nocheck48549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_simple_template_id_or_IDENT48623 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_LESSTHAN_in_simple_template_id_or_IDENT48701 = new BitSet(new long[]{0xFFFFFFFFFFFCFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_template_argument_list_in_simple_template_id_or_IDENT48776 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_simple_template_id_or_IDENT48795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_simple_template_id_or_IDENT48884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_simple_template_id_or_IDENT48985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_simple_template_id_or_IDENT_nested49135 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_LESSTHAN_in_simple_template_id_or_IDENT_nested49213 = new BitSet(new long[]{0xFFFFFFFFFFFCFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_template_argument_list_in_simple_template_id_or_IDENT_nested49288 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_simple_template_id_or_IDENT_nested49307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_simple_template_id_or_IDENT_nested49396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_simple_template_id_or_IDENT_nested49497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_lookup_simple_template_id_or_IDENT49596 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_LESSTHAN_in_lookup_simple_template_id_or_IDENT49623 = new BitSet(new long[]{0x801FFFFFFFFCFBF0L,0x016440000C00C00EL,0xE000008FEE9FCFBCL,0x00040000C4821003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC000000000000000L,0x000000000000037FL});
    public static final BitSet FOLLOW_look_after_tmpl_args_in_lookup_simple_template_id_or_IDENT49625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_argument_in_template_argument_list49818 = new BitSet(new long[]{0x0000000000000112L});
    public static final BitSet FOLLOW_ELLIPSIS_in_template_argument_list49843 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_COMMA_in_template_argument_list49941 = new BitSet(new long[]{0xFFFFFFFFFF7CFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_template_argument_in_template_argument_list50019 = new BitSet(new long[]{0x0000000000000112L});
    public static final BitSet FOLLOW_ELLIPSIS_in_template_argument_list50052 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_lazy_template_in_template_argument50521 = new BitSet(new long[]{0xFFFFFFFFFF7CFEE2L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_id_expression_in_template_argument50614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_id_in_template_argument50635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_expression_in_template_argument50651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_extern_in_explicit_instantiation51003 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LITERAL_template_in_explicit_instantiation51080 = new BitSet(new long[]{0x0010290100005410L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_declaration_in_explicit_instantiation51147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_template_in_explicit_specialization51381 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_LESSTHAN_in_explicit_specialization51383 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_explicit_specialization51385 = new BitSet(new long[]{0x0010290100005410L,0xF3FE400008000000L,0x0FC00001CE9FCBFCL,0x00000BECC4830000L,0x0000000000000200L});
    public static final BitSet FOLLOW_declaration_in_explicit_specialization51431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_try_in_try_block51668 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_compound_statement_in_try_block51670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_handler_in_try_block51682 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_LITERAL_try_in_function_try_block51997 = new BitSet(new long[]{0x0000000000010080L});
    public static final BitSet FOLLOW_ctor_initializer_in_function_try_block51999 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_function_body_in_function_try_block52002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_handler_in_function_try_block52014 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_LITERAL_catch_in_handler52309 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_handler52320 = new BitSet(new long[]{0x0010000000004010L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B8800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_exception_declaration_in_handler52397 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_handler52408 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_compound_statement_in_handler52485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_specifiers_in_exception_declaration52626 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_specifier_in_exception_declaration52629 = new BitSet(new long[]{0x0010290100005012L,0x004E400008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_universal_declarator_in_exception_declaration52632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELLIPSIS_in_exception_declaration52649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_throw_in_throw_expression52668 = new BitSet(new long[]{0x80102A01B4005202L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_assignment_expression_in_throw_expression52670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dynamic_exception_specification_in_exception_specification52691 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_gnu_attribute_or_extension_specifiers_in_exception_specification52693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noexcept_specification_in_exception_specification52710 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000030000L});
    public static final BitSet FOLLOW_gnu_attribute_or_extension_specifiers_in_exception_specification52712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_throw_in_dynamic_exception_specification52732 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_dynamic_exception_specification52734 = new BitSet(new long[]{0x0010000000002000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_list_in_dynamic_exception_specification52736 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_dynamic_exception_specification52739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_id_in_type_id_list52759 = new BitSet(new long[]{0x0000000000000112L});
    public static final BitSet FOLLOW_ELLIPSIS_in_type_id_list52761 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_COMMA_in_type_id_list52766 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_type_id_list52768 = new BitSet(new long[]{0x0000000000000112L});
    public static final BitSet FOLLOW_ELLIPSIS_in_type_id_list52770 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_LITERAL_noexcept_in_noexcept_specification52793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary_expression52816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_this_in_primary_expression52832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_primary_expression52848 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_primary_expression52850 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_primary_expression52852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_expression_in_primary_expression52869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_expression_in_primary_expression52886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambda_introduser_in_lambda_expression52906 = new BitSet(new long[]{0x0000000000011000L});
    public static final BitSet FOLLOW_lambda_declarator_in_lambda_expression52908 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_compound_statement_in_lambda_expression52911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQUARE_in_lambda_introduser52932 = new BitSet(new long[]{0x0000080000008040L,0x0000000008000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_lambda_capture_in_lambda_introduser52934 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_lambda_introduser52937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_capture_default_in_lambda_capture52956 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_COMMA_in_lambda_capture52959 = new BitSet(new long[]{0x0000080000000000L,0x0000000008000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_capture_list_in_lambda_capture52961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_capture_list_in_lambda_capture52979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_capture_in_capture_list53033 = new BitSet(new long[]{0x0000000000000112L});
    public static final BitSet FOLLOW_ELLIPSIS_in_capture_list53035 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_COMMA_in_capture_list53039 = new BitSet(new long[]{0x0000080000000000L,0x0000000008000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_capture_in_capture_list53041 = new BitSet(new long[]{0x0000000000000112L});
    public static final BitSet FOLLOW_ELLIPSIS_in_capture_list53043 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_IDENT_in_capture53065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMPERSAND_in_capture53081 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_capture53083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_this_in_capture53099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameters_in_lambda_declarator53118 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000040L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LITERAL_mutable_in_lambda_declarator53120 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_exception_specification_in_lambda_declarator53123 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_trailing_return_type_in_lambda_declarator53126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_basic_postfix_expression_in_postfix_expression53149 = new BitSet(new long[]{0x0000000090005822L});
    public static final BitSet FOLLOW_LSQUARE_in_postfix_expression53173 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_postfix_expression53175 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_postfix_expression53177 = new BitSet(new long[]{0x0000000090005822L});
    public static final BitSet FOLLOW_LPAREN_in_postfix_expression53201 = new BitSet(new long[]{0x80102A01B4017200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_list_in_postfix_expression53203 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_postfix_expression53206 = new BitSet(new long[]{0x0000000090005822L});
    public static final BitSet FOLLOW_DOT_in_postfix_expression53230 = new BitSet(new long[]{0x0010200000000000L,0x0010400008000000L});
    public static final BitSet FOLLOW_LITERAL_template_in_postfix_expression53262 = new BitSet(new long[]{0x0010200000000000L,0x0000400008000000L});
    public static final BitSet FOLLOW_id_expression_in_postfix_expression53265 = new BitSet(new long[]{0x0000000090005822L});
    public static final BitSet FOLLOW_POINTERTO_in_postfix_expression53305 = new BitSet(new long[]{0x0010200000000000L,0x0010400008000000L});
    public static final BitSet FOLLOW_LITERAL_template_in_postfix_expression53337 = new BitSet(new long[]{0x0010200000000000L,0x0000400008000000L});
    public static final BitSet FOLLOW_id_expression_in_postfix_expression53340 = new BitSet(new long[]{0x0000000090005822L});
    public static final BitSet FOLLOW_PLUSPLUS_in_postfix_expression53380 = new BitSet(new long[]{0x0000000090005822L});
    public static final BitSet FOLLOW_MINUSMINUS_in_postfix_expression53404 = new BitSet(new long[]{0x0000000090005822L});
    public static final BitSet FOLLOW_primary_expression_in_basic_postfix_expression53435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_type_specifier_in_basic_postfix_expression53451 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_basic_postfix_expression53453 = new BitSet(new long[]{0x80102A01B4017200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_list_in_basic_postfix_expression53455 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_basic_postfix_expression53458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_typename_in_basic_postfix_expression53474 = new BitSet(new long[]{0x0010000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_SCOPE_in_basic_postfix_expression53476 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_nested_name_specifier_in_basic_postfix_expression53479 = new BitSet(new long[]{0x0000000000000000L,0x0010000008000000L});
    public static final BitSet FOLLOW_IDENT_in_basic_postfix_expression53495 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_basic_postfix_expression53497 = new BitSet(new long[]{0x80102A01B4017200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_list_in_basic_postfix_expression53499 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_basic_postfix_expression53502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_template_in_basic_postfix_expression53526 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_simple_template_id_in_basic_postfix_expression53529 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_basic_postfix_expression53531 = new BitSet(new long[]{0x80102A01B4017200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_list_in_basic_postfix_expression53533 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_basic_postfix_expression53536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_dynamic_cast_in_basic_postfix_expression53562 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_LESSTHAN_in_basic_postfix_expression53564 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_basic_postfix_expression53566 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_basic_postfix_expression53568 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_basic_postfix_expression53570 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_basic_postfix_expression53572 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_basic_postfix_expression53574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_static_cast_in_basic_postfix_expression53590 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_LESSTHAN_in_basic_postfix_expression53592 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_basic_postfix_expression53594 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_basic_postfix_expression53596 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_basic_postfix_expression53598 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_basic_postfix_expression53600 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_basic_postfix_expression53602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_reinterpret_cast_in_basic_postfix_expression53618 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_LESSTHAN_in_basic_postfix_expression53620 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_basic_postfix_expression53622 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_basic_postfix_expression53624 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_basic_postfix_expression53626 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_basic_postfix_expression53628 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_basic_postfix_expression53630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_const_cast_in_basic_postfix_expression53646 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_LESSTHAN_in_basic_postfix_expression53648 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_basic_postfix_expression53650 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_basic_postfix_expression53652 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_basic_postfix_expression53654 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_basic_postfix_expression53656 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_basic_postfix_expression53658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_typeid_in_basic_postfix_expression53701 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_basic_postfix_expression53703 = new BitSet(new long[]{0x80102A01B4005200L,0x004E40000C00C00EL,0xE000008FCE9FCF8CL,0xFC2A0F0800031003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_basic_postfix_expression53712 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_expression_in_basic_postfix_expression53717 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_basic_postfix_expression53721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_initializer_list_in_expression_list53741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_unary_expression53784 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_cast_expression_in_unary_expression53786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_expression_in_unary_expression53819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_expression_in_unary_expression53852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_trait_expression_in_unary_expression53885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfix_expression_in_unary_expression53901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUSPLUS_in_unary_expression53917 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_cast_expression_in_unary_expression53919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUSMINUS_in_unary_expression53935 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_cast_expression_in_unary_expression53937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_but_not_TILDE_in_unary_expression53953 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_cast_expression_in_unary_expression53955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noexcept_expression_in_unary_expression53971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_operator_but_not_TILDE_in_unary_operator53991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_unary_operator53995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCOPE_in_new_expression54052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_new_in_new_expression54055 = new BitSet(new long[]{0x0010000000001000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_new_placement_in_new_expression54079 = new BitSet(new long[]{0x0010000000001000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_new_type_id_in_new_expression54083 = new BitSet(new long[]{0x0000000000011002L});
    public static final BitSet FOLLOW_LPAREN_in_new_expression54087 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_new_expression54089 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_new_expression54091 = new BitSet(new long[]{0x0000000000011002L});
    public static final BitSet FOLLOW_LPAREN_in_new_expression54142 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_new_expression54144 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_new_expression54146 = new BitSet(new long[]{0x0000000000011002L});
    public static final BitSet FOLLOW_new_type_id_in_new_expression54170 = new BitSet(new long[]{0x0000000000011002L});
    public static final BitSet FOLLOW_new_initializer_in_new_expression54182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_new_placement54203 = new BitSet(new long[]{0x80102A01B4015200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_list_in_new_placement54205 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_new_placement54207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_specifier_in_new_type_id54230 = new BitSet(new long[]{0x0010090100004002L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_specifier_in_new_type_id54241 = new BitSet(new long[]{0x0010090100004002L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_new_declarator_in_new_type_id54275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ptr_operator_in_new_declarator54314 = new BitSet(new long[]{0x0010090100004000L,0x0000000008000000L});
    public static final BitSet FOLLOW_new_declarator_in_new_declarator54316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_direct_new_declarator_in_new_declarator54332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQUARE_in_direct_new_declarator54352 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_direct_new_declarator54354 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_direct_new_declarator54356 = new BitSet(new long[]{0x0000000000004002L});
    public static final BitSet FOLLOW_LSQUARE_in_direct_new_declarator54360 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_constant_expression_in_direct_new_declarator54362 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_direct_new_declarator54364 = new BitSet(new long[]{0x0000000000004002L});
    public static final BitSet FOLLOW_LPAREN_in_new_initializer54387 = new BitSet(new long[]{0x80102A01B4017200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_list_in_new_initializer54389 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_new_initializer54392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_braced_init_list_in_new_initializer54408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCOPE_in_delete_expression54427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LITERAL_delete_in_delete_expression54430 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LSQUARE_in_delete_expression54463 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_delete_expression54465 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_cast_expression_in_delete_expression54467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_delete_expression54491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_noexcept_in_noexcept_expression54520 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_noexcept_expression54522 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_noexcept_expression54524 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_noexcept_expression54526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cast_expression54567 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_cast_expression54569 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_cast_expression54571 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_cast_expression_in_cast_expression54573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_cast_expression54589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_pm_expression54610 = new BitSet(new long[]{0x000C000000000002L});
    public static final BitSet FOLLOW_DOTMBR_in_pm_expression54614 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_cast_expression_in_pm_expression54616 = new BitSet(new long[]{0x000C000000000002L});
    public static final BitSet FOLLOW_POINTERTOMBR_in_pm_expression54620 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_cast_expression_in_pm_expression54622 = new BitSet(new long[]{0x000C000000000002L});
    public static final BitSet FOLLOW_pm_expression_in_multiplicative_expression54646 = new BitSet(new long[]{0x0000000501000002L});
    public static final BitSet FOLLOW_STAR_in_multiplicative_expression54670 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_pm_expression_in_multiplicative_expression54672 = new BitSet(new long[]{0x0000000501000002L});
    public static final BitSet FOLLOW_DIVIDE_in_multiplicative_expression54696 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_pm_expression_in_multiplicative_expression54698 = new BitSet(new long[]{0x0000000501000002L});
    public static final BitSet FOLLOW_MOD_in_multiplicative_expression54722 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_pm_expression_in_multiplicative_expression54724 = new BitSet(new long[]{0x0000000501000002L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression54755 = new BitSet(new long[]{0x0000000024000002L});
    public static final BitSet FOLLOW_PLUS_in_additive_expression54759 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression54761 = new BitSet(new long[]{0x0000000024000002L});
    public static final BitSet FOLLOW_MINUS_in_additive_expression54765 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_multiplicative_expression_in_additive_expression54767 = new BitSet(new long[]{0x0000000024000002L});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression54790 = new BitSet(new long[]{0x0000005000800002L});
    public static final BitSet FOLLOW_SHIFTLEFT_in_shift_expression54833 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_shiftright_literal_in_shift_expression54867 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_additive_expression_in_shift_expression54895 = new BitSet(new long[]{0x0000005000800002L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression54928 = new BitSet(new long[]{0x0000000000F00002L});
    public static final BitSet FOLLOW_GREATERTHAN_in_relational_expression54968 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression54970 = new BitSet(new long[]{0x0000000000F00002L});
    public static final BitSet FOLLOW_LESSTHAN_in_relational_expression54996 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression54998 = new BitSet(new long[]{0x0000000000F00002L});
    public static final BitSet FOLLOW_LESSTHANOREQUALTO_in_relational_expression55024 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression55026 = new BitSet(new long[]{0x0000000000F00002L});
    public static final BitSet FOLLOW_GREATERTHANOREQUALTO_in_relational_expression55052 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_shift_expression_in_relational_expression55054 = new BitSet(new long[]{0x0000000000F00002L});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression55084 = new BitSet(new long[]{0x00000000000C0002L});
    public static final BitSet FOLLOW_EQUAL_in_equality_expression55088 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression55090 = new BitSet(new long[]{0x00000000000C0002L});
    public static final BitSet FOLLOW_NOTEQUAL_in_equality_expression55094 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_relational_expression_in_equality_expression55096 = new BitSet(new long[]{0x00000000000C0002L});
    public static final BitSet FOLLOW_equality_expression_in_and_expression55117 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_AMPERSAND_in_and_expression55121 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_equality_expression_in_and_expression55123 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression55145 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_BITWISEXOR_in_exclusive_or_expression55149 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_and_expression_in_exclusive_or_expression55151 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression55173 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_BITWISEOR_in_inclusive_or_expression55177 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_exclusive_or_expression_in_inclusive_or_expression55179 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_inclusive_or_expression_in_logical_and_expression55201 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_AND_in_logical_and_expression55205 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_inclusive_or_expression_in_logical_and_expression55207 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_logical_and_expression_in_logical_or_expression55229 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_OR_in_logical_or_expression55233 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_logical_and_expression_in_logical_or_expression55235 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_logical_or_expression_in_conditional_expression55257 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_QUESTIONMARK_in_conditional_expression55260 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_conditional_expression55262 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_conditional_expression55264 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_assignment_expression_in_conditional_expression55266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTIONMARK_in_conditional_expression55284 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_conditional_expression55286 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_conditional_expression55288 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_assignment_expression_in_conditional_expression55290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTIONMARK_in_assignment_expression55407 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_assignment_expression55409 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_assignment_expression55411 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_assignment_expression_in_assignment_expression55413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logical_or_expression_in_assignment_expression55429 = new BitSet(new long[]{0x000290AA4A000242L});
    public static final BitSet FOLLOW_QUESTIONMARK_in_assignment_expression55459 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_assignment_expression55461 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_assignment_expression55463 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_assignment_expression_in_assignment_expression55465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_operator_in_assignment_expression55491 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_assignment_expression_in_assignment_expression55493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_expression_in_assignment_expression55519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_expression_in_expression55767 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_COMMA_in_expression55771 = new BitSet(new long[]{0x80102A01B4005200L,0x000E40000C00C00EL,0xE000008E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_assignment_expression_in_expression55773 = new BitSet(new long[]{0x0000000000000102L});
    public static final BitSet FOLLOW_conditional_expression_in_constant_expression55960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_trait_literal_in_type_trait_expression56062 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LPAREN_in_type_trait_expression56112 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_type_trait_expression56114 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_type_trait_expression56116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_type_trait_expression56140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_sizeof_in_type_trait_literal56175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compiler_specific_type_trait_literal_in_type_trait_literal56179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFTRIGHT_in_shiftright_literal56334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATERTHAN_in_shiftright_literal56388 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_shiftright_literal56390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMALINT_in_literal56414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEXADECIMALINT_in_literal56416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOATONE_in_literal56418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_literal56420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adjacent_string_literals_in_literal56422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_literal56424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCTALINT_in_literal56426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_true_in_literal56428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_false_in_literal56430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compiler_specific_literal_in_literal56432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_adjacent_string_literals56457 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_LITERAL___null_in_compiler_specific_literal56483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_lookahead_tokenset_arg_syms56513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMALINT_in_lookahead_tokenset_arg_syms56515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEXADECIMALINT_in_lookahead_tokenset_arg_syms56517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOATONE_in_lookahead_tokenset_arg_syms56519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_lookahead_tokenset_arg_syms56521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_lookahead_tokenset_arg_syms56523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_lookahead_tokenset_arg_syms56525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OCTALINT_in_lookahead_tokenset_arg_syms56527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_lookahead_tokenset_arg_syms56538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_lookahead_tokenset_arg_syms56540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_lookahead_tokenset_arg_syms56542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMPERSAND_in_lookahead_tokenset_arg_syms56544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_sizeof_in_lookahead_tokenset_arg_syms56546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_lookahead_tokenset_arg_syms56548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_lookahead_tokenset_arg_syms56559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUSPLUS_in_lookahead_tokenset_arg_syms56561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUSMINUS_in_lookahead_tokenset_arg_syms56563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_OPERATOR_in_lookahead_tokenset_arg_syms56565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_new_in_lookahead_tokenset_arg_syms56567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_delete_in_lookahead_tokenset_arg_syms56569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_this_in_lookahead_tokenset_arg_syms56580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_void_in_lookahead_tokenset_arg_syms56591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_char_in_lookahead_tokenset_arg_syms56593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_short_in_lookahead_tokenset_arg_syms56595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_long_in_lookahead_tokenset_arg_syms56597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_float_in_lookahead_tokenset_arg_syms56599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_double_in_lookahead_tokenset_arg_syms56601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_signed_in_lookahead_tokenset_arg_syms56603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_unsigned_in_lookahead_tokenset_arg_syms56605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_int_in_lookahead_tokenset_arg_syms56607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIVIDE_in_lookahead_tokenset_arg_syms56618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFTLEFT_in_lookahead_tokenset_arg_syms56620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFTRIGHT_in_lookahead_tokenset_arg_syms56622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISEOR_in_lookahead_tokenset_arg_syms56624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_lookahead_tokenset_arg_syms56626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_lookahead_tokenset_arg_syms56628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISEXOR_in_lookahead_tokenset_arg_syms56630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUAL_in_lookahead_tokenset_arg_syms56641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESSTHANOREQUALTO_in_lookahead_tokenset_arg_syms56643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATERTHANOREQUALTO_in_lookahead_tokenset_arg_syms56645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOTEQUAL_in_lookahead_tokenset_arg_syms56647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGNEQUAL_in_lookahead_tokenset_arg_syms56658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISEANDEQUAL_in_lookahead_tokenset_arg_syms56660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIVIDEEQUAL_in_lookahead_tokenset_arg_syms56662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFTLEFTEQUAL_in_lookahead_tokenset_arg_syms56664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHIFTRIGHTEQUAL_in_lookahead_tokenset_arg_syms56666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUSEQUAL_in_lookahead_tokenset_arg_syms56668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUSEQUAL_in_lookahead_tokenset_arg_syms56670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODEQUAL_in_lookahead_tokenset_arg_syms56681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMESEQUAL_in_lookahead_tokenset_arg_syms56683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISEOREQUAL_in_lookahead_tokenset_arg_syms56685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISEXOREQUAL_in_lookahead_tokenset_arg_syms56687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_lookahead_tokenset_arg_syms56689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_in_lookahead_tokenset_arg_syms56691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POINTERTO_in_lookahead_tokenset_arg_syms56702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTIONMARK_in_lookahead_tokenset_arg_syms56704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_lookahead_tokenset_arg_syms56706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCOPE_in_lookahead_tokenset_arg_syms56708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOTMBR_in_lookahead_tokenset_arg_syms56710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POINTERTOMBR_in_lookahead_tokenset_arg_syms56712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_lookahead_tokenset_arg_syms56714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELLIPSIS_in_lookahead_tokenset_arg_syms56716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_typedef_in_lookahead_tokenset_arg_syms56727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_extern_in_lookahead_tokenset_arg_syms56729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_static_in_lookahead_tokenset_arg_syms56731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_auto_in_lookahead_tokenset_arg_syms56733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_register_in_lookahead_tokenset_arg_syms56735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___thread_in_lookahead_tokenset_arg_syms56737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_const_in_lookahead_tokenset_arg_syms56748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_volatile_in_lookahead_tokenset_arg_syms56750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_struct_in_lookahead_tokenset_arg_syms56752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_union_in_lookahead_tokenset_arg_syms56754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_class_in_lookahead_tokenset_arg_syms56756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_enum_in_lookahead_tokenset_arg_syms56758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_typename_in_lookahead_tokenset_arg_syms56760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___offsetof_in_lookahead_tokenset_arg_syms56771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___alignof_in_lookahead_tokenset_arg_syms56773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_throw_in_lookahead_tokenset_arg_syms56775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_wchar_t_in_lookahead_tokenset_arg_syms56777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_typeid_in_lookahead_tokenset_arg_syms56779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_const_cast_in_lookahead_tokenset_arg_syms56790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_static_cast_in_lookahead_tokenset_arg_syms56792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_dynamic_cast_in_lookahead_tokenset_arg_syms56794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_reinterpret_cast_in_lookahead_tokenset_arg_syms56796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_bool_in_lookahead_tokenset_arg_syms56807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_true_in_lookahead_tokenset_arg_syms56809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_false_in_lookahead_tokenset_arg_syms56811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___global_in_lookahead_tokenset_arg_syms56822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___symbolic_in_lookahead_tokenset_arg_syms56824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___hidden_in_lookahead_tokenset_arg_syms56826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___declspec_in_lookahead_tokenset_arg_syms56828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___attribute___in_lookahead_tokenset_arg_syms56839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___typeof___in_lookahead_tokenset_arg_syms56841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_ENUM_in_lookahead_tokenset_arg_syms56852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_UNION_in_lookahead_tokenset_arg_syms56854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_CLASS_in_lookahead_tokenset_arg_syms56856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_POD_in_lookahead_tokenset_arg_syms56858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_ABSTRACT_in_lookahead_tokenset_arg_syms56860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HAS_VIRT_DESTR_in_lookahead_tokenset_arg_syms56862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_EMPTY_in_lookahead_tokenset_arg_syms56864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_BASEOF_in_lookahead_tokenset_arg_syms56866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_POLYMORPH_in_lookahead_tokenset_arg_syms56868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATERTHAN_in_look_after_tmpl_args56948 = new BitSet(new long[]{0x801FFFFFFFFCFBF0L,0x016440000C00C00EL,0xE000008FEE9FCFBCL,0x00040000C4821003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC000000000000000L,0x000000000000037FL});
    public static final BitSet FOLLOW_LESSTHAN_in_look_after_tmpl_args56990 = new BitSet(new long[]{0x801FFFFFFFFCFBF0L,0x016440000C00C00EL,0xE000008FEE9FCFBCL,0x00040000C4821003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC000000000000000L,0x000000000000037FL});
    public static final BitSet FOLLOW_LPAREN_in_look_after_tmpl_args57016 = new BitSet(new long[]{0x801FFFFFFFFCFBF0L,0x016440000C00C00EL,0xE000008FEE9FCFBCL,0x00040000C4821003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC000000000000000L,0x000000000000037FL});
    public static final BitSet FOLLOW_RPAREN_in_look_after_tmpl_args57042 = new BitSet(new long[]{0x801FFFFFFFFCFBF0L,0x016440000C00C00EL,0xE000008FEE9FCFBCL,0x00040000C4821003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC000000000000000L,0x000000000000037FL});
    public static final BitSet FOLLOW_LSQUARE_in_look_after_tmpl_args57068 = new BitSet(new long[]{0x801FFFFFFFFCFBF0L,0x016440000C00C00EL,0xE000008FEE9FCFBCL,0x00040000C4821003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC000000000000000L,0x000000000000037FL});
    public static final BitSet FOLLOW_RSQUARE_in_look_after_tmpl_args57094 = new BitSet(new long[]{0x801FFFFFFFFCFBF0L,0x016440000C00C00EL,0xE000008FEE9FCFBCL,0x00040000C4821003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC000000000000000L,0x000000000000037FL});
    public static final BitSet FOLLOW_lookahead_tokenset_arg_syms_in_look_after_tmpl_args57120 = new BitSet(new long[]{0x801FFFFFFFFCFBF0L,0x016440000C00C00EL,0xE000008FEE9FCFBCL,0x00040000C4821003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC000000000000000L,0x000000000000037FL});
    public static final BitSet FOLLOW_GREATERTHAN_in_look_after_tmpl_args57133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_skip_balanced_Curl57170 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_skip_balanced_Curl_in_skip_balanced_Curl57272 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_set_in_skip_balanced_Curl57276 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_RCURLY_in_skip_balanced_Curl57338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESSTHAN_in_lazy_template57432 = new BitSet(new long[]{0xFFFFFFFFFFFCFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_set_in_lazy_template57460 = new BitSet(new long[]{0xFFFFFFFFFFFCFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_lazy_template_in_lazy_template57493 = new BitSet(new long[]{0xFFFFFFFFFFFCFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000003FFL});
    public static final BitSet FOLLOW_GREATERTHAN_in_lazy_template57528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___clrcall_in_literal_clrcall57739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL___finally_in_literal_finally57850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred1_CXXParser1692 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred1_CXXParser1694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_else_in_synpred2_CXXParser2600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_specifiers_in_synpred3_CXXParser3300 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_specifier_in_synpred3_CXXParser3303 = new BitSet(new long[]{0x0010290100001010L,0x004E400008000000L,0x00000001CE9FCB8CL,0x00000B0800000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_declarator_in_synpred3_CXXParser3306 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_EQUAL_in_synpred3_CXXParser3308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_range_declaration_in_synpred4_CXXParser4894 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_synpred4_CXXParser4896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_declaration_in_synpred5_CXXParser5579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_OPERATOR_in_synpred6_CXXParser8951 = new BitSet(new long[]{0x0007FFFFFFFC5940L,0x0000000000000000L,0x0000000000000000L,0x0000000000001002L});
    public static final BitSet FOLLOW_operator_id_in_synpred6_CXXParser8953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_OPERATOR_in_synpred7_CXXParser9133 = new BitSet(new long[]{0x0007FFFFFFFC5940L,0x0000000000000000L,0x0000000000000000L,0x0000000000001002L});
    public static final BitSet FOLLOW_operator_id_in_synpred7_CXXParser9135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_synpred8_CXXParser9400 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_synpred8_CXXParser9402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_OPERATOR_in_synpred9_CXXParser9473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_synpred9_CXXParser9475 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred9_CXXParser9477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_template_in_synpred10_CXXParser9619 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_lookup_simple_template_id_nocheck_in_synpred10_CXXParser9621 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_synpred10_CXXParser9623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_OPERATOR_in_synpred11_CXXParser9742 = new BitSet(new long[]{0x0007FFFFFFFC5940L,0x0000000000000000L,0x0000000000000000L,0x0000000000001002L});
    public static final BitSet FOLLOW_operator_id_in_synpred11_CXXParser9744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_synpred12_CXXParser9913 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_synpred12_CXXParser9915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_OPERATOR_in_synpred13_CXXParser9975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_synpred13_CXXParser9977 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred13_CXXParser9979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_template_in_synpred14_CXXParser10122 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_lookup_simple_template_id_nocheck_in_synpred14_CXXParser10124 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_synpred14_CXXParser10126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred15_CXXParser10177 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_synpred15_CXXParser10179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lookup_simple_template_id_in_synpred16_CXXParser10308 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_synpred16_CXXParser10310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declarator_in_synpred17_CXXParser10842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declarator_in_synpred18_CXXParser11632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_class_in_synpred19_CXXParser13806 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_synpred19_CXXParser13808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_head_in_synpred20_CXXParser13850 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LCURLY_in_synpred20_CXXParser13852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_enum_in_synpred21_CXXParser13894 = new BitSet(new long[]{0x0000000000014000L,0x0000000008000000L,0x0000000000000000L,0x0000008000030000L});
    public static final BitSet FOLLOW_attribute_specifiers_in_synpred21_CXXParser13896 = new BitSet(new long[]{0x0000000000010000L,0x0000000008000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred21_CXXParser13899 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_LCURLY_in_synpred21_CXXParser13902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lookup_nested_name_specifier_in_synpred22_CXXParser15718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred23_CXXParser16699 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_synpred23_CXXParser16701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred24_CXXParser16906 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_synpred24_CXXParser16908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred25_CXXParser16955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_template_id_or_IDENT_in_synpred26_CXXParser19398 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_synpred26_CXXParser19400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_id_in_synpred27_CXXParser20446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ptr_operator_in_synpred28_CXXParser21825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstract_declarator_in_synpred29_CXXParser22831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declarator_in_synpred30_CXXParser23030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstract_declarator_in_synpred31_CXXParser23776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred32_CXXParser24215 = new BitSet(new long[]{0x0010090100005010L,0x0000000008000000L});
    public static final BitSet FOLLOW_abstract_declarator_in_synpred32_CXXParser24217 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred32_CXXParser24219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarator_in_synpred33_CXXParser25196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ptr_operator_in_synpred34_CXXParser25489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameters_and_qualifiers_in_synpred35_CXXParser26161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_abstract_declarator_in_synpred36_CXXParser28354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGNEQUAL_in_synpred37_CXXParser31853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_synpred38_CXXParser32141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lookup_simple_template_id_in_synpred39_CXXParser36021 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_IDENT_in_synpred39_CXXParser36025 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_SCOPE_in_synpred39_CXXParser36028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred40_CXXParser37729 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_COLON_in_synpred40_CXXParser37732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declarator_in_synpred41_CXXParser37992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ptr_operator_in_synpred42_CXXParser42741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_new_in_synpred43_CXXParser45309 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_LSQUARE_in_synpred43_CXXParser45311 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_synpred43_CXXParser45313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_delete_in_synpred44_CXXParser45346 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_LSQUARE_in_synpred44_CXXParser45348 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_synpred44_CXXParser45350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LITERAL_class_in_synpred45_CXXParser47039 = new BitSet(new long[]{0x0000000000800140L,0x0000000008000000L});
    public static final BitSet FOLLOW_set_in_synpred45_CXXParser47041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred46_CXXParser48577 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_LESSTHAN_in_synpred46_CXXParser48579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_synpred47_CXXParser49089 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_LESSTHAN_in_synpred47_CXXParser49091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_expression_in_synpred48_CXXParser50599 = new BitSet(new long[]{0x0000000000800110L});
    public static final BitSet FOLLOW_ELLIPSIS_in_synpred48_CXXParser50601 = new BitSet(new long[]{0x0000000000800100L});
    public static final BitSet FOLLOW_set_in_synpred48_CXXParser50604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_id_in_synpred49_CXXParser50631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_id_in_synpred50_CXXParser53708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_synpred51_CXXParser53765 = new BitSet(new long[]{0x80102A01B4005000L,0x000E40000C00C00EL,0xE000000E0E9FC40CL,0xFC2A0F0800001003L,0x00000000000003FFL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_cast_expression_in_synpred51_CXXParser53767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_expression_in_synpred52_CXXParser53803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_expression_in_synpred53_CXXParser53836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_trait_literal_in_synpred54_CXXParser53869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred55_CXXParser54118 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_synpred55_CXXParser54120 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred55_CXXParser54122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQUARE_in_synpred56_CXXParser54255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ptr_operator_in_synpred56_CXXParser54259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ptr_operator_in_synpred57_CXXParser54298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LSQUARE_in_synpred58_CXXParser54456 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_RSQUARE_in_synpred58_CXXParser54458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred59_CXXParser54547 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_synpred59_CXXParser54549 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred59_CXXParser54551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred60_CXXParser56088 = new BitSet(new long[]{0x0010000000000000L,0x004E000008000000L,0x00000001CE9FCB8CL,0x00000B0800030000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_id_in_synpred60_CXXParser56090 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred60_CXXParser56092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATERTHAN_in_synpred61_CXXParser56929 = new BitSet(new long[]{0x0000000000000002L});

}