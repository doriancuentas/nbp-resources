// $ANTLR Sun-2.7.7(NoEx) (2006-01-29): "parser/cppparser.g" -> "CPPParser.java"$


package org.netbeans.modules.cnd.modelimpl.parser.generated;

import java.io.*;
import java.util.*;

import org.netbeans.modules.cnd.antlr.*;
import org.netbeans.modules.cnd.antlr.collections.*;
import org.netbeans.modules.cnd.antlr.debug.misc.*;
import org.netbeans.modules.cnd.modelimpl.parser.*;
import org.netbeans.modules.cnd.modelimpl.parser.Enum;
import org.netbeans.modules.cnd.modelimpl.debug.*;


import org.netbeans.modules.cnd.antlr.TokenBuffer;
import org.netbeans.modules.cnd.antlr.TokenStreamIOException;
import org.netbeans.modules.cnd.antlr.ANTLRException;
import org.netbeans.modules.cnd.antlr.LLkParserNoEx;
import org.netbeans.modules.cnd.antlr.Token;
import org.netbeans.modules.cnd.antlr.TokenStream;
import org.netbeans.modules.cnd.antlr.RecognitionException;
import org.netbeans.modules.cnd.antlr.NoViableAltException;
import org.netbeans.modules.cnd.antlr.MismatchedTokenException;
import org.netbeans.modules.cnd.antlr.SemanticException;
import org.netbeans.modules.cnd.antlr.collections.impl.BitSet;
import org.netbeans.modules.cnd.antlr.collections.AST;
import java.util.Hashtable;
import org.netbeans.modules.cnd.antlr.ASTFactory;
import org.netbeans.modules.cnd.antlr.ASTPair;
import org.netbeans.modules.cnd.antlr.collections.impl.ASTArray;

@SuppressWarnings({"unchecked", "cast", "fallthrough"})

public class CPPParser extends org.netbeans.modules.cnd.antlr.LLkParserNoEx       implements CPPTokenTypes
 {

    private CppParserAction action;
    protected CPPParser(TokenStream stream, CppParserAction action) {
        this(stream);
        this.action = action;
    }

    // Defines for flags passed to init methods
    public static final int CPP_STATEMENT_TRACE		= 0x1;
    public static final int CPP_STATEMENT_TRACE_VERBOSE = 0x2;
    public static final int CPP_SUPPRESS_ERRORS		= 0x4;

    public static final int CPP_CPLUSPLUS		= 0x8;
    public static final int CPP_ANSI_C			= 0x10;
    public static final int CPP_KandR_C			= 0x20;
    
    public static final int CPP_FLAVOR_CPP11            = 0x40;

    /** Switches legacy warnings on */
    protected static final boolean reportOddWarnings = Boolean.getBoolean("cnd.parser.odd.warnings");

    protected void addNewFold(int type, int startLnum, int startOffset, int endLnum, int endOffset) {}

    //	The statements in this block appear only in CPPParser.cpp and not in CPPLexer.cpp

    public static final
    int statementTrace = 0;	// Used to control selected (level) tracing (see support.cpp)
				// 1 Shows which external and member statements selected
				// 2 Shows above plus all declarations/definitions
				// 3 reserved for future use
				// 4 and above available for user

     protected boolean isLazyCompound() {
        return false;
    }

    protected void init(String filename, int flags) {

	setFilename(filename);
	//
	// Creates a dictionary to hold symbols with 4001 buckets, 200 scopes
	// and 800,000 characters // These can be changed to suit the size of
	// program(s) being parsed.
	//symbols = new CPPDictionary(4001, 200, 800000);

	// Set template parameter and external scopes. Set template parameter scope to 0.
	//templateParameterScope = symbols->getCurrentScopeIndex();
	//symbols->saveScope();	// Advance currentScope from 0 to 1
	//externalScope = symbols->getCurrentScopeIndex();	// Set external scope to 1

	// Declare predefined scope "std" in external scope
	//CPPSymbol *a = new CPPSymbol("std", CPPSymbol::otTypedef);
	//symbols->define("std", a);

	// Global flags to allow for nested declarations
	_td = false;		// For typedef
	_fd = false;		// For friend
	_sc = scInvalid;	// For StorageClass
	_tq = tqInvalid;	// For TypeQualifier
	_ts = tsInvalid;	// For TypeSpecifier
	_ds = dsInvalid;	// For DeclSpecifier

	//functionDefinition = 0;
	qualifierPrefix = new StringBuilder();
	enclosingClass = "";
	assign_stmt_RHS_found = 0;
	in_parameter_list = false;
	K_and_R = false;	// used to distinguish old K & R parameter definitions
	in_return = false;
	is_address = false;
	is_pointer = false;

	/*if ((flags & CPP_STATEMENT_TRACE) > 0) {
	    statementTrace = 1;
	}
	if ((flags & CPP_STATEMENT_TRACE_VERBOSE) > 0) {
	    statementTrace = 2;
	}*/
	if ((flags & CPP_SUPPRESS_ERRORS) > 0) {
	    reportErrors = false;
	}
	if ((flags & CPP_CPLUSPLUS) > 0) {
	    lang = CPLUSPLUS;
	} else if ((flags & CPP_ANSI_C) > 0) {
	    lang = ANSI_C;
	} else if (CPP_KandR_C > 0) { // VK: looks strange; well leave for a while
	    lang = KandR_C;
	} else {
	    lang = UNKNOWN_LANG;
	}

        if ((flags & CPP_FLAVOR_CPP11) > 0) {
            langFlavor = FLAVOR_CPP11;
        } else {
            langFlavor = FLAVOR_UNKNOWN;
        }
    }

    boolean isCPlusPlus() {
	return lang == CPLUSPLUS;
    }

    boolean isCPlusPlus11() {
        return isCPlusPlus() && langFlavor == FLAVOR_CPP11;
    }

    boolean isC() {
        return lang == ANSI_C;
    }

	protected static final int tsInvalid   = 0x0;
	protected static final int tsVOID      = 0x1;
	protected static final int tsCHAR      = 0x2;
	protected static final int tsSHORT     = 0x4;
	protected static final int tsINT       = 0x8;
	protected static final int tsLONG      = 0x10;
	protected static final int tsFLOAT     = 0x20;
	protected static final int tsDOUBLE    = 0x40;
	protected static final int tsSIGNED    = 0x80;
	protected static final int tsUNSIGNED  = 0x100;
	protected static final int tsTYPEID    = 0x200;
	protected static final int tsSTRUCT    = 0x400;
	protected static final int tsENUM      = 0x800;
	protected static final int tsUNION     = 0x1000;
	protected static final int tsCLASS     = 0x2000;
	protected static final int tsWCHAR_T   = 0x4000;
	protected static final int tsBOOL      = 0x8000;
	protected static final int tsCOMPLEX   = 0x10000;
	protected static final int tsIMAGINARY = 0x20000;
        protected static final int tsAUTO      = 0x40000; // c++11 auto type specifier
        protected static final int tsOTHER     = 0x80000;

	public static class TypeQualifier extends Enum { public TypeQualifier(String id) { super(id); } }

	protected static final TypeQualifier tqInvalid = new TypeQualifier("tqInvalid");
	protected static final TypeQualifier tqCONST = new TypeQualifier("tqCONST");
	protected static final TypeQualifier tqVOLATILE = new TypeQualifier("tqVOLATILE");
	protected static final TypeQualifier tqCDECL = new TypeQualifier("tqCDECL");
	protected static final TypeQualifier tqOTHER = new TypeQualifier("tqOTHER");

	public static class StorageClass extends Enum { public StorageClass(String id) { super(id); } }

	protected static final StorageClass scInvalid = new StorageClass("scInvalid");
	protected static final StorageClass scAUTO = new StorageClass("scAUTO");
	protected static final StorageClass scREGISTER = new StorageClass("scREGISTER");
	protected static final StorageClass scSTATIC = new StorageClass("scSTATIC");
	protected static final StorageClass scEXTERN = new StorageClass("scEXTERN");
	protected static final StorageClass scMUTABLE = new StorageClass("scMUTABLE");
	protected static final StorageClass scTHREAD = new StorageClass("scTHREAD");
	protected static final StorageClass scOTHER = new StorageClass("scOTHER");

	public static class DeclSpecifier extends Enum { public DeclSpecifier(String id) { super(id); } }

	protected static final DeclSpecifier dsInvalid = new DeclSpecifier("dsInvalid");
	protected static final DeclSpecifier dsVIRTUAL = new DeclSpecifier("dsVIRTUAL");
	protected static final DeclSpecifier dsINLINE = new DeclSpecifier("dsINLINE");
	protected static final DeclSpecifier dsEXPLICIT = new DeclSpecifier("dsEXPLICIT");
	protected static final DeclSpecifier dsFRIEND = new DeclSpecifier("dsFRIEND");

        protected static final String LITERAL_EXEC = "EXEC";
        protected static final String LITERAL_SQL = "SQL";

	// typedef int QualifiedItem;
	protected static final int qiInvalid     = 0x0;
	protected static final int qiType        = 0x1;	// includes enum, class, typedefs, namespace
	protected static final int qiDtor        = 0x2;
	protected static final int qiCtor        = 0x4;
	protected static final int qiOperator    = 0x8;
	protected static final int qiPtrMember   = 0x10;
	protected static final int qiVar         = 0x20;
	protected static final int qiFun         = 0x40;
	
	// Language Definitions
	// TODO: what's the difference with the above constants (CPP_ANSI_C, etc)
	protected static final  int UNKNOWN_LANG	= 0x0;
	protected static final  int CPLUSPLUS	= 0x2;
	protected static final  int ANSI_C	= 0x4;
	protected static final  int KandR_C	= 0x8;

        // Language Flavors
        protected static final  int FLAVOR_UNKNOWN  = 0x0;
        protected static final  int FLAVOR_CPP11    = 0x1;

        protected static final int ERROR_LIMIT = 100;
	private int errorCount = 0;

    protected static final int declOther = 0;
    protected static final int declStatement = 1;
    protected static final int declGeneric = 2;
    protected static final int declNotFirst = 3;
    protected static final int declFunctionParam = 4;
    protected static final int declExternFunction = 5;
    protected static final int declSimpleFunction = 6;

	public int getErrorCount() {
	    int cnt = errorCount;
	    return cnt;
	}

        public boolean shouldProceed() {
            boolean res = errorCount < ERROR_LIMIT;
            if (!res) {
                reportError("Too many errors. Parsing is being stopped."); // NOI18N
            }
            return res;
        }

	public void reportError(RecognitionException e) {
            // Do not report errors that we had reported already
            if (lastRecoveryPosition == input.index()) {
                return;
            }

            onError(e);
            
            if (Diagnostic.needStatistics()) Diagnostic.onParserError(e);

	    if (reportErrors) {
                if (TraceFlags.DEBUG) {
                    e.printStackTrace(System.err);
                } else {
                    doReportError(e);
                }
	    }
	    errorCount++;
	}

	public void doReportError(RecognitionException e) {
            super.reportError(e);
        }

	public void reportError(String s) {
	    if (reportErrors) {
		super.reportError(s);
	    }
	    errorCount++;
	}

        // Set of tokens stopping recovery
        private static final BitSet stopSet = new BitSet();
        static {
            stopSet.add(LCURLY);
            stopSet.add(RCURLY);
            stopSet.add(RPAREN);
            stopSet.add(LPAREN);
            //stopSet.add(LSQUARE);
            //stopSet.add(RSQUARE);
        }
        
        private static final int RECOVERY_LIMIT = 20;
        private int recoveryCounter = 0;
        private int lastRecoveryPosition = -1;
        
        public void recover(RecognitionException ex, BitSet tokenSet) {
            if (lastRecoveryPosition == input.index()) {
                if (recoveryCounter > RECOVERY_LIMIT) {
                    consume();
                    recoveryCounter = 0;
                } else {
                    recoveryCounter++;
                }
            } else {
                recoveryCounter = 0;
                lastRecoveryPosition = input.index();
            }
            tokenSet.orInPlace(stopSet);
            consumeUntil(tokenSet);
	}

        public boolean isTemplateTooDeep(int currentLevel, int maxLevel) {
            return isTemplateTooDeep(currentLevel, maxLevel, 0);
        }
	
        public static int TEMPLATE_PREVIEW_POS_LIMIT = 4096;
        public boolean isTemplateTooDeep(int currentLevel, int maxLevel, int startPos) {
            int level = currentLevel;
            int pos = startPos;            
            while(pos < TEMPLATE_PREVIEW_POS_LIMIT) {
                int token = LA(pos);
                pos++;
                if(token == EOF || token == 0) {
                    break;
                }
                if(token == LCURLY || token == RCURLY) {
                    break;
                }
                if(token == LESSTHAN) {
                    level++;
                } else if(token == GREATERTHAN) {
                    level--;
                } 
                if(level == 0) {
                    return false;
                }
                if(level >= maxLevel) {
                    return true;
                }
            }
            return false;
        }


	//protected boolean isCtor() { /*TODO: implement*/ throw new NotImplementedException(); }
	//protected boolean isValidIdentifier(String id) { /*TODO: implement*/ throw new NotImplementedException(); }

	protected
	int lang;

	protected
	int langFlavor;

	// Symbol table management stuff
	//CPPDictionary *symbols;

	//protected
	//int templateParameterScope;

	//protected
	//int externalScope;

	protected
	boolean _td;			// For typedef

	protected
	boolean _fd;			// For friend

	protected
	StorageClass _sc;	// For storage class

	protected
	TypeQualifier _tq;	// For type qualifier

	protected
	/*TypeSpecifier*/int _ts;	// For type specifier

	protected
	DeclSpecifier _ds;	// For declaration specifier

	/*protected
	int functionDefinition;	// 0 = Function definition not being parsed
				// 1 = Parsing function name
				// 2 = Parsing function parameter list
				// 3 = Parsing function block*/

	protected
	StringBuilder qualifierPrefix = new StringBuilder();

	protected
	String enclosingClass;

	int assign_stmt_RHS_found;

	boolean in_parameter_list;	// DW 13/02/04 used within CPP_parser
	boolean K_and_R;	// used to distinguish old K & R parameter definitions
	boolean in_return;
	boolean is_address;
	boolean is_pointer;

        private static final int NESTED_CLASSES_LIMIT = 32;

        protected int classDefinitionDepth = 0; // to restrict number of nested classes

	protected int MaxTemplateTokenScan = 200;

	static class IF_Type extends Enum { public IF_Type(String id) { super(id); } }
	protected static final IF_Type IF_Local = new IF_Type("IF_Local");
	protected static final IF_Type IF_System = new IF_Type("IF_System");
	protected static final IF_Type IF_Macro = new IF_Type("IF_Macro");

	static class IncludeFile {
	    public IF_Type type;
	    public String file;
	}

	// Semantic interface; You could subclass and redefine these functions
	//  so you don't have to mess with the grammar itself.

	// Antlr doesn't allow to make parser abstract;
	// I throw this exception in methods, which otherwise were just abstract 
	public static class NotImplementedException extends Error {
		public NotImplementedException() { super("not imlemented"); }
	}
	
	// Symbol stuff
	protected boolean qualifiedItemIsOneOf(/*QualifiedItem*/int qiFlags) { return qualifiedItemIsOneOf(qiFlags, 0); }
	protected boolean qualifiedItemIsOneOf(/*QualifiedItem*/int qiFlags, int lookahead_offset) { /*TODO: implement*/ throw new NotImplementedException(); }

	protected /*QualifiedItem*/int qualifiedItemIs()	{ return qualifiedItemIs(0); }
	protected /*QualifiedItem*/int qualifiedItemIs(int lookahead_offset) { /*TODO: implement*/ throw new NotImplementedException(); }

	// both skipTemplateQualifiers and skipNestedParens used only in CPPParserEx
	//protected boolean skipTemplateQualifiers(int kInOut) { /*TODO: implement*/ throw new NotImplementedException(); }
	// TODO: original skipNestedParens(int& kInOut) passes kInOut BY REF!
	//protected int skipNestedParens(int kInOut) { /*TODO: implement*/ throw new NotImplementedException(); }

	protected boolean scopedItem() { return scopedItem(1); }
	protected boolean scopedItem(int k) { /*TODO: implement*/ throw new NotImplementedException(); }

	// finalQualifier is used in CPPParserEx only
	//protected int finalQualifier() { return finalQualifier(1); }
	//protected int finalQualifier(final int k) { /*TODO: implement*/ throw new NotImplementedException(); }

    protected boolean isTypeName(CharSequence s) { /*TODO: implement*/ throw new NotImplementedException(); }
    protected CharSequence getTokenText(Token token) { /*TODO: implement*/ throw new NotImplementedException(); }
	// isClassName is used in CPPParserEx only
	//protected boolean isClassName(String  s) { /*TODO: implement*/ throw new NotImplementedException(); }
	//protected void end_of_stmt() {}


	// Scoping stuff
	//protected void enterNewLocalScope() {}
	//protected void exitLocalScope() {}
	//protected void enterExternalScope() {}
	//protected void exitExternalScope() {}

	// Aggregate stuff
	protected void classForwardDeclaration(/*TypeSpecifier*/int ts, DeclSpecifier ds, String tag) {}

	protected void beginClassDefinition(/*TypeSpecifier*/int ts, String tag) {
            classDefinitionDepth++;
        }

	protected void endClassDefinition() {
            classDefinitionDepth--;
        }
        
        protected boolean checkClassDefinitionDepth(int maxDepth) {
            return classDefinitionDepth < maxDepth;
        }

	protected void beginEnumDefinition(String s) {}
	protected void endEnumDefinition() {}
	protected void enumElement(String s) {}

	// Declaration and definition stuff
	protected void declarationSpecifier(boolean td, boolean fd, StorageClass sc, TypeQualifier tq,
			     /*TypeSpecifier*/int ts, DeclSpecifier ds) {}
	protected void beginDeclaration() {}
	protected void endDeclaration() {}
	protected void beginConstructorDeclaration(String s) {}
	protected void endConstructorDeclaration() {}
	protected void beginDestructorDeclaration(String s) {}
	protected void endDestructorDeclaration() {}
	protected boolean beginParameterDeclaration() { _ts = tsInvalid; return true; }
    protected boolean endParameterDeclaration(int oldTs) { _ts = oldTs; return true; }
	protected void beginFieldDeclaration() {}
	//protected void beginFunctionDefinition() {}
	//protected void endFunctionDefinition() {}
	//protected void functionParameterList() {}
	//protected void functionEndParameterList(boolean def) {}
	//protected void beginConstructorDefinition() {}
	//protected void endConstructorDefinition() {}
	//protected void beginDestructorDefinition() {}
	//protected void endDestructorDefinition() {}

	// Declarator stuff
	protected void declaratorID(String s, /*QualifiedItem*/int qi) {}	// stores new symbol with type
	protected void declaratorArray() {}
	//protected void declaratorParameterList(boolean def) {}
	//protected void declaratorEndParameterList(boolean def) {}

	// template stuff
	protected void templateTypeParameter(String s) {}
	//protected void beginTemplateDeclaration() {}
	//protected void endTemplateDeclaration() {}
	protected void beginTemplateDefinition() {}
	protected void endTemplateDefinition() {}
	//protected void beginTemplateParameterList() {}
	//protected void endTemplateParameterList() {}

	// exception stuff
	//protected void exceptionBeginHandler() {}
	//protected void exceptionEndHandler() {}
	protected void panic(String s) {}

	boolean reportErrors = true;

	// myCode functions ready for overriding in MyCode subclass

	//protected int getOffset() { /*TODO: implement*/ throw new NotImplementedException(); }
	//protected int getLine()	{ /*TODO: implement*/ throw new NotImplementedException(); }

	protected void printf(String pattern, Object... params) { /*TODO: implement*/ throw new NotImplementedException(); }

	protected boolean balanceBraces(int left, int right) { throw new NotImplementedException(); };

        protected boolean checkTemplateExplicitSpecialization() { throw new NotImplementedException(); }

        /** Is called when an error occurred */
        protected void onError(RecognitionException e) {}

protected CPPParser(TokenBuffer tokenBuf, int k) {
  super(tokenBuf,k);
  tokenNames = _tokenNames;
  astFactory = new ASTFactory(getTokenTypeToASTClassMap());
}

public CPPParser(TokenBuffer tokenBuf) {
  this(tokenBuf,2);
}

protected CPPParser(TokenStream lexer, int k) {
  super(lexer,k);
  tokenNames = _tokenNames;
  astFactory = new ASTFactory(getTokenTypeToASTClassMap());
}

public CPPParser(TokenStream lexer) {
  this(lexer,2);
}

	public final void translation_unit() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST translation_unit_AST = null;
		
		loop0:  while (true) {
			{
			_loop7:
			do {
				int LA1_1 = LA(1);
				int LA2_1 = LA(2);
				
				boolean synPredMatched4 = false;
				if ((((_tokenSet_0.member(LA1_1)) && (_tokenSet_0.member(LA2_1)))&&( LT(1).getText().equals(LITERAL_EXEC) && LT(2).getText().equals(LITERAL_SQL) ))) {
					int _m4 = mark();
					guessing++;
					guess4:  while (true) {
						{
						literal_ident_g();
						if (matchError) {break guess4;}
						literal_ident_g();
						if (matchError) {break guess4;}
						}
					synPredMatched4 = true;
					break;} // guess4
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m4);
					guessing--;
				}
				if ( synPredMatched4 ) {
					pro_c_statement();
					if (matchError) {break loop0;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					boolean synPredMatched6 = false;
					if (((((LA1_1 >= ELLIPSIS && LA1_1 <= CSM_END)) && (_tokenSet_1.member(LA2_1)))&&(shouldProceed() && !isCPlusPlus11()))) {
						int _m6 = mark();
						guessing++;
						guess6:  while (true) {
							{
							match(LSQUARE);
							if (matchError) {break guess6;}
							}
						synPredMatched6 = true;
						break;} // guess6
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m6);
						guessing--;
					}
					if ( synPredMatched6 ) {
						matchNot(EOF);
						if (matchError) {break loop0;}
						reportError(new NoViableAltException(LT(0), getFilename()));
					}
					else if (((_tokenSet_2.member(LA1_1)) && (_tokenSet_1.member(LA2_1)))&&(shouldProceed())) {
						external_declaration();
						if (matchError) {break loop0;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((((LA1_1 >= ELLIPSIS && LA1_1 <= CSM_END)) && (_tokenSet_1.member(LA2_1)))&&(shouldProceed())) {
						matchNot(EOF);
						if (matchError) {break loop0;}
						reportError(new NoViableAltException(LT(0), getFilename()));
					}
					else {
						break _loop7;
					}
					}
				} while (true);
				}
				match(Token.EOF_TYPE);
				if (matchError) {break loop0;}
				translation_unit_AST = (AST)currentAST.root;
				/*exitExternalScope();*/ translation_unit_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TRANSLATION_UNIT,getFilename(), new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(translation_unit_AST));
				currentAST.root = translation_unit_AST;
				currentAST.child = translation_unit_AST!=null &&translation_unit_AST.getFirstChild()!=null ?
					translation_unit_AST.getFirstChild() : translation_unit_AST;
				currentAST.advanceChildToEnd();
				translation_unit_AST = (AST)currentAST.root;
			break;} // loop0
			if (matchError) {
				// when recover we'd like to perform any "build AST" actions
				if ((translation_unit_AST == null) && (currentAST.root != null)) {
				translation_unit_AST = (AST)currentAST.root;
				/*exitExternalScope();*/ translation_unit_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TRANSLATION_UNIT,getFilename(), new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(translation_unit_AST));
				}
				reportError(matchException);
				recover(matchException,_tokenSet_3);
				resetMatchError();
		}
		returnAST = translation_unit_AST;
	}
	
	protected final String  literal_ident() {
		String s = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_ident_AST = null;
		Token  id = null;
		AST id_AST = null;
		Token  kwd_final = null;
		AST kwd_final_AST = null;
		Token  kwd_override = null;
		AST kwd_override_AST = null;
		
		loop1:  while (true) {
			switch ( LA(1)) {
			case IDENT:
			{
				id = LT(1);
				id_AST = astFactory.create(id);
				astFactory.addASTChild(currentAST, id_AST);
				consume();
				s = id.getText();
				literal_ident_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_final:
			{
				kwd_final = LT(1);
				kwd_final_AST = astFactory.create(kwd_final);
				astFactory.addASTChild(currentAST, kwd_final_AST);
				consume();
				s = kwd_final.getText();
				literal_ident_AST = (AST)currentAST.root;
				literal_ident_AST = (AST)astFactory.create(IDENT,s,kwd_final_AST);
				currentAST.root = literal_ident_AST;
				currentAST.child = literal_ident_AST!=null &&literal_ident_AST.getFirstChild()!=null ?
					literal_ident_AST.getFirstChild() : literal_ident_AST;
				currentAST.advanceChildToEnd();
				literal_ident_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_override:
			{
				kwd_override = LT(1);
				kwd_override_AST = astFactory.create(kwd_override);
				astFactory.addASTChild(currentAST, kwd_override_AST);
				consume();
				s = kwd_override.getText();
				literal_ident_AST = (AST)currentAST.root;
				literal_ident_AST = (AST)astFactory.create(IDENT,s,kwd_override_AST);
				currentAST.root = literal_ident_AST;
				currentAST.child = literal_ident_AST!=null &&literal_ident_AST.getFirstChild()!=null ?
					literal_ident_AST.getFirstChild() : literal_ident_AST;
				currentAST.advanceChildToEnd();
				literal_ident_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_0, tokenNames);if (matchError) {break loop1;}
			}
			}
		break;} // loop1
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((literal_ident_AST == null) && (currentAST.root != null)) {
			literal_ident_AST = (AST)currentAST.root;
			literal_ident_AST = (AST)astFactory.create(IDENT,s,kwd_override_AST);
			}
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = literal_ident_AST;
	return s;
}

	public final void pro_c_statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST pro_c_statement_AST = null;
		String s;
		
		loop2:  while (true) {
			s=literal_ident();
			if (matchError) {break loop2;}
			astFactory.addASTChild(currentAST, returnAST);
			s=literal_ident();
			if (matchError) {break loop2;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			_loop1159:
			do {
				switch ( LA(1)) {
				case LCURLY:
				{
					balanceCurlies();
					if (matchError) {break loop2;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LSQUARE:
				{
					balanceSquaresInExpression();
					if (matchError) {break loop2;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LPAREN:
				{
					balanceParensInExpression();
					if (matchError) {break loop2;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case RPAREN:
				case RCURLY:
				{
					{
					switch ( LA(1)) {
					case RCURLY:
					{
						AST tmp4_AST = null;
						tmp4_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp4_AST);
						consume();
						break;
					}
					case RPAREN:
					{
						AST tmp5_AST = null;
						tmp5_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp5_AST);
						consume();
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_4, tokenNames);if (matchError) {break loop2;}
					}
					}
					}
					reportError(new NoViableAltException(LT(0), getFilename()));
					break;
				}
				default:
					if ((_tokenSet_5.member(LA(1)))) {
						{
						AST tmp6_AST = null;
						tmp6_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp6_AST);
						match(_tokenSet_5);
						if (matchError) {break loop2;}
						}
					}
				else {
					break _loop1159;
				}
				}
			} while (true);
			}
			{
			switch ( LA(1)) {
			case EOF:
			{
				consume();
				reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
				break;
			}
			case SEMICOLON:
			{
				consume();
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop2;}
			}
			}
			}
			pro_c_statement_AST = (AST)currentAST.root;
		break;} // loop2
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = pro_c_statement_AST;
}

	public final void external_declaration() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST external_declaration_AST = null;
		String s; K_and_R = false; boolean definition;StorageClass sc;TypeQualifier tq; int ts = 0;
		
		loop3:  while (true) {
			{
			int LA1_2 = LA(1);
			int LA2_2 = LA(2);
			
			switch ( LA1_2) {
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			{
				asm_block();
				if (matchError) {break loop3;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case SEMICOLON:
			{
				if (statementTrace>=1) 
							printf("external_declaration_14[%d]: Semicolon\n",LT(1).getLine());
						
				match(SEMICOLON);
				if (matchError) {break loop3;}
				break;
			}
			default:
				boolean synPredMatched147 = false;
				if ((((LA1_2==LITERAL_extern||LA1_2==LITERAL___extension__) && (LA2_2==LITERAL_template||LA2_2==LITERAL_extern))&&(isCPlusPlus()))) {
					int _m147 = mark();
					guessing++;
					guess147:  while (true) {
						{
						{
						switch ( LA(1)) {
						case LITERAL___extension__:
						{
							consume();
							break;
						}
						case LITERAL_extern:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess147;}
						}
						}
						}
						match(LITERAL_extern);
						if (matchError) {break guess147;}
						match(LITERAL_template);
						if (matchError) {break guess147;}
						}
					synPredMatched147 = true;
					break;} // guess147
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m147);
					guessing--;
				}
				if ( synPredMatched147 ) {
					if (statementTrace>=1) 
								printf("external_declaration_0[%d]: Suppressed instantiation of the following declaration\n",
									LT(1).getLine());
							
					{
					switch ( LA(1)) {
					case LITERAL___extension__:
					{
						consume();
						break;
					}
					case LITERAL_extern:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_7, tokenNames);if (matchError) {break loop3;}
					}
					}
					}
					AST tmp11_AST = null;
					tmp11_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp11_AST);
					match(LITERAL_extern);
					if (matchError) {break loop3;}
					AST tmp12_AST = null;
					tmp12_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp12_AST);
					match(LITERAL_template);
					if (matchError) {break loop3;}
					external_declaration();
					if (matchError) {break loop3;}
					astFactory.addASTChild(currentAST, returnAST);
					external_declaration_AST = (AST)currentAST.root;
					external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_EXTERN_TEMPLATE,"CSM_EXTERN_TEMPLATE", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
					currentAST.root = external_declaration_AST;
					currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
						external_declaration_AST.getFirstChild() : external_declaration_AST;
					currentAST.advanceChildToEnd();
				}
				else {
					boolean synPredMatched152 = false;
					if ((((_tokenSet_8.member(LA1_2)) && (_tokenSet_9.member(LA2_2)))&&(isCPlusPlus()))) {
						int _m152 = mark();
						guessing++;
						guess152:  while (true) {
							{
							{
							switch ( LA(1)) {
							case LITERAL___extension__:
							{
								consume();
								break;
							}
							case LITERAL_template:
							case LITERAL_export:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess152;}
							}
							}
							}
							{
							switch ( LA(1)) {
							case LITERAL_export:
							{
								consume();
								break;
							}
							case LITERAL_template:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess152;}
							}
							}
							}
							match(LITERAL_template);
							if (matchError) {break guess152;}
							}
						synPredMatched152 = true;
						break;} // guess152
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m152);
						guessing--;
					}
					if ( synPredMatched152 ) {
						external_declaration_template();
						if (matchError) {break loop3;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						boolean synPredMatched156 = false;
						if (((_tokenSet_10.member(LA1_2)) && (_tokenSet_11.member(LA2_2)))) {
							int _m156 = mark();
							guessing++;
							guess156:  while (true) {
								{
								{
								switch ( LA(1)) {
								case LITERAL___extension__:
								{
									consume();
									break;
								}
								case LITERAL_typedef:
								case LITERAL_extern:
								case LITERAL_friend:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_const_cast:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL_class:
								case LITERAL_struct:
								case LITERAL_union:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_constexpr:
								case LITERAL_thread_local:
								case LITERAL__TYPE_QUALIFIER__:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess156;}
								}
								}
								}
								{
								switch ( LA(1)) {
								case LITERAL_typedef:
								case LITERAL_extern:
								case LITERAL_friend:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_const_cast:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_constexpr:
								case LITERAL_thread_local:
								case LITERAL__TYPE_QUALIFIER__:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									decl_specifiers_before_type_g();
									if (matchError) {break guess156;}
									break;
								}
								case LITERAL_class:
								case LITERAL_struct:
								case LITERAL_union:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess156;}
								}
								}
								}
								class_head_g();
								if (matchError) {break guess156;}
								}
							synPredMatched156 = true;
							break;} // guess156
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m156);
							guessing--;
						}
						if ( synPredMatched156 ) {
							action.simple_declaration(LT(1));
							action.class_declaration(LT(1));
							{
							switch ( LA(1)) {
							case LITERAL___extension__:
							{
								consume();
								break;
							}
							case ELLIPSIS:
							case LPAREN:
							case LSQUARE:
							case STAR:
							case AND:
							case AMPERSAND:
							case TILDE:
							case SCOPE:
							case IDENT:
							case LITERAL_OPERATOR:
							case LITERAL_typeof:
							case LITERAL___typeof__:
							case LITERAL___typeof:
							case LITERAL_typedef:
							case LITERAL_enum:
							case LITERAL_namespace:
							case LITERAL_extern:
							case LITERAL_inline:
							case LITERAL__inline:
							case LITERAL___inline__:
							case LITERAL___inline:
							case LITERAL_virtual:
							case LITERAL_explicit:
							case LITERAL_friend:
							case LITERAL__stdcall:
							case LITERAL___stdcall:
							case LITERAL_typename:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL_const:
							case LITERAL___const__:
							case LITERAL___const:
							case LITERAL_const_cast:
							case LITERAL_volatile:
							case LITERAL___volatile__:
							case LITERAL___volatile:
							case LITERAL_char:
							case LITERAL_wchar_t:
							case LITERAL_bool:
							case LITERAL_short:
							case LITERAL_int:
							case LITERAL_long:
							case LITERAL_signed:
							case LITERAL___signed__:
							case LITERAL___signed:
							case LITERAL_unsigned:
							case LITERAL___unsigned__:
							case LITERAL_float:
							case LITERAL_double:
							case LITERAL_void:
							case LITERAL__declspec:
							case LITERAL___declspec:
							case LITERAL_class:
							case LITERAL_struct:
							case LITERAL_union:
							case LITERAL_this:
							case LITERAL_true:
							case LITERAL_false:
							case LITERAL_using:
							case LITERAL__cdecl:
							case LITERAL___cdecl:
							case LITERAL__near:
							case LITERAL___near:
							case LITERAL__far:
							case LITERAL___far:
							case LITERAL___interrupt:
							case LITERAL_pascal:
							case LITERAL__pascal:
							case LITERAL___pascal:
							case LITERAL__int64:
							case LITERAL___int64:
							case LITERAL___w64:
							case LITERAL___attribute__:
							case LITERAL___complex__:
							case LITERAL___global:
							case LITERAL__Bool:
							case LITERAL__Complex:
							case LITERAL___thread:
							case LITERAL___attribute:
							case LITERAL__Imaginary:
							case LITERAL_bit:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_final:
							case LITERAL_override:
							case LITERAL_constexpr:
							case LITERAL_decltype:
							case LITERAL_thread_local:
							case LITERAL_static_assert:
							case LITERAL_alignas:
							case LITERAL_char16_t:
							case LITERAL_char32_t:
							case LITERAL___decltype:
							case LITERAL___complex:
							case LITERAL___forceinline:
							case LITERAL___clrcall:
							case LITERAL__Noreturn:
							case LITERAL___builtin_va_list:
							case LITERAL__BUILT_IN_TYPE__:
							case LITERAL__TYPE_QUALIFIER__:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								break;
							}
							default:
							{
								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_10, tokenNames);if (matchError) {break loop3;}
							}
							}
							}
							declaration(declOther);
							if (matchError) {break loop3;}
							astFactory.addASTChild(currentAST, returnAST);
							external_declaration_AST = (AST)currentAST.root;
							external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CLASS_DECLARATION,"CSM_CLASS_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
							currentAST.root = external_declaration_AST;
							currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
								external_declaration_AST.getFirstChild() : external_declaration_AST;
							currentAST.advanceChildToEnd();
						}
						else {
							boolean synPredMatched161 = false;
							if (((_tokenSet_10.member(LA1_2)) && (_tokenSet_11.member(LA2_2)))) {
								int _m161 = mark();
								guessing++;
								guess161:  while (true) {
									{
									{
									switch ( LA(1)) {
									case LITERAL___extension__:
									{
										consume();
										break;
									}
									case LITERAL_typedef:
									case LITERAL_enum:
									case LITERAL_extern:
									case LITERAL_friend:
									case LITERAL_auto:
									case LITERAL_register:
									case LITERAL_static:
									case LITERAL_mutable:
									case LITERAL_const:
									case LITERAL___const__:
									case LITERAL___const:
									case LITERAL_const_cast:
									case LITERAL_volatile:
									case LITERAL___volatile__:
									case LITERAL___volatile:
									case LITERAL___global:
									case LITERAL___thread:
									case LITERAL___symbolic:
									case LITERAL___hidden:
									case LITERAL_constexpr:
									case LITERAL_thread_local:
									case LITERAL__TYPE_QUALIFIER__:
									case LITERAL__STORAGE_CLASS_SPECIFIER__:
									{
										break;
									}
									default:
									{
										matchError=true;if (matchError) {break guess161;}
									}
									}
									}
									{
									switch ( LA(1)) {
									case LITERAL_typedef:
									case LITERAL_extern:
									case LITERAL_friend:
									case LITERAL_auto:
									case LITERAL_register:
									case LITERAL_static:
									case LITERAL_mutable:
									case LITERAL_const:
									case LITERAL___const__:
									case LITERAL___const:
									case LITERAL_const_cast:
									case LITERAL_volatile:
									case LITERAL___volatile__:
									case LITERAL___volatile:
									case LITERAL___global:
									case LITERAL___thread:
									case LITERAL___symbolic:
									case LITERAL___hidden:
									case LITERAL_constexpr:
									case LITERAL_thread_local:
									case LITERAL__TYPE_QUALIFIER__:
									case LITERAL__STORAGE_CLASS_SPECIFIER__:
									{
										decl_specifiers_before_type_g();
										if (matchError) {break guess161;}
										break;
									}
									case LITERAL_enum:
									{
										break;
									}
									default:
									{
										matchError=true;if (matchError) {break guess161;}
									}
									}
									}
									enum_def_head_g();
									if (matchError) {break guess161;}
									}
								synPredMatched161 = true;
								break;} // guess161
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m161);
								guessing--;
							}
							if ( synPredMatched161 ) {
								action.simple_declaration(LT(1));
								action.enum_declaration(LT(1));
								if (statementTrace>=1) printf("external_declaration_3[%d]: Enum definition\n",LT(1).getLine());
								{
								switch ( LA(1)) {
								case LITERAL___extension__:
								{
									consume();
									break;
								}
								case ELLIPSIS:
								case LPAREN:
								case LSQUARE:
								case STAR:
								case AND:
								case AMPERSAND:
								case TILDE:
								case SCOPE:
								case IDENT:
								case LITERAL_OPERATOR:
								case LITERAL_typeof:
								case LITERAL___typeof__:
								case LITERAL___typeof:
								case LITERAL_typedef:
								case LITERAL_enum:
								case LITERAL_namespace:
								case LITERAL_extern:
								case LITERAL_inline:
								case LITERAL__inline:
								case LITERAL___inline__:
								case LITERAL___inline:
								case LITERAL_virtual:
								case LITERAL_explicit:
								case LITERAL_friend:
								case LITERAL__stdcall:
								case LITERAL___stdcall:
								case LITERAL_typename:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_const_cast:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL_char:
								case LITERAL_wchar_t:
								case LITERAL_bool:
								case LITERAL_short:
								case LITERAL_int:
								case LITERAL_long:
								case LITERAL_signed:
								case LITERAL___signed__:
								case LITERAL___signed:
								case LITERAL_unsigned:
								case LITERAL___unsigned__:
								case LITERAL_float:
								case LITERAL_double:
								case LITERAL_void:
								case LITERAL__declspec:
								case LITERAL___declspec:
								case LITERAL_class:
								case LITERAL_struct:
								case LITERAL_union:
								case LITERAL_this:
								case LITERAL_true:
								case LITERAL_false:
								case LITERAL_using:
								case LITERAL__cdecl:
								case LITERAL___cdecl:
								case LITERAL__near:
								case LITERAL___near:
								case LITERAL__far:
								case LITERAL___far:
								case LITERAL___interrupt:
								case LITERAL_pascal:
								case LITERAL__pascal:
								case LITERAL___pascal:
								case LITERAL__int64:
								case LITERAL___int64:
								case LITERAL___w64:
								case LITERAL___attribute__:
								case LITERAL___complex__:
								case LITERAL___global:
								case LITERAL__Bool:
								case LITERAL__Complex:
								case LITERAL___thread:
								case LITERAL___attribute:
								case LITERAL__Imaginary:
								case LITERAL_bit:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_final:
								case LITERAL_override:
								case LITERAL_constexpr:
								case LITERAL_decltype:
								case LITERAL_thread_local:
								case LITERAL_static_assert:
								case LITERAL_alignas:
								case LITERAL_char16_t:
								case LITERAL_char32_t:
								case LITERAL___decltype:
								case LITERAL___complex:
								case LITERAL___forceinline:
								case LITERAL___clrcall:
								case LITERAL__Noreturn:
								case LITERAL___builtin_va_list:
								case LITERAL__BUILT_IN_TYPE__:
								case LITERAL__TYPE_QUALIFIER__:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									break;
								}
								default:
								{
									matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_10, tokenNames);if (matchError) {break loop3;}
								}
								}
								}
								declaration(declOther);
								if (matchError) {break loop3;}
								astFactory.addASTChild(currentAST, returnAST);
								action.end_enum_declaration(LT(1));
								action.end_simple_declaration(LT(1));
								external_declaration_AST = (AST)currentAST.root;
								external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ENUM_DECLARATION,"CSM_ENUM_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
								currentAST.root = external_declaration_AST;
								currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
									external_declaration_AST.getFirstChild() : external_declaration_AST;
								currentAST.advanceChildToEnd();
							}
							else {
								boolean synPredMatched166 = false;
								if (((_tokenSet_10.member(LA1_2)) && (_tokenSet_11.member(LA2_2)))) {
									int _m166 = mark();
									guessing++;
									guess166:  while (true) {
										{
										{
										switch ( LA(1)) {
										case LITERAL___extension__:
										{
											consume();
											break;
										}
										case LITERAL_typedef:
										case LITERAL_enum:
										case LITERAL_extern:
										case LITERAL_friend:
										case LITERAL_auto:
										case LITERAL_register:
										case LITERAL_static:
										case LITERAL_mutable:
										case LITERAL_const:
										case LITERAL___const__:
										case LITERAL___const:
										case LITERAL_const_cast:
										case LITERAL_volatile:
										case LITERAL___volatile__:
										case LITERAL___volatile:
										case LITERAL___global:
										case LITERAL___thread:
										case LITERAL___symbolic:
										case LITERAL___hidden:
										case LITERAL_constexpr:
										case LITERAL_thread_local:
										case LITERAL__TYPE_QUALIFIER__:
										case LITERAL__STORAGE_CLASS_SPECIFIER__:
										{
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break guess166;}
										}
										}
										}
										{
										switch ( LA(1)) {
										case LITERAL_typedef:
										case LITERAL_extern:
										case LITERAL_friend:
										case LITERAL_auto:
										case LITERAL_register:
										case LITERAL_static:
										case LITERAL_mutable:
										case LITERAL_const:
										case LITERAL___const__:
										case LITERAL___const:
										case LITERAL_const_cast:
										case LITERAL_volatile:
										case LITERAL___volatile__:
										case LITERAL___volatile:
										case LITERAL___global:
										case LITERAL___thread:
										case LITERAL___symbolic:
										case LITERAL___hidden:
										case LITERAL_constexpr:
										case LITERAL_thread_local:
										case LITERAL__TYPE_QUALIFIER__:
										case LITERAL__STORAGE_CLASS_SPECIFIER__:
										{
											decl_specifiers_before_type_g();
											if (matchError) {break guess166;}
											break;
										}
										case LITERAL_enum:
										{
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break guess166;}
										}
										}
										}
										enum_fwd_head_g();
										if (matchError) {break guess166;}
										}
									synPredMatched166 = true;
									break;} // guess166
									if (matchError) {
									   resetMatchError();
									}
									rewind(_m166);
									guessing--;
								}
								if ( synPredMatched166 ) {
									action.simple_declaration(LT(1));
									action.enum_declaration(LT(1));
									if (statementTrace>=1) printf("external_declaration_3[%d]: Enum definition\n",LT(1).getLine());
									{
									switch ( LA(1)) {
									case LITERAL___extension__:
									{
										consume();
										break;
									}
									case ELLIPSIS:
									case LPAREN:
									case LSQUARE:
									case STAR:
									case AND:
									case AMPERSAND:
									case TILDE:
									case SCOPE:
									case IDENT:
									case LITERAL_OPERATOR:
									case LITERAL_typeof:
									case LITERAL___typeof__:
									case LITERAL___typeof:
									case LITERAL_typedef:
									case LITERAL_enum:
									case LITERAL_namespace:
									case LITERAL_extern:
									case LITERAL_inline:
									case LITERAL__inline:
									case LITERAL___inline__:
									case LITERAL___inline:
									case LITERAL_virtual:
									case LITERAL_explicit:
									case LITERAL_friend:
									case LITERAL__stdcall:
									case LITERAL___stdcall:
									case LITERAL_typename:
									case LITERAL_auto:
									case LITERAL_register:
									case LITERAL_static:
									case LITERAL_mutable:
									case LITERAL_const:
									case LITERAL___const__:
									case LITERAL___const:
									case LITERAL_const_cast:
									case LITERAL_volatile:
									case LITERAL___volatile__:
									case LITERAL___volatile:
									case LITERAL_char:
									case LITERAL_wchar_t:
									case LITERAL_bool:
									case LITERAL_short:
									case LITERAL_int:
									case LITERAL_long:
									case LITERAL_signed:
									case LITERAL___signed__:
									case LITERAL___signed:
									case LITERAL_unsigned:
									case LITERAL___unsigned__:
									case LITERAL_float:
									case LITERAL_double:
									case LITERAL_void:
									case LITERAL__declspec:
									case LITERAL___declspec:
									case LITERAL_class:
									case LITERAL_struct:
									case LITERAL_union:
									case LITERAL_this:
									case LITERAL_true:
									case LITERAL_false:
									case LITERAL_using:
									case LITERAL__cdecl:
									case LITERAL___cdecl:
									case LITERAL__near:
									case LITERAL___near:
									case LITERAL__far:
									case LITERAL___far:
									case LITERAL___interrupt:
									case LITERAL_pascal:
									case LITERAL__pascal:
									case LITERAL___pascal:
									case LITERAL__int64:
									case LITERAL___int64:
									case LITERAL___w64:
									case LITERAL___attribute__:
									case LITERAL___complex__:
									case LITERAL___global:
									case LITERAL__Bool:
									case LITERAL__Complex:
									case LITERAL___thread:
									case LITERAL___attribute:
									case LITERAL__Imaginary:
									case LITERAL_bit:
									case LITERAL___symbolic:
									case LITERAL___hidden:
									case LITERAL_final:
									case LITERAL_override:
									case LITERAL_constexpr:
									case LITERAL_decltype:
									case LITERAL_thread_local:
									case LITERAL_static_assert:
									case LITERAL_alignas:
									case LITERAL_char16_t:
									case LITERAL_char32_t:
									case LITERAL___decltype:
									case LITERAL___complex:
									case LITERAL___forceinline:
									case LITERAL___clrcall:
									case LITERAL__Noreturn:
									case LITERAL___builtin_va_list:
									case LITERAL__BUILT_IN_TYPE__:
									case LITERAL__TYPE_QUALIFIER__:
									case LITERAL__STORAGE_CLASS_SPECIFIER__:
									{
										break;
									}
									default:
									{
										matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_10, tokenNames);if (matchError) {break loop3;}
									}
									}
									}
									declaration(declOther);
									if (matchError) {break loop3;}
									astFactory.addASTChild(currentAST, returnAST);
									action.end_enum_declaration(LT(1));
									action.end_simple_declaration(LT(1));
									external_declaration_AST = (AST)currentAST.root;
									external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ENUM_FWD_DECLARATION,"CSM_ENUM_FWD_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
									currentAST.root = external_declaration_AST;
									currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
										external_declaration_AST.getFirstChild() : external_declaration_AST;
									currentAST.advanceChildToEnd();
								}
								else {
									boolean synPredMatched172 = false;
									if ((((_tokenSet_12.member(LA1_2)) && (_tokenSet_13.member(LA2_2)))&&(isCPlusPlus()))) {
										int _m172 = mark();
										guessing++;
										guess172:  while (true) {
											{
											{
											switch ( LA(1)) {
											case LITERAL_template:
											case LITERAL_export:
											{
												template_head_g();
												if (matchError) {break guess172;}
												break;
											}
											case LPAREN:
											case LSQUARE:
											case TILDE:
											case SCOPE:
											case IDENT:
											case LITERAL_inline:
											case LITERAL__inline:
											case LITERAL___inline__:
											case LITERAL___inline:
											case LITERAL_virtual:
											case LITERAL_friend:
											case LITERAL___attribute__:
											case LITERAL___attribute:
											case LITERAL_final:
											case LITERAL_override:
											case LITERAL_decltype:
											case LITERAL___decltype:
											case LITERAL___forceinline:
											{
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess172;}
											}
											}
											}
											dtor_head_g(true);
											if (matchError) {break guess172;}
											{
											switch ( LA(1)) {
											case LCURLY:
											{
												consume();
												break;
											}
											case ASSIGNEQUAL:
											{
												consume();
												{
												switch ( LA(1)) {
												case LITERAL_default:
												{
													consume();
													break;
												}
												case LITERAL_delete:
												{
													consume();
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess172;}
												}
												}
												}
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess172;}
											}
											}
											}
											}
										synPredMatched172 = true;
										break;} // guess172
										if (matchError) {
										   resetMatchError();
										}
										rewind(_m172);
										guessing--;
									}
									if ( synPredMatched172 ) {
										if (statementTrace>=1) 
													printf("external_declaration_4[%d]: Destructor definition\n",
														LT(1).getLine());
												
										{
										switch ( LA(1)) {
										case LITERAL_template:
										case LITERAL_export:
										{
											template_head();
											if (matchError) {break loop3;}
											astFactory.addASTChild(currentAST, returnAST);
											break;
										}
										case LPAREN:
										case LSQUARE:
										case TILDE:
										case SCOPE:
										case IDENT:
										case LITERAL_inline:
										case LITERAL__inline:
										case LITERAL___inline__:
										case LITERAL___inline:
										case LITERAL_virtual:
										case LITERAL_friend:
										case LITERAL___attribute__:
										case LITERAL___attribute:
										case LITERAL_final:
										case LITERAL_override:
										case LITERAL_decltype:
										case LITERAL___decltype:
										case LITERAL___forceinline:
										{
											break;
										}
										default:
										{
											matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_12, tokenNames);if (matchError) {break loop3;}
										}
										}
										}
										dtor_head(true);
										if (matchError) {break loop3;}
										astFactory.addASTChild(currentAST, returnAST);
										{
										switch ( LA(1)) {
										case LCURLY:
										{
											dtor_body();
											if (matchError) {break loop3;}
											astFactory.addASTChild(currentAST, returnAST);
											break;
										}
										case ASSIGNEQUAL:
										{
											AST tmp16_AST = null;
											tmp16_AST = astFactory.create(LT(1));
											astFactory.addASTChild(currentAST, tmp16_AST);
											consume();
											{
											switch ( LA(1)) {
											case LITERAL_default:
											{
												AST tmp17_AST = null;
												tmp17_AST = astFactory.create(LT(1));
												astFactory.addASTChild(currentAST, tmp17_AST);
												consume();
												break;
											}
											case LITERAL_delete:
											{
												AST tmp18_AST = null;
												tmp18_AST = astFactory.create(LT(1));
												astFactory.addASTChild(currentAST, tmp18_AST);
												consume();
												break;
											}
											default:
											{
												matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_14, tokenNames);if (matchError) {break loop3;}
											}
											}
											}
											break;
										}
										default:
										{
											matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_15, tokenNames);if (matchError) {break loop3;}
										}
										}
										}
										external_declaration_AST = (AST)currentAST.root;
										external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_DTOR_DEFINITION,"CSM_DTOR_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
										currentAST.root = external_declaration_AST;
										currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
											external_declaration_AST.getFirstChild() : external_declaration_AST;
										currentAST.advanceChildToEnd();
									}
									else {
										boolean synPredMatched178 = false;
										if ((((_tokenSet_16.member(LA1_2)) && (_tokenSet_17.member(LA2_2)))&&(isCPlusPlus()))) {
											int _m178 = mark();
											guessing++;
											guess178:  while (true) {
												{
												{
												int LA1_3 = LA(1);
												int LA2_3 = LA(2);
												
												if ((true) && (true)) {
													ctor_decl_spec_g();
													if (matchError) {break guess178;}
												}
												else {
												}
												
												}
												if (!(qualifiedItemIsOneOf(qiCtor)))
												{matchError=true;
												if (matchError) {break guess178;}}
												}
											synPredMatched178 = true;
											break;} // guess178
											if (matchError) {
											   resetMatchError();
											}
											rewind(_m178);
											guessing--;
										}
										if ( synPredMatched178 ) {
											if (statementTrace>=1) 
														printf("external_declaration_5[%d]: Constructor definition\n",
															LT(1).getLine());
													
											ctor_definition();
											if (matchError) {break loop3;}
											astFactory.addASTChild(currentAST, returnAST);
											external_declaration_AST = (AST)currentAST.root;
											external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CTOR_DEFINITION,"CSM_CTOR_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
											currentAST.root = external_declaration_AST;
											currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
												external_declaration_AST.getFirstChild() : external_declaration_AST;
											currentAST.advanceChildToEnd();
										}
										else {
											boolean synPredMatched182 = false;
											if ((((_tokenSet_18.member(LA1_2)) && (_tokenSet_19.member(LA2_2)))&&(isCPlusPlus()))) {
												int _m182 = mark();
												guessing++;
												guess182:  while (true) {
													{
													{
													switch ( LA(1)) {
													case LITERAL_template:
													case LITERAL_export:
													{
														template_head_g();
														if (matchError) {break guess182;}
														break;
													}
													case SCOPE:
													case IDENT:
													case LITERAL_OPERATOR:
													case LITERAL_inline:
													case LITERAL__inline:
													case LITERAL___inline__:
													case LITERAL___inline:
													case LITERAL_final:
													case LITERAL_override:
													case LITERAL_constexpr:
													case LITERAL_decltype:
													case LITERAL___decltype:
													case LITERAL___forceinline:
													{
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess182;}
													}
													}
													}
													{
													switch ( LA(1)) {
													case LITERAL_inline:
													case LITERAL__inline:
													case LITERAL___inline__:
													case LITERAL___inline:
													case LITERAL___forceinline:
													{
														literal_inline_g();
														if (matchError) {break guess182;}
														break;
													}
													case LITERAL_constexpr:
													{
														consume();
														break;
													}
													case SCOPE:
													case IDENT:
													case LITERAL_OPERATOR:
													case LITERAL_final:
													case LITERAL_override:
													case LITERAL_decltype:
													case LITERAL___decltype:
													{
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess182;}
													}
													}
													}
													scope_override_g();
													if (matchError) {break guess182;}
													conversion_function_decl_or_def_g();
													if (matchError) {break guess182;}
													}
												synPredMatched182 = true;
												break;} // guess182
												if (matchError) {
												   resetMatchError();
												}
												rewind(_m182);
												guessing--;
											}
											if ( synPredMatched182 ) {
												if (statementTrace>=1) 
															printf("external_declaration_6[%d]: Operator function\n",
																LT(1).getLine());
														
												{
												switch ( LA(1)) {
												case LITERAL_template:
												case LITERAL_export:
												{
													template_head();
													if (matchError) {break loop3;}
													astFactory.addASTChild(currentAST, returnAST);
													break;
												}
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL_inline:
												case LITERAL__inline:
												case LITERAL___inline__:
												case LITERAL___inline:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_constexpr:
												case LITERAL_decltype:
												case LITERAL___decltype:
												case LITERAL___forceinline:
												{
													break;
												}
												default:
												{
													matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_18, tokenNames);if (matchError) {break loop3;}
												}
												}
												}
												{
												switch ( LA(1)) {
												case LITERAL_inline:
												case LITERAL__inline:
												case LITERAL___inline__:
												case LITERAL___inline:
												case LITERAL___forceinline:
												{
													literal_inline();
													if (matchError) {break loop3;}
													astFactory.addASTChild(currentAST, returnAST);
													break;
												}
												case LITERAL_constexpr:
												{
													AST tmp19_AST = null;
													tmp19_AST = astFactory.create(LT(1));
													astFactory.addASTChild(currentAST, tmp19_AST);
													consume();
													break;
												}
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_decltype:
												case LITERAL___decltype:
												{
													break;
												}
												default:
												{
													matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_20, tokenNames);if (matchError) {break loop3;}
												}
												}
												}
												s=scope_override();
												if (matchError) {break loop3;}
												astFactory.addASTChild(currentAST, returnAST);
												definition=conversion_function_decl_or_def();
												if (matchError) {break loop3;}
												astFactory.addASTChild(currentAST, returnAST);
												external_declaration_AST = (AST)currentAST.root;
												if( definition ) external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_USER_TYPE_CAST_DEFINITION,"CSM_USER_TYPE_CAST_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
														    else	   external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_USER_TYPE_CAST_DECLARATION,"CSM_USER_TYPE_CAST_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
												currentAST.root = external_declaration_AST;
												currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
													external_declaration_AST.getFirstChild() : external_declaration_AST;
												currentAST.advanceChildToEnd();
											}
											else {
												boolean synPredMatched190 = false;
												if (((_tokenSet_10.member(LA1_2)) && (_tokenSet_11.member(LA2_2)))) {
													int _m190 = mark();
													guessing++;
													guess190:  while (true) {
														{
														{
														switch ( LA(1)) {
														case LITERAL___extension__:
														{
															consume();
															break;
														}
														case LSQUARE:
														case SCOPE:
														case IDENT:
														case LITERAL_typeof:
														case LITERAL___typeof__:
														case LITERAL___typeof:
														case LITERAL_typedef:
														case LITERAL_enum:
														case LITERAL_extern:
														case LITERAL_inline:
														case LITERAL__inline:
														case LITERAL___inline__:
														case LITERAL___inline:
														case LITERAL_virtual:
														case LITERAL_explicit:
														case LITERAL_friend:
														case LITERAL__stdcall:
														case LITERAL___stdcall:
														case LITERAL_typename:
														case LITERAL_auto:
														case LITERAL_register:
														case LITERAL_static:
														case LITERAL_mutable:
														case LITERAL_const:
														case LITERAL___const__:
														case LITERAL___const:
														case LITERAL_const_cast:
														case LITERAL_volatile:
														case LITERAL___volatile__:
														case LITERAL___volatile:
														case LITERAL_char:
														case LITERAL_wchar_t:
														case LITERAL_bool:
														case LITERAL_short:
														case LITERAL_int:
														case LITERAL_long:
														case LITERAL_signed:
														case LITERAL___signed__:
														case LITERAL___signed:
														case LITERAL_unsigned:
														case LITERAL___unsigned__:
														case LITERAL_float:
														case LITERAL_double:
														case LITERAL_void:
														case LITERAL__declspec:
														case LITERAL___declspec:
														case LITERAL_class:
														case LITERAL_struct:
														case LITERAL_union:
														case LITERAL__int64:
														case LITERAL___int64:
														case LITERAL___w64:
														case LITERAL___attribute__:
														case LITERAL___complex__:
														case LITERAL___global:
														case LITERAL__Bool:
														case LITERAL__Complex:
														case LITERAL___thread:
														case LITERAL___attribute:
														case LITERAL__Imaginary:
														case LITERAL_bit:
														case LITERAL___symbolic:
														case LITERAL___hidden:
														case LITERAL_final:
														case LITERAL_override:
														case LITERAL_constexpr:
														case LITERAL_decltype:
														case LITERAL_thread_local:
														case LITERAL_alignas:
														case LITERAL_char16_t:
														case LITERAL_char32_t:
														case LITERAL___decltype:
														case LITERAL___complex:
														case LITERAL___forceinline:
														case LITERAL___clrcall:
														case LITERAL__Noreturn:
														case LITERAL___builtin_va_list:
														case LITERAL__BUILT_IN_TYPE__:
														case LITERAL__TYPE_QUALIFIER__:
														case LITERAL__STORAGE_CLASS_SPECIFIER__:
														{
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess190;}
														}
														}
														}
														{
														int LA1_4 = LA(1);
														int LA2_4 = LA(2);
														
														if ((_tokenSet_21.member(LA1_4)) && (LA2_4==LPAREN||LA2_4==LSQUARE)) {
															function_attribute_specification_g();
															if (matchError) {break guess190;}
														}
														else if ((_tokenSet_22.member(LA1_4)) && (_tokenSet_23.member(LA2_4))) {
														}
														else {
															matchError=true;if (matchError) {break guess190;}
														}
														
														}
														declaration_specifiers_g(false, false);
														if (matchError) {break guess190;}
														{
														int LA1_5 = LA(1);
														int LA2_5 = LA(2);
														
														if ((_tokenSet_21.member(LA1_5)) && (LA2_5==LPAREN||LA2_5==LSQUARE)) {
															function_attribute_specification_g();
															if (matchError) {break guess190;}
														}
														else if ((_tokenSet_24.member(LA1_5)) && (_tokenSet_25.member(LA2_5))) {
														}
														else {
															matchError=true;if (matchError) {break guess190;}
														}
														
														}
														function_declarator_g(false, false, true);
														if (matchError) {break guess190;}
														{
														switch ( LA(1)) {
														case EOF:
														{
															consume();
															break;
														}
														case SEMICOLON:
														{
															consume();
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess190;}
														}
														}
														}
														}
													synPredMatched190 = true;
													break;} // guess190
													if (matchError) {
													   resetMatchError();
													}
													rewind(_m190);
													guessing--;
												}
												if ( synPredMatched190 ) {
													if (statementTrace>=1) printf("external_declaration_7[%d]: Function prototype\n", LT(1).getLine());
													{
													switch ( LA(1)) {
													case LITERAL___extension__:
													{
														consume();
														break;
													}
													case ELLIPSIS:
													case LPAREN:
													case LSQUARE:
													case STAR:
													case AND:
													case AMPERSAND:
													case TILDE:
													case SCOPE:
													case IDENT:
													case LITERAL_OPERATOR:
													case LITERAL_typeof:
													case LITERAL___typeof__:
													case LITERAL___typeof:
													case LITERAL_typedef:
													case LITERAL_enum:
													case LITERAL_namespace:
													case LITERAL_extern:
													case LITERAL_inline:
													case LITERAL__inline:
													case LITERAL___inline__:
													case LITERAL___inline:
													case LITERAL_virtual:
													case LITERAL_explicit:
													case LITERAL_friend:
													case LITERAL__stdcall:
													case LITERAL___stdcall:
													case LITERAL_typename:
													case LITERAL_auto:
													case LITERAL_register:
													case LITERAL_static:
													case LITERAL_mutable:
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL_char:
													case LITERAL_wchar_t:
													case LITERAL_bool:
													case LITERAL_short:
													case LITERAL_int:
													case LITERAL_long:
													case LITERAL_signed:
													case LITERAL___signed__:
													case LITERAL___signed:
													case LITERAL_unsigned:
													case LITERAL___unsigned__:
													case LITERAL_float:
													case LITERAL_double:
													case LITERAL_void:
													case LITERAL__declspec:
													case LITERAL___declspec:
													case LITERAL_class:
													case LITERAL_struct:
													case LITERAL_union:
													case LITERAL_this:
													case LITERAL_true:
													case LITERAL_false:
													case LITERAL_using:
													case LITERAL__cdecl:
													case LITERAL___cdecl:
													case LITERAL__near:
													case LITERAL___near:
													case LITERAL__far:
													case LITERAL___far:
													case LITERAL___interrupt:
													case LITERAL_pascal:
													case LITERAL__pascal:
													case LITERAL___pascal:
													case LITERAL__int64:
													case LITERAL___int64:
													case LITERAL___w64:
													case LITERAL___attribute__:
													case LITERAL___complex__:
													case LITERAL___global:
													case LITERAL__Bool:
													case LITERAL__Complex:
													case LITERAL___thread:
													case LITERAL___attribute:
													case LITERAL__Imaginary:
													case LITERAL_bit:
													case LITERAL___symbolic:
													case LITERAL___hidden:
													case LITERAL_final:
													case LITERAL_override:
													case LITERAL_constexpr:
													case LITERAL_decltype:
													case LITERAL_thread_local:
													case LITERAL_static_assert:
													case LITERAL_alignas:
													case LITERAL_char16_t:
													case LITERAL_char32_t:
													case LITERAL___decltype:
													case LITERAL___complex:
													case LITERAL___forceinline:
													case LITERAL___clrcall:
													case LITERAL__Noreturn:
													case LITERAL___builtin_va_list:
													case LITERAL__BUILT_IN_TYPE__:
													case LITERAL__TYPE_QUALIFIER__:
													case LITERAL__STORAGE_CLASS_SPECIFIER__:
													{
														break;
													}
													default:
													{
														matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_10, tokenNames);if (matchError) {break loop3;}
													}
													}
													}
													{
													int LA1_6 = LA(1);
													int LA2_6 = LA(2);
													
													if ((_tokenSet_21.member(LA1_6)) && (LA2_6==LPAREN||LA2_6==LSQUARE)) {
														function_attribute_specification();
														if (matchError) {break loop3;}
													}
													else if ((_tokenSet_26.member(LA1_6)) && (_tokenSet_27.member(LA2_6))) {
													}
													else {
														matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_26, tokenNames);if (matchError) {break loop3;}
													}
													
													}
													declaration(declOther);
													if (matchError) {break loop3;}
													astFactory.addASTChild(currentAST, returnAST);
													external_declaration_AST = (AST)currentAST.root;
													external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_DECLARATION,"CSM_FUNCTION_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
													currentAST.root = external_declaration_AST;
													currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
														external_declaration_AST.getFirstChild() : external_declaration_AST;
													currentAST.advanceChildToEnd();
												}
												else {
													boolean synPredMatched198 = false;
													if (((_tokenSet_10.member(LA1_2)) && (_tokenSet_11.member(LA2_2)))) {
														int _m198 = mark();
														guessing++;
														guess198:  while (true) {
															{
															{
															switch ( LA(1)) {
															case LITERAL___extension__:
															{
																consume();
																break;
															}
															case LSQUARE:
															case SCOPE:
															case IDENT:
															case LITERAL_typeof:
															case LITERAL___typeof__:
															case LITERAL___typeof:
															case LITERAL_typedef:
															case LITERAL_enum:
															case LITERAL_extern:
															case LITERAL_inline:
															case LITERAL__inline:
															case LITERAL___inline__:
															case LITERAL___inline:
															case LITERAL_virtual:
															case LITERAL_explicit:
															case LITERAL_friend:
															case LITERAL__stdcall:
															case LITERAL___stdcall:
															case LITERAL_typename:
															case LITERAL_auto:
															case LITERAL_register:
															case LITERAL_static:
															case LITERAL_mutable:
															case LITERAL_const:
															case LITERAL___const__:
															case LITERAL___const:
															case LITERAL_const_cast:
															case LITERAL_volatile:
															case LITERAL___volatile__:
															case LITERAL___volatile:
															case LITERAL_char:
															case LITERAL_wchar_t:
															case LITERAL_bool:
															case LITERAL_short:
															case LITERAL_int:
															case LITERAL_long:
															case LITERAL_signed:
															case LITERAL___signed__:
															case LITERAL___signed:
															case LITERAL_unsigned:
															case LITERAL___unsigned__:
															case LITERAL_float:
															case LITERAL_double:
															case LITERAL_void:
															case LITERAL__declspec:
															case LITERAL___declspec:
															case LITERAL_class:
															case LITERAL_struct:
															case LITERAL_union:
															case LITERAL__int64:
															case LITERAL___int64:
															case LITERAL___w64:
															case LITERAL___attribute__:
															case LITERAL___complex__:
															case LITERAL___global:
															case LITERAL__Bool:
															case LITERAL__Complex:
															case LITERAL___thread:
															case LITERAL___attribute:
															case LITERAL__Imaginary:
															case LITERAL_bit:
															case LITERAL___symbolic:
															case LITERAL___hidden:
															case LITERAL_final:
															case LITERAL_override:
															case LITERAL_constexpr:
															case LITERAL_decltype:
															case LITERAL_thread_local:
															case LITERAL_alignas:
															case LITERAL_char16_t:
															case LITERAL_char32_t:
															case LITERAL___decltype:
															case LITERAL___complex:
															case LITERAL___forceinline:
															case LITERAL___clrcall:
															case LITERAL__Noreturn:
															case LITERAL___builtin_va_list:
															case LITERAL__BUILT_IN_TYPE__:
															case LITERAL__TYPE_QUALIFIER__:
															case LITERAL__STORAGE_CLASS_SPECIFIER__:
															{
																break;
															}
															default:
															{
																matchError=true;if (matchError) {break guess198;}
															}
															}
															}
															{
															int LA1_7 = LA(1);
															int LA2_7 = LA(2);
															
															if ((_tokenSet_21.member(LA1_7)) && (LA2_7==LPAREN||LA2_7==LSQUARE)) {
																function_attribute_specification_g();
																if (matchError) {break guess198;}
															}
															else if ((_tokenSet_22.member(LA1_7)) && (_tokenSet_23.member(LA2_7))) {
															}
															else {
																matchError=true;if (matchError) {break guess198;}
															}
															
															}
															declaration_specifiers_g(false, false);
															if (matchError) {break guess198;}
															{
															int LA1_8 = LA(1);
															int LA2_8 = LA(2);
															
															if ((_tokenSet_21.member(LA1_8)) && (LA2_8==LPAREN||LA2_8==LSQUARE)) {
																function_attribute_specification_g();
																if (matchError) {break guess198;}
															}
															else if ((_tokenSet_24.member(LA1_8)) && (_tokenSet_25.member(LA2_8))) {
															}
															else {
																matchError=true;if (matchError) {break guess198;}
															}
															
															}
															function_declarator_g(false, false, false);
															if (matchError) {break guess198;}
															{
															switch ( LA(1)) {
															case EOF:
															{
																consume();
																break;
															}
															case SEMICOLON:
															{
																consume();
																break;
															}
															default:
															{
																matchError=true;if (matchError) {break guess198;}
															}
															}
															}
															}
														synPredMatched198 = true;
														break;} // guess198
														if (matchError) {
														   resetMatchError();
														}
														rewind(_m198);
														guessing--;
													}
													if ( synPredMatched198 ) {
														if (statementTrace>=1) printf("external_declaration_7[%d]: Function prototype\n", LT(1).getLine());
														{
														switch ( LA(1)) {
														case LITERAL___extension__:
														{
															consume();
															break;
														}
														case ELLIPSIS:
														case LPAREN:
														case LSQUARE:
														case STAR:
														case AND:
														case AMPERSAND:
														case TILDE:
														case SCOPE:
														case IDENT:
														case LITERAL_OPERATOR:
														case LITERAL_typeof:
														case LITERAL___typeof__:
														case LITERAL___typeof:
														case LITERAL_typedef:
														case LITERAL_enum:
														case LITERAL_namespace:
														case LITERAL_extern:
														case LITERAL_inline:
														case LITERAL__inline:
														case LITERAL___inline__:
														case LITERAL___inline:
														case LITERAL_virtual:
														case LITERAL_explicit:
														case LITERAL_friend:
														case LITERAL__stdcall:
														case LITERAL___stdcall:
														case LITERAL_typename:
														case LITERAL_auto:
														case LITERAL_register:
														case LITERAL_static:
														case LITERAL_mutable:
														case LITERAL_const:
														case LITERAL___const__:
														case LITERAL___const:
														case LITERAL_const_cast:
														case LITERAL_volatile:
														case LITERAL___volatile__:
														case LITERAL___volatile:
														case LITERAL_char:
														case LITERAL_wchar_t:
														case LITERAL_bool:
														case LITERAL_short:
														case LITERAL_int:
														case LITERAL_long:
														case LITERAL_signed:
														case LITERAL___signed__:
														case LITERAL___signed:
														case LITERAL_unsigned:
														case LITERAL___unsigned__:
														case LITERAL_float:
														case LITERAL_double:
														case LITERAL_void:
														case LITERAL__declspec:
														case LITERAL___declspec:
														case LITERAL_class:
														case LITERAL_struct:
														case LITERAL_union:
														case LITERAL_this:
														case LITERAL_true:
														case LITERAL_false:
														case LITERAL_using:
														case LITERAL__cdecl:
														case LITERAL___cdecl:
														case LITERAL__near:
														case LITERAL___near:
														case LITERAL__far:
														case LITERAL___far:
														case LITERAL___interrupt:
														case LITERAL_pascal:
														case LITERAL__pascal:
														case LITERAL___pascal:
														case LITERAL__int64:
														case LITERAL___int64:
														case LITERAL___w64:
														case LITERAL___attribute__:
														case LITERAL___complex__:
														case LITERAL___global:
														case LITERAL__Bool:
														case LITERAL__Complex:
														case LITERAL___thread:
														case LITERAL___attribute:
														case LITERAL__Imaginary:
														case LITERAL_bit:
														case LITERAL___symbolic:
														case LITERAL___hidden:
														case LITERAL_final:
														case LITERAL_override:
														case LITERAL_constexpr:
														case LITERAL_decltype:
														case LITERAL_thread_local:
														case LITERAL_static_assert:
														case LITERAL_alignas:
														case LITERAL_char16_t:
														case LITERAL_char32_t:
														case LITERAL___decltype:
														case LITERAL___complex:
														case LITERAL___forceinline:
														case LITERAL___clrcall:
														case LITERAL__Noreturn:
														case LITERAL___builtin_va_list:
														case LITERAL__BUILT_IN_TYPE__:
														case LITERAL__TYPE_QUALIFIER__:
														case LITERAL__STORAGE_CLASS_SPECIFIER__:
														{
															break;
														}
														default:
														{
															matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_10, tokenNames);if (matchError) {break loop3;}
														}
														}
														}
														{
														int LA1_9 = LA(1);
														int LA2_9 = LA(2);
														
														if ((_tokenSet_21.member(LA1_9)) && (LA2_9==LPAREN||LA2_9==LSQUARE)) {
															function_attribute_specification();
															if (matchError) {break loop3;}
														}
														else if ((_tokenSet_26.member(LA1_9)) && (_tokenSet_27.member(LA2_9))) {
														}
														else {
															matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_26, tokenNames);if (matchError) {break loop3;}
														}
														
														}
														declaration(declOther);
														if (matchError) {break loop3;}
														astFactory.addASTChild(currentAST, returnAST);
														external_declaration_AST = (AST)currentAST.root;
														external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_LIKE_VARIABLE_DECLARATION,"CSM_FUNCTION_LIKE_VARIABLE_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
														currentAST.root = external_declaration_AST;
														currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
															external_declaration_AST.getFirstChild() : external_declaration_AST;
														currentAST.advanceChildToEnd();
													}
													else {
														boolean synPredMatched206 = false;
														if (((_tokenSet_10.member(LA1_2)) && (_tokenSet_11.member(LA2_2)))) {
															int _m206 = mark();
															guessing++;
															guess206:  while (true) {
																{
																{
																switch ( LA(1)) {
																case LITERAL___extension__:
																{
																	consume();
																	break;
																}
																case LSQUARE:
																case SCOPE:
																case IDENT:
																case LITERAL_typeof:
																case LITERAL___typeof__:
																case LITERAL___typeof:
																case LITERAL_typedef:
																case LITERAL_enum:
																case LITERAL_extern:
																case LITERAL_inline:
																case LITERAL__inline:
																case LITERAL___inline__:
																case LITERAL___inline:
																case LITERAL_virtual:
																case LITERAL_explicit:
																case LITERAL_friend:
																case LITERAL__stdcall:
																case LITERAL___stdcall:
																case LITERAL_typename:
																case LITERAL_auto:
																case LITERAL_register:
																case LITERAL_static:
																case LITERAL_mutable:
																case LITERAL_const:
																case LITERAL___const__:
																case LITERAL___const:
																case LITERAL_const_cast:
																case LITERAL_volatile:
																case LITERAL___volatile__:
																case LITERAL___volatile:
																case LITERAL_char:
																case LITERAL_wchar_t:
																case LITERAL_bool:
																case LITERAL_short:
																case LITERAL_int:
																case LITERAL_long:
																case LITERAL_signed:
																case LITERAL___signed__:
																case LITERAL___signed:
																case LITERAL_unsigned:
																case LITERAL___unsigned__:
																case LITERAL_float:
																case LITERAL_double:
																case LITERAL_void:
																case LITERAL__declspec:
																case LITERAL___declspec:
																case LITERAL_class:
																case LITERAL_struct:
																case LITERAL_union:
																case LITERAL__int64:
																case LITERAL___int64:
																case LITERAL___w64:
																case LITERAL___attribute__:
																case LITERAL___complex__:
																case LITERAL___global:
																case LITERAL__Bool:
																case LITERAL__Complex:
																case LITERAL___thread:
																case LITERAL___attribute:
																case LITERAL__Imaginary:
																case LITERAL_bit:
																case LITERAL___symbolic:
																case LITERAL___hidden:
																case LITERAL_final:
																case LITERAL_override:
																case LITERAL_constexpr:
																case LITERAL_decltype:
																case LITERAL_thread_local:
																case LITERAL_alignas:
																case LITERAL_char16_t:
																case LITERAL_char32_t:
																case LITERAL___decltype:
																case LITERAL___complex:
																case LITERAL___forceinline:
																case LITERAL___clrcall:
																case LITERAL__Noreturn:
																case LITERAL___builtin_va_list:
																case LITERAL__BUILT_IN_TYPE__:
																case LITERAL__TYPE_QUALIFIER__:
																case LITERAL__STORAGE_CLASS_SPECIFIER__:
																{
																	break;
																}
																default:
																{
																	matchError=true;if (matchError) {break guess206;}
																}
																}
																}
																{
																int LA1_10 = LA(1);
																int LA2_10 = LA(2);
																
																if ((_tokenSet_21.member(LA1_10)) && (LA2_10==LPAREN||LA2_10==LSQUARE)) {
																	function_attribute_specification_g();
																	if (matchError) {break guess206;}
																}
																else if ((_tokenSet_22.member(LA1_10)) && (_tokenSet_23.member(LA2_10))) {
																}
																else {
																	matchError=true;if (matchError) {break guess206;}
																}
																
																}
																declaration_specifiers_g(false, true);
																if (matchError) {break guess206;}
																{
																int LA1_11 = LA(1);
																int LA2_11 = LA(2);
																
																if ((_tokenSet_21.member(LA1_11)) && (LA2_11==LPAREN||LA2_11==LSQUARE)) {
																	function_attribute_specification_g();
																	if (matchError) {break guess206;}
																}
																else if ((_tokenSet_24.member(LA1_11)) && (_tokenSet_25.member(LA2_11))) {
																}
																else {
																	matchError=true;if (matchError) {break guess206;}
																}
																
																}
																function_declarator_g(false, true, false);
																if (matchError) {break guess206;}
																{
																switch ( LA(1)) {
																case EOF:
																{
																	consume();
																	break;
																}
																case SEMICOLON:
																{
																	consume();
																	break;
																}
																default:
																{
																	matchError=true;if (matchError) {break guess206;}
																}
																}
																}
																}
															synPredMatched206 = true;
															break;} // guess206
															if (matchError) {
															   resetMatchError();
															}
															rewind(_m206);
															guessing--;
														}
														if ( synPredMatched206 ) {
															if (statementTrace>=1) printf("external_declaration_7[%d]: Function prototype\n", LT(1).getLine());
															{
															switch ( LA(1)) {
															case LITERAL___extension__:
															{
																consume();
																break;
															}
															case ELLIPSIS:
															case LPAREN:
															case LSQUARE:
															case STAR:
															case AND:
															case AMPERSAND:
															case TILDE:
															case SCOPE:
															case IDENT:
															case LITERAL_OPERATOR:
															case LITERAL_typeof:
															case LITERAL___typeof__:
															case LITERAL___typeof:
															case LITERAL_typedef:
															case LITERAL_enum:
															case LITERAL_namespace:
															case LITERAL_extern:
															case LITERAL_inline:
															case LITERAL__inline:
															case LITERAL___inline__:
															case LITERAL___inline:
															case LITERAL_virtual:
															case LITERAL_explicit:
															case LITERAL_friend:
															case LITERAL__stdcall:
															case LITERAL___stdcall:
															case LITERAL_typename:
															case LITERAL_auto:
															case LITERAL_register:
															case LITERAL_static:
															case LITERAL_mutable:
															case LITERAL_const:
															case LITERAL___const__:
															case LITERAL___const:
															case LITERAL_const_cast:
															case LITERAL_volatile:
															case LITERAL___volatile__:
															case LITERAL___volatile:
															case LITERAL_char:
															case LITERAL_wchar_t:
															case LITERAL_bool:
															case LITERAL_short:
															case LITERAL_int:
															case LITERAL_long:
															case LITERAL_signed:
															case LITERAL___signed__:
															case LITERAL___signed:
															case LITERAL_unsigned:
															case LITERAL___unsigned__:
															case LITERAL_float:
															case LITERAL_double:
															case LITERAL_void:
															case LITERAL__declspec:
															case LITERAL___declspec:
															case LITERAL_class:
															case LITERAL_struct:
															case LITERAL_union:
															case LITERAL_this:
															case LITERAL_true:
															case LITERAL_false:
															case LITERAL_using:
															case LITERAL__cdecl:
															case LITERAL___cdecl:
															case LITERAL__near:
															case LITERAL___near:
															case LITERAL__far:
															case LITERAL___far:
															case LITERAL___interrupt:
															case LITERAL_pascal:
															case LITERAL__pascal:
															case LITERAL___pascal:
															case LITERAL__int64:
															case LITERAL___int64:
															case LITERAL___w64:
															case LITERAL___attribute__:
															case LITERAL___complex__:
															case LITERAL___global:
															case LITERAL__Bool:
															case LITERAL__Complex:
															case LITERAL___thread:
															case LITERAL___attribute:
															case LITERAL__Imaginary:
															case LITERAL_bit:
															case LITERAL___symbolic:
															case LITERAL___hidden:
															case LITERAL_final:
															case LITERAL_override:
															case LITERAL_constexpr:
															case LITERAL_decltype:
															case LITERAL_thread_local:
															case LITERAL_static_assert:
															case LITERAL_alignas:
															case LITERAL_char16_t:
															case LITERAL_char32_t:
															case LITERAL___decltype:
															case LITERAL___complex:
															case LITERAL___forceinline:
															case LITERAL___clrcall:
															case LITERAL__Noreturn:
															case LITERAL___builtin_va_list:
															case LITERAL__BUILT_IN_TYPE__:
															case LITERAL__TYPE_QUALIFIER__:
															case LITERAL__STORAGE_CLASS_SPECIFIER__:
															{
																break;
															}
															default:
															{
																matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_10, tokenNames);if (matchError) {break loop3;}
															}
															}
															}
															{
															int LA1_12 = LA(1);
															int LA2_12 = LA(2);
															
															if ((_tokenSet_21.member(LA1_12)) && (LA2_12==LPAREN||LA2_12==LSQUARE)) {
																function_attribute_specification();
																if (matchError) {break loop3;}
															}
															else if ((_tokenSet_26.member(LA1_12)) && (_tokenSet_27.member(LA2_12))) {
															}
															else {
																matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_26, tokenNames);if (matchError) {break loop3;}
															}
															
															}
															declaration(declOther);
															if (matchError) {break loop3;}
															astFactory.addASTChild(currentAST, returnAST);
															external_declaration_AST = (AST)currentAST.root;
															external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_LIKE_VARIABLE_DECLARATION,"CSM_FUNCTION_LIKE_VARIABLE_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
															currentAST.root = external_declaration_AST;
															currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
																external_declaration_AST.getFirstChild() : external_declaration_AST;
															currentAST.advanceChildToEnd();
														}
														else {
															boolean synPredMatched214 = false;
															if (((_tokenSet_10.member(LA1_2)) && (_tokenSet_11.member(LA2_2)))) {
																int _m214 = mark();
																guessing++;
																guess214:  while (true) {
																	{
																	{
																	switch ( LA(1)) {
																	case LITERAL___extension__:
																	{
																		consume();
																		break;
																	}
																	case LSQUARE:
																	case LITERAL_extern:
																	case LITERAL___attribute__:
																	case LITERAL___attribute:
																	{
																		break;
																	}
																	default:
																	{
																		matchError=true;if (matchError) {break guess214;}
																	}
																	}
																	}
																	{
																	switch ( LA(1)) {
																	case LSQUARE:
																	case LITERAL___attribute__:
																	case LITERAL___attribute:
																	{
																		function_attribute_specification_g();
																		if (matchError) {break guess214;}
																		break;
																	}
																	case LITERAL_extern:
																	{
																		break;
																	}
																	default:
																	{
																		matchError=true;if (matchError) {break guess214;}
																	}
																	}
																	}
																	match(LITERAL_extern);
																	if (matchError) {break guess214;}
																	{
																	int LA1_13 = LA(1);
																	int LA2_13 = LA(2);
																	
																	if ((_tokenSet_21.member(LA1_13)) && (LA2_13==LPAREN||LA2_13==LSQUARE)) {
																		function_attribute_specification_g();
																		if (matchError) {break guess214;}
																	}
																	else if ((_tokenSet_24.member(LA1_13)) && (_tokenSet_25.member(LA2_13))) {
																	}
																	else {
																		matchError=true;if (matchError) {break guess214;}
																	}
																	
																	}
																	function_declarator_g(false, false, false);
																	if (matchError) {break guess214;}
																	{
																	switch ( LA(1)) {
																	case EOF:
																	{
																		consume();
																		break;
																	}
																	case SEMICOLON:
																	{
																		consume();
																		break;
																	}
																	default:
																	{
																		matchError=true;if (matchError) {break guess214;}
																	}
																	}
																	}
																	}
																synPredMatched214 = true;
																break;} // guess214
																if (matchError) {
																   resetMatchError();
																}
																rewind(_m214);
																guessing--;
															}
															if ( synPredMatched214 ) {
																if (statementTrace>=1) printf("external_declaration_7[%d]: Function prototype\n", LT(1).getLine());
																{
																switch ( LA(1)) {
																case LITERAL___extension__:
																{
																	consume();
																	break;
																}
																case ELLIPSIS:
																case LPAREN:
																case LSQUARE:
																case STAR:
																case AND:
																case AMPERSAND:
																case TILDE:
																case SCOPE:
																case IDENT:
																case LITERAL_OPERATOR:
																case LITERAL_typeof:
																case LITERAL___typeof__:
																case LITERAL___typeof:
																case LITERAL_typedef:
																case LITERAL_enum:
																case LITERAL_namespace:
																case LITERAL_extern:
																case LITERAL_inline:
																case LITERAL__inline:
																case LITERAL___inline__:
																case LITERAL___inline:
																case LITERAL_virtual:
																case LITERAL_explicit:
																case LITERAL_friend:
																case LITERAL__stdcall:
																case LITERAL___stdcall:
																case LITERAL_typename:
																case LITERAL_auto:
																case LITERAL_register:
																case LITERAL_static:
																case LITERAL_mutable:
																case LITERAL_const:
																case LITERAL___const__:
																case LITERAL___const:
																case LITERAL_const_cast:
																case LITERAL_volatile:
																case LITERAL___volatile__:
																case LITERAL___volatile:
																case LITERAL_char:
																case LITERAL_wchar_t:
																case LITERAL_bool:
																case LITERAL_short:
																case LITERAL_int:
																case LITERAL_long:
																case LITERAL_signed:
																case LITERAL___signed__:
																case LITERAL___signed:
																case LITERAL_unsigned:
																case LITERAL___unsigned__:
																case LITERAL_float:
																case LITERAL_double:
																case LITERAL_void:
																case LITERAL__declspec:
																case LITERAL___declspec:
																case LITERAL_class:
																case LITERAL_struct:
																case LITERAL_union:
																case LITERAL_this:
																case LITERAL_true:
																case LITERAL_false:
																case LITERAL_using:
																case LITERAL__cdecl:
																case LITERAL___cdecl:
																case LITERAL__near:
																case LITERAL___near:
																case LITERAL__far:
																case LITERAL___far:
																case LITERAL___interrupt:
																case LITERAL_pascal:
																case LITERAL__pascal:
																case LITERAL___pascal:
																case LITERAL__int64:
																case LITERAL___int64:
																case LITERAL___w64:
																case LITERAL___attribute__:
																case LITERAL___complex__:
																case LITERAL___global:
																case LITERAL__Bool:
																case LITERAL__Complex:
																case LITERAL___thread:
																case LITERAL___attribute:
																case LITERAL__Imaginary:
																case LITERAL_bit:
																case LITERAL___symbolic:
																case LITERAL___hidden:
																case LITERAL_final:
																case LITERAL_override:
																case LITERAL_constexpr:
																case LITERAL_decltype:
																case LITERAL_thread_local:
																case LITERAL_static_assert:
																case LITERAL_alignas:
																case LITERAL_char16_t:
																case LITERAL_char32_t:
																case LITERAL___decltype:
																case LITERAL___complex:
																case LITERAL___forceinline:
																case LITERAL___clrcall:
																case LITERAL__Noreturn:
																case LITERAL___builtin_va_list:
																case LITERAL__BUILT_IN_TYPE__:
																case LITERAL__TYPE_QUALIFIER__:
																case LITERAL__STORAGE_CLASS_SPECIFIER__:
																{
																	break;
																}
																default:
																{
																	matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_10, tokenNames);if (matchError) {break loop3;}
																}
																}
																}
																{
																int LA1_14 = LA(1);
																int LA2_14 = LA(2);
																
																if ((_tokenSet_21.member(LA1_14)) && (LA2_14==LPAREN||LA2_14==LSQUARE)) {
																	function_attribute_specification();
																	if (matchError) {break loop3;}
																}
																else if ((_tokenSet_26.member(LA1_14)) && (_tokenSet_27.member(LA2_14))) {
																}
																else {
																	matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_26, tokenNames);if (matchError) {break loop3;}
																}
																
																}
																declaration(declExternFunction);
																if (matchError) {break loop3;}
																astFactory.addASTChild(currentAST, returnAST);
																external_declaration_AST = (AST)currentAST.root;
																external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_LIKE_VARIABLE_DECLARATION,"CSM_FUNCTION_LIKE_VARIABLE_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
																currentAST.root = external_declaration_AST;
																currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
																	external_declaration_AST.getFirstChild() : external_declaration_AST;
																currentAST.advanceChildToEnd();
															}
															else {
																boolean synPredMatched220 = false;
																if (((_tokenSet_10.member(LA1_2)) && (_tokenSet_11.member(LA2_2)))) {
																	int _m220 = mark();
																	guessing++;
																	guess220:  while (true) {
																		{
																		literal_ident_g();
																		if (matchError) {break guess220;}
																		match(LPAREN);
																		if (matchError) {break guess220;}
																		{
																		switch ( LA(1)) {
																		case LSQUARE:
																		case SCOPE:
																		case IDENT:
																		case LITERAL_typeof:
																		case LITERAL___typeof__:
																		case LITERAL___typeof:
																		case LITERAL_typedef:
																		case LITERAL_enum:
																		case LITERAL_extern:
																		case LITERAL_inline:
																		case LITERAL__inline:
																		case LITERAL___inline__:
																		case LITERAL___inline:
																		case LITERAL_virtual:
																		case LITERAL_explicit:
																		case LITERAL_friend:
																		case LITERAL__stdcall:
																		case LITERAL___stdcall:
																		case LITERAL_typename:
																		case LITERAL_auto:
																		case LITERAL_register:
																		case LITERAL_static:
																		case LITERAL_mutable:
																		case LITERAL_const:
																		case LITERAL___const__:
																		case LITERAL___const:
																		case LITERAL_const_cast:
																		case LITERAL_volatile:
																		case LITERAL___volatile__:
																		case LITERAL___volatile:
																		case LITERAL_char:
																		case LITERAL_wchar_t:
																		case LITERAL_bool:
																		case LITERAL_short:
																		case LITERAL_int:
																		case LITERAL_long:
																		case LITERAL_signed:
																		case LITERAL___signed__:
																		case LITERAL___signed:
																		case LITERAL_unsigned:
																		case LITERAL___unsigned__:
																		case LITERAL_float:
																		case LITERAL_double:
																		case LITERAL_void:
																		case LITERAL__declspec:
																		case LITERAL___declspec:
																		case LITERAL_class:
																		case LITERAL_struct:
																		case LITERAL_union:
																		case LITERAL__int64:
																		case LITERAL___int64:
																		case LITERAL___w64:
																		case LITERAL___attribute__:
																		case LITERAL___complex__:
																		case LITERAL___global:
																		case LITERAL__Bool:
																		case LITERAL__Complex:
																		case LITERAL___thread:
																		case LITERAL___attribute:
																		case LITERAL__Imaginary:
																		case LITERAL_bit:
																		case LITERAL___symbolic:
																		case LITERAL___hidden:
																		case LITERAL_final:
																		case LITERAL_override:
																		case LITERAL_constexpr:
																		case LITERAL_decltype:
																		case LITERAL_thread_local:
																		case LITERAL_alignas:
																		case LITERAL_char16_t:
																		case LITERAL_char32_t:
																		case LITERAL___decltype:
																		case LITERAL___complex:
																		case LITERAL___forceinline:
																		case LITERAL___clrcall:
																		case LITERAL__Noreturn:
																		case LITERAL___builtin_va_list:
																		case LITERAL__BUILT_IN_TYPE__:
																		case LITERAL__TYPE_QUALIFIER__:
																		case LITERAL__STORAGE_CLASS_SPECIFIER__:
																		{
																			simple_parameter_list_g();
																			if (matchError) {break guess220;}
																			break;
																		}
																		case RPAREN:
																		{
																			break;
																		}
																		default:
																		{
																			matchError=true;if (matchError) {break guess220;}
																		}
																		}
																		}
																		match(RPAREN);
																		if (matchError) {break guess220;}
																		{
																		switch ( LA(1)) {
																		case EOF:
																		{
																			consume();
																			break;
																		}
																		case SEMICOLON:
																		{
																			consume();
																			break;
																		}
																		default:
																		{
																			matchError=true;if (matchError) {break guess220;}
																		}
																		}
																		}
																		}
																	synPredMatched220 = true;
																	break;} // guess220
																	if (matchError) {
																	   resetMatchError();
																	}
																	rewind(_m220);
																	guessing--;
																}
																if ( synPredMatched220 ) {
																	if (statementTrace>=1) printf("external_declaration_7[%d]: Function prototype\n", LT(1).getLine());
																	{
																	switch ( LA(1)) {
																	case LITERAL___extension__:
																	{
																		consume();
																		break;
																	}
																	case ELLIPSIS:
																	case LPAREN:
																	case LSQUARE:
																	case STAR:
																	case AND:
																	case AMPERSAND:
																	case TILDE:
																	case SCOPE:
																	case IDENT:
																	case LITERAL_OPERATOR:
																	case LITERAL_typeof:
																	case LITERAL___typeof__:
																	case LITERAL___typeof:
																	case LITERAL_typedef:
																	case LITERAL_enum:
																	case LITERAL_namespace:
																	case LITERAL_extern:
																	case LITERAL_inline:
																	case LITERAL__inline:
																	case LITERAL___inline__:
																	case LITERAL___inline:
																	case LITERAL_virtual:
																	case LITERAL_explicit:
																	case LITERAL_friend:
																	case LITERAL__stdcall:
																	case LITERAL___stdcall:
																	case LITERAL_typename:
																	case LITERAL_auto:
																	case LITERAL_register:
																	case LITERAL_static:
																	case LITERAL_mutable:
																	case LITERAL_const:
																	case LITERAL___const__:
																	case LITERAL___const:
																	case LITERAL_const_cast:
																	case LITERAL_volatile:
																	case LITERAL___volatile__:
																	case LITERAL___volatile:
																	case LITERAL_char:
																	case LITERAL_wchar_t:
																	case LITERAL_bool:
																	case LITERAL_short:
																	case LITERAL_int:
																	case LITERAL_long:
																	case LITERAL_signed:
																	case LITERAL___signed__:
																	case LITERAL___signed:
																	case LITERAL_unsigned:
																	case LITERAL___unsigned__:
																	case LITERAL_float:
																	case LITERAL_double:
																	case LITERAL_void:
																	case LITERAL__declspec:
																	case LITERAL___declspec:
																	case LITERAL_class:
																	case LITERAL_struct:
																	case LITERAL_union:
																	case LITERAL_this:
																	case LITERAL_true:
																	case LITERAL_false:
																	case LITERAL_using:
																	case LITERAL__cdecl:
																	case LITERAL___cdecl:
																	case LITERAL__near:
																	case LITERAL___near:
																	case LITERAL__far:
																	case LITERAL___far:
																	case LITERAL___interrupt:
																	case LITERAL_pascal:
																	case LITERAL__pascal:
																	case LITERAL___pascal:
																	case LITERAL__int64:
																	case LITERAL___int64:
																	case LITERAL___w64:
																	case LITERAL___attribute__:
																	case LITERAL___complex__:
																	case LITERAL___global:
																	case LITERAL__Bool:
																	case LITERAL__Complex:
																	case LITERAL___thread:
																	case LITERAL___attribute:
																	case LITERAL__Imaginary:
																	case LITERAL_bit:
																	case LITERAL___symbolic:
																	case LITERAL___hidden:
																	case LITERAL_final:
																	case LITERAL_override:
																	case LITERAL_constexpr:
																	case LITERAL_decltype:
																	case LITERAL_thread_local:
																	case LITERAL_static_assert:
																	case LITERAL_alignas:
																	case LITERAL_char16_t:
																	case LITERAL_char32_t:
																	case LITERAL___decltype:
																	case LITERAL___complex:
																	case LITERAL___forceinline:
																	case LITERAL___clrcall:
																	case LITERAL__Noreturn:
																	case LITERAL___builtin_va_list:
																	case LITERAL__BUILT_IN_TYPE__:
																	case LITERAL__TYPE_QUALIFIER__:
																	case LITERAL__STORAGE_CLASS_SPECIFIER__:
																	{
																		break;
																	}
																	default:
																	{
																		matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_10, tokenNames);if (matchError) {break loop3;}
																	}
																	}
																	}
																	{
																	int LA1_15 = LA(1);
																	int LA2_15 = LA(2);
																	
																	if ((_tokenSet_21.member(LA1_15)) && (LA2_15==LPAREN||LA2_15==LSQUARE)) {
																		function_attribute_specification();
																		if (matchError) {break loop3;}
																	}
																	else if ((_tokenSet_26.member(LA1_15)) && (_tokenSet_27.member(LA2_15))) {
																	}
																	else {
																		matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_26, tokenNames);if (matchError) {break loop3;}
																	}
																	
																	}
																	declaration(declSimpleFunction);
																	if (matchError) {break loop3;}
																	astFactory.addASTChild(currentAST, returnAST);
																	external_declaration_AST = (AST)currentAST.root;
																	external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_LIKE_VARIABLE_DECLARATION,"CSM_FUNCTION_LIKE_VARIABLE_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
																	currentAST.root = external_declaration_AST;
																	currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
																		external_declaration_AST.getFirstChild() : external_declaration_AST;
																	currentAST.advanceChildToEnd();
																}
																else {
																	boolean synPredMatched229 = false;
																	if (((_tokenSet_28.member(LA1_2)) && (_tokenSet_23.member(LA2_2)))) {
																		int _m229 = mark();
																		guessing++;
																		guess229:  while (true) {
																			{
																			{
																			switch ( LA(1)) {
																			case LITERAL___extension__:
																			{
																				consume();
																				break;
																			}
																			case LSQUARE:
																			case SCOPE:
																			case IDENT:
																			case LITERAL_typeof:
																			case LITERAL___typeof__:
																			case LITERAL___typeof:
																			case LITERAL_typedef:
																			case LITERAL_enum:
																			case LITERAL_extern:
																			case LITERAL_inline:
																			case LITERAL__inline:
																			case LITERAL___inline__:
																			case LITERAL___inline:
																			case LITERAL_virtual:
																			case LITERAL_explicit:
																			case LITERAL_friend:
																			case LITERAL__stdcall:
																			case LITERAL___stdcall:
																			case LITERAL_typename:
																			case LITERAL_auto:
																			case LITERAL_register:
																			case LITERAL_static:
																			case LITERAL_mutable:
																			case LITERAL_const:
																			case LITERAL___const__:
																			case LITERAL___const:
																			case LITERAL_const_cast:
																			case LITERAL_volatile:
																			case LITERAL___volatile__:
																			case LITERAL___volatile:
																			case LITERAL_char:
																			case LITERAL_wchar_t:
																			case LITERAL_bool:
																			case LITERAL_short:
																			case LITERAL_int:
																			case LITERAL_long:
																			case LITERAL_signed:
																			case LITERAL___signed__:
																			case LITERAL___signed:
																			case LITERAL_unsigned:
																			case LITERAL___unsigned__:
																			case LITERAL_float:
																			case LITERAL_double:
																			case LITERAL_void:
																			case LITERAL__declspec:
																			case LITERAL___declspec:
																			case LITERAL_class:
																			case LITERAL_struct:
																			case LITERAL_union:
																			case LITERAL__int64:
																			case LITERAL___int64:
																			case LITERAL___w64:
																			case LITERAL___attribute__:
																			case LITERAL___complex__:
																			case LITERAL___global:
																			case LITERAL__Bool:
																			case LITERAL__Complex:
																			case LITERAL___thread:
																			case LITERAL___attribute:
																			case LITERAL__Imaginary:
																			case LITERAL_bit:
																			case LITERAL___symbolic:
																			case LITERAL___hidden:
																			case LITERAL_final:
																			case LITERAL_override:
																			case LITERAL_constexpr:
																			case LITERAL_decltype:
																			case LITERAL_thread_local:
																			case LITERAL_alignas:
																			case LITERAL_char16_t:
																			case LITERAL_char32_t:
																			case LITERAL___decltype:
																			case LITERAL___complex:
																			case LITERAL___forceinline:
																			case LITERAL___clrcall:
																			case LITERAL__Noreturn:
																			case LITERAL___builtin_va_list:
																			case LITERAL__BUILT_IN_TYPE__:
																			case LITERAL__TYPE_QUALIFIER__:
																			case LITERAL__STORAGE_CLASS_SPECIFIER__:
																			{
																				break;
																			}
																			default:
																			{
																				matchError=true;if (matchError) {break guess229;}
																			}
																			}
																			}
																			{
																			int LA1_16 = LA(1);
																			int LA2_16 = LA(2);
																			
																			if ((_tokenSet_21.member(LA1_16)) && (LA2_16==LPAREN||LA2_16==LSQUARE)) {
																				function_attribute_specification_g();
																				if (matchError) {break guess229;}
																			}
																			else if ((_tokenSet_22.member(LA1_16)) && (_tokenSet_23.member(LA2_16))) {
																			}
																			else {
																				matchError=true;if (matchError) {break guess229;}
																			}
																			
																			}
																			declaration_specifiers_g(false, false);
																			if (matchError) {break guess229;}
																			{
																			int LA1_17 = LA(1);
																			int LA2_17 = LA(2);
																			
																			if ((_tokenSet_21.member(LA1_17)) && (LA2_17==LPAREN||LA2_17==LSQUARE)) {
																				function_attribute_specification_g();
																				if (matchError) {break guess229;}
																			}
																			else if ((_tokenSet_24.member(LA1_17)) && (_tokenSet_25.member(LA2_17))) {
																			}
																			else {
																				matchError=true;if (matchError) {break guess229;}
																			}
																			
																			}
																			function_declarator_g(true, false, false);
																			if (matchError) {break guess229;}
																			{
																			switch ( LA(1)) {
																			case LCURLY:
																			{
																				consume();
																				break;
																			}
																			case LITERAL_try:
																			case LITERAL___try:
																			{
																				literal_try_g();
																				if (matchError) {break guess229;}
																				break;
																			}
																			case ASSIGNEQUAL:
																			{
																				consume();
																				{
																				switch ( LA(1)) {
																				case LITERAL_default:
																				{
																					consume();
																					break;
																				}
																				case LITERAL_delete:
																				{
																					consume();
																					break;
																				}
																				default:
																				{
																					matchError=true;if (matchError) {break guess229;}
																				}
																				}
																				}
																				break;
																			}
																			default:
																			{
																				matchError=true;if (matchError) {break guess229;}
																			}
																			}
																			}
																			}
																		synPredMatched229 = true;
																		break;} // guess229
																		if (matchError) {
																		   resetMatchError();
																		}
																		rewind(_m229);
																		guessing--;
																	}
																	if ( synPredMatched229 ) {
																		if (statementTrace>=1) printf("external_declaration_8[%d]: Function definition\n", LT(1).getLine());
																		{
																		switch ( LA(1)) {
																		case LITERAL___extension__:
																		{
																			consume();
																			break;
																		}
																		case LSQUARE:
																		case SCOPE:
																		case IDENT:
																		case LITERAL_typeof:
																		case LITERAL___typeof__:
																		case LITERAL___typeof:
																		case LITERAL_typedef:
																		case LITERAL_enum:
																		case LITERAL_extern:
																		case LITERAL_inline:
																		case LITERAL__inline:
																		case LITERAL___inline__:
																		case LITERAL___inline:
																		case LITERAL_virtual:
																		case LITERAL_explicit:
																		case LITERAL_friend:
																		case LITERAL__stdcall:
																		case LITERAL___stdcall:
																		case LITERAL_typename:
																		case LITERAL_auto:
																		case LITERAL_register:
																		case LITERAL_static:
																		case LITERAL_mutable:
																		case LITERAL_const:
																		case LITERAL___const__:
																		case LITERAL___const:
																		case LITERAL_const_cast:
																		case LITERAL_volatile:
																		case LITERAL___volatile__:
																		case LITERAL___volatile:
																		case LITERAL_char:
																		case LITERAL_wchar_t:
																		case LITERAL_bool:
																		case LITERAL_short:
																		case LITERAL_int:
																		case LITERAL_long:
																		case LITERAL_signed:
																		case LITERAL___signed__:
																		case LITERAL___signed:
																		case LITERAL_unsigned:
																		case LITERAL___unsigned__:
																		case LITERAL_float:
																		case LITERAL_double:
																		case LITERAL_void:
																		case LITERAL__declspec:
																		case LITERAL___declspec:
																		case LITERAL_class:
																		case LITERAL_struct:
																		case LITERAL_union:
																		case LITERAL__int64:
																		case LITERAL___int64:
																		case LITERAL___w64:
																		case LITERAL___attribute__:
																		case LITERAL___complex__:
																		case LITERAL___global:
																		case LITERAL__Bool:
																		case LITERAL__Complex:
																		case LITERAL___thread:
																		case LITERAL___attribute:
																		case LITERAL__Imaginary:
																		case LITERAL_bit:
																		case LITERAL___symbolic:
																		case LITERAL___hidden:
																		case LITERAL_final:
																		case LITERAL_override:
																		case LITERAL_constexpr:
																		case LITERAL_decltype:
																		case LITERAL_thread_local:
																		case LITERAL_alignas:
																		case LITERAL_char16_t:
																		case LITERAL_char32_t:
																		case LITERAL___decltype:
																		case LITERAL___complex:
																		case LITERAL___forceinline:
																		case LITERAL___clrcall:
																		case LITERAL__Noreturn:
																		case LITERAL___builtin_va_list:
																		case LITERAL__BUILT_IN_TYPE__:
																		case LITERAL__TYPE_QUALIFIER__:
																		case LITERAL__STORAGE_CLASS_SPECIFIER__:
																		{
																			break;
																		}
																		default:
																		{
																			matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_28, tokenNames);if (matchError) {break loop3;}
																		}
																		}
																		}
																		{
																		int LA1_18 = LA(1);
																		int LA2_18 = LA(2);
																		
																		if ((_tokenSet_21.member(LA1_18)) && (LA2_18==LPAREN||LA2_18==LSQUARE)) {
																			function_attribute_specification();
																			if (matchError) {break loop3;}
																		}
																		else if ((_tokenSet_22.member(LA1_18)) && (_tokenSet_23.member(LA2_18))) {
																		}
																		else {
																			matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_22, tokenNames);if (matchError) {break loop3;}
																		}
																		
																		}
																		function_definition();
																		if (matchError) {break loop3;}
																		astFactory.addASTChild(currentAST, returnAST);
																		external_declaration_AST = (AST)currentAST.root;
																		external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_DEFINITION,"CSM_FUNCTION_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
																		currentAST.root = external_declaration_AST;
																		currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
																			external_declaration_AST.getFirstChild() : external_declaration_AST;
																		currentAST.advanceChildToEnd();
																	}
																	else {
																		boolean synPredMatched234 = false;
																		if (((_tokenSet_24.member(LA1_2)) && (_tokenSet_25.member(LA2_2)))) {
																			int _m234 = mark();
																			guessing++;
																			guess234:  while (true) {
																				{
																				function_declarator_g(true, false, false);
																				if (matchError) {break guess234;}
																				{
																				switch ( LA(1)) {
																				case ELLIPSIS:
																				case LPAREN:
																				case LSQUARE:
																				case STAR:
																				case AND:
																				case AMPERSAND:
																				case TILDE:
																				case SCOPE:
																				case IDENT:
																				case LITERAL_OPERATOR:
																				case LITERAL_typeof:
																				case LITERAL___typeof__:
																				case LITERAL___typeof:
																				case LITERAL_typedef:
																				case LITERAL_enum:
																				case LITERAL_namespace:
																				case LITERAL_extern:
																				case LITERAL_inline:
																				case LITERAL__inline:
																				case LITERAL___inline__:
																				case LITERAL___inline:
																				case LITERAL_virtual:
																				case LITERAL_explicit:
																				case LITERAL_friend:
																				case LITERAL__stdcall:
																				case LITERAL___stdcall:
																				case LITERAL_typename:
																				case LITERAL_auto:
																				case LITERAL_register:
																				case LITERAL_static:
																				case LITERAL_mutable:
																				case LITERAL_const:
																				case LITERAL___const__:
																				case LITERAL___const:
																				case LITERAL_const_cast:
																				case LITERAL_volatile:
																				case LITERAL___volatile__:
																				case LITERAL___volatile:
																				case LITERAL_char:
																				case LITERAL_wchar_t:
																				case LITERAL_bool:
																				case LITERAL_short:
																				case LITERAL_int:
																				case LITERAL_long:
																				case LITERAL_signed:
																				case LITERAL___signed__:
																				case LITERAL___signed:
																				case LITERAL_unsigned:
																				case LITERAL___unsigned__:
																				case LITERAL_float:
																				case LITERAL_double:
																				case LITERAL_void:
																				case LITERAL__declspec:
																				case LITERAL___declspec:
																				case LITERAL_class:
																				case LITERAL_struct:
																				case LITERAL_union:
																				case LITERAL_this:
																				case LITERAL_true:
																				case LITERAL_false:
																				case LITERAL_using:
																				case LITERAL__cdecl:
																				case LITERAL___cdecl:
																				case LITERAL__near:
																				case LITERAL___near:
																				case LITERAL__far:
																				case LITERAL___far:
																				case LITERAL___interrupt:
																				case LITERAL_pascal:
																				case LITERAL__pascal:
																				case LITERAL___pascal:
																				case LITERAL__int64:
																				case LITERAL___int64:
																				case LITERAL___w64:
																				case LITERAL___attribute__:
																				case LITERAL___complex__:
																				case LITERAL___global:
																				case LITERAL__Bool:
																				case LITERAL__Complex:
																				case LITERAL___thread:
																				case LITERAL___attribute:
																				case LITERAL__Imaginary:
																				case LITERAL_bit:
																				case LITERAL___symbolic:
																				case LITERAL___hidden:
																				case LITERAL_final:
																				case LITERAL_override:
																				case LITERAL_constexpr:
																				case LITERAL_decltype:
																				case LITERAL_thread_local:
																				case LITERAL_static_assert:
																				case LITERAL_alignas:
																				case LITERAL_char16_t:
																				case LITERAL_char32_t:
																				case LITERAL___decltype:
																				case LITERAL___complex:
																				case LITERAL___forceinline:
																				case LITERAL___clrcall:
																				case LITERAL__Noreturn:
																				case LITERAL___builtin_va_list:
																				case LITERAL__BUILT_IN_TYPE__:
																				case LITERAL__TYPE_QUALIFIER__:
																				case LITERAL__STORAGE_CLASS_SPECIFIER__:
																				{
																					function_K_R_parameter_list_g();
																					if (matchError) {break guess234;}
																					break;
																				}
																				case LCURLY:
																				{
																					break;
																				}
																				default:
																				{
																					matchError=true;if (matchError) {break guess234;}
																				}
																				}
																				}
																				match(LCURLY);
																				if (matchError) {break guess234;}
																				}
																			synPredMatched234 = true;
																			break;} // guess234
																			if (matchError) {
																			   resetMatchError();
																			}
																			rewind(_m234);
																			guessing--;
																		}
																		if ( synPredMatched234 ) {
																			if (statementTrace>=1) 
																						printf("external_declaration_8a[%d]: Function definition without ret value\n",
																							LT(1).getLine());
																					
																			function_definition_no_ret_type();
																			if (matchError) {break loop3;}
																			astFactory.addASTChild(currentAST, returnAST);
																			external_declaration_AST = (AST)currentAST.root;
																			external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_DEFINITION,"CSM_FUNCTION_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
																			currentAST.root = external_declaration_AST;
																			currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
																				external_declaration_AST.getFirstChild() : external_declaration_AST;
																			currentAST.advanceChildToEnd();
																		}
																		else {
																			boolean synPredMatched236 = false;
																			if (((_tokenSet_22.member(LA1_2)) && (_tokenSet_23.member(LA2_2)))) {
																				int _m236 = mark();
																				guessing++;
																				guess236:  while (true) {
																					{
																					declaration_specifiers_g(false, false);
																					if (matchError) {break guess236;}
																					function_declarator_g(true, false, false);
																					if (matchError) {break guess236;}
																					declaration_g(declOther);
																					if (matchError) {break guess236;}
																					}
																				synPredMatched236 = true;
																				break;} // guess236
																				if (matchError) {
																				   resetMatchError();
																				}
																				rewind(_m236);
																				guessing--;
																			}
																			if ( synPredMatched236 ) {
																				K_and_R = true;
																						 if (statementTrace>=1) 
																							printf("external_declaration_9[%d]: K & R function definition\n",
																								LT(1).getLine());
																						
																				function_definition();
																				if (matchError) {break loop3;}
																				astFactory.addASTChild(currentAST, returnAST);
																				external_declaration_AST = (AST)currentAST.root;
																				external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_DEFINITION,"CSM_FUNCTION_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
																				currentAST.root = external_declaration_AST;
																				currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
																					external_declaration_AST.getFirstChild() : external_declaration_AST;
																				currentAST.advanceChildToEnd();
																			}
																			else {
																				boolean synPredMatched240 = false;
																				if (((_tokenSet_22.member(LA1_2)) && (_tokenSet_23.member(LA2_2)))) {
																					int _m240 = mark();
																					guessing++;
																					guess240:  while (true) {
																						{
																						{
																						switch ( LA(1)) {
																						case LITERAL___extension__:
																						{
																							consume();
																							break;
																						}
																						case LSQUARE:
																						case SCOPE:
																						case IDENT:
																						case LITERAL_typeof:
																						case LITERAL___typeof__:
																						case LITERAL___typeof:
																						case LITERAL_typedef:
																						case LITERAL_enum:
																						case LITERAL_extern:
																						case LITERAL_inline:
																						case LITERAL__inline:
																						case LITERAL___inline__:
																						case LITERAL___inline:
																						case LITERAL_virtual:
																						case LITERAL_explicit:
																						case LITERAL_friend:
																						case LITERAL__stdcall:
																						case LITERAL___stdcall:
																						case LITERAL_typename:
																						case LITERAL_auto:
																						case LITERAL_register:
																						case LITERAL_static:
																						case LITERAL_mutable:
																						case LITERAL_const:
																						case LITERAL___const__:
																						case LITERAL___const:
																						case LITERAL_const_cast:
																						case LITERAL_volatile:
																						case LITERAL___volatile__:
																						case LITERAL___volatile:
																						case LITERAL_char:
																						case LITERAL_wchar_t:
																						case LITERAL_bool:
																						case LITERAL_short:
																						case LITERAL_int:
																						case LITERAL_long:
																						case LITERAL_signed:
																						case LITERAL___signed__:
																						case LITERAL___signed:
																						case LITERAL_unsigned:
																						case LITERAL___unsigned__:
																						case LITERAL_float:
																						case LITERAL_double:
																						case LITERAL_void:
																						case LITERAL__declspec:
																						case LITERAL___declspec:
																						case LITERAL_class:
																						case LITERAL_struct:
																						case LITERAL_union:
																						case LITERAL__int64:
																						case LITERAL___int64:
																						case LITERAL___w64:
																						case LITERAL___attribute__:
																						case LITERAL___complex__:
																						case LITERAL___global:
																						case LITERAL__Bool:
																						case LITERAL__Complex:
																						case LITERAL___thread:
																						case LITERAL___attribute:
																						case LITERAL__Imaginary:
																						case LITERAL_bit:
																						case LITERAL___symbolic:
																						case LITERAL___hidden:
																						case LITERAL_final:
																						case LITERAL_override:
																						case LITERAL_constexpr:
																						case LITERAL_decltype:
																						case LITERAL_thread_local:
																						case LITERAL_alignas:
																						case LITERAL_char16_t:
																						case LITERAL_char32_t:
																						case LITERAL___decltype:
																						case LITERAL___complex:
																						case LITERAL___forceinline:
																						case LITERAL___clrcall:
																						case LITERAL__Noreturn:
																						case LITERAL___builtin_va_list:
																						case LITERAL__BUILT_IN_TYPE__:
																						case LITERAL__TYPE_QUALIFIER__:
																						case LITERAL__STORAGE_CLASS_SPECIFIER__:
																						{
																							break;
																						}
																						default:
																						{
																							matchError=true;if (matchError) {break guess240;}
																						}
																						}
																						}
																						declaration_specifiers_g(false, false);
																						if (matchError) {break guess240;}
																						function_declarator_with_fun_as_ret_type_g(false);
																						if (matchError) {break guess240;}
																						{
																						switch ( LA(1)) {
																						case EOF:
																						{
																							consume();
																							break;
																						}
																						case SEMICOLON:
																						{
																							consume();
																							break;
																						}
																						default:
																						{
																							matchError=true;if (matchError) {break guess240;}
																						}
																						}
																						}
																						}
																					synPredMatched240 = true;
																					break;} // guess240
																					if (matchError) {
																					   resetMatchError();
																					}
																					rewind(_m240);
																					guessing--;
																				}
																				if ( synPredMatched240 ) {
																					if (statementTrace>=1) 
																								printf("external_declaration_7a[%d]: Function prototype with function as return type\n",
																									LT(1).getLine());
																							
																					function_declaration_with_fun_as_ret_type();
																					if (matchError) {break loop3;}
																					astFactory.addASTChild(currentAST, returnAST);
																					external_declaration_AST = (AST)currentAST.root;
																					external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_RET_FUN_DECLARATION,"CSM_FUNCTION_RET_FUN_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
																					currentAST.root = external_declaration_AST;
																					currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
																						external_declaration_AST.getFirstChild() : external_declaration_AST;
																					currentAST.advanceChildToEnd();
																				}
																				else {
																					boolean synPredMatched243 = false;
																					if (((_tokenSet_22.member(LA1_2)) && (_tokenSet_23.member(LA2_2)))) {
																						int _m243 = mark();
																						guessing++;
																						guess243:  while (true) {
																							{
																							{
																							switch ( LA(1)) {
																							case LITERAL___extension__:
																							{
																								consume();
																								break;
																							}
																							case LSQUARE:
																							case SCOPE:
																							case IDENT:
																							case LITERAL_typeof:
																							case LITERAL___typeof__:
																							case LITERAL___typeof:
																							case LITERAL_typedef:
																							case LITERAL_enum:
																							case LITERAL_extern:
																							case LITERAL_inline:
																							case LITERAL__inline:
																							case LITERAL___inline__:
																							case LITERAL___inline:
																							case LITERAL_virtual:
																							case LITERAL_explicit:
																							case LITERAL_friend:
																							case LITERAL__stdcall:
																							case LITERAL___stdcall:
																							case LITERAL_typename:
																							case LITERAL_auto:
																							case LITERAL_register:
																							case LITERAL_static:
																							case LITERAL_mutable:
																							case LITERAL_const:
																							case LITERAL___const__:
																							case LITERAL___const:
																							case LITERAL_const_cast:
																							case LITERAL_volatile:
																							case LITERAL___volatile__:
																							case LITERAL___volatile:
																							case LITERAL_char:
																							case LITERAL_wchar_t:
																							case LITERAL_bool:
																							case LITERAL_short:
																							case LITERAL_int:
																							case LITERAL_long:
																							case LITERAL_signed:
																							case LITERAL___signed__:
																							case LITERAL___signed:
																							case LITERAL_unsigned:
																							case LITERAL___unsigned__:
																							case LITERAL_float:
																							case LITERAL_double:
																							case LITERAL_void:
																							case LITERAL__declspec:
																							case LITERAL___declspec:
																							case LITERAL_class:
																							case LITERAL_struct:
																							case LITERAL_union:
																							case LITERAL__int64:
																							case LITERAL___int64:
																							case LITERAL___w64:
																							case LITERAL___attribute__:
																							case LITERAL___complex__:
																							case LITERAL___global:
																							case LITERAL__Bool:
																							case LITERAL__Complex:
																							case LITERAL___thread:
																							case LITERAL___attribute:
																							case LITERAL__Imaginary:
																							case LITERAL_bit:
																							case LITERAL___symbolic:
																							case LITERAL___hidden:
																							case LITERAL_final:
																							case LITERAL_override:
																							case LITERAL_constexpr:
																							case LITERAL_decltype:
																							case LITERAL_thread_local:
																							case LITERAL_alignas:
																							case LITERAL_char16_t:
																							case LITERAL_char32_t:
																							case LITERAL___decltype:
																							case LITERAL___complex:
																							case LITERAL___forceinline:
																							case LITERAL___clrcall:
																							case LITERAL__Noreturn:
																							case LITERAL___builtin_va_list:
																							case LITERAL__BUILT_IN_TYPE__:
																							case LITERAL__TYPE_QUALIFIER__:
																							case LITERAL__STORAGE_CLASS_SPECIFIER__:
																							{
																								break;
																							}
																							default:
																							{
																								matchError=true;if (matchError) {break guess243;}
																							}
																							}
																							}
																							declaration_specifiers_g(false, false);
																							if (matchError) {break guess243;}
																							function_declarator_with_fun_as_ret_type_g(true);
																							if (matchError) {break guess243;}
																							match(LCURLY);
																							if (matchError) {break guess243;}
																							}
																						synPredMatched243 = true;
																						break;} // guess243
																						if (matchError) {
																						   resetMatchError();
																						}
																						rewind(_m243);
																						guessing--;
																					}
																					if ( synPredMatched243 ) {
																						if (statementTrace>=1) 
																									printf("external_declaration_8b[%d]: Function definition with function as return type\n",
																										LT(1).getLine());
																								
																						function_definition_with_fun_as_ret_type();
																						if (matchError) {break loop3;}
																						astFactory.addASTChild(currentAST, returnAST);
																						external_declaration_AST = (AST)currentAST.root;
																						external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_RET_FUN_DEFINITION,"CSM_FUNCTION_RET_FUN_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
																						currentAST.root = external_declaration_AST;
																						currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
																							external_declaration_AST.getFirstChild() : external_declaration_AST;
																						currentAST.advanceChildToEnd();
																					}
																					else if (((_tokenSet_29.member(LA1_2)) && (_tokenSet_30.member(LA2_2)))&&(isCPlusPlus())) {
																						if (statementTrace>=1) 
																									printf("external_declaration_12[%d]: Namespace declaration\n",
																										LT(1).getLine());
																								
																						decl_namespace();
																						if (matchError) {break loop3;}
																						astFactory.addASTChild(currentAST, returnAST);
																					}
																					else {
																						boolean synPredMatched245 = false;
																						if ((((_tokenSet_16.member(LA1_2)) && (_tokenSet_17.member(LA2_2)))&&(isCPlusPlus()))) {
																							int _m245 = mark();
																							guessing++;
																							guess245:  while (true) {
																								{
																								ctor_decl_spec_g();
																								if (matchError) {break guess245;}
																								ctor_declarator_g(true);
																								if (matchError) {break guess245;}
																								match(COLON);
																								if (matchError) {break guess245;}
																								}
																							synPredMatched245 = true;
																							break;} // guess245
																							if (matchError) {
																							   resetMatchError();
																							}
																							rewind(_m245);
																							guessing--;
																						}
																						if ( synPredMatched245 ) {
																							ctor_definition();
																							if (matchError) {break loop3;}
																							astFactory.addASTChild(currentAST, returnAST);
																							external_declaration_AST = (AST)currentAST.root;
																							external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CTOR_DEFINITION,"CSM_CTOR_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
																							currentAST.root = external_declaration_AST;
																							currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
																								external_declaration_AST.getFirstChild() : external_declaration_AST;
																							currentAST.advanceChildToEnd();
																						}
																						else if ((_tokenSet_10.member(LA1_2)) && (_tokenSet_11.member(LA2_2))) {
																							if (statementTrace>=1) 
																										printf("external_declaration_13[%d]: Declaration\n",LT(1).getLine());
																									
																							{
																							switch ( LA(1)) {
																							case LITERAL___extension__:
																							{
																								consume();
																								break;
																							}
																							case ELLIPSIS:
																							case LPAREN:
																							case LSQUARE:
																							case STAR:
																							case AND:
																							case AMPERSAND:
																							case TILDE:
																							case SCOPE:
																							case IDENT:
																							case LITERAL_OPERATOR:
																							case LITERAL_typeof:
																							case LITERAL___typeof__:
																							case LITERAL___typeof:
																							case LITERAL_typedef:
																							case LITERAL_enum:
																							case LITERAL_namespace:
																							case LITERAL_extern:
																							case LITERAL_inline:
																							case LITERAL__inline:
																							case LITERAL___inline__:
																							case LITERAL___inline:
																							case LITERAL_virtual:
																							case LITERAL_explicit:
																							case LITERAL_friend:
																							case LITERAL__stdcall:
																							case LITERAL___stdcall:
																							case LITERAL_typename:
																							case LITERAL_auto:
																							case LITERAL_register:
																							case LITERAL_static:
																							case LITERAL_mutable:
																							case LITERAL_const:
																							case LITERAL___const__:
																							case LITERAL___const:
																							case LITERAL_const_cast:
																							case LITERAL_volatile:
																							case LITERAL___volatile__:
																							case LITERAL___volatile:
																							case LITERAL_char:
																							case LITERAL_wchar_t:
																							case LITERAL_bool:
																							case LITERAL_short:
																							case LITERAL_int:
																							case LITERAL_long:
																							case LITERAL_signed:
																							case LITERAL___signed__:
																							case LITERAL___signed:
																							case LITERAL_unsigned:
																							case LITERAL___unsigned__:
																							case LITERAL_float:
																							case LITERAL_double:
																							case LITERAL_void:
																							case LITERAL__declspec:
																							case LITERAL___declspec:
																							case LITERAL_class:
																							case LITERAL_struct:
																							case LITERAL_union:
																							case LITERAL_this:
																							case LITERAL_true:
																							case LITERAL_false:
																							case LITERAL_using:
																							case LITERAL__cdecl:
																							case LITERAL___cdecl:
																							case LITERAL__near:
																							case LITERAL___near:
																							case LITERAL__far:
																							case LITERAL___far:
																							case LITERAL___interrupt:
																							case LITERAL_pascal:
																							case LITERAL__pascal:
																							case LITERAL___pascal:
																							case LITERAL__int64:
																							case LITERAL___int64:
																							case LITERAL___w64:
																							case LITERAL___attribute__:
																							case LITERAL___complex__:
																							case LITERAL___global:
																							case LITERAL__Bool:
																							case LITERAL__Complex:
																							case LITERAL___thread:
																							case LITERAL___attribute:
																							case LITERAL__Imaginary:
																							case LITERAL_bit:
																							case LITERAL___symbolic:
																							case LITERAL___hidden:
																							case LITERAL_final:
																							case LITERAL_override:
																							case LITERAL_constexpr:
																							case LITERAL_decltype:
																							case LITERAL_thread_local:
																							case LITERAL_static_assert:
																							case LITERAL_alignas:
																							case LITERAL_char16_t:
																							case LITERAL_char32_t:
																							case LITERAL___decltype:
																							case LITERAL___complex:
																							case LITERAL___forceinline:
																							case LITERAL___clrcall:
																							case LITERAL__Noreturn:
																							case LITERAL___builtin_va_list:
																							case LITERAL__BUILT_IN_TYPE__:
																							case LITERAL__TYPE_QUALIFIER__:
																							case LITERAL__STORAGE_CLASS_SPECIFIER__:
																							{
																								break;
																							}
																							default:
																							{
																								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_10, tokenNames);if (matchError) {break loop3;}
																							}
																							}
																							}
																							declaration(declGeneric);
																							if (matchError) {break loop3;}
																							astFactory.addASTChild(currentAST, returnAST);
																							external_declaration_AST = (AST)currentAST.root;
																							
																									    // if declaration itself returned proper type, don't wrap it into generic declaration
																									    if( external_declaration_AST != null ) {
																										int type = external_declaration_AST.getType(); 
																										int childrenCnt = external_declaration_AST.getNumberOfChildren();
																										if( childrenCnt > 0 || type < CSM_START || CSM_END < type ) {
																										    external_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_GENERIC_DECLARATION,"CSM_GENERIC_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_AST));
																										}
																									    }
																									
																							currentAST.root = external_declaration_AST;
																							currentAST.child = external_declaration_AST!=null &&external_declaration_AST.getFirstChild()!=null ?
																								external_declaration_AST.getFirstChild() : external_declaration_AST;
																							currentAST.advanceChildToEnd();
																						}
																					else {
																						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_2, tokenNames);if (matchError) {break loop3;}
																					}
																					}}}}}}}}}}}}}}}}}}}
																					}
																					external_declaration_AST = (AST)currentAST.root;
																				break;} // loop3
																				if (matchError) {
																					reportError(matchException);
																					recover(matchException,_tokenSet_1);
																					resetMatchError();
																			}
																			returnAST = external_declaration_AST;
																		}
																		
	protected final void template_explicit_specialization() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_explicit_specialization_AST = null;
		String s; TypeQualifier tq; StorageClass sc;int ts = 0; boolean b;
		
		loop4:  while (true) {
			AST tmp27_AST = null;
			tmp27_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp27_AST);
			match(LITERAL_template);
			if (matchError) {break loop4;}
			AST tmp28_AST = null;
			tmp28_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp28_AST);
			match(LESSTHAN);
			if (matchError) {break loop4;}
			AST tmp29_AST = null;
			tmp29_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp29_AST);
			match(GREATERTHAN);
			if (matchError) {break loop4;}
			{
			int LA1_19 = LA(1);
			int LA2_19 = LA(2);
			
			boolean synPredMatched14 = false;
			if (((_tokenSet_31.member(LA1_19)) && (_tokenSet_23.member(LA2_19)))) {
				int _m14 = mark();
				guessing++;
				guess14:  while (true) {
					{
					{
					switch ( LA(1)) {
					case LITERAL_template:
					{
						consume();
						match(LESSTHAN);
						if (matchError) {break guess14;}
						match(GREATERTHAN);
						if (matchError) {break guess14;}
						break;
					}
					case LSQUARE:
					case SCOPE:
					case IDENT:
					case LITERAL_typeof:
					case LITERAL___typeof__:
					case LITERAL___typeof:
					case LITERAL_typedef:
					case LITERAL_enum:
					case LITERAL_extern:
					case LITERAL_inline:
					case LITERAL__inline:
					case LITERAL___inline__:
					case LITERAL___inline:
					case LITERAL_virtual:
					case LITERAL_explicit:
					case LITERAL_friend:
					case LITERAL__stdcall:
					case LITERAL___stdcall:
					case LITERAL_typename:
					case LITERAL_auto:
					case LITERAL_register:
					case LITERAL_static:
					case LITERAL_mutable:
					case LITERAL_const:
					case LITERAL___const__:
					case LITERAL___const:
					case LITERAL_const_cast:
					case LITERAL_volatile:
					case LITERAL___volatile__:
					case LITERAL___volatile:
					case LITERAL_char:
					case LITERAL_wchar_t:
					case LITERAL_bool:
					case LITERAL_short:
					case LITERAL_int:
					case LITERAL_long:
					case LITERAL_signed:
					case LITERAL___signed__:
					case LITERAL___signed:
					case LITERAL_unsigned:
					case LITERAL___unsigned__:
					case LITERAL_float:
					case LITERAL_double:
					case LITERAL_void:
					case LITERAL__declspec:
					case LITERAL___declspec:
					case LITERAL_class:
					case LITERAL_struct:
					case LITERAL_union:
					case LITERAL__int64:
					case LITERAL___int64:
					case LITERAL___w64:
					case LITERAL___attribute__:
					case LITERAL___complex__:
					case LITERAL___global:
					case LITERAL__Bool:
					case LITERAL__Complex:
					case LITERAL___thread:
					case LITERAL___attribute:
					case LITERAL__Imaginary:
					case LITERAL_bit:
					case LITERAL___symbolic:
					case LITERAL___hidden:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_constexpr:
					case LITERAL_decltype:
					case LITERAL_thread_local:
					case LITERAL_alignas:
					case LITERAL_char16_t:
					case LITERAL_char32_t:
					case LITERAL___decltype:
					case LITERAL___complex:
					case LITERAL___forceinline:
					case LITERAL___clrcall:
					case LITERAL__Noreturn:
					case LITERAL___builtin_va_list:
					case LITERAL__BUILT_IN_TYPE__:
					case LITERAL__TYPE_QUALIFIER__:
					case LITERAL__STORAGE_CLASS_SPECIFIER__:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess14;}
					}
					}
					}
					declaration_specifiers_g(false, false);
					if (matchError) {break guess14;}
					function_declarator_g(true, false, false);
					if (matchError) {break guess14;}
					{
					switch ( LA(1)) {
					case LCURLY:
					{
						consume();
						break;
					}
					case LITERAL_try:
					case LITERAL___try:
					{
						literal_try_g();
						if (matchError) {break guess14;}
						break;
					}
					case ASSIGNEQUAL:
					{
						consume();
						{
						switch ( LA(1)) {
						case LITERAL_default:
						{
							consume();
							break;
						}
						case LITERAL_delete:
						{
							consume();
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess14;}
						}
						}
						}
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess14;}
					}
					}
					}
					}
				synPredMatched14 = true;
				break;} // guess14
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m14);
				guessing--;
			}
			if ( synPredMatched14 ) {
				{
				switch ( LA(1)) {
				case LITERAL_template:
				{
					AST tmp30_AST = null;
					tmp30_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp30_AST);
					consume();
					AST tmp31_AST = null;
					tmp31_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp31_AST);
					match(LESSTHAN);
					if (matchError) {break loop4;}
					AST tmp32_AST = null;
					tmp32_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp32_AST);
					match(GREATERTHAN);
					if (matchError) {break loop4;}
					break;
				}
				case LSQUARE:
				case SCOPE:
				case IDENT:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_31, tokenNames);if (matchError) {break loop4;}
				}
				}
				}
				if(statementTrace >= 1) printf("external_declaration_0a[%d]: template " + "explicit-specialisation function definition\n", LT(1).getLine());
				function_definition();
				if (matchError) {break loop4;}
				astFactory.addASTChild(currentAST, returnAST);
				template_explicit_specialization_AST = (AST)currentAST.root;
				template_explicit_specialization_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPLATE_FUNCTION_DEFINITION_EXPLICIT_SPECIALIZATION,"CSM_TEMPLATE_FUNCTION_DEFINITION_EXPLICIT_SPECIALIZATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_explicit_specialization_AST));
				currentAST.root = template_explicit_specialization_AST;
				currentAST.child = template_explicit_specialization_AST!=null &&template_explicit_specialization_AST.getFirstChild()!=null ?
					template_explicit_specialization_AST.getFirstChild() : template_explicit_specialization_AST;
				currentAST.advanceChildToEnd();
			}
			else {
				boolean synPredMatched19 = false;
				if (((_tokenSet_16.member(LA1_19)) && (_tokenSet_17.member(LA2_19)))) {
					int _m19 = mark();
					guessing++;
					guess19:  while (true) {
						{
						ctor_decl_spec_g();
						if (matchError) {break guess19;}
						ctor_declarator_g(true);
						if (matchError) {break guess19;}
						{
						switch ( LA(1)) {
						case COLON:
						{
							consume();
							break;
						}
						case LCURLY:
						{
							consume();
							break;
						}
						case ASSIGNEQUAL:
						{
							consume();
							{
							switch ( LA(1)) {
							case LITERAL_default:
							{
								consume();
								break;
							}
							case LITERAL_delete:
							{
								consume();
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess19;}
							}
							}
							}
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess19;}
						}
						}
						}
						}
					synPredMatched19 = true;
					break;} // guess19
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m19);
					guessing--;
				}
				if ( synPredMatched19 ) {
					if(statementTrace >= 1) printf("template_explicit_specialization_0b[%d]: template " + "explicit-specialisation ctor definition\n", LT(1).getLine());
					ctor_definition();
					if (matchError) {break loop4;}
					astFactory.addASTChild(currentAST, returnAST);
					template_explicit_specialization_AST = (AST)currentAST.root;
					template_explicit_specialization_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPLATE_CTOR_DEFINITION_EXPLICIT_SPECIALIZATION,"CSM_TEMPLATE_CTOR_DEFINITION_EXPLICIT_SPECIALIZATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_explicit_specialization_AST));
					currentAST.root = template_explicit_specialization_AST;
					currentAST.child = template_explicit_specialization_AST!=null &&template_explicit_specialization_AST.getFirstChild()!=null ?
						template_explicit_specialization_AST.getFirstChild() : template_explicit_specialization_AST;
					currentAST.advanceChildToEnd();
				}
				else {
					boolean synPredMatched21 = false;
					if (((_tokenSet_32.member(LA1_19)) && (_tokenSet_13.member(LA2_19)))) {
						int _m21 = mark();
						guessing++;
						guess21:  while (true) {
							{
							dtor_declarator_g(true);
							if (matchError) {break guess21;}
							match(LCURLY);
							if (matchError) {break guess21;}
							}
						synPredMatched21 = true;
						break;} // guess21
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m21);
						guessing--;
					}
					if ( synPredMatched21 ) {
						if(statementTrace >= 1)
									printf("template_explicit_specialization_0b[%d]: template " +
										"explicit-specialisation dtor definition\n", LT(1).getLine());
								
						dtor_definition();
						if (matchError) {break loop4;}
						astFactory.addASTChild(currentAST, returnAST);
						template_explicit_specialization_AST = (AST)currentAST.root;
						template_explicit_specialization_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPLATE_DTOR_DEFINITION_EXPLICIT_SPECIALIZATION,"CSM_TEMPLATE_DTOR_DEFINITION_EXPLICIT_SPECIALIZATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_explicit_specialization_AST));
						currentAST.root = template_explicit_specialization_AST;
						currentAST.child = template_explicit_specialization_AST!=null &&template_explicit_specialization_AST.getFirstChild()!=null ?
							template_explicit_specialization_AST.getFirstChild() : template_explicit_specialization_AST;
						currentAST.advanceChildToEnd();
					}
					else {
						boolean synPredMatched23 = false;
						if (((_tokenSet_33.member(LA1_19)) && (_tokenSet_34.member(LA2_19)))) {
							int _m23 = mark();
							guessing++;
							guess23:  while (true) {
								{
								ctor_declarator_g(false);
								if (matchError) {break guess23;}
								match(SEMICOLON);
								if (matchError) {break guess23;}
								}
							synPredMatched23 = true;
							break;} // guess23
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m23);
							guessing--;
						}
						if ( synPredMatched23 ) {
							if(statementTrace >= 1)
										printf("template_explicit_specialization_0c[%d]: template " +
											"explicit-specialisation ctor declaration\n", LT(1).getLine());
									
							b=ctor_declarator(false);
							if (matchError) {break loop4;}
							astFactory.addASTChild(currentAST, returnAST);
							AST tmp33_AST = null;
							tmp33_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp33_AST);
							match(SEMICOLON);
							if (matchError) {break loop4;}
							template_explicit_specialization_AST = (AST)currentAST.root;
							template_explicit_specialization_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPLATE_EXPLICIT_SPECIALIZATION,"CSM_TEMPLATE_EXPLICIT_SPECIALIZATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_explicit_specialization_AST));
							currentAST.root = template_explicit_specialization_AST;
							currentAST.child = template_explicit_specialization_AST!=null &&template_explicit_specialization_AST.getFirstChild()!=null ?
								template_explicit_specialization_AST.getFirstChild() : template_explicit_specialization_AST;
							currentAST.advanceChildToEnd();
						}
						else {
							boolean synPredMatched25 = false;
							if (((_tokenSet_35.member(LA1_19)) && (_tokenSet_36.member(LA2_19)))) {
								int _m25 = mark();
								guessing++;
								guess25:  while (true) {
									{
									dtor_declarator_g(false);
									if (matchError) {break guess25;}
									match(SEMICOLON);
									if (matchError) {break guess25;}
									}
								synPredMatched25 = true;
								break;} // guess25
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m25);
								guessing--;
							}
							if ( synPredMatched25 ) {
								if(statementTrace >= 1)
											printf("template_explicit_specialization_0d[%d]: template " +
												"explicit-specialisation dtor definition\n", LT(1).getLine());
										
								dtor_declarator(false);
								if (matchError) {break loop4;}
								astFactory.addASTChild(currentAST, returnAST);
								AST tmp34_AST = null;
								tmp34_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp34_AST);
								match(SEMICOLON);
								if (matchError) {break loop4;}
								template_explicit_specialization_AST = (AST)currentAST.root;
								template_explicit_specialization_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPLATE_EXPLICIT_SPECIALIZATION,"CSM_TEMPLATE_EXPLICIT_SPECIALIZATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_explicit_specialization_AST));
								currentAST.root = template_explicit_specialization_AST;
								currentAST.child = template_explicit_specialization_AST!=null &&template_explicit_specialization_AST.getFirstChild()!=null ?
									template_explicit_specialization_AST.getFirstChild() : template_explicit_specialization_AST;
								currentAST.advanceChildToEnd();
							}
							else {
								boolean synPredMatched27 = false;
								if (((_tokenSet_22.member(LA1_19)) && (_tokenSet_37.member(LA2_19)))) {
									int _m27 = mark();
									guessing++;
									guess27:  while (true) {
										{
										class_forward_declaration_g();
										if (matchError) {break guess27;}
										}
									synPredMatched27 = true;
									break;} // guess27
									if (matchError) {
									   resetMatchError();
									}
									rewind(_m27);
									guessing--;
								}
								if ( synPredMatched27 ) {
									if(statementTrace >= 1)
												printf("template_explicit_specialization_0f[%d]: template " +
													"class forward explicit-specialisation\n", LT(1).getLine());
											
									declaration_specifiers(false, false);
									if (matchError) {break loop4;}
									astFactory.addASTChild(currentAST, returnAST);
									AST tmp35_AST = null;
									tmp35_AST = astFactory.create(LT(1));
									astFactory.addASTChild(currentAST, tmp35_AST);
									match(SEMICOLON);
									if (matchError) {break loop4;}
									template_explicit_specialization_AST = (AST)currentAST.root;
									template_explicit_specialization_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FWD_TEMPLATE_EXPLICIT_SPECIALIZATION,"CSM_FWD_TEMPLATE_EXPLICIT_SPECIALIZATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_explicit_specialization_AST));
									currentAST.root = template_explicit_specialization_AST;
									currentAST.child = template_explicit_specialization_AST!=null &&template_explicit_specialization_AST.getFirstChild()!=null ?
										template_explicit_specialization_AST.getFirstChild() : template_explicit_specialization_AST;
									currentAST.advanceChildToEnd();
								}
								else {
									boolean synPredMatched33 = false;
									if (((_tokenSet_38.member(LA1_19)) && (_tokenSet_39.member(LA2_19)))) {
										int _m33 = mark();
										guessing++;
										guess33:  while (true) {
											{
											{
											switch ( LA(1)) {
											case LITERAL___extension__:
											{
												consume();
												break;
											}
											case LITERAL_template:
											case LITERAL_typedef:
											case LITERAL_enum:
											case LITERAL_extern:
											case LITERAL_auto:
											case LITERAL_register:
											case LITERAL_static:
											case LITERAL_mutable:
											case LITERAL_const:
											case LITERAL___const__:
											case LITERAL___const:
											case LITERAL_const_cast:
											case LITERAL_volatile:
											case LITERAL___volatile__:
											case LITERAL___volatile:
											case LITERAL___global:
											case LITERAL___thread:
											case LITERAL___symbolic:
											case LITERAL___hidden:
											case LITERAL_thread_local:
											case LITERAL__TYPE_QUALIFIER__:
											case LITERAL__STORAGE_CLASS_SPECIFIER__:
											{
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess33;}
											}
											}
											}
											{
											switch ( LA(1)) {
											case LITERAL_template:
											{
												consume();
												match(LESSTHAN);
												if (matchError) {break guess33;}
												match(GREATERTHAN);
												if (matchError) {break guess33;}
												break;
											}
											case LITERAL_typedef:
											case LITERAL_enum:
											case LITERAL_extern:
											case LITERAL_auto:
											case LITERAL_register:
											case LITERAL_static:
											case LITERAL_mutable:
											case LITERAL_const:
											case LITERAL___const__:
											case LITERAL___const:
											case LITERAL_const_cast:
											case LITERAL_volatile:
											case LITERAL___volatile__:
											case LITERAL___volatile:
											case LITERAL___global:
											case LITERAL___thread:
											case LITERAL___symbolic:
											case LITERAL___hidden:
											case LITERAL_thread_local:
											case LITERAL__TYPE_QUALIFIER__:
											case LITERAL__STORAGE_CLASS_SPECIFIER__:
											{
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess33;}
											}
											}
											}
											{
											_loop32:
											do {
												switch ( LA(1)) {
												case LITERAL_extern:
												case LITERAL_auto:
												case LITERAL_register:
												case LITERAL_static:
												case LITERAL_mutable:
												case LITERAL___global:
												case LITERAL___thread:
												case LITERAL___symbolic:
												case LITERAL___hidden:
												case LITERAL_thread_local:
												case LITERAL__STORAGE_CLASS_SPECIFIER__:
												{
													storage_class_specifier_g();
													if (matchError) {break guess33;}
													break;
												}
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL__TYPE_QUALIFIER__:
												{
													cv_qualifier_g();
													if (matchError) {break guess33;}
													break;
												}
												case LITERAL_typedef:
												{
													consume();
													break;
												}
												default:
												{
													break _loop32;
												}
												}
											} while (true);
											}
											enum_def_head_g();
											if (matchError) {break guess33;}
											}
										synPredMatched33 = true;
										break;} // guess33
										if (matchError) {
										   resetMatchError();
										}
										rewind(_m33);
										guessing--;
									}
									if ( synPredMatched33 ) {
										{
										switch ( LA(1)) {
										case LITERAL___extension__:
										{
											consume();
											break;
										}
										case LITERAL_template:
										case LITERAL_typedef:
										case LITERAL_enum:
										case LITERAL_extern:
										case LITERAL_auto:
										case LITERAL_register:
										case LITERAL_static:
										case LITERAL_mutable:
										case LITERAL_const:
										case LITERAL___const__:
										case LITERAL___const:
										case LITERAL_const_cast:
										case LITERAL_volatile:
										case LITERAL___volatile__:
										case LITERAL___volatile:
										case LITERAL___global:
										case LITERAL___thread:
										case LITERAL___symbolic:
										case LITERAL___hidden:
										case LITERAL_thread_local:
										case LITERAL__TYPE_QUALIFIER__:
										case LITERAL__STORAGE_CLASS_SPECIFIER__:
										{
											break;
										}
										default:
										{
											matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_38, tokenNames);if (matchError) {break loop4;}
										}
										}
										}
										{
										switch ( LA(1)) {
										case LITERAL_template:
										{
											AST tmp37_AST = null;
											tmp37_AST = astFactory.create(LT(1));
											astFactory.addASTChild(currentAST, tmp37_AST);
											consume();
											AST tmp38_AST = null;
											tmp38_AST = astFactory.create(LT(1));
											astFactory.addASTChild(currentAST, tmp38_AST);
											match(LESSTHAN);
											if (matchError) {break loop4;}
											AST tmp39_AST = null;
											tmp39_AST = astFactory.create(LT(1));
											astFactory.addASTChild(currentAST, tmp39_AST);
											match(GREATERTHAN);
											if (matchError) {break loop4;}
											break;
										}
										case LITERAL_typedef:
										case LITERAL_enum:
										case LITERAL_extern:
										case LITERAL_auto:
										case LITERAL_register:
										case LITERAL_static:
										case LITERAL_mutable:
										case LITERAL_const:
										case LITERAL___const__:
										case LITERAL___const:
										case LITERAL_const_cast:
										case LITERAL_volatile:
										case LITERAL___volatile__:
										case LITERAL___volatile:
										case LITERAL___global:
										case LITERAL___thread:
										case LITERAL___symbolic:
										case LITERAL___hidden:
										case LITERAL_thread_local:
										case LITERAL__TYPE_QUALIFIER__:
										case LITERAL__STORAGE_CLASS_SPECIFIER__:
										{
											break;
										}
										default:
										{
											matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_40, tokenNames);if (matchError) {break loop4;}
										}
										}
										}
										{
										_loop37:
										do {
											switch ( LA(1)) {
											case LITERAL_extern:
											case LITERAL_auto:
											case LITERAL_register:
											case LITERAL_static:
											case LITERAL_mutable:
											case LITERAL___global:
											case LITERAL___thread:
											case LITERAL___symbolic:
											case LITERAL___hidden:
											case LITERAL_thread_local:
											case LITERAL__STORAGE_CLASS_SPECIFIER__:
											{
												sc=storage_class_specifier();
												if (matchError) {break loop4;}
												astFactory.addASTChild(currentAST, returnAST);
												break;
											}
											case LITERAL_const:
											case LITERAL___const__:
											case LITERAL___const:
											case LITERAL_const_cast:
											case LITERAL_volatile:
											case LITERAL___volatile__:
											case LITERAL___volatile:
											case LITERAL__TYPE_QUALIFIER__:
											{
												tq=cv_qualifier();
												if (matchError) {break loop4;}
												astFactory.addASTChild(currentAST, returnAST);
												break;
											}
											case LITERAL_typedef:
											{
												AST tmp40_AST = null;
												tmp40_AST = astFactory.create(LT(1));
												astFactory.addASTChild(currentAST, tmp40_AST);
												consume();
												break;
											}
											default:
											{
												break _loop37;
											}
											}
										} while (true);
										}
										enum_specifier();
										if (matchError) {break loop4;}
										astFactory.addASTChild(currentAST, returnAST);
										{
										switch ( LA(1)) {
										case ELLIPSIS:
										case LPAREN:
										case LSQUARE:
										case STAR:
										case AND:
										case AMPERSAND:
										case TILDE:
										case SCOPE:
										case IDENT:
										case LITERAL_OPERATOR:
										case LITERAL__stdcall:
										case LITERAL___stdcall:
										case LITERAL_this:
										case LITERAL_true:
										case LITERAL_false:
										case LITERAL__cdecl:
										case LITERAL___cdecl:
										case LITERAL__near:
										case LITERAL___near:
										case LITERAL__far:
										case LITERAL___far:
										case LITERAL___interrupt:
										case LITERAL_pascal:
										case LITERAL__pascal:
										case LITERAL___pascal:
										case LITERAL___attribute__:
										case LITERAL___attribute:
										case LITERAL_final:
										case LITERAL_override:
										case LITERAL_decltype:
										case LITERAL___decltype:
										case LITERAL___clrcall:
										{
											init_declarator_list(declOther);
											if (matchError) {break loop4;}
											astFactory.addASTChild(currentAST, returnAST);
											break;
										}
										case SEMICOLON:
										{
											break;
										}
										default:
										{
											matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_41, tokenNames);if (matchError) {break loop4;}
										}
										}
										}
										AST tmp41_AST = null;
										tmp41_AST = astFactory.create(LT(1));
										astFactory.addASTChild(currentAST, tmp41_AST);
										match(SEMICOLON);
										if (matchError) {break loop4;}
										template_explicit_specialization_AST = (AST)currentAST.root;
										template_explicit_specialization_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ENUM_DECLARATION,"CSM_ENUM_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_explicit_specialization_AST));
										currentAST.root = template_explicit_specialization_AST;
										currentAST.child = template_explicit_specialization_AST!=null &&template_explicit_specialization_AST.getFirstChild()!=null ?
											template_explicit_specialization_AST.getFirstChild() : template_explicit_specialization_AST;
										currentAST.advanceChildToEnd();
									}
									else {
										boolean synPredMatched47 = false;
										if (((_tokenSet_38.member(LA1_19)) && (_tokenSet_39.member(LA2_19)))) {
											int _m47 = mark();
											guessing++;
											guess47:  while (true) {
												{
												{
												switch ( LA(1)) {
												case LITERAL___extension__:
												{
													consume();
													break;
												}
												case LITERAL_template:
												case LITERAL_typedef:
												case LITERAL_enum:
												case LITERAL_extern:
												case LITERAL_auto:
												case LITERAL_register:
												case LITERAL_static:
												case LITERAL_mutable:
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL___global:
												case LITERAL___thread:
												case LITERAL___symbolic:
												case LITERAL___hidden:
												case LITERAL_thread_local:
												case LITERAL__TYPE_QUALIFIER__:
												case LITERAL__STORAGE_CLASS_SPECIFIER__:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess47;}
												}
												}
												}
												{
												switch ( LA(1)) {
												case LITERAL_template:
												{
													consume();
													match(LESSTHAN);
													if (matchError) {break guess47;}
													match(GREATERTHAN);
													if (matchError) {break guess47;}
													break;
												}
												case LITERAL_typedef:
												case LITERAL_enum:
												case LITERAL_extern:
												case LITERAL_auto:
												case LITERAL_register:
												case LITERAL_static:
												case LITERAL_mutable:
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL___global:
												case LITERAL___thread:
												case LITERAL___symbolic:
												case LITERAL___hidden:
												case LITERAL_thread_local:
												case LITERAL__TYPE_QUALIFIER__:
												case LITERAL__STORAGE_CLASS_SPECIFIER__:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess47;}
												}
												}
												}
												{
												_loop43:
												do {
													switch ( LA(1)) {
													case LITERAL_extern:
													case LITERAL_auto:
													case LITERAL_register:
													case LITERAL_static:
													case LITERAL_mutable:
													case LITERAL___global:
													case LITERAL___thread:
													case LITERAL___symbolic:
													case LITERAL___hidden:
													case LITERAL_thread_local:
													case LITERAL__STORAGE_CLASS_SPECIFIER__:
													{
														storage_class_specifier_g();
														if (matchError) {break guess47;}
														break;
													}
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL__TYPE_QUALIFIER__:
													{
														cv_qualifier_g();
														if (matchError) {break guess47;}
														break;
													}
													case LITERAL_typedef:
													{
														consume();
														break;
													}
													default:
													{
														break _loop43;
													}
													}
												} while (true);
												}
												match(LITERAL_enum);
												if (matchError) {break guess47;}
												{
												switch ( LA(1)) {
												case LITERAL_class:
												{
													consume();
													break;
												}
												case LITERAL_struct:
												{
													consume();
													break;
												}
												case COLON:
												case SEMICOLON:
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL_this:
												case LITERAL_true:
												case LITERAL_false:
												case LITERAL__cdecl:
												case LITERAL___cdecl:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_decltype:
												case LITERAL___decltype:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess47;}
												}
												}
												}
												{
												switch ( LA(1)) {
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL_this:
												case LITERAL_true:
												case LITERAL_false:
												case LITERAL__cdecl:
												case LITERAL___cdecl:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_decltype:
												case LITERAL___decltype:
												{
													qualified_id_g();
													if (matchError) {break guess47;}
													break;
												}
												case COLON:
												case SEMICOLON:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess47;}
												}
												}
												}
												{
												switch ( LA(1)) {
												case COLON:
												{
													consume();
													ts=type_specifier_g(dsInvalid, false);
													if (matchError) {break guess47;}
													break;
												}
												case SEMICOLON:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess47;}
												}
												}
												}
												match(SEMICOLON);
												if (matchError) {break guess47;}
												}
											synPredMatched47 = true;
											break;} // guess47
											if (matchError) {
											   resetMatchError();
											}
											rewind(_m47);
											guessing--;
										}
										if ( synPredMatched47 ) {
											{
											switch ( LA(1)) {
											case LITERAL___extension__:
											{
												consume();
												break;
											}
											case LITERAL_template:
											case LITERAL_typedef:
											case LITERAL_enum:
											case LITERAL_extern:
											case LITERAL_auto:
											case LITERAL_register:
											case LITERAL_static:
											case LITERAL_mutable:
											case LITERAL_const:
											case LITERAL___const__:
											case LITERAL___const:
											case LITERAL_const_cast:
											case LITERAL_volatile:
											case LITERAL___volatile__:
											case LITERAL___volatile:
											case LITERAL___global:
											case LITERAL___thread:
											case LITERAL___symbolic:
											case LITERAL___hidden:
											case LITERAL_thread_local:
											case LITERAL__TYPE_QUALIFIER__:
											case LITERAL__STORAGE_CLASS_SPECIFIER__:
											{
												break;
											}
											default:
											{
												matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_38, tokenNames);if (matchError) {break loop4;}
											}
											}
											}
											{
											switch ( LA(1)) {
											case LITERAL_template:
											{
												AST tmp43_AST = null;
												tmp43_AST = astFactory.create(LT(1));
												astFactory.addASTChild(currentAST, tmp43_AST);
												consume();
												AST tmp44_AST = null;
												tmp44_AST = astFactory.create(LT(1));
												astFactory.addASTChild(currentAST, tmp44_AST);
												match(LESSTHAN);
												if (matchError) {break loop4;}
												AST tmp45_AST = null;
												tmp45_AST = astFactory.create(LT(1));
												astFactory.addASTChild(currentAST, tmp45_AST);
												match(GREATERTHAN);
												if (matchError) {break loop4;}
												break;
											}
											case LITERAL_typedef:
											case LITERAL_enum:
											case LITERAL_extern:
											case LITERAL_auto:
											case LITERAL_register:
											case LITERAL_static:
											case LITERAL_mutable:
											case LITERAL_const:
											case LITERAL___const__:
											case LITERAL___const:
											case LITERAL_const_cast:
											case LITERAL_volatile:
											case LITERAL___volatile__:
											case LITERAL___volatile:
											case LITERAL___global:
											case LITERAL___thread:
											case LITERAL___symbolic:
											case LITERAL___hidden:
											case LITERAL_thread_local:
											case LITERAL__TYPE_QUALIFIER__:
											case LITERAL__STORAGE_CLASS_SPECIFIER__:
											{
												break;
											}
											default:
											{
												matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_40, tokenNames);if (matchError) {break loop4;}
											}
											}
											}
											{
											_loop51:
											do {
												switch ( LA(1)) {
												case LITERAL_extern:
												case LITERAL_auto:
												case LITERAL_register:
												case LITERAL_static:
												case LITERAL_mutable:
												case LITERAL___global:
												case LITERAL___thread:
												case LITERAL___symbolic:
												case LITERAL___hidden:
												case LITERAL_thread_local:
												case LITERAL__STORAGE_CLASS_SPECIFIER__:
												{
													sc=storage_class_specifier();
													if (matchError) {break loop4;}
													astFactory.addASTChild(currentAST, returnAST);
													break;
												}
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL__TYPE_QUALIFIER__:
												{
													tq=cv_qualifier();
													if (matchError) {break loop4;}
													astFactory.addASTChild(currentAST, returnAST);
													break;
												}
												case LITERAL_typedef:
												{
													AST tmp46_AST = null;
													tmp46_AST = astFactory.create(LT(1));
													astFactory.addASTChild(currentAST, tmp46_AST);
													consume();
													break;
												}
												default:
												{
													break _loop51;
												}
												}
											} while (true);
											}
											enum_specifier();
											if (matchError) {break loop4;}
											astFactory.addASTChild(currentAST, returnAST);
											AST tmp47_AST = null;
											tmp47_AST = astFactory.create(LT(1));
											astFactory.addASTChild(currentAST, tmp47_AST);
											match(SEMICOLON);
											if (matchError) {break loop4;}
											template_explicit_specialization_AST = (AST)currentAST.root;
											template_explicit_specialization_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ENUM_FWD_DECLARATION,"CSM_ENUM_FWD_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_explicit_specialization_AST));
											currentAST.root = template_explicit_specialization_AST;
											currentAST.child = template_explicit_specialization_AST!=null &&template_explicit_specialization_AST.getFirstChild()!=null ?
												template_explicit_specialization_AST.getFirstChild() : template_explicit_specialization_AST;
											currentAST.advanceChildToEnd();
										}
										else {
											boolean synPredMatched57 = false;
											if (((_tokenSet_42.member(LA1_19)) && (_tokenSet_19.member(LA2_19)))) {
												int _m57 = mark();
												guessing++;
												guess57:  while (true) {
													{
													{
													switch ( LA(1)) {
													case LITERAL___extension__:
													{
														consume();
														break;
													}
													case SCOPE:
													case IDENT:
													case LITERAL_OPERATOR:
													case LITERAL_template:
													case LITERAL_inline:
													case LITERAL__inline:
													case LITERAL___inline__:
													case LITERAL___inline:
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL_final:
													case LITERAL_override:
													case LITERAL_constexpr:
													case LITERAL_decltype:
													case LITERAL___decltype:
													case LITERAL___forceinline:
													case LITERAL__TYPE_QUALIFIER__:
													{
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess57;}
													}
													}
													}
													{
													switch ( LA(1)) {
													case LITERAL_template:
													{
														consume();
														match(LESSTHAN);
														if (matchError) {break guess57;}
														match(GREATERTHAN);
														if (matchError) {break guess57;}
														break;
													}
													case SCOPE:
													case IDENT:
													case LITERAL_OPERATOR:
													case LITERAL_inline:
													case LITERAL__inline:
													case LITERAL___inline__:
													case LITERAL___inline:
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL_final:
													case LITERAL_override:
													case LITERAL_constexpr:
													case LITERAL_decltype:
													case LITERAL___decltype:
													case LITERAL___forceinline:
													case LITERAL__TYPE_QUALIFIER__:
													{
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess57;}
													}
													}
													}
													{
													_loop56:
													do {
														switch ( LA(1)) {
														case LITERAL_inline:
														case LITERAL__inline:
														case LITERAL___inline__:
														case LITERAL___inline:
														case LITERAL___forceinline:
														{
															literal_inline_g();
															if (matchError) {break guess57;}
															break;
														}
														case LITERAL_const:
														case LITERAL___const__:
														case LITERAL___const:
														case LITERAL_const_cast:
														case LITERAL_volatile:
														case LITERAL___volatile__:
														case LITERAL___volatile:
														case LITERAL__TYPE_QUALIFIER__:
														{
															cv_qualifier_g();
															if (matchError) {break guess57;}
															break;
														}
														case LITERAL_constexpr:
														{
															consume();
															break;
														}
														default:
														{
															break _loop56;
														}
														}
													} while (true);
													}
													scope_override_g();
													if (matchError) {break guess57;}
													match(LITERAL_OPERATOR);
													if (matchError) {break guess57;}
													}
												synPredMatched57 = true;
												break;} // guess57
												if (matchError) {
												   resetMatchError();
												}
												rewind(_m57);
												guessing--;
											}
											if ( synPredMatched57 ) {
												{
												{
												switch ( LA(1)) {
												case LITERAL___extension__:
												{
													consume();
													break;
												}
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL_template:
												case LITERAL_inline:
												case LITERAL__inline:
												case LITERAL___inline__:
												case LITERAL___inline:
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_constexpr:
												case LITERAL_decltype:
												case LITERAL___decltype:
												case LITERAL___forceinline:
												case LITERAL__TYPE_QUALIFIER__:
												{
													break;
												}
												default:
												{
													matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_42, tokenNames);if (matchError) {break loop4;}
												}
												}
												}
												{
												switch ( LA(1)) {
												case LITERAL_template:
												{
													AST tmp49_AST = null;
													tmp49_AST = astFactory.create(LT(1));
													astFactory.addASTChild(currentAST, tmp49_AST);
													consume();
													AST tmp50_AST = null;
													tmp50_AST = astFactory.create(LT(1));
													astFactory.addASTChild(currentAST, tmp50_AST);
													match(LESSTHAN);
													if (matchError) {break loop4;}
													AST tmp51_AST = null;
													tmp51_AST = astFactory.create(LT(1));
													astFactory.addASTChild(currentAST, tmp51_AST);
													match(GREATERTHAN);
													if (matchError) {break loop4;}
													break;
												}
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL_inline:
												case LITERAL__inline:
												case LITERAL___inline__:
												case LITERAL___inline:
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_constexpr:
												case LITERAL_decltype:
												case LITERAL___decltype:
												case LITERAL___forceinline:
												case LITERAL__TYPE_QUALIFIER__:
												{
													break;
												}
												default:
												{
													matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_43, tokenNames);if (matchError) {break loop4;}
												}
												}
												}
												{
												_loop62:
												do {
													switch ( LA(1)) {
													case LITERAL_inline:
													case LITERAL__inline:
													case LITERAL___inline__:
													case LITERAL___inline:
													case LITERAL___forceinline:
													{
														literal_inline();
														if (matchError) {break loop4;}
														astFactory.addASTChild(currentAST, returnAST);
														break;
													}
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL__TYPE_QUALIFIER__:
													{
														tq=cv_qualifier();
														if (matchError) {break loop4;}
														astFactory.addASTChild(currentAST, returnAST);
														break;
													}
													case LITERAL_constexpr:
													{
														AST tmp52_AST = null;
														tmp52_AST = astFactory.create(LT(1));
														astFactory.addASTChild(currentAST, tmp52_AST);
														consume();
														break;
													}
													default:
													{
														break _loop62;
													}
													}
												} while (true);
												}
												s=scope_override();
												if (matchError) {break loop4;}
												astFactory.addASTChild(currentAST, returnAST);
												b=conversion_function_decl_or_def();
												if (matchError) {break loop4;}
												astFactory.addASTChild(currentAST, returnAST);
												}
												template_explicit_specialization_AST = (AST)currentAST.root;
												if (b) template_explicit_specialization_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_USER_TYPE_CAST_DEFINITION_EXPLICIT_SPECIALIZATION,"CSM_USER_TYPE_CAST_DEFINITION_EXPLICIT_SPECIALIZATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_explicit_specialization_AST));
												else template_explicit_specialization_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPLATE_EXPLICIT_SPECIALIZATION,"CSM_TEMPLATE_EXPLICIT_SPECIALIZATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_explicit_specialization_AST));
												currentAST.root = template_explicit_specialization_AST;
												currentAST.child = template_explicit_specialization_AST!=null &&template_explicit_specialization_AST.getFirstChild()!=null ?
													template_explicit_specialization_AST.getFirstChild() : template_explicit_specialization_AST;
												currentAST.advanceChildToEnd();
											}
											else if ((_tokenSet_44.member(LA1_19)) && (_tokenSet_27.member(LA2_19))) {
												if(statementTrace >= 1)
															printf("template_explicit_specialization_0e[%d]: template " +
																"explicit-specialisation\n", LT(1).getLine());
														
												{
												switch ( LA(1)) {
												case LITERAL_template:
												{
													AST tmp53_AST = null;
													tmp53_AST = astFactory.create(LT(1));
													astFactory.addASTChild(currentAST, tmp53_AST);
													consume();
													AST tmp54_AST = null;
													tmp54_AST = astFactory.create(LT(1));
													astFactory.addASTChild(currentAST, tmp54_AST);
													match(LESSTHAN);
													if (matchError) {break loop4;}
													AST tmp55_AST = null;
													tmp55_AST = astFactory.create(LT(1));
													astFactory.addASTChild(currentAST, tmp55_AST);
													match(GREATERTHAN);
													if (matchError) {break loop4;}
													break;
												}
												case ELLIPSIS:
												case LPAREN:
												case LSQUARE:
												case STAR:
												case AND:
												case AMPERSAND:
												case TILDE:
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL_typeof:
												case LITERAL___typeof__:
												case LITERAL___typeof:
												case LITERAL_typedef:
												case LITERAL_enum:
												case LITERAL_namespace:
												case LITERAL_extern:
												case LITERAL_inline:
												case LITERAL__inline:
												case LITERAL___inline__:
												case LITERAL___inline:
												case LITERAL_virtual:
												case LITERAL_explicit:
												case LITERAL_friend:
												case LITERAL__stdcall:
												case LITERAL___stdcall:
												case LITERAL_typename:
												case LITERAL_auto:
												case LITERAL_register:
												case LITERAL_static:
												case LITERAL_mutable:
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL_char:
												case LITERAL_wchar_t:
												case LITERAL_bool:
												case LITERAL_short:
												case LITERAL_int:
												case LITERAL_long:
												case LITERAL_signed:
												case LITERAL___signed__:
												case LITERAL___signed:
												case LITERAL_unsigned:
												case LITERAL___unsigned__:
												case LITERAL_float:
												case LITERAL_double:
												case LITERAL_void:
												case LITERAL__declspec:
												case LITERAL___declspec:
												case LITERAL_class:
												case LITERAL_struct:
												case LITERAL_union:
												case LITERAL_this:
												case LITERAL_true:
												case LITERAL_false:
												case LITERAL_using:
												case LITERAL__cdecl:
												case LITERAL___cdecl:
												case LITERAL__near:
												case LITERAL___near:
												case LITERAL__far:
												case LITERAL___far:
												case LITERAL___interrupt:
												case LITERAL_pascal:
												case LITERAL__pascal:
												case LITERAL___pascal:
												case LITERAL__int64:
												case LITERAL___int64:
												case LITERAL___w64:
												case LITERAL___attribute__:
												case LITERAL___complex__:
												case LITERAL___global:
												case LITERAL__Bool:
												case LITERAL__Complex:
												case LITERAL___thread:
												case LITERAL___attribute:
												case LITERAL__Imaginary:
												case LITERAL_bit:
												case LITERAL___symbolic:
												case LITERAL___hidden:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_constexpr:
												case LITERAL_decltype:
												case LITERAL_thread_local:
												case LITERAL_static_assert:
												case LITERAL_alignas:
												case LITERAL_char16_t:
												case LITERAL_char32_t:
												case LITERAL___decltype:
												case LITERAL___complex:
												case LITERAL___forceinline:
												case LITERAL___clrcall:
												case LITERAL__Noreturn:
												case LITERAL___builtin_va_list:
												case LITERAL__BUILT_IN_TYPE__:
												case LITERAL__TYPE_QUALIFIER__:
												case LITERAL__STORAGE_CLASS_SPECIFIER__:
												{
													break;
												}
												default:
												{
													matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_44, tokenNames);if (matchError) {break loop4;}
												}
												}
												}
												declaration(declOther);
												if (matchError) {break loop4;}
												astFactory.addASTChild(currentAST, returnAST);
												template_explicit_specialization_AST = (AST)currentAST.root;
												template_explicit_specialization_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPLATE_EXPLICIT_SPECIALIZATION,"CSM_TEMPLATE_EXPLICIT_SPECIALIZATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_explicit_specialization_AST));
												currentAST.root = template_explicit_specialization_AST;
												currentAST.child = template_explicit_specialization_AST!=null &&template_explicit_specialization_AST.getFirstChild()!=null ?
													template_explicit_specialization_AST.getFirstChild() : template_explicit_specialization_AST;
												currentAST.advanceChildToEnd();
											}
											else {
												matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_45, tokenNames);if (matchError) {break loop4;}
											}
											}}}}}}}}
											}
											template_explicit_specialization_AST = (AST)currentAST.root;
										break;} // loop4
										if (matchError) {
											// when recover we'd like to perform any "build AST" actions
											if ((template_explicit_specialization_AST == null) && (currentAST.root != null)) {
											template_explicit_specialization_AST = (AST)currentAST.root;
											template_explicit_specialization_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPLATE_EXPLICIT_SPECIALIZATION,"CSM_TEMPLATE_EXPLICIT_SPECIALIZATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_explicit_specialization_AST));
											}
											reportError(matchException);
											recover(matchException,_tokenSet_1);
											resetMatchError();
									}
									returnAST = template_explicit_specialization_AST;
								}
								
	public final void declaration_specifiers(
		boolean allowTypedef, boolean noTypeId
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declaration_specifiers_AST = null;
		
		// Global flags to allow for nested declarations
		_td = false;        // For typedef
		_fd = false;        // For friend
		_sc = scInvalid;    // For StorageClass
		_tq = tqInvalid;    // For TypeQualifier
		_ts = tsInvalid;    // For TypeSpecifier
		_ds = dsInvalid;    // For DeclSpecifier
		
		
		// Locals
		boolean td = false; // For typedef
		boolean fd = false; // For friend
		StorageClass sc = scInvalid;        // auto,register,static,extern,mutable
		TypeQualifier tq = tqInvalid;       // const,const_cast,volatile,cdecl
		/*TypeSpecifier*/int ts = tsInvalid;// char,int,double, etc., class,struct,union
		DeclSpecifier ds = dsInvalid;       // inline,virtual,explicit
		
		
		loop5:  while (true) {
			{
			unknown_pretype_declaration_specifiers();
			if (matchError) {break loop5;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			int LA1_20 = LA(1);
			int LA2_20 = LA(2);
			
			boolean synPredMatched427 = false;
			if (((_tokenSet_46.member(LA1_20)) && (_tokenSet_47.member(LA2_20)))) {
				int _m427 = mark();
				guessing++;
				guess427:  while (true) {
					{
					match(LITERAL_static);
					if (matchError) {break guess427;}
					literal_ident_g();
					if (matchError) {break guess427;}
					{
					switch ( LA(1)) {
					case SEMICOLON:
					{
						consume();
						break;
					}
					case ASSIGNEQUAL:
					{
						consume();
						break;
					}
					case COMMA:
					{
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess427;}
					}
					}
					}
					}
				synPredMatched427 = true;
				break;} // guess427
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m427);
				guessing--;
			}
			if ( synPredMatched427 ) {
				sc=storage_class_specifier();
				if (matchError) {break loop5;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_22.member(LA1_20)) && (_tokenSet_48.member(LA2_20))) {
				{
				int LA1_21 = LA(1);
				int LA2_21 = LA(2);
				
				boolean synPredMatched435 = false;
				if (((_tokenSet_49.member(LA1_21)) && (_tokenSet_50.member(LA2_21)))) {
					int _m435 = mark();
					guessing++;
					guess435:  while (true) {
						{
						{
						_loop431:
						do {
							switch ( LA(1)) {
							case LITERAL_constexpr:
							{
								consume();
								break;
							}
							case LITERAL_const:
							case LITERAL___const__:
							case LITERAL___const:
							case LITERAL_const_cast:
							case LITERAL_volatile:
							case LITERAL___volatile__:
							case LITERAL___volatile:
							case LITERAL__TYPE_QUALIFIER__:
							{
								cv_qualifier_g();
								if (matchError) {break guess435;}
								break;
							}
							case LITERAL_static:
							{
								consume();
								break;
							}
							case LITERAL_inline:
							case LITERAL__inline:
							case LITERAL___inline__:
							case LITERAL___inline:
							case LITERAL___forceinline:
							{
								literal_inline_g();
								if (matchError) {break guess435;}
								break;
							}
							case LITERAL_friend:
							{
								consume();
								break;
							}
							default:
							{
								break _loop431;
							}
							}
						} while (true);
						}
						match(LITERAL_auto);
						if (matchError) {break guess435;}
						{
						switch ( LA(1)) {
						case LITERAL_const:
						case LITERAL___const__:
						case LITERAL___const:
						case LITERAL_volatile:
						case LITERAL___volatile__:
						case LITERAL___volatile:
						case LITERAL__TYPE_QUALIFIER__:
						{
							postfix_cv_qualifier_g();
							if (matchError) {break guess435;}
							break;
						}
						case LITERAL_constexpr:
						{
							consume();
							break;
						}
						case ELLIPSIS:
						case LPAREN:
						case LSQUARE:
						case STAR:
						case AND:
						case AMPERSAND:
						case TILDE:
						case SCOPE:
						case IDENT:
						case LITERAL_OPERATOR:
						case LITERAL_extern:
						case LITERAL_inline:
						case LITERAL__inline:
						case LITERAL___inline__:
						case LITERAL___inline:
						case LITERAL_virtual:
						case LITERAL__stdcall:
						case LITERAL___stdcall:
						case LITERAL_auto:
						case LITERAL_register:
						case LITERAL_static:
						case LITERAL_mutable:
						case LITERAL_this:
						case LITERAL_true:
						case LITERAL_false:
						case LITERAL__cdecl:
						case LITERAL___cdecl:
						case LITERAL__near:
						case LITERAL___near:
						case LITERAL__far:
						case LITERAL___far:
						case LITERAL___interrupt:
						case LITERAL_pascal:
						case LITERAL__pascal:
						case LITERAL___pascal:
						case LITERAL___attribute__:
						case LITERAL___global:
						case LITERAL___thread:
						case LITERAL___attribute:
						case LITERAL___symbolic:
						case LITERAL___hidden:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_decltype:
						case LITERAL_thread_local:
						case LITERAL___decltype:
						case LITERAL___forceinline:
						case LITERAL___clrcall:
						case LITERAL__STORAGE_CLASS_SPECIFIER__:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess435;}
						}
						}
						}
						{
						_loop434:
						do {
							switch ( LA(1)) {
							case LITERAL_inline:
							case LITERAL__inline:
							case LITERAL___inline__:
							case LITERAL___inline:
							case LITERAL___forceinline:
							{
								literal_inline_g();
								if (matchError) {break guess435;}
								break;
							}
							case LITERAL_extern:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL___global:
							case LITERAL___thread:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_thread_local:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								storage_class_specifier_g();
								if (matchError) {break guess435;}
								break;
							}
							case LITERAL_virtual:
							{
								consume();
								break;
							}
							default:
							{
								break _loop434;
							}
							}
						} while (true);
						}
						declarator_g(declOther, 0);
						if (matchError) {break guess435;}
						}
					synPredMatched435 = true;
					break;} // guess435
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m435);
					guessing--;
				}
				if ( synPredMatched435 ) {
					{
					_loop437:
					do {
						switch ( LA(1)) {
						case LITERAL_constexpr:
						{
							AST tmp56_AST = null;
							tmp56_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp56_AST);
							consume();
							break;
						}
						case LITERAL_const:
						case LITERAL___const__:
						case LITERAL___const:
						case LITERAL_const_cast:
						case LITERAL_volatile:
						case LITERAL___volatile__:
						case LITERAL___volatile:
						case LITERAL__TYPE_QUALIFIER__:
						{
							tq=cv_qualifier();
							if (matchError) {break loop5;}
							astFactory.addASTChild(currentAST, returnAST);
							break;
						}
						case LITERAL_static:
						{
							AST tmp57_AST = null;
							tmp57_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp57_AST);
							consume();
							break;
						}
						case LITERAL_inline:
						case LITERAL__inline:
						case LITERAL___inline__:
						case LITERAL___inline:
						case LITERAL___forceinline:
						{
							literal_inline();
							if (matchError) {break loop5;}
							astFactory.addASTChild(currentAST, returnAST);
							break;
						}
						case LITERAL_friend:
						{
							AST tmp58_AST = null;
							tmp58_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp58_AST);
							consume();
							break;
						}
						default:
						{
							break _loop437;
						}
						}
					} while (true);
					}
				}
				else if ((_tokenSet_22.member(LA1_21)) && (_tokenSet_48.member(LA2_21))) {
					{
					_loop441:
					do {
						int LA1_22 = LA(1);
						int LA2_22 = LA(2);
						
						switch ( LA1_22) {
						case LITERAL_const:
						case LITERAL___const__:
						case LITERAL___const:
						case LITERAL_const_cast:
						case LITERAL_volatile:
						case LITERAL___volatile__:
						case LITERAL___volatile:
						case LITERAL__TYPE_QUALIFIER__:
						{
							tq=cv_qualifier();
							if (matchError) {break loop5;}
							astFactory.addASTChild(currentAST, returnAST);
							break;
						}
						case LITERAL_inline:
						case LITERAL__inline:
						case LITERAL___inline__:
						case LITERAL___inline:
						case LITERAL___forceinline:
						{
							literal_inline();
							if (matchError) {break loop5;}
							astFactory.addASTChild(currentAST, returnAST);
							ds = dsINLINE;
							break;
						}
						case LITERAL__Noreturn:
						{
							AST tmp59_AST = null;
							tmp59_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp59_AST);
							consume();
							break;
						}
						case LITERAL_virtual:
						{
							AST tmp60_AST = null;
							tmp60_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp60_AST);
							consume();
							ds = dsVIRTUAL;
							break;
						}
						case LITERAL_explicit:
						{
							AST tmp61_AST = null;
							tmp61_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp61_AST);
							consume();
							ds = dsEXPLICIT;
							break;
						}
						case LITERAL_typedef:
						{
							if (statementTrace>=1) printf("declaration_specifiers_1[%d]: Typedef\n", LT(1).getLine());
							if (!(allowTypedef))
							{matchError=true;
							matchException = new SemanticException("allowTypedef");
							if (matchError) {break loop5;}}
							AST tmp62_AST = null;
							tmp62_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp62_AST);
							match(LITERAL_typedef);
							if (matchError) {break loop5;}
							{
							int LA1_23 = LA(1);
							int LA2_23 = LA(2);
							
							if ((LA1_23==LITERAL_typename) && (_tokenSet_22.member(LA2_23))) {
								AST tmp63_AST = null;
								tmp63_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp63_AST);
								consume();
							}
							else if ((_tokenSet_22.member(LA1_23)) && (_tokenSet_48.member(LA2_23))) {
							}
							else {
								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_22, tokenNames);if (matchError) {break loop5;}
							}
							
							}
							td=true;
							break;
						}
						case LITERAL_typename:
						{
							AST tmp64_AST = null;
							tmp64_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp64_AST);
							consume();
							break;
						}
						case LITERAL_friend:
						{
							AST tmp65_AST = null;
							tmp65_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp65_AST);
							consume();
							fd=true;
							break;
						}
						case LITERAL_constexpr:
						{
							AST tmp66_AST = null;
							tmp66_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp66_AST);
							consume();
							break;
						}
						case LITERAL__stdcall:
						case LITERAL___stdcall:
						{
							literal_stdcall();
							if (matchError) {break loop5;}
							astFactory.addASTChild(currentAST, returnAST);
							break;
						}
						case LITERAL___clrcall:
						{
							literal_clrcall();
							if (matchError) {break loop5;}
							astFactory.addASTChild(currentAST, returnAST);
							break;
						}
						default:
							if (((_tokenSet_51.member(LA1_22)) && (_tokenSet_22.member(LA2_22)))&&(isCPlusPlus11())) {
								sc=cpp11_storage_class_specifier();
								if (matchError) {break loop5;}
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if (((_tokenSet_46.member(LA1_22)) && (_tokenSet_22.member(LA2_22)))&&(!isCPlusPlus11())) {
								sc=storage_class_specifier();
								if (matchError) {break loop5;}
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((LA1_22==LITERAL_final) && (_tokenSet_22.member(LA2_22))) {
								AST tmp67_AST = null;
								tmp67_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp67_AST);
								consume();
							}
							else if ((_tokenSet_52.member(LA1_22)) && (LA2_22==LPAREN||LA2_22==LSQUARE)) {
								{
								type_attribute_specification();
								if (matchError) {break loop5;}
								}
							}
						else {
							break _loop441;
						}
						}
					} while (true);
					}
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_22, tokenNames);if (matchError) {break loop5;}
				}
				
				}
				{
				switch ( LA(1)) {
				case LSQUARE:
				case SCOPE:
				case IDENT:
				case LITERAL_enum:
				case LITERAL_auto:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_decltype:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				{
					{
					switch ( LA(1)) {
					case LSQUARE:
					case LITERAL__declspec:
					case LITERAL___declspec:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					case LITERAL_alignas:
					{
						type_attribute_specification();
						if (matchError) {break loop5;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case SCOPE:
					case IDENT:
					case LITERAL_enum:
					case LITERAL_auto:
					case LITERAL_char:
					case LITERAL_wchar_t:
					case LITERAL_bool:
					case LITERAL_short:
					case LITERAL_int:
					case LITERAL_long:
					case LITERAL_signed:
					case LITERAL___signed__:
					case LITERAL___signed:
					case LITERAL_unsigned:
					case LITERAL___unsigned__:
					case LITERAL_float:
					case LITERAL_double:
					case LITERAL_void:
					case LITERAL_class:
					case LITERAL_struct:
					case LITERAL_union:
					case LITERAL__int64:
					case LITERAL___int64:
					case LITERAL___w64:
					case LITERAL___complex__:
					case LITERAL__Bool:
					case LITERAL__Complex:
					case LITERAL__Imaginary:
					case LITERAL_bit:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_decltype:
					case LITERAL_char16_t:
					case LITERAL_char32_t:
					case LITERAL___decltype:
					case LITERAL___complex:
					case LITERAL___builtin_va_list:
					case LITERAL__BUILT_IN_TYPE__:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_53, tokenNames);if (matchError) {break loop5;}
					}
					}
					}
					ts=type_specifier(ds, noTypeId);
					if (matchError) {break loop5;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					_loop447:
					do {
						int LA1_24 = LA(1);
						int LA2_24 = LA(2);
						
						switch ( LA1_24) {
						case LITERAL_inline:
						case LITERAL__inline:
						case LITERAL___inline__:
						case LITERAL___inline:
						case LITERAL___forceinline:
						{
							{
							literal_inline();
							if (matchError) {break loop5;}
							astFactory.addASTChild(currentAST, returnAST);
							ds = dsINLINE;
							}
							break;
						}
						case LITERAL_extern:
						case LITERAL_auto:
						case LITERAL_register:
						case LITERAL_static:
						case LITERAL_mutable:
						case LITERAL___global:
						case LITERAL___thread:
						case LITERAL___symbolic:
						case LITERAL___hidden:
						case LITERAL_thread_local:
						case LITERAL__STORAGE_CLASS_SPECIFIER__:
						{
							{
							sc=storage_class_specifier();
							if (matchError) {break loop5;}
							astFactory.addASTChild(currentAST, returnAST);
							}
							break;
						}
						case LITERAL_virtual:
						{
							AST tmp68_AST = null;
							tmp68_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp68_AST);
							consume();
							ds = dsVIRTUAL;
							break;
						}
						case LITERAL_friend:
						{
							AST tmp69_AST = null;
							tmp69_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp69_AST);
							consume();
							fd=true;
							break;
						}
						case LITERAL_constexpr:
						{
							AST tmp70_AST = null;
							tmp70_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp70_AST);
							consume();
							break;
						}
						case LITERAL_const:
						case LITERAL___const__:
						case LITERAL___const:
						case LITERAL_const_cast:
						case LITERAL_volatile:
						case LITERAL___volatile__:
						case LITERAL___volatile:
						case LITERAL__TYPE_QUALIFIER__:
						{
							tq=cv_qualifier();
							if (matchError) {break loop5;}
							astFactory.addASTChild(currentAST, returnAST);
							break;
						}
						default:
							if ((_tokenSet_52.member(LA1_24)) && (LA2_24==LPAREN||LA2_24==LSQUARE)) {
								type_attribute_specification();
								if (matchError) {break loop5;}
								astFactory.addASTChild(currentAST, returnAST);
							}
						else {
							break _loop447;
						}
						}
					} while (true);
					}
					unknown_posttype_declaration_specifiers();
					if (matchError) {break loop5;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				{
					literal_typeof();
					if (matchError) {break loop5;}
					astFactory.addASTChild(currentAST, returnAST);
					AST tmp71_AST = null;
					tmp71_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp71_AST);
					match(LPAREN);
					if (matchError) {break loop5;}
					typeof_param();
					if (matchError) {break loop5;}
					astFactory.addASTChild(currentAST, returnAST);
					AST tmp72_AST = null;
					tmp72_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp72_AST);
					match(RPAREN);
					if (matchError) {break loop5;}
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_55, tokenNames);if (matchError) {break loop5;}
				}
				}
				}
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_22, tokenNames);if (matchError) {break loop5;}
			}
			
			}
			{
			if (((LA(1)==LITERAL_typedef))&&(allowTypedef)) {
				AST tmp73_AST = null;
				tmp73_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp73_AST);
				consume();
				td=true;
			}
			else if ((_tokenSet_56.member(LA(1)))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_47, tokenNames);if (matchError) {break loop5;}
			}
			
			}
			}
			declarationSpecifier(td, fd, sc, tq, ts, ds);
			declaration_specifiers_AST = (AST)currentAST.root;
		break;} // loop5
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_56);
			resetMatchError();
	}
	returnAST = declaration_specifiers_AST;
}

	public final void function_declarator(
		boolean definition, boolean allowParens, boolean symTabCheck
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_declarator_AST = null;
		
		loop6:  while (true) {
			int LA1_25 = LA(1);
			int LA2_25 = LA(2);
			
			boolean synPredMatched753 = false;
			if (((_tokenSet_57.member(LA1_25)) && (_tokenSet_58.member(LA2_25)))) {
				int _m753 = mark();
				guessing++;
				guess753:  while (true) {
					{
					ptr_operator_g();
					if (matchError) {break guess753;}
					}
				synPredMatched753 = true;
				break;} // guess753
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m753);
				guessing--;
			}
			if ( synPredMatched753 ) {
				ptr_operator();
				if (matchError) {break loop6;}
				astFactory.addASTChild(currentAST, returnAST);
				function_declarator(definition, allowParens, symTabCheck);
				if (matchError) {break loop6;}
				astFactory.addASTChild(currentAST, returnAST);
				function_declarator_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched755 = false;
				if ((((LA1_25==LPAREN) && (_tokenSet_24.member(LA2_25)))&&(_td || (_ts != tsInvalid) || allowParens))) {
					int _m755 = mark();
					guessing++;
					guess755:  while (true) {
						{
						match(LPAREN);
						if (matchError) {break guess755;}
						function_declarator_g(definition, allowParens, symTabCheck);
						if (matchError) {break guess755;}
						match(RPAREN);
						if (matchError) {break guess755;}
						is_post_declarator_token_g();
						if (matchError) {break guess755;}
						}
					synPredMatched755 = true;
					break;} // guess755
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m755);
					guessing--;
				}
				if ( synPredMatched755 ) {
					AST tmp74_AST = null;
					tmp74_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp74_AST);
					consume();
					function_declarator(definition, allowParens, symTabCheck);
					if (matchError) {break loop6;}
					astFactory.addASTChild(currentAST, returnAST);
					AST tmp75_AST = null;
					tmp75_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp75_AST);
					match(RPAREN);
					if (matchError) {break loop6;}
					function_declarator_AST = (AST)currentAST.root;
				}
				else if ((_tokenSet_59.member(LA1_25)) && (_tokenSet_60.member(LA2_25))) {
					function_direct_declarator(definition, symTabCheck);
					if (matchError) {break loop6;}
					astFactory.addASTChild(currentAST, returnAST);
					function_declarator_AST = (AST)currentAST.root;
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_24, tokenNames);if (matchError) {break loop6;}
				}
				}
			break;} // loop6
			if (matchError) {
				reportError(matchException);
				recover(matchException,_tokenSet_61);
				resetMatchError();
		}
		returnAST = function_declarator_AST;
	}
	
	protected final void literal_try() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_try_AST = null;
		
		loop7:  while (true) {
			switch ( LA(1)) {
			case LITERAL_try:
			{
				AST tmp76_AST = null;
				tmp76_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp76_AST);
				consume();
				literal_try_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___try:
			{
				AST tmp77_AST = null;
				tmp77_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp77_AST);
				consume();
				literal_try_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_62, tokenNames);if (matchError) {break loop7;}
			}
			}
		break;} // loop7
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_63);
			resetMatchError();
	}
	returnAST = literal_try_AST;
}

	public final void function_definition() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_definition_AST = null;
		
		loop8:  while (true) {
			declaration_specifiers(false, false);
			if (matchError) {break loop8;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			int LA1_26 = LA(1);
			int LA2_26 = LA(2);
			
			if ((_tokenSet_21.member(LA1_26)) && (LA2_26==LPAREN||LA2_26==LSQUARE)) {
				function_attribute_specification();
				if (matchError) {break loop8;}
			}
			else if ((_tokenSet_24.member(LA1_26)) && (_tokenSet_25.member(LA2_26))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_24, tokenNames);if (matchError) {break loop8;}
			}
			
			}
			function_declarator(true, false, false);
			if (matchError) {break loop8;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			int LA1_27 = LA(1);
			int LA2_27 = LA(2);
			
			if ((_tokenSet_64.member(LA1_27)) && (_tokenSet_1.member(LA2_27))) {
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				case LPAREN:
				case LSQUARE:
				case STAR:
				case AND:
				case AMPERSAND:
				case TILDE:
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_namespace:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL_using:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_static_assert:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					function_K_R_parameter_list();
					if (matchError) {break loop8;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case ASSIGNEQUAL:
				case LCURLY:
				case LITERAL_try:
				case LITERAL___try:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_64, tokenNames);if (matchError) {break loop8;}
				}
				}
				}
				in_parameter_list = false;
			}
			else if ((_tokenSet_65.member(LA1_27)) && (_tokenSet_1.member(LA2_27))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_64, tokenNames);if (matchError) {break loop8;}
			}
			
			}
			{
			switch ( LA(1)) {
			case ASSIGNEQUAL:
			{
				AST tmp78_AST = null;
				tmp78_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp78_AST);
				consume();
				{
				switch ( LA(1)) {
				case LITERAL_default:
				{
					AST tmp79_AST = null;
					tmp79_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp79_AST);
					consume();
					break;
				}
				case LITERAL_delete:
				{
					AST tmp80_AST = null;
					tmp80_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp80_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_14, tokenNames);if (matchError) {break loop8;}
				}
				}
				}
				break;
			}
			case LCURLY:
			{
				compound_statement();
				if (matchError) {break loop8;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL_try:
			case LITERAL___try:
			{
				function_try_block(false);
				if (matchError) {break loop8;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_65, tokenNames);if (matchError) {break loop8;}
			}
			}
			}
			function_definition_AST = (AST)currentAST.root;
		break;} // loop8
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = function_definition_AST;
}

	public final boolean  ctor_decl_spec() {
		boolean friend = false;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ctor_decl_spec_AST = null;
		
		loop9:  while (true) {
			{
			_loop793:
			do {
				switch ( LA(1)) {
				case LSQUARE:
				case LITERAL___attribute__:
				case LITERAL___attribute:
				{
					{
					function_attribute_specification();
					if (matchError) {break loop9;}
					astFactory.addASTChild(currentAST, returnAST);
					}
					break;
				}
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL___forceinline:
				{
					literal_inline();
					if (matchError) {break loop9;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LITERAL_explicit:
				{
					AST tmp81_AST = null;
					tmp81_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp81_AST);
					consume();
					break;
				}
				case LITERAL_friend:
				{
					AST tmp82_AST = null;
					tmp82_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp82_AST);
					consume();
					friend = true;
					break;
				}
				case LITERAL_constexpr:
				{
					AST tmp83_AST = null;
					tmp83_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp83_AST);
					consume();
					break;
				}
				default:
				{
					break _loop793;
				}
				}
			} while (true);
			}
			ctor_decl_spec_AST = (AST)currentAST.root;
		break;} // loop9
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_33);
			resetMatchError();
	}
	returnAST = ctor_decl_spec_AST;
	return friend;
}

	public final boolean  ctor_declarator(
		boolean definition
	) {
		boolean isCtor = false;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ctor_declarator_AST = null;
		
		loop10:  while (true) {
			int LA1_28 = LA(1);
			int LA2_28 = LA(2);
			
			boolean synPredMatched796 = false;
			if (((LA1_28==LPAREN) && (_tokenSet_33.member(LA2_28)))) {
				int _m796 = mark();
				guessing++;
				guess796:  while (true) {
					{
					match(LPAREN);
					if (matchError) {break guess796;}
					ctor_declarator_g(definition);
					if (matchError) {break guess796;}
					match(RPAREN);
					if (matchError) {break guess796;}
					is_post_declarator_token_g();
					if (matchError) {break guess796;}
					}
				synPredMatched796 = true;
				break;} // guess796
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m796);
				guessing--;
			}
			if ( synPredMatched796 ) {
				AST tmp84_AST = null;
				tmp84_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp84_AST);
				consume();
				isCtor=ctor_declarator(definition);
				if (matchError) {break loop10;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp85_AST = null;
				tmp85_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp85_AST);
				match(RPAREN);
				if (matchError) {break loop10;}
				ctor_declarator_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_33.member(LA1_28)) && (_tokenSet_34.member(LA2_28))) {
				isCtor=ctor_direct_declarator(definition);
				if (matchError) {break loop10;}
				astFactory.addASTChild(currentAST, returnAST);
				ctor_declarator_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_33, tokenNames);if (matchError) {break loop10;}
			}
			
		break;} // loop10
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_66);
			resetMatchError();
	}
	returnAST = ctor_declarator_AST;
	return isCtor;
}

	public final void ctor_definition() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ctor_definition_AST = null;
		
		loop11:  while (true) {
			ctor_head();
			if (matchError) {break loop11;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case COLON:
			case LCURLY:
			case LITERAL_try:
			case LITERAL___try:
			{
				ctor_body();
				if (matchError) {break loop11;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case ASSIGNEQUAL:
			{
				AST tmp86_AST = null;
				tmp86_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp86_AST);
				consume();
				{
				switch ( LA(1)) {
				case LITERAL_default:
				{
					AST tmp87_AST = null;
					tmp87_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp87_AST);
					consume();
					break;
				}
				case LITERAL_delete:
				{
					AST tmp88_AST = null;
					tmp88_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp88_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_14, tokenNames);if (matchError) {break loop11;}
				}
				}
				}
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_67, tokenNames);if (matchError) {break loop11;}
			}
			}
			}
			ctor_definition_AST = (AST)currentAST.root;
		break;} // loop11
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = ctor_definition_AST;
}

	public final void dtor_declarator(
		boolean definition
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dtor_declarator_AST = null;
		
		loop12:  while (true) {
			int LA1_29 = LA(1);
			int LA2_29 = LA(2);
			
			boolean synPredMatched829 = false;
			if (((LA1_29==LPAREN) && (_tokenSet_35.member(LA2_29)))) {
				int _m829 = mark();
				guessing++;
				guess829:  while (true) {
					{
					match(LPAREN);
					if (matchError) {break guess829;}
					dtor_declarator_g(definition);
					if (matchError) {break guess829;}
					match(RPAREN);
					if (matchError) {break guess829;}
					is_post_declarator_token_g();
					if (matchError) {break guess829;}
					}
				synPredMatched829 = true;
				break;} // guess829
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m829);
				guessing--;
			}
			if ( synPredMatched829 ) {
				AST tmp89_AST = null;
				tmp89_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp89_AST);
				consume();
				dtor_declarator(definition);
				if (matchError) {break loop12;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp90_AST = null;
				tmp90_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp90_AST);
				match(RPAREN);
				if (matchError) {break loop12;}
				dtor_declarator_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_35.member(LA1_29)) && (_tokenSet_36.member(LA2_29))) {
				dtor_direct_declarator(definition);
				if (matchError) {break loop12;}
				astFactory.addASTChild(currentAST, returnAST);
				dtor_declarator_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_35, tokenNames);if (matchError) {break loop12;}
			}
			
		break;} // loop12
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_68);
			resetMatchError();
	}
	returnAST = dtor_declarator_AST;
}

	public final void dtor_definition() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dtor_definition_AST = null;
		
		loop13:  while (true) {
			dtor_head(true);
			if (matchError) {break loop13;}
			astFactory.addASTChild(currentAST, returnAST);
			dtor_body();
			if (matchError) {break loop13;}
			astFactory.addASTChild(currentAST, returnAST);
			dtor_definition_AST = (AST)currentAST.root;
		break;} // loop13
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = dtor_definition_AST;
}

	public final void class_forward_declaration() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST class_forward_declaration_AST = null;
		String s;
		
		loop14:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_struct:
			{
				AST tmp91_AST = null;
				tmp91_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp91_AST);
				consume();
				break;
			}
			case LITERAL_union:
			{
				AST tmp92_AST = null;
				tmp92_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp92_AST);
				consume();
				break;
			}
			case LITERAL_class:
			{
				AST tmp93_AST = null;
				tmp93_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp93_AST);
				consume();
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_69, tokenNames);if (matchError) {break loop14;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_alignas:
			{
				type_attribute_specification();
				if (matchError) {break loop14;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case SEMICOLON:
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_70, tokenNames);if (matchError) {break loop14;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				s=scope_override();
				if (matchError) {break loop14;}
				astFactory.addASTChild(currentAST, returnAST);
				s=literal_ident();
				if (matchError) {break loop14;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case LESSTHAN:
				{
					AST tmp94_AST = null;
					tmp94_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp94_AST);
					consume();
					template_argument_list();
					if (matchError) {break loop14;}
					astFactory.addASTChild(currentAST, returnAST);
					AST tmp95_AST = null;
					tmp95_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp95_AST);
					match(GREATERTHAN);
					if (matchError) {break loop14;}
					break;
				}
				case COLON:
				case SEMICOLON:
				case LITERAL_explicit:
				case LITERAL_final:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_71, tokenNames);if (matchError) {break loop14;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case LITERAL_final:
				{
					AST tmp96_AST = null;
					tmp96_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp96_AST);
					consume();
					break;
				}
				case LITERAL_explicit:
				{
					AST tmp97_AST = null;
					tmp97_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp97_AST);
					consume();
					break;
				}
				case COLON:
				case SEMICOLON:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_72, tokenNames);if (matchError) {break loop14;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case COLON:
				{
					base_clause();
					if (matchError) {break loop14;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case SEMICOLON:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_73, tokenNames);if (matchError) {break loop14;}
				}
				}
				}
				break;
			}
			case SEMICOLON:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_74, tokenNames);if (matchError) {break loop14;}
			}
			}
			}
			AST tmp98_AST = null;
			tmp98_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp98_AST);
			match(SEMICOLON);
			if (matchError) {break loop14;}
			class_forward_declaration_AST = (AST)currentAST.root;
		break;} // loop14
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = class_forward_declaration_AST;
}

	public final CPPParser.StorageClass  storage_class_specifier() {
		CPPParser.StorageClass sc = scInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST storage_class_specifier_AST = null;
		
		loop15:  while (true) {
			switch ( LA(1)) {
			case LITERAL_auto:
			{
				AST tmp99_AST = null;
				tmp99_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp99_AST);
				consume();
				sc = scAUTO;
				storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_extern:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL___global:
			case LITERAL___thread:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_thread_local:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				sc=common_storage_class_specifier();
				if (matchError) {break loop15;}
				astFactory.addASTChild(currentAST, returnAST);
				storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_46, tokenNames);if (matchError) {break loop15;}
			}
			}
		break;} // loop15
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_75);
			resetMatchError();
	}
	returnAST = storage_class_specifier_AST;
	return sc;
}

	public final CPPParser.TypeQualifier  cv_qualifier() {
		CPPParser.TypeQualifier tq = tqInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cv_qualifier_AST = null;
		
		loop16:  while (true) {
			switch ( LA(1)) {
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			{
				{
				switch ( LA(1)) {
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				{
					literal_const();
					if (matchError) {break loop16;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LITERAL_const_cast:
				{
					AST tmp100_AST = null;
					tmp100_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp100_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_76, tokenNames);if (matchError) {break loop16;}
				}
				}
				}
				tq = tqCONST;
				cv_qualifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			{
				literal_volatile();
				if (matchError) {break loop16;}
				astFactory.addASTChild(currentAST, returnAST);
				tq = tqVOLATILE;
				cv_qualifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__TYPE_QUALIFIER__:
			{
				AST tmp101_AST = null;
				tmp101_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp101_AST);
				consume();
				tq = tqOTHER;
				cv_qualifier_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_77, tokenNames);if (matchError) {break loop16;}
			}
			}
		break;} // loop16
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_78);
			resetMatchError();
	}
	returnAST = cv_qualifier_AST;
	return tq;
}

	public final void enum_def_head() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST enum_def_head_AST = null;
		
		loop17:  while (true) {
			enum_head();
			if (matchError) {break loop17;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp102_AST = null;
			tmp102_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp102_AST);
			match(LCURLY);
			if (matchError) {break loop17;}
			enum_def_head_AST = (AST)currentAST.root;
		break;} // loop17
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = enum_def_head_AST;
}

	public final void enum_specifier() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST enum_specifier_AST = null;
		String qid;
		
		loop18:  while (true) {
			AST tmp103_AST = null;
			tmp103_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp103_AST);
			match(LITERAL_enum);
			if (matchError) {break loop18;}
			{
			int LA1_30 = LA(1);
			int LA2_30 = LA(2);
			
			if ((_tokenSet_52.member(LA1_30)) && (LA2_30==LPAREN||LA2_30==LSQUARE)) {
				type_attribute_specification();
				if (matchError) {break loop18;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_79.member(LA1_30)) && (_tokenSet_80.member(LA2_30))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_79, tokenNames);if (matchError) {break loop18;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LITERAL_class:
			case LITERAL_struct:
			{
				{
				switch ( LA(1)) {
				case LITERAL_class:
				{
					AST tmp104_AST = null;
					tmp104_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp104_AST);
					consume();
					break;
				}
				case LITERAL_struct:
				{
					AST tmp105_AST = null;
					tmp105_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp105_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_81, tokenNames);if (matchError) {break loop18;}
				}
				}
				}
				action.enum_strongly_typed(LT(1));
				break;
			}
			case COLON:
			case LSQUARE:
			case LCURLY:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_alignas:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_79, tokenNames);if (matchError) {break loop18;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case COLON:
			case LSQUARE:
			case LCURLY:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_alignas:
			{
				{
				switch ( LA(1)) {
				case COLON:
				{
					strongly_typed_enum_type_specifier();
					if (matchError) {break loop18;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LSQUARE:
				case LCURLY:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL___attribute__:
				case LITERAL___attribute:
				case LITERAL_alignas:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_82, tokenNames);if (matchError) {break loop18;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case LSQUARE:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL___attribute__:
				case LITERAL___attribute:
				case LITERAL_alignas:
				{
					type_attribute_specification();
					if (matchError) {break loop18;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_83, tokenNames);if (matchError) {break loop18;}
				}
				}
				}
				AST tmp106_AST = null;
				tmp106_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp106_AST);
				match(LCURLY);
				if (matchError) {break loop18;}
				enumerator_list();
				if (matchError) {break loop18;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
					break;
				}
				case RCURLY:
				{
					AST tmp108_AST = null;
					tmp108_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp108_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_84, tokenNames);if (matchError) {break loop18;}
				}
				}
				}
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				qid=enum_qualified_id();
				if (matchError) {break loop18;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				{
				int LA1_31 = LA(1);
				int LA2_31 = LA(2);
				
				if ((LA1_31==COLON) && (_tokenSet_85.member(LA2_31))) {
					strongly_typed_enum_type_specifier();
					if (matchError) {break loop18;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((_tokenSet_86.member(LA1_31)) && (_tokenSet_1.member(LA2_31))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_86, tokenNames);if (matchError) {break loop18;}
				}
				
				}
				{
				int LA1_32 = LA(1);
				int LA2_32 = LA(2);
				
				if ((_tokenSet_83.member(LA1_32)) && (_tokenSet_87.member(LA2_32))) {
					action.enum_body(LT(1));
					{
					switch ( LA(1)) {
					case LSQUARE:
					case LITERAL__declspec:
					case LITERAL___declspec:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					case LITERAL_alignas:
					{
						type_attribute_specification();
						if (matchError) {break loop18;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LCURLY:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_83, tokenNames);if (matchError) {break loop18;}
					}
					}
					}
					AST tmp109_AST = null;
					tmp109_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp109_AST);
					match(LCURLY);
					if (matchError) {break loop18;}
					enumerator_list();
					if (matchError) {break loop18;}
					astFactory.addASTChild(currentAST, returnAST);
					action.end_enum_body(LT(1));
					{
					switch ( LA(1)) {
					case EOF:
					{
						consume();
						reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
						break;
					}
					case RCURLY:
					{
						AST tmp111_AST = null;
						tmp111_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp111_AST);
						consume();
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_84, tokenNames);if (matchError) {break loop18;}
					}
					}
					}
				}
				else if ((_tokenSet_88.member(LA1_32)) && (_tokenSet_1.member(LA2_32))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_86, tokenNames);if (matchError) {break loop18;}
				}
				
				}
				}
				endEnumDefinition();
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_89, tokenNames);if (matchError) {break loop18;}
			}
			}
			}
			enum_specifier_AST = (AST)currentAST.root;
		break;} // loop18
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_88);
			resetMatchError();
	}
	returnAST = enum_specifier_AST;
}

	public final void init_declarator_list(
		int kind
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST init_declarator_list_AST = null;
		
		loop19:  while (true) {
			init_declarator(kind);
			if (matchError) {break loop19;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			_loop578:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp112_AST = null;
					tmp112_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp112_AST);
					consume();
					init_declarator(declNotFirst);
					if (matchError) {break loop19;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop578;
				}
				
			} while (true);
			}
			init_declarator_list_AST = (AST)currentAST.root;
		break;} // loop19
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_6);
			resetMatchError();
	}
	returnAST = init_declarator_list_AST;
}

	public final String  qualified_id() {
		String q = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qualified_id_AST = null;
		
			    String so, id;
			    StringBuilder qitem = new StringBuilder();
			
		
		loop20:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			{
				literal_cdecl();
				if (matchError) {break loop20;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_90, tokenNames);if (matchError) {break loop20;}
			}
			}
			}
			so=scope_override();
			if (matchError) {break loop20;}
			astFactory.addASTChild(currentAST, returnAST);
			qitem.append(so);
			{
			int LA1_33 = LA(1);
			int LA2_33 = LA(2);
			
			switch ( LA1_33) {
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				id=literal_ident();
				if (matchError) {break loop20;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				int LA1_34 = LA(1);
				int LA2_34 = LA(2);
				
				if ((LA1_34==LESSTHAN) && (_tokenSet_91.member(LA2_34))) {
					AST tmp113_AST = null;
					tmp113_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp113_AST);
					consume();
					template_argument_list();
					if (matchError) {break loop20;}
					astFactory.addASTChild(currentAST, returnAST);
					AST tmp114_AST = null;
					tmp114_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp114_AST);
					match(GREATERTHAN);
					if (matchError) {break loop20;}
				}
				else if ((_tokenSet_92.member(LA1_34)) && (_tokenSet_1.member(LA2_34))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_92, tokenNames);if (matchError) {break loop20;}
				}
				
				}
				qitem.append(id);
				break;
			}
			case LITERAL_this:
			{
				AST tmp115_AST = null;
				tmp115_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp115_AST);
				consume();
				break;
			}
			case LITERAL_true:
			case LITERAL_false:
			{
				{
				switch ( LA(1)) {
				case LITERAL_true:
				{
					AST tmp116_AST = null;
					tmp116_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp116_AST);
					consume();
					break;
				}
				case LITERAL_false:
				{
					AST tmp117_AST = null;
					tmp117_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp117_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_93, tokenNames);if (matchError) {break loop20;}
				}
				}
				}
				break;
			}
			default:
				if ((LA1_33==LITERAL_OPERATOR) && (_tokenSet_94.member(LA2_33))) {
					AST tmp118_AST = null;
					tmp118_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp118_AST);
					consume();
					optor();
					if (matchError) {break loop20;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					int LA1_35 = LA(1);
					int LA2_35 = LA(2);
					
					if ((LA1_35==LESSTHAN) && (_tokenSet_91.member(LA2_35))) {
						AST tmp119_AST = null;
						tmp119_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp119_AST);
						consume();
						template_argument_list();
						if (matchError) {break loop20;}
						astFactory.addASTChild(currentAST, returnAST);
						AST tmp120_AST = null;
						tmp120_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp120_AST);
						match(GREATERTHAN);
						if (matchError) {break loop20;}
					}
					else if ((_tokenSet_92.member(LA1_35)) && (_tokenSet_1.member(LA2_35))) {
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_92, tokenNames);if (matchError) {break loop20;}
					}
					
					}
					qitem.append("operator"); qitem.append("NYI");
				}
				else if ((LA1_33==LITERAL_OPERATOR) && (LA2_33==STRING_LITERAL)) {
					AST tmp121_AST = null;
					tmp121_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp121_AST);
					consume();
					AST tmp122_AST = null;
					tmp122_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp122_AST);
					consume();
					id=literal_ident();
					if (matchError) {break loop20;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					int LA1_36 = LA(1);
					int LA2_36 = LA(2);
					
					if ((LA1_36==LESSTHAN) && (_tokenSet_91.member(LA2_36))) {
						AST tmp123_AST = null;
						tmp123_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp123_AST);
						consume();
						template_argument_list();
						if (matchError) {break loop20;}
						astFactory.addASTChild(currentAST, returnAST);
						AST tmp124_AST = null;
						tmp124_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp124_AST);
						match(GREATERTHAN);
						if (matchError) {break loop20;}
					}
					else if ((_tokenSet_92.member(LA1_36)) && (_tokenSet_1.member(LA2_36))) {
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_92, tokenNames);if (matchError) {break loop20;}
					}
					
					}
					qitem.append("operator"); qitem.append("NYI");
				}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_95, tokenNames);if (matchError) {break loop20;}
			}
			}
			}
			qualified_id_AST = (AST)currentAST.root;
			q = qitem.toString(); qualified_id_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_QUALIFIED_ID,q, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(qualified_id_AST));
			currentAST.root = qualified_id_AST;
			currentAST.child = qualified_id_AST!=null &&qualified_id_AST.getFirstChild()!=null ?
				qualified_id_AST.getFirstChild() : qualified_id_AST;
			currentAST.advanceChildToEnd();
			qualified_id_AST = (AST)currentAST.root;
		break;} // loop20
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((qualified_id_AST == null) && (currentAST.root != null)) {
			qualified_id_AST = (AST)currentAST.root;
			q = qitem.toString(); qualified_id_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_QUALIFIED_ID,q, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(qualified_id_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_92);
			resetMatchError();
	}
	returnAST = qualified_id_AST;
	return q;
}

	public final /*TypeSpecifier*/int  type_specifier(
		DeclSpecifier ds, boolean noTypeId
	) {
		/*TypeSpecifier*/int ts = tsInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST type_specifier_AST = null;
		
		loop21:  while (true) {
			switch ( LA(1)) {
			case SCOPE:
			case IDENT:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___complex__:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			{
				ts=simple_type_specifier(noTypeId);
				if (matchError) {break loop21;}
				astFactory.addASTChild(currentAST, returnAST);
				type_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			{
				ts=class_specifier(ds);
				if (matchError) {break loop21;}
				astFactory.addASTChild(currentAST, returnAST);
				type_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_enum:
			{
				enum_specifier();
				if (matchError) {break loop21;}
				astFactory.addASTChild(currentAST, returnAST);
				ts=tsENUM;
				type_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_auto:
			{
				AST tmp125_AST = null;
				tmp125_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp125_AST);
				consume();
				ts=tsAUTO;
				type_specifier_AST = (AST)currentAST.root;
				type_specifier_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TYPE_BUILTIN,"CSM_TYPE_BUILTIN", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(type_specifier_AST));
				currentAST.root = type_specifier_AST;
				currentAST.child = type_specifier_AST!=null &&type_specifier_AST.getFirstChild()!=null ?
					type_specifier_AST.getFirstChild() : type_specifier_AST;
				currentAST.advanceChildToEnd();
				type_specifier_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_96, tokenNames);if (matchError) {break loop21;}
			}
			}
		break;} // loop21
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((type_specifier_AST == null) && (currentAST.root != null)) {
			type_specifier_AST = (AST)currentAST.root;
			type_specifier_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TYPE_BUILTIN,"CSM_TYPE_BUILTIN", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(type_specifier_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_88);
			resetMatchError();
	}
	returnAST = type_specifier_AST;
	return ts;
}

	protected final void literal_inline() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_inline_AST = null;
		
		loop22:  while (true) {
			switch ( LA(1)) {
			case LITERAL_inline:
			{
				AST tmp126_AST = null;
				tmp126_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp126_AST);
				consume();
				literal_inline_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__inline:
			{
				AST tmp127_AST = null;
				tmp127_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp127_AST);
				consume();
				literal_inline_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___inline:
			{
				AST tmp128_AST = null;
				tmp128_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp128_AST);
				consume();
				literal_inline_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___inline__:
			{
				AST tmp129_AST = null;
				tmp129_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp129_AST);
				consume();
				literal_inline_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___forceinline:
			{
				AST tmp130_AST = null;
				tmp130_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp130_AST);
				consume();
				literal_inline_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_54, tokenNames);if (matchError) {break loop22;}
			}
			}
		break;} // loop22
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_97);
			resetMatchError();
	}
	returnAST = literal_inline_AST;
}

	public final String  scope_override() {
		String s = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST scope_override_AST = null;
		
		StringBuilder sitem = new StringBuilder(); 
		String sp = "";
		
		
		loop23:  while (true) {
			{
			switch ( LA(1)) {
			case SCOPE:
			{
				AST tmp131_AST = null;
				tmp131_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp131_AST);
				consume();
				sitem.append("::");
				{
				switch ( LA(1)) {
				case LITERAL_template:
				{
					AST tmp132_AST = null;
					tmp132_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp132_AST);
					consume();
					break;
				}
				case STAR:
				case TILDE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_decltype:
				case LITERAL___decltype:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_98, tokenNames);if (matchError) {break loop23;}
				}
				}
				}
				break;
			}
			case STAR:
			case TILDE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_99, tokenNames);if (matchError) {break loop23;}
			}
			}
			}
			{
			int LA1_37 = LA(1);
			int LA2_37 = LA(2);
			
			boolean synPredMatched1322 = false;
			if (((_tokenSet_100.member(LA1_37)) && (_tokenSet_101.member(LA2_37)))) {
				int _m1322 = mark();
				guessing++;
				guess1322:  while (true) {
					{
					{
					switch ( LA(1)) {
					case IDENT:
					case LITERAL_final:
					case LITERAL_override:
					{
						{
						literal_ident_g();
						if (matchError) {break guess1322;}
						{
						switch ( LA(1)) {
						case LESSTHAN:
						{
							consume();
							{
							if ((_tokenSet_102.member(LA(1)))) {
								lazy_template_argument_list_g();
								if (matchError) {break guess1322;}
							}
							else if ((LA(1)==GREATERTHAN)) {
							}
							else {
								matchError=true;if (matchError) {break guess1322;}
							}
							
							}
							match(GREATERTHAN);
							if (matchError) {break guess1322;}
							break;
						}
						case SCOPE:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess1322;}
						}
						}
						}
						}
						break;
					}
					case LITERAL_decltype:
					case LITERAL___decltype:
					{
						lazy_type_decltype_g(0);
						if (matchError) {break guess1322;}
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess1322;}
					}
					}
					}
					match(SCOPE);
					if (matchError) {break guess1322;}
					}
				synPredMatched1322 = true;
				break;} // guess1322
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1322);
				guessing--;
			}
			if ( synPredMatched1322 ) {
				sp=scope_override_part(0);
				if (matchError) {break loop23;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_103.member(LA1_37)) && (_tokenSet_104.member(LA2_37))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_103, tokenNames);if (matchError) {break loop23;}
			}
			
			}
			
			sitem.append(sp);
			s = sitem.toString();
			
			scope_override_AST = (AST)currentAST.root;
		break;} // loop23
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_103);
			resetMatchError();
	}
	returnAST = scope_override_AST;
	return s;
}

	public final boolean  conversion_function_decl_or_def() {
		boolean definition = false;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST conversion_function_decl_or_def_AST = null;
		
		loop24:  while (true) {
			conversion_function_head();
			if (matchError) {break loop24;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case LCURLY:
			{
				compound_statement();
				if (matchError) {break loop24;}
				astFactory.addASTChild(currentAST, returnAST);
				definition = true;
				break;
			}
			case ASSIGNEQUAL:
			case SEMICOLON:
			{
				{
				switch ( LA(1)) {
				case ASSIGNEQUAL:
				{
					definition=conversion_function_special_definition();
					if (matchError) {break loop24;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case SEMICOLON:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_105, tokenNames);if (matchError) {break loop24;}
				}
				}
				}
				match(SEMICOLON);
				if (matchError) {break loop24;}
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_106, tokenNames);if (matchError) {break loop24;}
			}
			}
			}
			conversion_function_decl_or_def_AST = (AST)currentAST.root;
		break;} // loop24
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = conversion_function_decl_or_def_AST;
	return definition;
}

	public final void declaration(
		int kind
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declaration_AST = null;
		
		loop25:  while (true) {
			int LA1_38 = LA(1);
			int LA2_38 = LA(2);
			
			switch ( LA1_38) {
			case LITERAL_namespace:
			{
				namespace_alias_definition();
				if (matchError) {break loop25;}
				astFactory.addASTChild(currentAST, returnAST);
				declaration_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_static_assert:
			{
				static_assert_declaration();
				if (matchError) {break loop25;}
				astFactory.addASTChild(currentAST, returnAST);
				declaration_AST = (AST)currentAST.root;
				break;
			}
			default:
				boolean synPredMatched404 = false;
				if (((LA1_38==LITERAL_extern) && (LA2_38==STRING_LITERAL))) {
					int _m404 = mark();
					guessing++;
					guess404:  while (true) {
						{
						match(LITERAL_extern);
						if (matchError) {break guess404;}
						match(STRING_LITERAL);
						if (matchError) {break guess404;}
						}
					synPredMatched404 = true;
					break;} // guess404
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m404);
					guessing--;
				}
				if ( synPredMatched404 ) {
					linkage_specification();
					if (matchError) {break loop25;}
					astFactory.addASTChild(currentAST, returnAST);
					declaration_AST = (AST)currentAST.root;
				}
				else {
					boolean synPredMatched406 = false;
					if ((((LA1_38==LITERAL_extern) && (_tokenSet_107.member(LA2_38)))&&(kind == declExternFunction))) {
						int _m406 = mark();
						guessing++;
						guess406:  while (true) {
							{
							match(LITERAL_extern);
							if (matchError) {break guess406;}
							}
						synPredMatched406 = true;
						break;} // guess406
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m406);
						guessing--;
					}
					if ( synPredMatched406 ) {
						beginDeclaration();
						AST tmp134_AST = null;
						tmp134_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp134_AST);
						match(LITERAL_extern);
						if (matchError) {break loop25;}
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						case COMMA:
						case LPAREN:
						case LSQUARE:
						case STAR:
						case AND:
						case AMPERSAND:
						case TILDE:
						case SCOPE:
						case IDENT:
						case LITERAL_OPERATOR:
						case LITERAL__stdcall:
						case LITERAL___stdcall:
						case LITERAL_this:
						case LITERAL_true:
						case LITERAL_false:
						case LITERAL__cdecl:
						case LITERAL___cdecl:
						case LITERAL__near:
						case LITERAL___near:
						case LITERAL__far:
						case LITERAL___far:
						case LITERAL___interrupt:
						case LITERAL_pascal:
						case LITERAL__pascal:
						case LITERAL___pascal:
						case LITERAL___attribute__:
						case LITERAL___attribute:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_decltype:
						case LITERAL___decltype:
						case LITERAL___clrcall:
						{
							{
							switch ( LA(1)) {
							case COMMA:
							{
								consume();
								break;
							}
							case ELLIPSIS:
							case LPAREN:
							case LSQUARE:
							case STAR:
							case AND:
							case AMPERSAND:
							case TILDE:
							case SCOPE:
							case IDENT:
							case LITERAL_OPERATOR:
							case LITERAL__stdcall:
							case LITERAL___stdcall:
							case LITERAL_this:
							case LITERAL_true:
							case LITERAL_false:
							case LITERAL__cdecl:
							case LITERAL___cdecl:
							case LITERAL__near:
							case LITERAL___near:
							case LITERAL__far:
							case LITERAL___far:
							case LITERAL___interrupt:
							case LITERAL_pascal:
							case LITERAL__pascal:
							case LITERAL___pascal:
							case LITERAL___attribute__:
							case LITERAL___attribute:
							case LITERAL_final:
							case LITERAL_override:
							case LITERAL_decltype:
							case LITERAL___decltype:
							case LITERAL___clrcall:
							{
								break;
							}
							default:
							{
								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_108, tokenNames);if (matchError) {break loop25;}
							}
							}
							}
							init_declarator_list(kind);
							if (matchError) {break loop25;}
							astFactory.addASTChild(currentAST, returnAST);
							break;
						}
						case EOF:
						case SEMICOLON:
						{
							break;
						}
						default:
						{
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_107, tokenNames);if (matchError) {break loop25;}
						}
						}
						}
						{
						switch ( LA(1)) {
						case EOF:
						{
							consume();
							reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
							break;
						}
						case SEMICOLON:
						{
							AST tmp137_AST = null;
							tmp137_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp137_AST);
							consume();
							break;
						}
						default:
						{
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop25;}
						}
						}
						}
						endDeclaration();
						declaration_AST = (AST)currentAST.root;
					}
					else {
						boolean synPredMatched411 = false;
						if ((((_tokenSet_109.member(LA1_38)) && (_tokenSet_110.member(LA2_38)))&&(kind == declSimpleFunction))) {
							int _m411 = mark();
							guessing++;
							guess411:  while (true) {
								{
								literal_ident_g();
								if (matchError) {break guess411;}
								match(LPAREN);
								if (matchError) {break guess411;}
								}
							synPredMatched411 = true;
							break;} // guess411
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m411);
							guessing--;
						}
						if ( synPredMatched411 ) {
							beginDeclaration();
							init_declarator_list(kind);
							if (matchError) {break loop25;}
							astFactory.addASTChild(currentAST, returnAST);
							{
							switch ( LA(1)) {
							case EOF:
							{
								consume();
								reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
								break;
							}
							case SEMICOLON:
							{
								AST tmp139_AST = null;
								tmp139_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp139_AST);
								consume();
								break;
							}
							default:
							{
								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop25;}
							}
							}
							}
							endDeclaration();
							declaration_AST = (AST)currentAST.root;
						}
						else if ((_tokenSet_22.member(LA1_38)) && (_tokenSet_111.member(LA2_38))) {
							beginDeclaration();
							action.decl_specifiers(LT(1));
							declaration_specifiers(true, false);
							if (matchError) {break loop25;}
							astFactory.addASTChild(currentAST, returnAST);
							action.end_decl_specifiers(LT(0));
							{
							switch ( LA(1)) {
							case ELLIPSIS:
							case COMMA:
							case LPAREN:
							case LSQUARE:
							case STAR:
							case AND:
							case AMPERSAND:
							case TILDE:
							case SCOPE:
							case IDENT:
							case LITERAL_OPERATOR:
							case LITERAL__stdcall:
							case LITERAL___stdcall:
							case LITERAL_this:
							case LITERAL_true:
							case LITERAL_false:
							case LITERAL__cdecl:
							case LITERAL___cdecl:
							case LITERAL__near:
							case LITERAL___near:
							case LITERAL__far:
							case LITERAL___far:
							case LITERAL___interrupt:
							case LITERAL_pascal:
							case LITERAL__pascal:
							case LITERAL___pascal:
							case LITERAL___attribute__:
							case LITERAL___attribute:
							case LITERAL_final:
							case LITERAL_override:
							case LITERAL_decltype:
							case LITERAL___decltype:
							case LITERAL___clrcall:
							{
								{
								switch ( LA(1)) {
								case COMMA:
								{
									consume();
									break;
								}
								case ELLIPSIS:
								case LPAREN:
								case LSQUARE:
								case STAR:
								case AND:
								case AMPERSAND:
								case TILDE:
								case SCOPE:
								case IDENT:
								case LITERAL_OPERATOR:
								case LITERAL__stdcall:
								case LITERAL___stdcall:
								case LITERAL_this:
								case LITERAL_true:
								case LITERAL_false:
								case LITERAL__cdecl:
								case LITERAL___cdecl:
								case LITERAL__near:
								case LITERAL___near:
								case LITERAL__far:
								case LITERAL___far:
								case LITERAL___interrupt:
								case LITERAL_pascal:
								case LITERAL__pascal:
								case LITERAL___pascal:
								case LITERAL___attribute__:
								case LITERAL___attribute:
								case LITERAL_final:
								case LITERAL_override:
								case LITERAL_decltype:
								case LITERAL___decltype:
								case LITERAL___clrcall:
								{
									break;
								}
								default:
								{
									matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_108, tokenNames);if (matchError) {break loop25;}
								}
								}
								}
								init_declarator_list(kind);
								if (matchError) {break loop25;}
								astFactory.addASTChild(currentAST, returnAST);
								break;
							}
							case EOF:
							case SEMICOLON:
							{
								break;
							}
							default:
							{
								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_107, tokenNames);if (matchError) {break loop25;}
							}
							}
							}
							{
							switch ( LA(1)) {
							case EOF:
							{
								consume();
								reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
								break;
							}
							case SEMICOLON:
							{
								AST tmp142_AST = null;
								tmp142_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp142_AST);
								consume();
								break;
							}
							default:
							{
								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop25;}
							}
							}
							}
							endDeclaration();
							declaration_AST = (AST)currentAST.root;
						}
						else {
							boolean synPredMatched417 = false;
							if (((LA1_38==LITERAL_using) && (_tokenSet_0.member(LA2_38)))) {
								int _m417 = mark();
								guessing++;
								guess417:  while (true) {
									{
									match(LITERAL_using);
									if (matchError) {break guess417;}
									literal_ident_g();
									if (matchError) {break guess417;}
									match(ASSIGNEQUAL);
									if (matchError) {break guess417;}
									}
								synPredMatched417 = true;
								break;} // guess417
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m417);
								guessing--;
							}
							if ( synPredMatched417 ) {
								alias_declaration();
								if (matchError) {break loop25;}
								astFactory.addASTChild(currentAST, returnAST);
								declaration_AST = (AST)currentAST.root;
							}
							else if ((LA1_38==LITERAL_using) && (_tokenSet_112.member(LA2_38))) {
								using_declaration();
								if (matchError) {break loop25;}
								astFactory.addASTChild(currentAST, returnAST);
								declaration_AST = (AST)currentAST.root;
							}
						else {
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_26, tokenNames);if (matchError) {break loop25;}
						}
						}}}}
					break;} // loop25
					if (matchError) {
						reportError(matchException);
						recover(matchException,_tokenSet_1);
						resetMatchError();
				}
				returnAST = declaration_AST;
			}
			
	protected final void external_declaration_template() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST external_declaration_template_AST = null;
		String s; K_and_R = false; boolean ctrName=false; boolean definition; boolean friend = false; TypeQualifier tq; StorageClass sc;int ts = 0;
		
		loop26:  while (true) {
			int LA1_39 = LA(1);
			int LA2_39 = LA(2);
			
			boolean synPredMatched67 = false;
			if (((_tokenSet_8.member(LA1_39)) && (_tokenSet_113.member(LA2_39)))) {
				int _m67 = mark();
				guessing++;
				guess67:  while (true) {
					{
					{
					switch ( LA(1)) {
					case LITERAL___extension__:
					{
						consume();
						break;
					}
					case LITERAL_template:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess67;}
					}
					}
					}
					match(LITERAL_template);
					if (matchError) {break guess67;}
					match(LESSTHAN);
					if (matchError) {break guess67;}
					match(GREATERTHAN);
					if (matchError) {break guess67;}
					}
				synPredMatched67 = true;
				break;} // guess67
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m67);
				guessing--;
			}
			if ( synPredMatched67 ) {
				{
				{
				switch ( LA(1)) {
				case LITERAL___extension__:
				{
					consume();
					break;
				}
				case LITERAL_template:
				case LITERAL_export:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_8, tokenNames);if (matchError) {break loop26;}
				}
				}
				}
				{
				int LA1_40 = LA(1);
				int LA2_40 = LA(2);
				
				if (((LA1_40==LITERAL_template) && (LA2_40==LESSTHAN))&&(checkTemplateExplicitSpecialization())) {
					template_explicit_specialization();
					if (matchError) {break loop26;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA1_40==LITERAL_template||LA1_40==LITERAL_export) && (LA2_40==LESSTHAN||LA2_40==LITERAL_template)) {
					declaration_template_impl();
					if (matchError) {break loop26;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_114, tokenNames);if (matchError) {break loop26;}
				}
				
				}
				}
				external_declaration_template_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched73 = false;
				if (((LA1_39==LITERAL_template) && ((LA2_39 >= LITERAL_class && LA2_39 <= LITERAL_union)))) {
					int _m73 = mark();
					guessing++;
					guess73:  while (true) {
						{
						match(LITERAL_template);
						if (matchError) {break guess73;}
						{
						switch ( LA(1)) {
						case LITERAL_class:
						{
							consume();
							break;
						}
						case LITERAL_struct:
						{
							consume();
							break;
						}
						case LITERAL_union:
						{
							consume();
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess73;}
						}
						}
						}
						}
					synPredMatched73 = true;
					break;} // guess73
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m73);
					guessing--;
				}
				if ( synPredMatched73 ) {
					AST tmp144_AST = null;
					tmp144_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp144_AST);
					consume();
					{
					switch ( LA(1)) {
					case LITERAL_class:
					{
						AST tmp145_AST = null;
						tmp145_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp145_AST);
						consume();
						break;
					}
					case LITERAL_struct:
					{
						AST tmp146_AST = null;
						tmp146_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp146_AST);
						consume();
						break;
					}
					case LITERAL_union:
					{
						AST tmp147_AST = null;
						tmp147_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp147_AST);
						consume();
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_69, tokenNames);if (matchError) {break loop26;}
					}
					}
					}
					s=scope_override();
					if (matchError) {break loop26;}
					astFactory.addASTChild(currentAST, returnAST);
					s=literal_ident();
					if (matchError) {break loop26;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					switch ( LA(1)) {
					case LESSTHAN:
					{
						AST tmp148_AST = null;
						tmp148_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp148_AST);
						consume();
						template_argument_list();
						if (matchError) {break loop26;}
						astFactory.addASTChild(currentAST, returnAST);
						AST tmp149_AST = null;
						tmp149_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp149_AST);
						match(GREATERTHAN);
						if (matchError) {break loop26;}
						break;
					}
					case SEMICOLON:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_115, tokenNames);if (matchError) {break loop26;}
					}
					}
					}
					AST tmp150_AST = null;
					tmp150_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp150_AST);
					match(SEMICOLON);
					if (matchError) {break loop26;}
					external_declaration_template_AST = (AST)currentAST.root;
					external_declaration_template_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPLATE_EXPLICIT_INSTANTIATION,"CSM_TEMPLATE_EXPLICIT_INSTANTIATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_template_AST));
					currentAST.root = external_declaration_template_AST;
					currentAST.child = external_declaration_template_AST!=null &&external_declaration_template_AST.getFirstChild()!=null ?
						external_declaration_template_AST.getFirstChild() : external_declaration_template_AST;
					currentAST.advanceChildToEnd();
					external_declaration_template_AST = (AST)currentAST.root;
				}
				else {
					boolean synPredMatched78 = false;
					if (((LA1_39==LITERAL_template) && (_tokenSet_26.member(LA2_39)))) {
						int _m78 = mark();
						guessing++;
						guess78:  while (true) {
							{
							match(LITERAL_template);
							if (matchError) {break guess78;}
							{
							matchNot(LESSTHAN);
							if (matchError) {break guess78;}
							}
							}
						synPredMatched78 = true;
						break;} // guess78
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m78);
						guessing--;
					}
					if ( synPredMatched78 ) {
						AST tmp151_AST = null;
						tmp151_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp151_AST);
						consume();
						{
						int LA1_41 = LA(1);
						int LA2_41 = LA(2);
						
						boolean synPredMatched81 = false;
						if (((_tokenSet_116.member(LA1_41)) && (_tokenSet_19.member(LA2_41)))) {
							int _m81 = mark();
							guessing++;
							guess81:  while (true) {
								{
								scope_override_g();
								if (matchError) {break guess81;}
								match(LITERAL_OPERATOR);
								if (matchError) {break guess81;}
								}
							synPredMatched81 = true;
							break;} // guess81
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m81);
							guessing--;
						}
						if ( synPredMatched81 ) {
							s=scope_override();
							if (matchError) {break loop26;}
							astFactory.addASTChild(currentAST, returnAST);
							conversion_function_decl();
							if (matchError) {break loop26;}
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((_tokenSet_26.member(LA1_41)) && (_tokenSet_27.member(LA2_41))) {
							declaration(declOther);
							if (matchError) {break loop26;}
							astFactory.addASTChild(currentAST, returnAST);
						}
						else {
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_26, tokenNames);if (matchError) {break loop26;}
						}
						
						}
						external_declaration_template_AST = (AST)currentAST.root;
						external_declaration_template_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPLATE_EXPLICIT_INSTANTIATION,"CSM_TEMPLATE_EXPLICIT_INSTANTIATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(external_declaration_template_AST));
						currentAST.root = external_declaration_template_AST;
						currentAST.child = external_declaration_template_AST!=null &&external_declaration_template_AST.getFirstChild()!=null ?
							external_declaration_template_AST.getFirstChild() : external_declaration_template_AST;
						currentAST.advanceChildToEnd();
						external_declaration_template_AST = (AST)currentAST.root;
					}
					else if ((LA1_39==LITERAL_template||LA1_39==LITERAL_export) && (LA2_39==LESSTHAN||LA2_39==LITERAL_template)) {
						declaration_template_impl();
						if (matchError) {break loop26;}
						astFactory.addASTChild(currentAST, returnAST);
						external_declaration_template_AST = (AST)currentAST.root;
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_8, tokenNames);if (matchError) {break loop26;}
					}
					}}
				break;} // loop26
				if (matchError) {
					reportError(matchException);
					recover(matchException,_tokenSet_1);
					resetMatchError();
			}
			returnAST = external_declaration_template_AST;
		}
		
	protected final void declaration_template_impl() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declaration_template_impl_AST = null;
		String s; K_and_R = false; boolean ctrName=false; boolean definition; boolean friend = false; TypeQualifier tq; StorageClass sc;int ts = 0;
		
		loop27:  while (true) {
			beginTemplateDefinition();
			{
			int _cnt87=0;
			_loop87:
			do {
				if ((LA(1)==LITERAL_template||LA(1)==LITERAL_export)) {
					{
					int LA1_42 = LA(1);
					int LA2_42 = LA(2);
					
					boolean synPredMatched86 = false;
					if (((LA1_42==LITERAL_template) && (LA2_42==LESSTHAN))) {
						int _m86 = mark();
						guessing++;
						guess86:  while (true) {
							{
							match(LITERAL_template);
							if (matchError) {break guess86;}
							match(LESSTHAN);
							if (matchError) {break guess86;}
							match(GREATERTHAN);
							if (matchError) {break guess86;}
							}
						synPredMatched86 = true;
						break;} // guess86
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m86);
						guessing--;
					}
					if ( synPredMatched86 ) {
						AST tmp152_AST = null;
						tmp152_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp152_AST);
						consume();
						consume();
						match(GREATERTHAN);
						if (matchError) {break loop27;}
					}
					else if ((LA1_42==LITERAL_template||LA1_42==LITERAL_export) && (LA2_42==LESSTHAN||LA2_42==LITERAL_template)) {
						template_head();
						if (matchError) {break loop27;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_114, tokenNames);if (matchError) {break loop27;}
					}
					
					}
				}
				else {
					if ( _cnt87>=1 ) { break _loop87; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_114, tokenNames);if (matchError) {break loop27;}}
				}
				
				_cnt87++;
			} while (true);
			}
			{
			int LA1_43 = LA(1);
			int LA2_43 = LA(2);
			
			boolean synPredMatched90 = false;
			if (((_tokenSet_26.member(LA1_43)) && (_tokenSet_27.member(LA2_43)))) {
				int _m90 = mark();
				guessing++;
				guess90:  while (true) {
					{
					class_head_g();
					if (matchError) {break guess90;}
					}
				synPredMatched90 = true;
				break;} // guess90
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m90);
				guessing--;
			}
			if ( synPredMatched90 ) {
				if (statementTrace>=1) 
				printf("declaration_template_impl_1b[%d]: Class template definition\n",
				LT(1).getLine());
				
				declaration(declOther);
				if (matchError) {break loop27;}
				astFactory.addASTChild(currentAST, returnAST);
				declaration_template_impl_AST = (AST)currentAST.root;
				declaration_template_impl_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPLATE_CLASS_DECLARATION,"CSM_TEMPLATE_CLASS_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(declaration_template_impl_AST));
				currentAST.root = declaration_template_impl_AST;
				currentAST.child = declaration_template_impl_AST!=null &&declaration_template_impl_AST.getFirstChild()!=null ?
					declaration_template_impl_AST.getFirstChild() : declaration_template_impl_AST;
				currentAST.advanceChildToEnd();
			}
			else {
				boolean synPredMatched93 = false;
				if (((_tokenSet_16.member(LA1_43)) && (_tokenSet_17.member(LA2_43)))) {
					int _m93 = mark();
					guessing++;
					guess93:  while (true) {
						{
						ctor_decl_spec_g();
						if (matchError) {break guess93;}
						ctor_declarator_g(false);
						if (matchError) {break guess93;}
						{
						switch ( LA(1)) {
						case EOF:
						{
							consume();
							break;
						}
						case SEMICOLON:
						{
							consume();
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess93;}
						}
						}
						}
						}
					synPredMatched93 = true;
					break;} // guess93
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m93);
					guessing--;
				}
				if ( synPredMatched93 ) {
					if (statementTrace>=1) 
					printf("declaration_template_impl_11a[%d]: Constructor or no-ret type fun declarator\n",
					LT(1).getLine());
					
					friend=ctor_decl_spec();
					if (matchError) {break loop27;}
					astFactory.addASTChild(currentAST, returnAST);
					ctrName=ctor_declarator(false);
					if (matchError) {break loop27;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					switch ( LA(1)) {
					case EOF:
					{
						consume();
						reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
						break;
					}
					case SEMICOLON:
					{
						AST tmp156_AST = null;
						tmp156_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp156_AST);
						consume();
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop27;}
					}
					}
					}
					declaration_template_impl_AST = (AST)currentAST.root;
					
					// below is a workaround for know infinite loop bug in ANTLR 
					// see http://www.jguru.com/faq/view.jsp?EID=271922
					//if( #cds1 != null ) { #cds1.setNextSibling(null); }; 
					if (ctrName && !friend) {
					declaration_template_impl_AST= (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CTOR_TEMPLATE_DECLARATION,"CSM_CTOR_TEMPLATE_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(declaration_template_impl_AST)); //end_of_stmt();
					} else {
					declaration_template_impl_AST= (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_TEMPLATE_DECLARATION,"CSM_FUNCTION_TEMPLATE_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(declaration_template_impl_AST)); //end_of_stmt();
					}
					
					currentAST.root = declaration_template_impl_AST;
					currentAST.child = declaration_template_impl_AST!=null &&declaration_template_impl_AST.getFirstChild()!=null ?
						declaration_template_impl_AST.getFirstChild() : declaration_template_impl_AST;
					currentAST.advanceChildToEnd();
				}
				else {
					boolean synPredMatched96 = false;
					if (((_tokenSet_16.member(LA1_43)) && (_tokenSet_17.member(LA2_43)))) {
						int _m96 = mark();
						guessing++;
						guess96:  while (true) {
							{
							ctor_decl_spec_g();
							if (matchError) {break guess96;}
							ctor_declarator_g(true);
							if (matchError) {break guess96;}
							}
						synPredMatched96 = true;
						break;} // guess96
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m96);
						guessing--;
					}
					if ( synPredMatched96 ) {
						if (statementTrace>=1) 
						printf("declaration_template_impl_11b[%d]: Template constructor " +
						"definition\n", LT(1).getLine());
						
						friend=ctor_decl_spec();
						if (matchError) {break loop27;}
						astFactory.addASTChild(currentAST, returnAST);
						ctrName=ctor_declarator(true);
						if (matchError) {break loop27;}
						astFactory.addASTChild(currentAST, returnAST);
						{
						switch ( LA(1)) {
						case COLON:
						case LCURLY:
						case LITERAL_try:
						case LITERAL___try:
						{
							ctor_body();
							if (matchError) {break loop27;}
							astFactory.addASTChild(currentAST, returnAST);
							break;
						}
						case ASSIGNEQUAL:
						{
							AST tmp157_AST = null;
							tmp157_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp157_AST);
							consume();
							{
							switch ( LA(1)) {
							case LITERAL_default:
							{
								AST tmp158_AST = null;
								tmp158_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp158_AST);
								consume();
								break;
							}
							case LITERAL_delete:
							{
								AST tmp159_AST = null;
								tmp159_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp159_AST);
								consume();
								break;
							}
							default:
							{
								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_14, tokenNames);if (matchError) {break loop27;}
							}
							}
							}
							break;
						}
						default:
						{
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_67, tokenNames);if (matchError) {break loop27;}
						}
						}
						}
						declaration_template_impl_AST = (AST)currentAST.root;
						
						if (ctrName && !friend) {
						declaration_template_impl_AST= (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CTOR_TEMPLATE_DEFINITION,"CSM_CTOR_TEMPLATE_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(declaration_template_impl_AST)); //end_of_stmt();
						} else {
						declaration_template_impl_AST= (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_TEMPLATE_DEFINITION,"CSM_FUNCTION_TEMPLATE_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(declaration_template_impl_AST)); //end_of_stmt();
						}
						
						currentAST.root = declaration_template_impl_AST;
						currentAST.child = declaration_template_impl_AST!=null &&declaration_template_impl_AST.getFirstChild()!=null ?
							declaration_template_impl_AST.getFirstChild() : declaration_template_impl_AST;
						currentAST.advanceChildToEnd();
					}
					else {
						boolean synPredMatched101 = false;
						if ((((_tokenSet_20.member(LA1_43)) && (_tokenSet_19.member(LA2_43)))&&(isCPlusPlus()))) {
							int _m101 = mark();
							guessing++;
							guess101:  while (true) {
								{
								{
								switch ( LA(1)) {
								case LITERAL_inline:
								case LITERAL__inline:
								case LITERAL___inline__:
								case LITERAL___inline:
								case LITERAL___forceinline:
								{
									literal_inline_g();
									if (matchError) {break guess101;}
									break;
								}
								case LITERAL_constexpr:
								{
									consume();
									break;
								}
								case SCOPE:
								case IDENT:
								case LITERAL_OPERATOR:
								case LITERAL_final:
								case LITERAL_override:
								case LITERAL_decltype:
								case LITERAL___decltype:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess101;}
								}
								}
								}
								scope_override_g();
								if (matchError) {break guess101;}
								conversion_function_decl_or_def_g();
								if (matchError) {break guess101;}
								}
							synPredMatched101 = true;
							break;} // guess101
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m101);
							guessing--;
						}
						if ( synPredMatched101 ) {
							if (statementTrace>=1) 
							printf("external_declaration_6[%d]: Operator function\n",
							LT(1).getLine());
							
							{
							switch ( LA(1)) {
							case LITERAL_inline:
							case LITERAL__inline:
							case LITERAL___inline__:
							case LITERAL___inline:
							case LITERAL___forceinline:
							{
								literal_inline();
								if (matchError) {break loop27;}
								astFactory.addASTChild(currentAST, returnAST);
								break;
							}
							case LITERAL_constexpr:
							{
								AST tmp160_AST = null;
								tmp160_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp160_AST);
								consume();
								break;
							}
							case SCOPE:
							case IDENT:
							case LITERAL_OPERATOR:
							case LITERAL_final:
							case LITERAL_override:
							case LITERAL_decltype:
							case LITERAL___decltype:
							{
								break;
							}
							default:
							{
								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_20, tokenNames);if (matchError) {break loop27;}
							}
							}
							}
							s=scope_override();
							if (matchError) {break loop27;}
							astFactory.addASTChild(currentAST, returnAST);
							definition=conversion_function_decl_or_def();
							if (matchError) {break loop27;}
							astFactory.addASTChild(currentAST, returnAST);
							declaration_template_impl_AST = (AST)currentAST.root;
							if( definition ) declaration_template_impl_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_USER_TYPE_CAST_TEMPLATE_DEFINITION,"CSM_USER_TYPE_CAST_TEMPLATE_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(declaration_template_impl_AST));
							else	   declaration_template_impl_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_USER_TYPE_CAST_TEMPLATE_DECLARATION,"CSM_USER_TYPE_CAST_TEMPLATE_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(declaration_template_impl_AST));
							currentAST.root = declaration_template_impl_AST;
							currentAST.child = declaration_template_impl_AST!=null &&declaration_template_impl_AST.getFirstChild()!=null ?
								declaration_template_impl_AST.getFirstChild() : declaration_template_impl_AST;
							currentAST.advanceChildToEnd();
						}
						else {
							boolean synPredMatched104 = false;
							if (((_tokenSet_26.member(LA1_43)) && (_tokenSet_27.member(LA2_43)))) {
								int _m104 = mark();
								guessing++;
								guess104:  while (true) {
									{
									declaration_specifiers_g(false, false);
									if (matchError) {break guess104;}
									function_declarator_g(false, false, false);
									if (matchError) {break guess104;}
									match(SEMICOLON);
									if (matchError) {break guess104;}
									}
								synPredMatched104 = true;
								break;} // guess104
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m104);
								guessing--;
							}
							if ( synPredMatched104 ) {
								if (statementTrace>=1) 
								printf("declaration_template_impl_11c[%d]: Function template " +
								"declaration\n", LT(1).getLine());
								
								declaration(declOther);
								if (matchError) {break loop27;}
								astFactory.addASTChild(currentAST, returnAST);
								declaration_template_impl_AST = (AST)currentAST.root;
								declaration_template_impl_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_TEMPLATE_DECLARATION,"CSM_FUNCTION_TEMPLATE_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(declaration_template_impl_AST));
								currentAST.root = declaration_template_impl_AST;
								currentAST.child = declaration_template_impl_AST!=null &&declaration_template_impl_AST.getFirstChild()!=null ?
									declaration_template_impl_AST.getFirstChild() : declaration_template_impl_AST;
								currentAST.advanceChildToEnd();
							}
							else {
								boolean synPredMatched108 = false;
								if (((_tokenSet_22.member(LA1_43)) && (_tokenSet_23.member(LA2_43)))) {
									int _m108 = mark();
									guessing++;
									guess108:  while (true) {
										{
										declaration_specifiers_g(false, false);
										if (matchError) {break guess108;}
										function_declarator_g(true, false, false);
										if (matchError) {break guess108;}
										{
										switch ( LA(1)) {
										case LCURLY:
										{
											consume();
											break;
										}
										case LITERAL_try:
										case LITERAL___try:
										{
											literal_try_g();
											if (matchError) {break guess108;}
											break;
										}
										case ASSIGNEQUAL:
										{
											consume();
											{
											switch ( LA(1)) {
											case LITERAL_default:
											{
												consume();
												break;
											}
											case LITERAL_delete:
											{
												consume();
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess108;}
											}
											}
											}
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break guess108;}
										}
										}
										}
										}
									synPredMatched108 = true;
									break;} // guess108
									if (matchError) {
									   resetMatchError();
									}
									rewind(_m108);
									guessing--;
								}
								if ( synPredMatched108 ) {
									if (statementTrace>=1) printf("declaration_template_impl_11d[%d]: Function template " + "definition\n", LT(1).getLine());
									function_definition();
									if (matchError) {break loop27;}
									astFactory.addASTChild(currentAST, returnAST);
									declaration_template_impl_AST = (AST)currentAST.root;
									declaration_template_impl_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_TEMPLATE_DEFINITION,"CSM_FUNCTION_TEMPLATE_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(declaration_template_impl_AST));
									currentAST.root = declaration_template_impl_AST;
									currentAST.child = declaration_template_impl_AST!=null &&declaration_template_impl_AST.getFirstChild()!=null ?
										declaration_template_impl_AST.getFirstChild() : declaration_template_impl_AST;
									currentAST.advanceChildToEnd();
								}
								else {
									boolean synPredMatched112 = false;
									if (((_tokenSet_32.member(LA1_43)) && (_tokenSet_13.member(LA2_43)))) {
										int _m112 = mark();
										guessing++;
										guess112:  while (true) {
											{
											dtor_head_g(true);
											if (matchError) {break guess112;}
											{
											switch ( LA(1)) {
											case LCURLY:
											{
												consume();
												break;
											}
											case ASSIGNEQUAL:
											{
												consume();
												{
												switch ( LA(1)) {
												case LITERAL_default:
												{
													consume();
													break;
												}
												case LITERAL_delete:
												{
													consume();
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess112;}
												}
												}
												}
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess112;}
											}
											}
											}
											}
										synPredMatched112 = true;
										break;} // guess112
										if (matchError) {
										   resetMatchError();
										}
										rewind(_m112);
										guessing--;
									}
									if ( synPredMatched112 ) {
										if (statementTrace>=1) 
										printf("external_declaration_4[%d]: Destructor definition\n",
										LT(1).getLine());
										
										dtor_head(true);
										if (matchError) {break loop27;}
										astFactory.addASTChild(currentAST, returnAST);
										{
										switch ( LA(1)) {
										case LCURLY:
										{
											dtor_body();
											if (matchError) {break loop27;}
											astFactory.addASTChild(currentAST, returnAST);
											break;
										}
										case ASSIGNEQUAL:
										{
											AST tmp161_AST = null;
											tmp161_AST = astFactory.create(LT(1));
											astFactory.addASTChild(currentAST, tmp161_AST);
											consume();
											{
											switch ( LA(1)) {
											case LITERAL_default:
											{
												AST tmp162_AST = null;
												tmp162_AST = astFactory.create(LT(1));
												astFactory.addASTChild(currentAST, tmp162_AST);
												consume();
												break;
											}
											case LITERAL_delete:
											{
												AST tmp163_AST = null;
												tmp163_AST = astFactory.create(LT(1));
												astFactory.addASTChild(currentAST, tmp163_AST);
												consume();
												break;
											}
											default:
											{
												matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_14, tokenNames);if (matchError) {break loop27;}
											}
											}
											}
											break;
										}
										default:
										{
											matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_15, tokenNames);if (matchError) {break loop27;}
										}
										}
										}
										declaration_template_impl_AST = (AST)currentAST.root;
										declaration_template_impl_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_DTOR_TEMPLATE_DEFINITION,"CSM_DTOR_TEMPLATE_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(declaration_template_impl_AST));
										currentAST.root = declaration_template_impl_AST;
										currentAST.child = declaration_template_impl_AST!=null &&declaration_template_impl_AST.getFirstChild()!=null ?
											declaration_template_impl_AST.getFirstChild() : declaration_template_impl_AST;
										currentAST.advanceChildToEnd();
									}
									else {
										boolean synPredMatched116 = false;
										if (((LA1_43==LITERAL_using) && (_tokenSet_0.member(LA2_43)))) {
											int _m116 = mark();
											guessing++;
											guess116:  while (true) {
												{
												match(LITERAL_using);
												if (matchError) {break guess116;}
												literal_ident_g();
												if (matchError) {break guess116;}
												match(ASSIGNEQUAL);
												if (matchError) {break guess116;}
												}
											synPredMatched116 = true;
											break;} // guess116
											if (matchError) {
											   resetMatchError();
											}
											rewind(_m116);
											guessing--;
										}
										if ( synPredMatched116 ) {
											alias_declaration();
											if (matchError) {break loop27;}
											astFactory.addASTChild(currentAST, returnAST);
											declaration_template_impl_AST = (AST)currentAST.root;
											declaration_template_impl_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_GENERIC_DECLARATION,"CSM_GENERIC_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(declaration_template_impl_AST));
											currentAST.root = declaration_template_impl_AST;
											currentAST.child = declaration_template_impl_AST!=null &&declaration_template_impl_AST.getFirstChild()!=null ?
												declaration_template_impl_AST.getFirstChild() : declaration_template_impl_AST;
											currentAST.advanceChildToEnd();
										}
										else {
											boolean synPredMatched121 = false;
											if (((_tokenSet_117.member(LA1_43)) && (_tokenSet_118.member(LA2_43)))) {
												int _m121 = mark();
												guessing++;
												guess121:  while (true) {
													{
													{
													switch ( LA(1)) {
													case LITERAL___extension__:
													{
														consume();
														break;
													}
													case LITERAL_typedef:
													case LITERAL_enum:
													case LITERAL_extern:
													case LITERAL_auto:
													case LITERAL_register:
													case LITERAL_static:
													case LITERAL_mutable:
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL___global:
													case LITERAL___thread:
													case LITERAL___symbolic:
													case LITERAL___hidden:
													case LITERAL_thread_local:
													case LITERAL__TYPE_QUALIFIER__:
													case LITERAL__STORAGE_CLASS_SPECIFIER__:
													{
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess121;}
													}
													}
													}
													{
													_loop120:
													do {
														switch ( LA(1)) {
														case LITERAL_extern:
														case LITERAL_auto:
														case LITERAL_register:
														case LITERAL_static:
														case LITERAL_mutable:
														case LITERAL___global:
														case LITERAL___thread:
														case LITERAL___symbolic:
														case LITERAL___hidden:
														case LITERAL_thread_local:
														case LITERAL__STORAGE_CLASS_SPECIFIER__:
														{
															storage_class_specifier_g();
															if (matchError) {break guess121;}
															break;
														}
														case LITERAL_const:
														case LITERAL___const__:
														case LITERAL___const:
														case LITERAL_const_cast:
														case LITERAL_volatile:
														case LITERAL___volatile__:
														case LITERAL___volatile:
														case LITERAL__TYPE_QUALIFIER__:
														{
															cv_qualifier_g();
															if (matchError) {break guess121;}
															break;
														}
														case LITERAL_typedef:
														{
															consume();
															break;
														}
														default:
														{
															break _loop120;
														}
														}
													} while (true);
													}
													enum_def_head_g();
													if (matchError) {break guess121;}
													}
												synPredMatched121 = true;
												break;} // guess121
												if (matchError) {
												   resetMatchError();
												}
												rewind(_m121);
												guessing--;
											}
											if ( synPredMatched121 ) {
												{
												switch ( LA(1)) {
												case LITERAL___extension__:
												{
													consume();
													break;
												}
												case LITERAL_typedef:
												case LITERAL_enum:
												case LITERAL_extern:
												case LITERAL_auto:
												case LITERAL_register:
												case LITERAL_static:
												case LITERAL_mutable:
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL___global:
												case LITERAL___thread:
												case LITERAL___symbolic:
												case LITERAL___hidden:
												case LITERAL_thread_local:
												case LITERAL__TYPE_QUALIFIER__:
												case LITERAL__STORAGE_CLASS_SPECIFIER__:
												{
													break;
												}
												default:
												{
													matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_117, tokenNames);if (matchError) {break loop27;}
												}
												}
												}
												{
												_loop124:
												do {
													switch ( LA(1)) {
													case LITERAL_extern:
													case LITERAL_auto:
													case LITERAL_register:
													case LITERAL_static:
													case LITERAL_mutable:
													case LITERAL___global:
													case LITERAL___thread:
													case LITERAL___symbolic:
													case LITERAL___hidden:
													case LITERAL_thread_local:
													case LITERAL__STORAGE_CLASS_SPECIFIER__:
													{
														sc=storage_class_specifier();
														if (matchError) {break loop27;}
														astFactory.addASTChild(currentAST, returnAST);
														break;
													}
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL__TYPE_QUALIFIER__:
													{
														tq=cv_qualifier();
														if (matchError) {break loop27;}
														astFactory.addASTChild(currentAST, returnAST);
														break;
													}
													case LITERAL_typedef:
													{
														AST tmp165_AST = null;
														tmp165_AST = astFactory.create(LT(1));
														astFactory.addASTChild(currentAST, tmp165_AST);
														consume();
														break;
													}
													default:
													{
														break _loop124;
													}
													}
												} while (true);
												}
												enum_specifier();
												if (matchError) {break loop27;}
												astFactory.addASTChild(currentAST, returnAST);
												{
												switch ( LA(1)) {
												case ELLIPSIS:
												case LPAREN:
												case LSQUARE:
												case STAR:
												case AND:
												case AMPERSAND:
												case TILDE:
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL__stdcall:
												case LITERAL___stdcall:
												case LITERAL_this:
												case LITERAL_true:
												case LITERAL_false:
												case LITERAL__cdecl:
												case LITERAL___cdecl:
												case LITERAL__near:
												case LITERAL___near:
												case LITERAL__far:
												case LITERAL___far:
												case LITERAL___interrupt:
												case LITERAL_pascal:
												case LITERAL__pascal:
												case LITERAL___pascal:
												case LITERAL___attribute__:
												case LITERAL___attribute:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_decltype:
												case LITERAL___decltype:
												case LITERAL___clrcall:
												{
													init_declarator_list(declOther);
													if (matchError) {break loop27;}
													astFactory.addASTChild(currentAST, returnAST);
													break;
												}
												case SEMICOLON:
												{
													break;
												}
												default:
												{
													matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_41, tokenNames);if (matchError) {break loop27;}
												}
												}
												}
												AST tmp166_AST = null;
												tmp166_AST = astFactory.create(LT(1));
												astFactory.addASTChild(currentAST, tmp166_AST);
												match(SEMICOLON);
												if (matchError) {break loop27;}
												declaration_template_impl_AST = (AST)currentAST.root;
												declaration_template_impl_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ENUM_DECLARATION,"CSM_ENUM_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(declaration_template_impl_AST));
												currentAST.root = declaration_template_impl_AST;
												currentAST.child = declaration_template_impl_AST!=null &&declaration_template_impl_AST.getFirstChild()!=null ?
													declaration_template_impl_AST.getFirstChild() : declaration_template_impl_AST;
												currentAST.advanceChildToEnd();
											}
											else {
												boolean synPredMatched133 = false;
												if (((_tokenSet_117.member(LA1_43)) && (_tokenSet_118.member(LA2_43)))) {
													int _m133 = mark();
													guessing++;
													guess133:  while (true) {
														{
														{
														switch ( LA(1)) {
														case LITERAL___extension__:
														{
															consume();
															break;
														}
														case LITERAL_typedef:
														case LITERAL_enum:
														case LITERAL_extern:
														case LITERAL_auto:
														case LITERAL_register:
														case LITERAL_static:
														case LITERAL_mutable:
														case LITERAL_const:
														case LITERAL___const__:
														case LITERAL___const:
														case LITERAL_const_cast:
														case LITERAL_volatile:
														case LITERAL___volatile__:
														case LITERAL___volatile:
														case LITERAL___global:
														case LITERAL___thread:
														case LITERAL___symbolic:
														case LITERAL___hidden:
														case LITERAL_thread_local:
														case LITERAL__TYPE_QUALIFIER__:
														case LITERAL__STORAGE_CLASS_SPECIFIER__:
														{
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess133;}
														}
														}
														}
														{
														_loop129:
														do {
															switch ( LA(1)) {
															case LITERAL_extern:
															case LITERAL_auto:
															case LITERAL_register:
															case LITERAL_static:
															case LITERAL_mutable:
															case LITERAL___global:
															case LITERAL___thread:
															case LITERAL___symbolic:
															case LITERAL___hidden:
															case LITERAL_thread_local:
															case LITERAL__STORAGE_CLASS_SPECIFIER__:
															{
																storage_class_specifier_g();
																if (matchError) {break guess133;}
																break;
															}
															case LITERAL_const:
															case LITERAL___const__:
															case LITERAL___const:
															case LITERAL_const_cast:
															case LITERAL_volatile:
															case LITERAL___volatile__:
															case LITERAL___volatile:
															case LITERAL__TYPE_QUALIFIER__:
															{
																cv_qualifier_g();
																if (matchError) {break guess133;}
																break;
															}
															case LITERAL_typedef:
															{
																consume();
																break;
															}
															default:
															{
																break _loop129;
															}
															}
														} while (true);
														}
														match(LITERAL_enum);
														if (matchError) {break guess133;}
														{
														switch ( LA(1)) {
														case LITERAL_class:
														{
															consume();
															break;
														}
														case LITERAL_struct:
														{
															consume();
															break;
														}
														case COLON:
														case SEMICOLON:
														case SCOPE:
														case IDENT:
														case LITERAL_OPERATOR:
														case LITERAL_this:
														case LITERAL_true:
														case LITERAL_false:
														case LITERAL__cdecl:
														case LITERAL___cdecl:
														case LITERAL_final:
														case LITERAL_override:
														case LITERAL_decltype:
														case LITERAL___decltype:
														{
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess133;}
														}
														}
														}
														{
														switch ( LA(1)) {
														case SCOPE:
														case IDENT:
														case LITERAL_OPERATOR:
														case LITERAL_this:
														case LITERAL_true:
														case LITERAL_false:
														case LITERAL__cdecl:
														case LITERAL___cdecl:
														case LITERAL_final:
														case LITERAL_override:
														case LITERAL_decltype:
														case LITERAL___decltype:
														{
															qualified_id_g();
															if (matchError) {break guess133;}
															break;
														}
														case COLON:
														case SEMICOLON:
														{
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess133;}
														}
														}
														}
														{
														switch ( LA(1)) {
														case COLON:
														{
															consume();
															ts=type_specifier_g(dsInvalid, false);
															if (matchError) {break guess133;}
															break;
														}
														case SEMICOLON:
														{
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess133;}
														}
														}
														}
														match(SEMICOLON);
														if (matchError) {break guess133;}
														}
													synPredMatched133 = true;
													break;} // guess133
													if (matchError) {
													   resetMatchError();
													}
													rewind(_m133);
													guessing--;
												}
												if ( synPredMatched133 ) {
													{
													switch ( LA(1)) {
													case LITERAL___extension__:
													{
														consume();
														break;
													}
													case LITERAL_typedef:
													case LITERAL_enum:
													case LITERAL_extern:
													case LITERAL_auto:
													case LITERAL_register:
													case LITERAL_static:
													case LITERAL_mutable:
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL___global:
													case LITERAL___thread:
													case LITERAL___symbolic:
													case LITERAL___hidden:
													case LITERAL_thread_local:
													case LITERAL__TYPE_QUALIFIER__:
													case LITERAL__STORAGE_CLASS_SPECIFIER__:
													{
														break;
													}
													default:
													{
														matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_117, tokenNames);if (matchError) {break loop27;}
													}
													}
													}
													{
													_loop136:
													do {
														switch ( LA(1)) {
														case LITERAL_extern:
														case LITERAL_auto:
														case LITERAL_register:
														case LITERAL_static:
														case LITERAL_mutable:
														case LITERAL___global:
														case LITERAL___thread:
														case LITERAL___symbolic:
														case LITERAL___hidden:
														case LITERAL_thread_local:
														case LITERAL__STORAGE_CLASS_SPECIFIER__:
														{
															sc=storage_class_specifier();
															if (matchError) {break loop27;}
															astFactory.addASTChild(currentAST, returnAST);
															break;
														}
														case LITERAL_const:
														case LITERAL___const__:
														case LITERAL___const:
														case LITERAL_const_cast:
														case LITERAL_volatile:
														case LITERAL___volatile__:
														case LITERAL___volatile:
														case LITERAL__TYPE_QUALIFIER__:
														{
															tq=cv_qualifier();
															if (matchError) {break loop27;}
															astFactory.addASTChild(currentAST, returnAST);
															break;
														}
														case LITERAL_typedef:
														{
															AST tmp168_AST = null;
															tmp168_AST = astFactory.create(LT(1));
															astFactory.addASTChild(currentAST, tmp168_AST);
															consume();
															break;
														}
														default:
														{
															break _loop136;
														}
														}
													} while (true);
													}
													enum_specifier();
													if (matchError) {break loop27;}
													astFactory.addASTChild(currentAST, returnAST);
													AST tmp169_AST = null;
													tmp169_AST = astFactory.create(LT(1));
													astFactory.addASTChild(currentAST, tmp169_AST);
													match(SEMICOLON);
													if (matchError) {break loop27;}
													declaration_template_impl_AST = (AST)currentAST.root;
													declaration_template_impl_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ENUM_FWD_DECLARATION,"CSM_ENUM_FWD_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(declaration_template_impl_AST));
													currentAST.root = declaration_template_impl_AST;
													currentAST.child = declaration_template_impl_AST!=null &&declaration_template_impl_AST.getFirstChild()!=null ?
														declaration_template_impl_AST.getFirstChild() : declaration_template_impl_AST;
													currentAST.advanceChildToEnd();
												}
												else {
													boolean synPredMatched139 = false;
													if (((_tokenSet_22.member(LA1_43)) && (_tokenSet_119.member(LA2_43)))) {
														int _m139 = mark();
														guessing++;
														guess139:  while (true) {
															{
															declaration_specifiers_g(true, false);
															if (matchError) {break guess139;}
															{
															switch ( LA(1)) {
															case ELLIPSIS:
															case LPAREN:
															case LSQUARE:
															case STAR:
															case AND:
															case AMPERSAND:
															case TILDE:
															case SCOPE:
															case IDENT:
															case LITERAL_OPERATOR:
															case LITERAL__stdcall:
															case LITERAL___stdcall:
															case LITERAL_this:
															case LITERAL_true:
															case LITERAL_false:
															case LITERAL__cdecl:
															case LITERAL___cdecl:
															case LITERAL__near:
															case LITERAL___near:
															case LITERAL__far:
															case LITERAL___far:
															case LITERAL___interrupt:
															case LITERAL_pascal:
															case LITERAL__pascal:
															case LITERAL___pascal:
															case LITERAL___attribute__:
															case LITERAL___attribute:
															case LITERAL_final:
															case LITERAL_override:
															case LITERAL_decltype:
															case LITERAL___decltype:
															case LITERAL___clrcall:
															{
																init_declarator_list_g(declOther);
																if (matchError) {break guess139;}
																break;
															}
															case SEMICOLON:
															{
																break;
															}
															default:
															{
																matchError=true;if (matchError) {break guess139;}
															}
															}
															}
															match(SEMICOLON);
															if (matchError) {break guess139;}
															}
														synPredMatched139 = true;
														break;} // guess139
														if (matchError) {
														   resetMatchError();
														}
														rewind(_m139);
														guessing--;
													}
													if ( synPredMatched139 ) {
														if (statementTrace>=1) 
														printf("declaration_template_impl_10[%d]: Class template declaration\n",
														LT(1).getLine());
														
														declaration_specifiers(true, false);
														if (matchError) {break loop27;}
														astFactory.addASTChild(currentAST, returnAST);
														{
														switch ( LA(1)) {
														case ELLIPSIS:
														case LPAREN:
														case LSQUARE:
														case STAR:
														case AND:
														case AMPERSAND:
														case TILDE:
														case SCOPE:
														case IDENT:
														case LITERAL_OPERATOR:
														case LITERAL__stdcall:
														case LITERAL___stdcall:
														case LITERAL_this:
														case LITERAL_true:
														case LITERAL_false:
														case LITERAL__cdecl:
														case LITERAL___cdecl:
														case LITERAL__near:
														case LITERAL___near:
														case LITERAL__far:
														case LITERAL___far:
														case LITERAL___interrupt:
														case LITERAL_pascal:
														case LITERAL__pascal:
														case LITERAL___pascal:
														case LITERAL___attribute__:
														case LITERAL___attribute:
														case LITERAL_final:
														case LITERAL_override:
														case LITERAL_decltype:
														case LITERAL___decltype:
														case LITERAL___clrcall:
														{
															init_declarator_list(declOther);
															if (matchError) {break loop27;}
															astFactory.addASTChild(currentAST, returnAST);
															break;
														}
														case SEMICOLON:
														{
															break;
														}
														default:
														{
															matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_41, tokenNames);if (matchError) {break loop27;}
														}
														}
														}
														AST tmp170_AST = null;
														tmp170_AST = astFactory.create(LT(1));
														astFactory.addASTChild(currentAST, tmp170_AST);
														match(SEMICOLON);
														if (matchError) {break loop27;}
														declaration_template_impl_AST = (AST)currentAST.root;
														/*endTemplateDeclaration();*/ declaration_template_impl_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPL_FWD_CL_OR_STAT_MEM,"CSM_TEMPL_FWD_CL_OR_STAT_MEM", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(declaration_template_impl_AST));
														currentAST.root = declaration_template_impl_AST;
														currentAST.child = declaration_template_impl_AST!=null &&declaration_template_impl_AST.getFirstChild()!=null ?
															declaration_template_impl_AST.getFirstChild() : declaration_template_impl_AST;
														currentAST.advanceChildToEnd();
													}
													else {
														matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_10, tokenNames);if (matchError) {break loop27;}
													}
													}}}}}}}}}}
													}
													endTemplateDefinition();
													declaration_template_impl_AST = (AST)currentAST.root;
												break;} // loop27
												if (matchError) {
													// when recover we'd like to perform any "build AST" actions
													if ((declaration_template_impl_AST == null) && (currentAST.root != null)) {
													declaration_template_impl_AST = (AST)currentAST.root;
													/*endTemplateDeclaration();*/ declaration_template_impl_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPL_FWD_CL_OR_STAT_MEM,"CSM_TEMPL_FWD_CL_OR_STAT_MEM", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(declaration_template_impl_AST));
													}
													reportError(matchException);
													recover(matchException,_tokenSet_1);
													resetMatchError();
											}
											returnAST = declaration_template_impl_AST;
										}
										
	public final void template_argument_list() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_argument_list_AST = null;
		
		loop28:  while (true) {
			if ((_tokenSet_102.member(LA(1)))) {
				template_argument();
				if (matchError) {break loop28;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				{
					AST tmp171_AST = null;
					tmp171_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp171_AST);
					consume();
					break;
				}
				case COMMA:
				case GREATERTHAN:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_120, tokenNames);if (matchError) {break loop28;}
				}
				}
				}
				{
				_loop958:
				do {
					if ((LA(1)==COMMA)) {
						AST tmp172_AST = null;
						tmp172_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp172_AST);
						consume();
						template_argument();
						if (matchError) {break loop28;}
						astFactory.addASTChild(currentAST, returnAST);
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						{
							AST tmp173_AST = null;
							tmp173_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp173_AST);
							consume();
							break;
						}
						case COMMA:
						case GREATERTHAN:
						{
							break;
						}
						default:
						{
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_120, tokenNames);if (matchError) {break loop28;}
						}
						}
						}
					}
					else {
						break _loop958;
					}
					
				} while (true);
				}
				template_argument_list_AST = (AST)currentAST.root;
			}
			else if ((LA(1)==GREATERTHAN)) {
				template_argument_list_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_91, tokenNames);if (matchError) {break loop28;}
			}
			
		break;} // loop28
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_121);
			resetMatchError();
	}
	returnAST = template_argument_list_AST;
}

	public final void conversion_function_decl() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST conversion_function_decl_AST = null;
		
		loop29:  while (true) {
			conversion_function_head();
			if (matchError) {break loop29;}
			astFactory.addASTChild(currentAST, returnAST);
			match(SEMICOLON);
			if (matchError) {break loop29;}
			conversion_function_decl_AST = (AST)currentAST.root;
		break;} // loop29
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = conversion_function_decl_AST;
}

	public final void template_head() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_head_AST = null;
		AST tpl_AST = null;
		
		loop30:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_export:
			{
				consume();
				break;
			}
			case LITERAL_template:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_114, tokenNames);if (matchError) {break loop30;}
			}
			}
			}
			AST tmp176_AST = null;
			tmp176_AST = astFactory.create(LT(1));
			astFactory.makeASTRoot(currentAST, tmp176_AST);
			match(LITERAL_template);
			if (matchError) {break loop30;}
			match(LESSTHAN);
			if (matchError) {break loop30;}
			template_parameter_list();
			if (matchError) {break loop30;}
			tpl_AST = (AST)returnAST;
			astFactory.addASTChild(currentAST, returnAST);
			match(GREATERTHAN);
			if (matchError) {break loop30;}
			template_head_AST = (AST)currentAST.root;
		break;} // loop30
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_122);
			resetMatchError();
	}
	returnAST = template_head_AST;
}

	public final void class_head() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST class_head_AST = null;
		String s; StorageClass sc = scInvalid;
		
		loop31:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_struct:
			{
				AST tmp179_AST = null;
				tmp179_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp179_AST);
				consume();
				break;
			}
			case LITERAL_union:
			{
				AST tmp180_AST = null;
				tmp180_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp180_AST);
				consume();
				break;
			}
			case LITERAL_class:
			{
				AST tmp181_AST = null;
				tmp181_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp181_AST);
				consume();
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_69, tokenNames);if (matchError) {break loop31;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_alignas:
			{
				type_attribute_specification();
				if (matchError) {break loop31;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LCURLY:
			case SCOPE:
			case IDENT:
			case LITERAL_extern:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL___global:
			case LITERAL___thread:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL___decltype:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_123, tokenNames);if (matchError) {break loop31;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_extern:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL___global:
			case LITERAL___thread:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_thread_local:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				sc=storage_class_specifier();
				if (matchError) {break loop31;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LCURLY:
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_124, tokenNames);if (matchError) {break loop31;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				s=scope_override();
				if (matchError) {break loop31;}
				astFactory.addASTChild(currentAST, returnAST);
				s=literal_ident();
				if (matchError) {break loop31;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case LESSTHAN:
				{
					AST tmp182_AST = null;
					tmp182_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp182_AST);
					consume();
					template_argument_list();
					if (matchError) {break loop31;}
					astFactory.addASTChild(currentAST, returnAST);
					AST tmp183_AST = null;
					tmp183_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp183_AST);
					match(GREATERTHAN);
					if (matchError) {break loop31;}
					break;
				}
				case COLON:
				case LCURLY:
				case LITERAL_explicit:
				case LITERAL_final:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_125, tokenNames);if (matchError) {break loop31;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case LITERAL_final:
				{
					AST tmp184_AST = null;
					tmp184_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp184_AST);
					consume();
					break;
				}
				case LITERAL_explicit:
				{
					AST tmp185_AST = null;
					tmp185_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp185_AST);
					consume();
					break;
				}
				case COLON:
				case LCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_126, tokenNames);if (matchError) {break loop31;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case COLON:
				{
					base_clause();
					if (matchError) {break loop31;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_127, tokenNames);if (matchError) {break loop31;}
				}
				}
				}
				break;
			}
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_128, tokenNames);if (matchError) {break loop31;}
			}
			}
			}
			AST tmp186_AST = null;
			tmp186_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp186_AST);
			match(LCURLY);
			if (matchError) {break loop31;}
			class_head_AST = (AST)currentAST.root;
		break;} // loop31
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = class_head_AST;
}

	public final void ctor_body() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ctor_body_AST = null;
		
		loop32:  while (true) {
			{
			switch ( LA(1)) {
			case COLON:
			case LCURLY:
			{
				{
				switch ( LA(1)) {
				case COLON:
				{
					ctor_initializer();
					if (matchError) {break loop32;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_127, tokenNames);if (matchError) {break loop32;}
				}
				}
				}
				compound_statement();
				if (matchError) {break loop32;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL_try:
			case LITERAL___try:
			{
				function_try_block(true);
				if (matchError) {break loop32;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_129, tokenNames);if (matchError) {break loop32;}
			}
			}
			}
			ctor_body_AST = (AST)currentAST.root;
		break;} // loop32
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = ctor_body_AST;
}

	public final void dtor_head(
		boolean definition
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dtor_head_AST = null;
		boolean friend;
		
		loop33:  while (true) {
			friend=dtor_decl_spec();
			if (matchError) {break loop33;}
			astFactory.addASTChild(currentAST, returnAST);
			dtor_declarator(definition);
			if (matchError) {break loop33;}
			astFactory.addASTChild(currentAST, returnAST);
			dtor_head_AST = (AST)currentAST.root;
		break;} // loop33
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_15);
			resetMatchError();
	}
	returnAST = dtor_head_AST;
}

	public final void dtor_body() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dtor_body_AST = null;
		
		loop34:  while (true) {
			compound_statement();
			if (matchError) {break loop34;}
			astFactory.addASTChild(currentAST, returnAST);
			dtor_body_AST = (AST)currentAST.root;
		break;} // loop34
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = dtor_body_AST;
}

	public final void alias_declaration() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST alias_declaration_AST = null;
		String s="";
		
		loop35:  while (true) {
			AST tmp187_AST = null;
			tmp187_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp187_AST);
			match(LITERAL_using);
			if (matchError) {break loop35;}
			s=literal_ident();
			if (matchError) {break loop35;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp188_AST = null;
			tmp188_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp188_AST);
			match(ASSIGNEQUAL);
			if (matchError) {break loop35;}
			alias_declaration_type();
			if (matchError) {break loop35;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp189_AST = null;
			tmp189_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp189_AST);
			match(SEMICOLON);
			if (matchError) {break loop35;}
			alias_declaration_AST = (AST)currentAST.root;
			alias_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TYPE_ALIAS,s, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(alias_declaration_AST));
			currentAST.root = alias_declaration_AST;
			currentAST.child = alias_declaration_AST!=null &&alias_declaration_AST.getFirstChild()!=null ?
				alias_declaration_AST.getFirstChild() : alias_declaration_AST;
			currentAST.advanceChildToEnd();
			alias_declaration_AST = (AST)currentAST.root;
		break;} // loop35
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((alias_declaration_AST == null) && (currentAST.root != null)) {
			alias_declaration_AST = (AST)currentAST.root;
			alias_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TYPE_ALIAS,s, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(alias_declaration_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = alias_declaration_AST;
}

	protected final void typedef_enum() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST typedef_enum_AST = null;
		
		loop36:  while (true) {
			if(statementTrace>=1) 
			printf("typedef_enum [%d]\n",LT(1).getLine());
			
			AST tmp190_AST = null;
			tmp190_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp190_AST);
			match(LITERAL_typedef);
			if (matchError) {break loop36;}
			declarationSpecifier(true, false, scInvalid, tqInvalid, tsInvalid, dsInvalid);
			enum_specifier();
			if (matchError) {break loop36;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			case LPAREN:
			case LSQUARE:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			case LITERAL___clrcall:
			{
				init_declarator_list(declOther);
				if (matchError) {break loop36;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case SEMICOLON:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_41, tokenNames);if (matchError) {break loop36;}
			}
			}
			}
			AST tmp191_AST = null;
			tmp191_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp191_AST);
			match(SEMICOLON);
			if (matchError) {break loop36;}
			typedef_enum_AST = (AST)currentAST.root;
		break;} // loop36
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = typedef_enum_AST;
}

	public final void decl_specifiers_before_type() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST decl_specifiers_before_type_AST = null;
		StorageClass sc; TypeQualifier tq;
		
		loop37:  while (true) {
			{
			int _cnt469=0;
			_loop469:
			do {
				switch ( LA(1)) {
				case LITERAL_extern:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL___global:
				case LITERAL___thread:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_thread_local:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					sc=storage_class_specifier();
					if (matchError) {break loop37;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL__TYPE_QUALIFIER__:
				{
					tq=cv_qualifier();
					if (matchError) {break loop37;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LITERAL_friend:
				{
					AST tmp192_AST = null;
					tmp192_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp192_AST);
					consume();
					break;
				}
				case LITERAL_constexpr:
				{
					AST tmp193_AST = null;
					tmp193_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp193_AST);
					consume();
					break;
				}
				case LITERAL_typedef:
				{
					AST tmp194_AST = null;
					tmp194_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp194_AST);
					consume();
					break;
				}
				default:
				{
					if ( _cnt469>=1 ) { break _loop469; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_130, tokenNames);if (matchError) {break loop37;}}
				}
				}
				_cnt469++;
			} while (true);
			}
			decl_specifiers_before_type_AST = (AST)currentAST.root;
		break;} // loop37
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_131);
			resetMatchError();
	}
	returnAST = decl_specifiers_before_type_AST;
}

	public final void enum_fwd_head() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST enum_fwd_head_AST = null;
		
		loop38:  while (true) {
			enum_head();
			if (matchError) {break loop38;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp195_AST = null;
			tmp195_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp195_AST);
			match(SEMICOLON);
			if (matchError) {break loop38;}
			enum_fwd_head_AST = (AST)currentAST.root;
		break;} // loop38
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = enum_fwd_head_AST;
}

	protected final void function_attribute_specification() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_attribute_specification_AST = null;
		
		loop39:  while (true) {
			attribute_specification_list();
			if (matchError) {break loop39;}
		break;} // loop39
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_132);
			resetMatchError();
	}
	returnAST = function_attribute_specification_AST;
}

	public final void simple_parameter_list() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST simple_parameter_list_AST = null;
		
		loop40:  while (true) {
			simple_parameter_declaration();
			if (matchError) {break loop40;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			_loop863:
			do {
				if ((LA(1)==COMMA)) {
					consume();
					simple_parameter_declaration();
					if (matchError) {break loop40;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop863;
				}
				
			} while (true);
			}
			simple_parameter_list_AST = (AST)currentAST.root;
		break;} // loop40
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = simple_parameter_list_AST;
}

	protected final void function_K_R_parameter_list() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_K_R_parameter_list_AST = null;
		
		loop41:  while (true) {
			{
			int _cnt392=0;
			_loop392:
			do {
				if ((_tokenSet_26.member(LA(1)))) {
					function_K_R_parameter();
					if (matchError) {break loop41;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					if ( _cnt392>=1 ) { break _loop392; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_26, tokenNames);if (matchError) {break loop41;}}
				}
				
				_cnt392++;
			} while (true);
			}
			function_K_R_parameter_list_AST = (AST)currentAST.root;
			function_K_R_parameter_list_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_KR_PARMLIST,"CSM_KR_PARMLIST", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(function_K_R_parameter_list_AST));
			currentAST.root = function_K_R_parameter_list_AST;
			currentAST.child = function_K_R_parameter_list_AST!=null &&function_K_R_parameter_list_AST.getFirstChild()!=null ?
				function_K_R_parameter_list_AST.getFirstChild() : function_K_R_parameter_list_AST;
			currentAST.advanceChildToEnd();
			function_K_R_parameter_list_AST = (AST)currentAST.root;
		break;} // loop41
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((function_K_R_parameter_list_AST == null) && (currentAST.root != null)) {
			function_K_R_parameter_list_AST = (AST)currentAST.root;
			function_K_R_parameter_list_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_KR_PARMLIST,"CSM_KR_PARMLIST", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(function_K_R_parameter_list_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_65);
			resetMatchError();
	}
	returnAST = function_K_R_parameter_list_AST;
}

	public final void function_definition_no_ret_type() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_definition_no_ret_type_AST = null;
		
		loop42:  while (true) {
			{
			function_declarator(true, false, false);
			if (matchError) {break loop42;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			case LPAREN:
			case LSQUARE:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_namespace:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_using:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_static_assert:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				function_K_R_parameter_list();
				if (matchError) {break loop42;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_133, tokenNames);if (matchError) {break loop42;}
			}
			}
			}
			in_parameter_list = false;
			}
			compound_statement();
			if (matchError) {break loop42;}
			astFactory.addASTChild(currentAST, returnAST);
			}
			function_definition_no_ret_type_AST = (AST)currentAST.root;
		break;} // loop42
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = function_definition_no_ret_type_AST;
}

	public final void function_declarator_with_fun_as_ret_type(
		boolean definition
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_declarator_with_fun_as_ret_type_AST = null;
		
		loop43:  while (true) {
			switch ( LA(1)) {
			case STAR:
			case AND:
			case AMPERSAND:
			case SCOPE:
			case IDENT:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			case LITERAL___clrcall:
			{
				ptr_operator();
				if (matchError) {break loop43;}
				astFactory.addASTChild(currentAST, returnAST);
				function_declarator_with_fun_as_ret_type(definition);
				if (matchError) {break loop43;}
				astFactory.addASTChild(currentAST, returnAST);
				function_declarator_with_fun_as_ret_type_AST = (AST)currentAST.root;
				break;
			}
			case LPAREN:
			{
				AST tmp197_AST = null;
				tmp197_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp197_AST);
				consume();
				function_declarator(definition, false, false);
				if (matchError) {break loop43;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp198_AST = null;
				tmp198_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp198_AST);
				match(RPAREN);
				if (matchError) {break loop43;}
				function_params();
				if (matchError) {break loop43;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				int LA1_44 = LA(1);
				int LA2_44 = LA(2);
				
				if ((_tokenSet_134.member(LA1_44)) && (_tokenSet_1.member(LA2_44))) {
					fun_cv_qualifier_seq();
					if (matchError) {break loop43;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((_tokenSet_134.member(LA1_44)) && (_tokenSet_1.member(LA2_44))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_134, tokenNames);if (matchError) {break loop43;}
				}
				
				}
				{
				int LA1_45 = LA(1);
				int LA2_45 = LA(2);
				
				if ((LA1_45==AND||LA1_45==AMPERSAND) && (_tokenSet_134.member(LA2_45))) {
					ref_qualifier();
					if (matchError) {break loop43;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((_tokenSet_134.member(LA1_45)) && (_tokenSet_1.member(LA2_45))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_134, tokenNames);if (matchError) {break loop43;}
				}
				
				}
				{
				switch ( LA(1)) {
				case LITERAL_throw:
				case LITERAL_noexcept:
				{
					exception_specification();
					if (matchError) {break loop43;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case EOF:
				case ELLIPSIS:
				case SEMICOLON:
				case LPAREN:
				case LSQUARE:
				case LCURLY:
				case STAR:
				case AND:
				case AMPERSAND:
				case TILDE:
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_namespace:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL_using:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_static_assert:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_134, tokenNames);if (matchError) {break loop43;}
				}
				}
				}
				function_declarator_with_fun_as_ret_type_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_135, tokenNames);if (matchError) {break loop43;}
			}
			}
		break;} // loop43
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_136);
			resetMatchError();
	}
	returnAST = function_declarator_with_fun_as_ret_type_AST;
}

	public final void function_declaration_with_fun_as_ret_type() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_declaration_with_fun_as_ret_type_AST = null;
		
		loop44:  while (true) {
			declaration_specifiers(false, false);
			if (matchError) {break loop44;}
			astFactory.addASTChild(currentAST, returnAST);
			function_declarator_with_fun_as_ret_type(false);
			if (matchError) {break loop44;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case EOF:
			{
				consume();
				reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
				break;
			}
			case SEMICOLON:
			{
				AST tmp200_AST = null;
				tmp200_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp200_AST);
				consume();
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop44;}
			}
			}
			}
			function_declaration_with_fun_as_ret_type_AST = (AST)currentAST.root;
		break;} // loop44
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = function_declaration_with_fun_as_ret_type_AST;
}

	public final void function_definition_with_fun_as_ret_type() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_definition_with_fun_as_ret_type_AST = null;
		
		loop45:  while (true) {
			declaration_specifiers(false, false);
			if (matchError) {break loop45;}
			astFactory.addASTChild(currentAST, returnAST);
			function_declarator_with_fun_as_ret_type(true);
			if (matchError) {break loop45;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			int LA1_46 = LA(1);
			int LA2_46 = LA(2);
			
			if ((_tokenSet_133.member(LA1_46)) && (_tokenSet_1.member(LA2_46))) {
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				case LPAREN:
				case LSQUARE:
				case STAR:
				case AND:
				case AMPERSAND:
				case TILDE:
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_namespace:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL_using:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_static_assert:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					function_K_R_parameter_list();
					if (matchError) {break loop45;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_133, tokenNames);if (matchError) {break loop45;}
				}
				}
				}
				in_parameter_list = false;
			}
			else if ((LA1_46==LCURLY) && (_tokenSet_1.member(LA2_46))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_133, tokenNames);if (matchError) {break loop45;}
			}
			
			}
			compound_statement();
			if (matchError) {break loop45;}
			astFactory.addASTChild(currentAST, returnAST);
			function_definition_with_fun_as_ret_type_AST = (AST)currentAST.root;
		break;} // loop45
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = function_definition_with_fun_as_ret_type_AST;
}

	public final void asm_block() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST asm_block_AST = null;
		
		loop46:  while (true) {
			{
			int LA1_47 = LA(1);
			int LA2_47 = LA(2);
			
			if (((LA1_47 >= LITERAL_asm && LA1_47 <= LITERAL___asm)) && (LA2_47==LCURLY)) {
				literal_asm();
				if (matchError) {break loop46;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp201_AST = null;
				tmp201_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp201_AST);
				match(LCURLY);
				if (matchError) {break loop46;}
				{
				_loop1148:
				do {
					if ((_tokenSet_137.member(LA(1)))) {
						AST tmp202_AST = null;
						tmp202_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp202_AST);
						consume();
					}
					else {
						break _loop1148;
					}
					
				} while (true);
				}
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
					break;
				}
				case RCURLY:
				{
					AST tmp204_AST = null;
					tmp204_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp204_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_84, tokenNames);if (matchError) {break loop46;}
				}
				}
				}
			}
			else if (((LA1_47 >= LITERAL_asm && LA1_47 <= LITERAL___asm)) && (_tokenSet_138.member(LA2_47))) {
				literal_asm();
				if (matchError) {break loop46;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				{
					literal_volatile();
					if (matchError) {break loop46;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LITERAL_goto:
				{
					AST tmp205_AST = null;
					tmp205_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp205_AST);
					consume();
					break;
				}
				case LPAREN:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_138, tokenNames);if (matchError) {break loop46;}
				}
				}
				}
				{
				if (!(LA(1)==LPAREN))
				{matchError=true;
				matchException = new SemanticException("LA(1)==LPAREN");
				if (matchError) {break loop46;}}
				balanceParens();
				if (matchError) {break loop46;}
				astFactory.addASTChild(currentAST, returnAST);
				}
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_140, tokenNames);if (matchError) {break loop46;}
			}
			
			}
			asm_block_AST = (AST)currentAST.root;
			asm_block_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ASM_BLOCK,"CSM_ASM_BLOCK", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(asm_block_AST));
			currentAST.root = asm_block_AST;
			currentAST.child = asm_block_AST!=null &&asm_block_AST.getFirstChild()!=null ?
				asm_block_AST.getFirstChild() : asm_block_AST;
			currentAST.advanceChildToEnd();
			asm_block_AST = (AST)currentAST.root;
		break;} // loop46
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((asm_block_AST == null) && (currentAST.root != null)) {
			asm_block_AST = (AST)currentAST.root;
			asm_block_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ASM_BLOCK,"CSM_ASM_BLOCK", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(asm_block_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = asm_block_AST;
}

	public final void decl_namespace() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST decl_namespace_AST = null;
		Token  token = null;
		AST token_AST = null;
		Token  token2 = null;
		AST token2_AST = null;
		String qid; String name = "";
		
		loop47:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL___forceinline:
			{
				literal_inline();
				if (matchError) {break loop47;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL_namespace:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_29, tokenNames);if (matchError) {break loop47;}
			}
			}
			}
			token = LT(1);
			token_AST = astFactory.create(token);
			astFactory.addASTChild(currentAST, token_AST);
			match(LITERAL_namespace);
			if (matchError) {break loop47;}
			{
			int LA1_48 = LA(1);
			int LA2_48 = LA(2);
			
			if ((_tokenSet_141.member(LA1_48)) && (_tokenSet_142.member(LA2_48))) {
				action.namespace_declaration(token);
				{
				switch ( LA(1)) {
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				{
					name=literal_ident();
					if (matchError) {break loop47;}
					astFactory.addASTChild(currentAST, returnAST);
					_td = true; /*declaratorID(name,qiType);} {action.namespace_name(name);*/
					break;
				}
				case LSQUARE:
				case LCURLY:
				case LITERAL___attribute__:
				case LITERAL___attribute:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_141, tokenNames);if (matchError) {break loop47;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case LSQUARE:
				case LITERAL___attribute__:
				case LITERAL___attribute:
				{
					namespace_attribute_specification();
					if (matchError) {break loop47;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_143, tokenNames);if (matchError) {break loop47;}
				}
				}
				}
				action.namespace_body(LT(1));
				AST tmp206_AST = null;
				tmp206_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp206_AST);
				match(LCURLY);
				if (matchError) {break loop47;}
				{
				{
				_loop254:
				do {
					if ((_tokenSet_2.member(LA(1)))) {
						external_declaration();
						if (matchError) {break loop47;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						break _loop254;
					}
					
				} while (true);
				}
				}
				decl_namespace_AST = (AST)currentAST.root;
				/*exitLocalScope();*/{ decl_namespace_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_NAMESPACE_DECLARATION,name, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(decl_namespace_AST)); }
				currentAST.root = decl_namespace_AST;
				currentAST.child = decl_namespace_AST!=null &&decl_namespace_AST.getFirstChild()!=null ?
					decl_namespace_AST.getFirstChild() : decl_namespace_AST;
				currentAST.advanceChildToEnd();
				action.end_namespace_body(LT(1));
				token2 = LT(1);
				token2_AST = astFactory.create(token2);
				astFactory.addASTChild(currentAST, token2_AST);
				match(RCURLY);
				if (matchError) {break loop47;}
				action.end_namespace_declaration(token2);
			}
			else if ((_tokenSet_0.member(LA1_48)) && (LA2_48==ASSIGNEQUAL)) {
				name=literal_ident();
				if (matchError) {break loop47;}
				astFactory.addASTChild(currentAST, returnAST);
				_td = true;declaratorID((name),qiType);
				AST tmp207_AST = null;
				tmp207_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp207_AST);
				match(ASSIGNEQUAL);
				if (matchError) {break loop47;}
				qid=qualified_id();
				if (matchError) {break loop47;}
				astFactory.addASTChild(currentAST, returnAST);
				match(SEMICOLON);
				if (matchError) {break loop47;}
				decl_namespace_AST = (AST)currentAST.root;
				/*end_of_stmt();*/decl_namespace_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_NAMESPACE_ALIAS,name, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(decl_namespace_AST));
				currentAST.root = decl_namespace_AST;
				currentAST.child = decl_namespace_AST!=null &&decl_namespace_AST.getFirstChild()!=null ?
					decl_namespace_AST.getFirstChild() : decl_namespace_AST;
				currentAST.advanceChildToEnd();
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_141, tokenNames);if (matchError) {break loop47;}
			}
			
			}
			decl_namespace_AST = (AST)currentAST.root;
		break;} // loop47
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((decl_namespace_AST == null) && (currentAST.root != null)) {
			decl_namespace_AST = (AST)currentAST.root;
			/*end_of_stmt();*/decl_namespace_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_NAMESPACE_ALIAS,name, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(decl_namespace_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = decl_namespace_AST;
}

	protected final void namespace_attribute_specification() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST namespace_attribute_specification_AST = null;
		
		loop48:  while (true) {
			attribute_specification_list();
			if (matchError) {break loop48;}
		break;} // loop48
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_145);
			resetMatchError();
	}
	returnAST = namespace_attribute_specification_AST;
}

	public final void namespace_alias_definition() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST namespace_alias_definition_AST = null;
		Token  lns = null;
		AST lns_AST = null;
		Token  lae = null;
		AST lae_AST = null;
		String qid; String name = "";
		
		loop49:  while (true) {
			lns = LT(1);
			lns_AST = astFactory.create(lns);
			astFactory.addASTChild(currentAST, lns_AST);
			match(LITERAL_namespace);
			if (matchError) {break loop49;}
			name=literal_ident();
			if (matchError) {break loop49;}
			astFactory.addASTChild(currentAST, returnAST);
			_td = true;declaratorID((name),qiType);
			lae = LT(1);
			lae_AST = astFactory.create(lae);
			astFactory.addASTChild(currentAST, lae_AST);
			match(ASSIGNEQUAL);
			if (matchError) {break loop49;}
			qid=qualified_id();
			if (matchError) {break loop49;}
			astFactory.addASTChild(currentAST, returnAST);
			match(SEMICOLON);
			if (matchError) {break loop49;}
			namespace_alias_definition_AST = (AST)currentAST.root;
			namespace_alias_definition_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_NAMESPACE_ALIAS,name, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(namespace_alias_definition_AST));
			currentAST.root = namespace_alias_definition_AST;
			currentAST.child = namespace_alias_definition_AST!=null &&namespace_alias_definition_AST.getFirstChild()!=null ?
				namespace_alias_definition_AST.getFirstChild() : namespace_alias_definition_AST;
			currentAST.advanceChildToEnd();
			namespace_alias_definition_AST = (AST)currentAST.root;
		break;} // loop49
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((namespace_alias_definition_AST == null) && (currentAST.root != null)) {
			namespace_alias_definition_AST = (AST)currentAST.root;
			namespace_alias_definition_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_NAMESPACE_ALIAS,name, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(namespace_alias_definition_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = namespace_alias_definition_AST;
}

	public final void member_declaration_template() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST member_declaration_template_AST = null;
		String q; boolean definition=false; boolean friend = false; boolean ctorName = false;
		
		loop50:  while (true) {
			beginTemplateDefinition();
			template_head();
			if (matchError) {break loop50;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			int LA1_49 = LA(1);
			int LA2_49 = LA(2);
			
			boolean synPredMatched259 = false;
			if (((_tokenSet_26.member(LA1_49)) && (_tokenSet_27.member(LA2_49)))) {
				int _m259 = mark();
				guessing++;
				guess259:  while (true) {
					{
					class_head_g();
					if (matchError) {break guess259;}
					}
				synPredMatched259 = true;
				break;} // guess259
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m259);
				guessing--;
			}
			if ( synPredMatched259 ) {
				if (statementTrace>=1) 
								printf("member_declaration_12[%d]: Class template declaration\n",
									LT(1).getLine());
							
				declaration(declOther);
				if (matchError) {break loop50;}
				astFactory.addASTChild(currentAST, returnAST);
				member_declaration_template_AST = (AST)currentAST.root;
				member_declaration_template_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPLATE_CLASS_DECLARATION,"CSM_TEMPLATE_CLASS_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_template_AST));
				currentAST.root = member_declaration_template_AST;
				currentAST.child = member_declaration_template_AST!=null &&member_declaration_template_AST.getFirstChild()!=null ?
					member_declaration_template_AST.getFirstChild() : member_declaration_template_AST;
				currentAST.advanceChildToEnd();
			}
			else {
				boolean synPredMatched262 = false;
				if (((_tokenSet_16.member(LA1_49)) && (_tokenSet_17.member(LA2_49)))) {
					int _m262 = mark();
					guessing++;
					guess262:  while (true) {
						{
						ctor_decl_spec_g();
						if (matchError) {break guess262;}
						if (!(qualifiedItemIsOneOf(qiCtor)))
						{matchError=true;
						if (matchError) {break guess262;}}
						ctor_declarator_g(false);
						if (matchError) {break guess262;}
						{
						switch ( LA(1)) {
						case EOF:
						{
							consume();
							break;
						}
						case SEMICOLON:
						{
							consume();
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess262;}
						}
						}
						}
						}
					synPredMatched262 = true;
					break;} // guess262
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m262);
					guessing--;
				}
				if ( synPredMatched262 ) {
					if (statementTrace>=1) 
					printf("member_declaration_13[%d]: Constructor declarator\n",
					LT(1).getLine());
					
					friend=ctor_decl_spec();
					if (matchError) {break loop50;}
					astFactory.addASTChild(currentAST, returnAST);
					ctorName=ctor_declarator(false);
					if (matchError) {break loop50;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					switch ( LA(1)) {
					case EOF:
					{
						consume();
						reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
						break;
					}
					case SEMICOLON:
					{
						AST tmp211_AST = null;
						tmp211_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp211_AST);
						consume();
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop50;}
					}
					}
					}
					member_declaration_template_AST = (AST)currentAST.root;
					
					// below is a workaround for know infinite loop bug in ANTLR 
					// see http://www.jguru.com/faq/view.jsp?EID=271922
					//if( #cds1 != null ) { #cds1.setNextSibling(null); }; 
					member_declaration_template_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CTOR_TEMPLATE_DECLARATION,"CSM_CTOR_TEMPLATE_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_template_AST)); //end_of_stmt();
					
					currentAST.root = member_declaration_template_AST;
					currentAST.child = member_declaration_template_AST!=null &&member_declaration_template_AST.getFirstChild()!=null ?
						member_declaration_template_AST.getFirstChild() : member_declaration_template_AST;
					currentAST.advanceChildToEnd();
				}
				else {
					boolean synPredMatched267 = false;
					if (((_tokenSet_16.member(LA1_49)) && (_tokenSet_17.member(LA2_49)))) {
						int _m267 = mark();
						guessing++;
						guess267:  while (true) {
							{
							ctor_decl_spec_g();
							if (matchError) {break guess267;}
							if (!(qualifiedItemIsOneOf(qiCtor)))
							{matchError=true;
							if (matchError) {break guess267;}}
							ctor_declarator_g(true);
							if (matchError) {break guess267;}
							{
							switch ( LA(1)) {
							case COLON:
							{
								consume();
								break;
							}
							case LCURLY:
							{
								consume();
								break;
							}
							case ASSIGNEQUAL:
							{
								consume();
								{
								switch ( LA(1)) {
								case LITERAL_default:
								{
									consume();
									break;
								}
								case LITERAL_delete:
								{
									consume();
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess267;}
								}
								}
								}
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess267;}
							}
							}
							}
							}
						synPredMatched267 = true;
						break;} // guess267
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m267);
						guessing--;
					}
					if ( synPredMatched267 ) {
						if (statementTrace>=1) 
										printf("member_declaration_13a[%d]: Template constructor " +
											"definition\n", LT(1).getLine());
									
						ctor_definition();
						if (matchError) {break loop50;}
						astFactory.addASTChild(currentAST, returnAST);
						member_declaration_template_AST = (AST)currentAST.root;
						member_declaration_template_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CTOR_TEMPLATE_DEFINITION,"CSM_CTOR_TEMPLATE_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_template_AST));
						currentAST.root = member_declaration_template_AST;
						currentAST.child = member_declaration_template_AST!=null &&member_declaration_template_AST.getFirstChild()!=null ?
							member_declaration_template_AST.getFirstChild() : member_declaration_template_AST;
						currentAST.advanceChildToEnd();
					}
					else {
						boolean synPredMatched269 = false;
						if (((_tokenSet_26.member(LA1_49)) && (_tokenSet_27.member(LA2_49)))) {
							int _m269 = mark();
							guessing++;
							guess269:  while (true) {
								{
								declaration_specifiers_g(false, false);
								if (matchError) {break guess269;}
								function_declarator_g(false, false, false);
								if (matchError) {break guess269;}
								match(SEMICOLON);
								if (matchError) {break guess269;}
								}
							synPredMatched269 = true;
							break;} // guess269
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m269);
							guessing--;
						}
						if ( synPredMatched269 ) {
							if (statementTrace>=1) 
											printf("member_declaration_13b[%d]: Function template " +
												"declaration\n", LT(1).getLine());
										
							declaration(declOther);
							if (matchError) {break loop50;}
							astFactory.addASTChild(currentAST, returnAST);
							member_declaration_template_AST = (AST)currentAST.root;
							member_declaration_template_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_TEMPLATE_DECLARATION,"CSM_FUNCTION_TEMPLATE_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_template_AST));
							currentAST.root = member_declaration_template_AST;
							currentAST.child = member_declaration_template_AST!=null &&member_declaration_template_AST.getFirstChild()!=null ?
								member_declaration_template_AST.getFirstChild() : member_declaration_template_AST;
							currentAST.advanceChildToEnd();
						}
						else {
							boolean synPredMatched273 = false;
							if (((_tokenSet_22.member(LA1_49)) && (_tokenSet_23.member(LA2_49)))) {
								int _m273 = mark();
								guessing++;
								guess273:  while (true) {
									{
									declaration_specifiers_g(false, false);
									if (matchError) {break guess273;}
									function_declarator_g(true, false, false);
									if (matchError) {break guess273;}
									{
									switch ( LA(1)) {
									case LCURLY:
									{
										consume();
										break;
									}
									case LITERAL_try:
									case LITERAL___try:
									{
										literal_try_g();
										if (matchError) {break guess273;}
										break;
									}
									case ASSIGNEQUAL:
									{
										consume();
										{
										switch ( LA(1)) {
										case LITERAL_default:
										{
											consume();
											break;
										}
										case LITERAL_delete:
										{
											consume();
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break guess273;}
										}
										}
										}
										break;
									}
									default:
									{
										matchError=true;if (matchError) {break guess273;}
									}
									}
									}
									}
								synPredMatched273 = true;
								break;} // guess273
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m273);
								guessing--;
							}
							if ( synPredMatched273 ) {
								if (statementTrace>=1) printf("member_declaration_13c[%d]: Function template " + "definition\n", LT(1).getLine());
								function_definition();
								if (matchError) {break loop50;}
								astFactory.addASTChild(currentAST, returnAST);
								member_declaration_template_AST = (AST)currentAST.root;
								member_declaration_template_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_TEMPLATE_DEFINITION,"CSM_FUNCTION_TEMPLATE_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_template_AST));
								currentAST.root = member_declaration_template_AST;
								currentAST.child = member_declaration_template_AST!=null &&member_declaration_template_AST.getFirstChild()!=null ?
									member_declaration_template_AST.getFirstChild() : member_declaration_template_AST;
								currentAST.advanceChildToEnd();
							}
							else {
								boolean synPredMatched278 = false;
								if (((_tokenSet_146.member(LA1_49)) && (_tokenSet_147.member(LA2_49)))) {
									int _m278 = mark();
									guessing++;
									guess278:  while (true) {
										{
										{
										_loop277:
										do {
											switch ( LA(1)) {
											case LSQUARE:
											case LITERAL___attribute__:
											case LITERAL___attribute:
											{
												{
												function_attribute_specification_g();
												if (matchError) {break guess278;}
												}
												break;
											}
											case LITERAL_inline:
											case LITERAL__inline:
											case LITERAL___inline__:
											case LITERAL___inline:
											case LITERAL___forceinline:
											{
												literal_inline_g();
												if (matchError) {break guess278;}
												break;
											}
											case LITERAL_constexpr:
											{
												consume();
												break;
											}
											case LITERAL_explicit:
											{
												consume();
												break;
											}
											default:
											{
												break _loop277;
											}
											}
										} while (true);
										}
										conversion_function_decl_or_def_g();
										if (matchError) {break guess278;}
										}
									synPredMatched278 = true;
									break;} // guess278
									if (matchError) {
									   resetMatchError();
									}
									rewind(_m278);
									guessing--;
								}
								if ( synPredMatched278 ) {
									if (statementTrace>=1) printf("member_declaration_13d[%d]: Templated operator " + "function\n", LT(1).getLine());
									{
									_loop281:
									do {
										switch ( LA(1)) {
										case LSQUARE:
										case LITERAL___attribute__:
										case LITERAL___attribute:
										{
											{
											function_attribute_specification();
											if (matchError) {break loop50;}
											astFactory.addASTChild(currentAST, returnAST);
											}
											break;
										}
										case LITERAL_inline:
										case LITERAL__inline:
										case LITERAL___inline__:
										case LITERAL___inline:
										case LITERAL___forceinline:
										{
											literal_inline();
											if (matchError) {break loop50;}
											astFactory.addASTChild(currentAST, returnAST);
											break;
										}
										case LITERAL_constexpr:
										{
											AST tmp212_AST = null;
											tmp212_AST = astFactory.create(LT(1));
											astFactory.addASTChild(currentAST, tmp212_AST);
											consume();
											break;
										}
										case LITERAL_explicit:
										{
											AST tmp213_AST = null;
											tmp213_AST = astFactory.create(LT(1));
											astFactory.addASTChild(currentAST, tmp213_AST);
											consume();
											break;
										}
										default:
										{
											break _loop281;
										}
										}
									} while (true);
									}
									definition=conversion_function_decl_or_def();
									if (matchError) {break loop50;}
									astFactory.addASTChild(currentAST, returnAST);
									member_declaration_template_AST = (AST)currentAST.root;
									if( definition )   member_declaration_template_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_USER_TYPE_CAST_TEMPLATE_DEFINITION,"CSM_USER_TYPE_CAST_TEMPLATE_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_template_AST));
									else               member_declaration_template_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_USER_TYPE_CAST_TEMPLATE_DECLARATION,"CSM_USER_TYPE_CAST_TEMPLATE_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_template_AST));
									currentAST.root = member_declaration_template_AST;
									currentAST.child = member_declaration_template_AST!=null &&member_declaration_template_AST.getFirstChild()!=null ?
										member_declaration_template_AST.getFirstChild() : member_declaration_template_AST;
									currentAST.advanceChildToEnd();
								}
								else {
									boolean synPredMatched283 = false;
									if (((LA1_49==LITERAL_using) && (_tokenSet_0.member(LA2_49)))) {
										int _m283 = mark();
										guessing++;
										guess283:  while (true) {
											{
											match(LITERAL_using);
											if (matchError) {break guess283;}
											literal_ident_g();
											if (matchError) {break guess283;}
											match(ASSIGNEQUAL);
											if (matchError) {break guess283;}
											}
										synPredMatched283 = true;
										break;} // guess283
										if (matchError) {
										   resetMatchError();
										}
										rewind(_m283);
										guessing--;
									}
									if ( synPredMatched283 ) {
										alias_declaration();
										if (matchError) {break loop50;}
										astFactory.addASTChild(currentAST, returnAST);
										member_declaration_template_AST = (AST)currentAST.root;
										member_declaration_template_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FIELD,"CSM_FIELD", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_template_AST));
										currentAST.root = member_declaration_template_AST;
										currentAST.child = member_declaration_template_AST!=null &&member_declaration_template_AST.getFirstChild()!=null ?
											member_declaration_template_AST.getFirstChild() : member_declaration_template_AST;
										currentAST.advanceChildToEnd();
									}
									else {
										boolean synPredMatched286 = false;
										if (((_tokenSet_22.member(LA1_49)) && (_tokenSet_119.member(LA2_49)))) {
											int _m286 = mark();
											guessing++;
											guess286:  while (true) {
												{
												declaration_specifiers_g(true, false);
												if (matchError) {break guess286;}
												{
												switch ( LA(1)) {
												case ELLIPSIS:
												case LPAREN:
												case LSQUARE:
												case STAR:
												case AND:
												case AMPERSAND:
												case TILDE:
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL__stdcall:
												case LITERAL___stdcall:
												case LITERAL_this:
												case LITERAL_true:
												case LITERAL_false:
												case LITERAL__cdecl:
												case LITERAL___cdecl:
												case LITERAL__near:
												case LITERAL___near:
												case LITERAL__far:
												case LITERAL___far:
												case LITERAL___interrupt:
												case LITERAL_pascal:
												case LITERAL__pascal:
												case LITERAL___pascal:
												case LITERAL___attribute__:
												case LITERAL___attribute:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_decltype:
												case LITERAL___decltype:
												case LITERAL___clrcall:
												{
													init_declarator_list_g(declOther);
													if (matchError) {break guess286;}
													break;
												}
												case SEMICOLON:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess286;}
												}
												}
												}
												match(SEMICOLON);
												if (matchError) {break guess286;}
												}
											synPredMatched286 = true;
											break;} // guess286
											if (matchError) {
											   resetMatchError();
											}
											rewind(_m286);
											guessing--;
										}
										if ( synPredMatched286 ) {
											if (statementTrace>=1) 
															printf("member_declaration_12a[%d]: Class template declaration\n",
																LT(1).getLine());
														
											declaration_specifiers(true, false);
											if (matchError) {break loop50;}
											astFactory.addASTChild(currentAST, returnAST);
											{
											switch ( LA(1)) {
											case ELLIPSIS:
											case LPAREN:
											case LSQUARE:
											case STAR:
											case AND:
											case AMPERSAND:
											case TILDE:
											case SCOPE:
											case IDENT:
											case LITERAL_OPERATOR:
											case LITERAL__stdcall:
											case LITERAL___stdcall:
											case LITERAL_this:
											case LITERAL_true:
											case LITERAL_false:
											case LITERAL__cdecl:
											case LITERAL___cdecl:
											case LITERAL__near:
											case LITERAL___near:
											case LITERAL__far:
											case LITERAL___far:
											case LITERAL___interrupt:
											case LITERAL_pascal:
											case LITERAL__pascal:
											case LITERAL___pascal:
											case LITERAL___attribute__:
											case LITERAL___attribute:
											case LITERAL_final:
											case LITERAL_override:
											case LITERAL_decltype:
											case LITERAL___decltype:
											case LITERAL___clrcall:
											{
												init_declarator_list(declOther);
												if (matchError) {break loop50;}
												astFactory.addASTChild(currentAST, returnAST);
												break;
											}
											case SEMICOLON:
											{
												break;
											}
											default:
											{
												matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_41, tokenNames);if (matchError) {break loop50;}
											}
											}
											}
											AST tmp214_AST = null;
											tmp214_AST = astFactory.create(LT(1));
											astFactory.addASTChild(currentAST, tmp214_AST);
											match(SEMICOLON);
											if (matchError) {break loop50;}
											member_declaration_template_AST = (AST)currentAST.root;
											/*endTemplateDeclaration();*/ member_declaration_template_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPL_FWD_CL_OR_STAT_MEM,"CSM_TEMPL_FWD_CL_OR_STAT_MEM", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_template_AST));
											currentAST.root = member_declaration_template_AST;
											currentAST.child = member_declaration_template_AST!=null &&member_declaration_template_AST.getFirstChild()!=null ?
												member_declaration_template_AST.getFirstChild() : member_declaration_template_AST;
											currentAST.advanceChildToEnd();
										}
										else {
											matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_26, tokenNames);if (matchError) {break loop50;}
										}
										}}}}}}}
										}
										endTemplateDefinition();
										member_declaration_template_AST = (AST)currentAST.root;
									break;} // loop50
									if (matchError) {
										// when recover we'd like to perform any "build AST" actions
										if ((member_declaration_template_AST == null) && (currentAST.root != null)) {
										member_declaration_template_AST = (AST)currentAST.root;
										/*endTemplateDeclaration();*/ member_declaration_template_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPL_FWD_CL_OR_STAT_MEM,"CSM_TEMPL_FWD_CL_OR_STAT_MEM", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_template_AST));
										}
										reportError(matchException);
										recover(matchException,_tokenSet_1);
										resetMatchError();
								}
								returnAST = member_declaration_template_AST;
							}
							
	public final void member_declaration() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST member_declaration_AST = null;
		AST cds_AST = null;
		AST cd_AST = null;
		String q; boolean definition;boolean ctrName=false;StorageClass sc = scInvalid;int ts = 0;boolean friend = false;
		
		loop51:  while (true) {
			{
			int LA1_50 = LA(1);
			int LA2_50 = LA(2);
			
			switch ( LA1_50) {
			case LITERAL_public:
			case LITERAL_protected:
			case LITERAL_private:
			{
				if (statementTrace>=1) 
							printf("member_declaration_14[%d]: Access specifier\n",
							    LT(1).getLine());
						
				access_specifier();
				if (matchError) {break loop51;}
				astFactory.addASTChild(currentAST, returnAST);
				match(COLON);
				if (matchError) {break loop51;}
				break;
			}
			case SEMICOLON:
			{
				if (statementTrace>=1) 
							printf("member_declaration_15[%d]: Semicolon\n",
								LT(1).getLine());
						
				match(SEMICOLON);
				if (matchError) {break loop51;}
				break;
			}
			default:
				boolean synPredMatched293 = false;
				if (((_tokenSet_10.member(LA1_50)) && (_tokenSet_11.member(LA2_50)))) {
					int _m293 = mark();
					guessing++;
					guess293:  while (true) {
						{
						{
						switch ( LA(1)) {
						case LITERAL___extension__:
						{
							consume();
							break;
						}
						case LITERAL_typedef:
						case LITERAL_extern:
						case LITERAL_friend:
						case LITERAL_auto:
						case LITERAL_register:
						case LITERAL_static:
						case LITERAL_mutable:
						case LITERAL_const:
						case LITERAL___const__:
						case LITERAL___const:
						case LITERAL_const_cast:
						case LITERAL_volatile:
						case LITERAL___volatile__:
						case LITERAL___volatile:
						case LITERAL_class:
						case LITERAL_struct:
						case LITERAL_union:
						case LITERAL___global:
						case LITERAL___thread:
						case LITERAL___symbolic:
						case LITERAL___hidden:
						case LITERAL_constexpr:
						case LITERAL_thread_local:
						case LITERAL__TYPE_QUALIFIER__:
						case LITERAL__STORAGE_CLASS_SPECIFIER__:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess293;}
						}
						}
						}
						{
						switch ( LA(1)) {
						case LITERAL_typedef:
						case LITERAL_extern:
						case LITERAL_friend:
						case LITERAL_auto:
						case LITERAL_register:
						case LITERAL_static:
						case LITERAL_mutable:
						case LITERAL_const:
						case LITERAL___const__:
						case LITERAL___const:
						case LITERAL_const_cast:
						case LITERAL_volatile:
						case LITERAL___volatile__:
						case LITERAL___volatile:
						case LITERAL___global:
						case LITERAL___thread:
						case LITERAL___symbolic:
						case LITERAL___hidden:
						case LITERAL_constexpr:
						case LITERAL_thread_local:
						case LITERAL__TYPE_QUALIFIER__:
						case LITERAL__STORAGE_CLASS_SPECIFIER__:
						{
							decl_specifiers_before_type_g();
							if (matchError) {break guess293;}
							break;
						}
						case LITERAL_class:
						case LITERAL_struct:
						case LITERAL_union:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess293;}
						}
						}
						}
						class_head_g();
						if (matchError) {break guess293;}
						}
					synPredMatched293 = true;
					break;} // guess293
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m293);
					guessing--;
				}
				if ( synPredMatched293 ) {
					action.simple_declaration(LT(1));
					action.class_declaration(LT(1));
					if (statementTrace>=1) 
								printf("member_declaration_1[%d]: Class definition\n",
									LT(1).getLine());
							
					{
					switch ( LA(1)) {
					case LITERAL___extension__:
					{
						consume();
						break;
					}
					case ELLIPSIS:
					case LPAREN:
					case LSQUARE:
					case STAR:
					case AND:
					case AMPERSAND:
					case TILDE:
					case SCOPE:
					case IDENT:
					case LITERAL_OPERATOR:
					case LITERAL_typeof:
					case LITERAL___typeof__:
					case LITERAL___typeof:
					case LITERAL_typedef:
					case LITERAL_enum:
					case LITERAL_namespace:
					case LITERAL_extern:
					case LITERAL_inline:
					case LITERAL__inline:
					case LITERAL___inline__:
					case LITERAL___inline:
					case LITERAL_virtual:
					case LITERAL_explicit:
					case LITERAL_friend:
					case LITERAL__stdcall:
					case LITERAL___stdcall:
					case LITERAL_typename:
					case LITERAL_auto:
					case LITERAL_register:
					case LITERAL_static:
					case LITERAL_mutable:
					case LITERAL_const:
					case LITERAL___const__:
					case LITERAL___const:
					case LITERAL_const_cast:
					case LITERAL_volatile:
					case LITERAL___volatile__:
					case LITERAL___volatile:
					case LITERAL_char:
					case LITERAL_wchar_t:
					case LITERAL_bool:
					case LITERAL_short:
					case LITERAL_int:
					case LITERAL_long:
					case LITERAL_signed:
					case LITERAL___signed__:
					case LITERAL___signed:
					case LITERAL_unsigned:
					case LITERAL___unsigned__:
					case LITERAL_float:
					case LITERAL_double:
					case LITERAL_void:
					case LITERAL__declspec:
					case LITERAL___declspec:
					case LITERAL_class:
					case LITERAL_struct:
					case LITERAL_union:
					case LITERAL_this:
					case LITERAL_true:
					case LITERAL_false:
					case LITERAL_using:
					case LITERAL__cdecl:
					case LITERAL___cdecl:
					case LITERAL__near:
					case LITERAL___near:
					case LITERAL__far:
					case LITERAL___far:
					case LITERAL___interrupt:
					case LITERAL_pascal:
					case LITERAL__pascal:
					case LITERAL___pascal:
					case LITERAL__int64:
					case LITERAL___int64:
					case LITERAL___w64:
					case LITERAL___attribute__:
					case LITERAL___complex__:
					case LITERAL___global:
					case LITERAL__Bool:
					case LITERAL__Complex:
					case LITERAL___thread:
					case LITERAL___attribute:
					case LITERAL__Imaginary:
					case LITERAL_bit:
					case LITERAL___symbolic:
					case LITERAL___hidden:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_constexpr:
					case LITERAL_decltype:
					case LITERAL_thread_local:
					case LITERAL_static_assert:
					case LITERAL_alignas:
					case LITERAL_char16_t:
					case LITERAL_char32_t:
					case LITERAL___decltype:
					case LITERAL___complex:
					case LITERAL___forceinline:
					case LITERAL___clrcall:
					case LITERAL__Noreturn:
					case LITERAL___builtin_va_list:
					case LITERAL__BUILT_IN_TYPE__:
					case LITERAL__TYPE_QUALIFIER__:
					case LITERAL__STORAGE_CLASS_SPECIFIER__:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_10, tokenNames);if (matchError) {break loop51;}
					}
					}
					}
					declaration(declOther);
					if (matchError) {break loop51;}
					astFactory.addASTChild(currentAST, returnAST);
					member_declaration_AST = (AST)currentAST.root;
					member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CLASS_DECLARATION,"CSM_CLASS_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));
					currentAST.root = member_declaration_AST;
					currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
						member_declaration_AST.getFirstChild() : member_declaration_AST;
					currentAST.advanceChildToEnd();
				}
				else {
					boolean synPredMatched298 = false;
					if (((_tokenSet_28.member(LA1_50)) && (_tokenSet_119.member(LA2_50)))) {
						int _m298 = mark();
						guessing++;
						guess298:  while (true) {
							{
							{
							switch ( LA(1)) {
							case LITERAL___extension__:
							{
								consume();
								break;
							}
							case LITERAL_typedef:
							case LITERAL_enum:
							case LITERAL_extern:
							case LITERAL_friend:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL_const:
							case LITERAL___const__:
							case LITERAL___const:
							case LITERAL_const_cast:
							case LITERAL_volatile:
							case LITERAL___volatile__:
							case LITERAL___volatile:
							case LITERAL___global:
							case LITERAL___thread:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_constexpr:
							case LITERAL_thread_local:
							case LITERAL__TYPE_QUALIFIER__:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess298;}
							}
							}
							}
							{
							switch ( LA(1)) {
							case LITERAL_typedef:
							case LITERAL_extern:
							case LITERAL_friend:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL_const:
							case LITERAL___const__:
							case LITERAL___const:
							case LITERAL_const_cast:
							case LITERAL_volatile:
							case LITERAL___volatile__:
							case LITERAL___volatile:
							case LITERAL___global:
							case LITERAL___thread:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_constexpr:
							case LITERAL_thread_local:
							case LITERAL__TYPE_QUALIFIER__:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								decl_specifiers_before_type_g();
								if (matchError) {break guess298;}
								break;
							}
							case LITERAL_enum:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess298;}
							}
							}
							}
							enum_def_head_g();
							if (matchError) {break guess298;}
							}
						synPredMatched298 = true;
						break;} // guess298
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m298);
						guessing--;
					}
					if ( synPredMatched298 ) {
						action.simple_declaration(LT(1));
						action.enum_declaration(LT(1));
						if (statementTrace>=1) 
									printf("member_declaration_2[%d]: Enum definition\n",
										LT(1).getLine());
								
						{
						switch ( LA(1)) {
						case LITERAL___extension__:
						{
							consume();
							break;
						}
						case LSQUARE:
						case SCOPE:
						case IDENT:
						case LITERAL_typeof:
						case LITERAL___typeof__:
						case LITERAL___typeof:
						case LITERAL_typedef:
						case LITERAL_enum:
						case LITERAL_extern:
						case LITERAL_inline:
						case LITERAL__inline:
						case LITERAL___inline__:
						case LITERAL___inline:
						case LITERAL_virtual:
						case LITERAL_explicit:
						case LITERAL_friend:
						case LITERAL__stdcall:
						case LITERAL___stdcall:
						case LITERAL_typename:
						case LITERAL_auto:
						case LITERAL_register:
						case LITERAL_static:
						case LITERAL_mutable:
						case LITERAL_const:
						case LITERAL___const__:
						case LITERAL___const:
						case LITERAL_const_cast:
						case LITERAL_volatile:
						case LITERAL___volatile__:
						case LITERAL___volatile:
						case LITERAL_char:
						case LITERAL_wchar_t:
						case LITERAL_bool:
						case LITERAL_short:
						case LITERAL_int:
						case LITERAL_long:
						case LITERAL_signed:
						case LITERAL___signed__:
						case LITERAL___signed:
						case LITERAL_unsigned:
						case LITERAL___unsigned__:
						case LITERAL_float:
						case LITERAL_double:
						case LITERAL_void:
						case LITERAL__declspec:
						case LITERAL___declspec:
						case LITERAL_class:
						case LITERAL_struct:
						case LITERAL_union:
						case LITERAL__int64:
						case LITERAL___int64:
						case LITERAL___w64:
						case LITERAL___attribute__:
						case LITERAL___complex__:
						case LITERAL___global:
						case LITERAL__Bool:
						case LITERAL__Complex:
						case LITERAL___thread:
						case LITERAL___attribute:
						case LITERAL__Imaginary:
						case LITERAL_bit:
						case LITERAL___symbolic:
						case LITERAL___hidden:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_constexpr:
						case LITERAL_decltype:
						case LITERAL_thread_local:
						case LITERAL_alignas:
						case LITERAL_char16_t:
						case LITERAL_char32_t:
						case LITERAL___decltype:
						case LITERAL___complex:
						case LITERAL___forceinline:
						case LITERAL___clrcall:
						case LITERAL__Noreturn:
						case LITERAL___builtin_va_list:
						case LITERAL__BUILT_IN_TYPE__:
						case LITERAL__TYPE_QUALIFIER__:
						case LITERAL__STORAGE_CLASS_SPECIFIER__:
						{
							break;
						}
						default:
						{
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_28, tokenNames);if (matchError) {break loop51;}
						}
						}
						}
						declaration_specifiers(true, false);
						if (matchError) {break loop51;}
						astFactory.addASTChild(currentAST, returnAST);
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						case COLON:
						case LPAREN:
						case LSQUARE:
						case STAR:
						case AND:
						case AMPERSAND:
						case TILDE:
						case SCOPE:
						case IDENT:
						case LITERAL_OPERATOR:
						case LITERAL__stdcall:
						case LITERAL___stdcall:
						case LITERAL_this:
						case LITERAL_true:
						case LITERAL_false:
						case LITERAL__cdecl:
						case LITERAL___cdecl:
						case LITERAL__near:
						case LITERAL___near:
						case LITERAL__far:
						case LITERAL___far:
						case LITERAL___interrupt:
						case LITERAL_pascal:
						case LITERAL__pascal:
						case LITERAL___pascal:
						case LITERAL___attribute__:
						case LITERAL___attribute:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_decltype:
						case LITERAL___decltype:
						case LITERAL___clrcall:
						{
							member_declarator_list();
							if (matchError) {break loop51;}
							astFactory.addASTChild(currentAST, returnAST);
							break;
						}
						case SEMICOLON:
						{
							break;
						}
						default:
						{
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_148, tokenNames);if (matchError) {break loop51;}
						}
						}
						}
						action.end_enum_declaration(LT(1));
						action.end_simple_declaration(LT(1));
						AST tmp219_AST = null;
						tmp219_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp219_AST);
						match(SEMICOLON);
						if (matchError) {break loop51;}
						member_declaration_AST = (AST)currentAST.root;
						member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ENUM_DECLARATION,"CSM_ENUM_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));
						currentAST.root = member_declaration_AST;
						currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
							member_declaration_AST.getFirstChild() : member_declaration_AST;
						currentAST.advanceChildToEnd();
					}
					else {
						boolean synPredMatched304 = false;
						if (((_tokenSet_149.member(LA1_50)) && (_tokenSet_150.member(LA2_50)))) {
							int _m304 = mark();
							guessing++;
							guess304:  while (true) {
								{
								{
								switch ( LA(1)) {
								case LITERAL___extension__:
								{
									consume();
									break;
								}
								case LITERAL_typedef:
								case LITERAL_enum:
								case LITERAL_extern:
								case LITERAL_friend:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_const_cast:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_constexpr:
								case LITERAL_thread_local:
								case LITERAL__TYPE_QUALIFIER__:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess304;}
								}
								}
								}
								{
								switch ( LA(1)) {
								case LITERAL_typedef:
								case LITERAL_extern:
								case LITERAL_friend:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_const_cast:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_constexpr:
								case LITERAL_thread_local:
								case LITERAL__TYPE_QUALIFIER__:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									decl_specifiers_before_type_g();
									if (matchError) {break guess304;}
									break;
								}
								case LITERAL_enum:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess304;}
								}
								}
								}
								enum_fwd_head_g();
								if (matchError) {break guess304;}
								}
							synPredMatched304 = true;
							break;} // guess304
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m304);
							guessing--;
						}
						if ( synPredMatched304 ) {
							action.simple_declaration(LT(1));
							action.enum_declaration(LT(1));
							{
							switch ( LA(1)) {
							case LITERAL___extension__:
							{
								consume();
								break;
							}
							case LITERAL_typedef:
							case LITERAL_enum:
							case LITERAL_extern:
							case LITERAL_friend:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL_const:
							case LITERAL___const__:
							case LITERAL___const:
							case LITERAL_const_cast:
							case LITERAL_volatile:
							case LITERAL___volatile__:
							case LITERAL___volatile:
							case LITERAL___global:
							case LITERAL___thread:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_constexpr:
							case LITERAL_thread_local:
							case LITERAL__TYPE_QUALIFIER__:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								break;
							}
							default:
							{
								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_149, tokenNames);if (matchError) {break loop51;}
							}
							}
							}
							{
							switch ( LA(1)) {
							case LITERAL_typedef:
							case LITERAL_extern:
							case LITERAL_friend:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL_const:
							case LITERAL___const__:
							case LITERAL___const:
							case LITERAL_const_cast:
							case LITERAL_volatile:
							case LITERAL___volatile__:
							case LITERAL___volatile:
							case LITERAL___global:
							case LITERAL___thread:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_constexpr:
							case LITERAL_thread_local:
							case LITERAL__TYPE_QUALIFIER__:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								decl_specifiers_before_type();
								if (matchError) {break loop51;}
								astFactory.addASTChild(currentAST, returnAST);
								break;
							}
							case LITERAL_enum:
							{
								break;
							}
							default:
							{
								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_151, tokenNames);if (matchError) {break loop51;}
							}
							}
							}
							if (statementTrace>=1)
										printf("member_declaration_2b[%d]: Enum forward declaration\n",
											LT(1).getLine());
									
							enum_specifier();
							if (matchError) {break loop51;}
							astFactory.addASTChild(currentAST, returnAST);
							action.end_enum_declaration(LT(1));
							action.end_simple_declaration(LT(1));
							AST tmp221_AST = null;
							tmp221_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp221_AST);
							match(SEMICOLON);
							if (matchError) {break loop51;}
							member_declaration_AST = (AST)currentAST.root;
							member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ENUM_FWD_DECLARATION,"CSM_ENUM_FWD_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));
							currentAST.root = member_declaration_AST;
							currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
								member_declaration_AST.getFirstChild() : member_declaration_AST;
							currentAST.advanceChildToEnd();
						}
						else {
							boolean synPredMatched309 = false;
							if (((_tokenSet_16.member(LA1_50)) && (_tokenSet_17.member(LA2_50)))) {
								int _m309 = mark();
								guessing++;
								guess309:  while (true) {
									{
									ctor_decl_spec_g();
									if (matchError) {break guess309;}
									ctor_declarator_g(false);
									if (matchError) {break guess309;}
									{
									switch ( LA(1)) {
									case EOF:
									{
										consume();
										break;
									}
									case SEMICOLON:
									{
										consume();
										break;
									}
									default:
									{
										matchError=true;if (matchError) {break guess309;}
									}
									}
									}
									}
								synPredMatched309 = true;
								break;} // guess309
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m309);
								guessing--;
							}
							if ( synPredMatched309 ) {
								if (statementTrace>=1) 
											printf("member_declaration_3[%d]: Constructor or no-ret type fun declarator\n",
												LT(1).getLine());
										
								friend=ctor_decl_spec();
								if (matchError) {break loop51;}
								cds_AST = (AST)returnAST;
								astFactory.addASTChild(currentAST, returnAST);
								ctrName=ctor_declarator(false);
								if (matchError) {break loop51;}
								cd_AST = (AST)returnAST;
								astFactory.addASTChild(currentAST, returnAST);
								{
								switch ( LA(1)) {
								case EOF:
								{
									consume();
									break;
								}
								case SEMICOLON:
								{
									AST tmp223_AST = null;
									tmp223_AST = astFactory.create(LT(1));
									astFactory.addASTChild(currentAST, tmp223_AST);
									consume();
									break;
								}
								default:
								{
									matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop51;}
								}
								}
								}
								member_declaration_AST = (AST)currentAST.root;
								
								// below is a workaround for know infinite loop bug in ANTLR 
								// see http://www.jguru.com/faq/view.jsp?EID=271922
								if( cds_AST != null ) { cds_AST.setNextSibling(null); }; 
								if (ctrName && !friend) {
								member_declaration_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(CSM_CTOR_DECLARATION,"CSM_CTOR_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(cds_AST).add(cd_AST)); //end_of_stmt();
								} else {
								member_declaration_AST = (AST)astFactory.make( (new ASTArray(3)).add(astFactory.create(CSM_FUNCTION_DECLARATION,"CSM_FUNCTION_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(cds_AST).add(cd_AST)); //end_of_stmt();
								}
								
								currentAST.root = member_declaration_AST;
								currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
									member_declaration_AST.getFirstChild() : member_declaration_AST;
								currentAST.advanceChildToEnd();
							}
							else {
								boolean synPredMatched314 = false;
								if (((_tokenSet_16.member(LA1_50)) && (_tokenSet_17.member(LA2_50)))) {
									int _m314 = mark();
									guessing++;
									guess314:  while (true) {
										{
										ctor_decl_spec_g();
										if (matchError) {break guess314;}
										ctor_declarator_g(true);
										if (matchError) {break guess314;}
										{
										switch ( LA(1)) {
										case COLON:
										{
											consume();
											break;
										}
										case LCURLY:
										{
											consume();
											break;
										}
										case LITERAL_try:
										case LITERAL___try:
										{
											literal_try_g();
											if (matchError) {break guess314;}
											break;
										}
										case ASSIGNEQUAL:
										{
											consume();
											{
											switch ( LA(1)) {
											case LITERAL_default:
											{
												consume();
												break;
											}
											case LITERAL_delete:
											{
												consume();
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess314;}
											}
											}
											}
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break guess314;}
										}
										}
										}
										}
									synPredMatched314 = true;
									break;} // guess314
									if (matchError) {
									   resetMatchError();
									}
									rewind(_m314);
									guessing--;
								}
								if ( synPredMatched314 ) {
									if (statementTrace>=1) printf("member_declaration_4[%d]: Constructor or no-ret type fun definition\n", LT(1).getLine());
									friend=ctor_decl_spec();
									if (matchError) {break loop51;}
									astFactory.addASTChild(currentAST, returnAST);
									ctrName=ctor_declarator(true);
									if (matchError) {break loop51;}
									astFactory.addASTChild(currentAST, returnAST);
									{
									switch ( LA(1)) {
									case COLON:
									case LCURLY:
									case LITERAL_try:
									case LITERAL___try:
									{
										ctor_body();
										if (matchError) {break loop51;}
										astFactory.addASTChild(currentAST, returnAST);
										break;
									}
									case ASSIGNEQUAL:
									{
										AST tmp224_AST = null;
										tmp224_AST = astFactory.create(LT(1));
										astFactory.addASTChild(currentAST, tmp224_AST);
										consume();
										{
										switch ( LA(1)) {
										case LITERAL_default:
										{
											AST tmp225_AST = null;
											tmp225_AST = astFactory.create(LT(1));
											astFactory.addASTChild(currentAST, tmp225_AST);
											consume();
											break;
										}
										case LITERAL_delete:
										{
											AST tmp226_AST = null;
											tmp226_AST = astFactory.create(LT(1));
											astFactory.addASTChild(currentAST, tmp226_AST);
											consume();
											break;
										}
										default:
										{
											matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_14, tokenNames);if (matchError) {break loop51;}
										}
										}
										}
										break;
									}
									default:
									{
										matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_67, tokenNames);if (matchError) {break loop51;}
									}
									}
									}
									member_declaration_AST = (AST)currentAST.root;
									if (ctrName && !friend) { member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CTOR_DEFINITION,"CSM_CTOR_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));}
									else { member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_DEFINITION,"CSM_FUNCTION_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));}
									currentAST.root = member_declaration_AST;
									currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
										member_declaration_AST.getFirstChild() : member_declaration_AST;
									currentAST.advanceChildToEnd();
								}
								else {
									boolean synPredMatched319 = false;
									if (((_tokenSet_32.member(LA1_50)) && (_tokenSet_13.member(LA2_50)))) {
										int _m319 = mark();
										guessing++;
										guess319:  while (true) {
											{
											dtor_head_g(false);
											if (matchError) {break guess319;}
											{
											switch ( LA(1)) {
											case EOF:
											{
												consume();
												break;
											}
											case SEMICOLON:
											{
												consume();
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess319;}
											}
											}
											}
											}
										synPredMatched319 = true;
										break;} // guess319
										if (matchError) {
										   resetMatchError();
										}
										rewind(_m319);
										guessing--;
									}
									if ( synPredMatched319 ) {
										if (statementTrace>=1) 
										printf("member_declaration_5a[%d]: Destructor declaration\n",
										LT(1).getLine());
										
										friend=dtor_decl_spec();
										if (matchError) {break loop51;}
										astFactory.addASTChild(currentAST, returnAST);
										dtor_declarator(false);
										if (matchError) {break loop51;}
										astFactory.addASTChild(currentAST, returnAST);
										{
										switch ( LA(1)) {
										case EOF:
										{
											consume();
											reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
											break;
										}
										case SEMICOLON:
										{
											AST tmp228_AST = null;
											tmp228_AST = astFactory.create(LT(1));
											astFactory.addASTChild(currentAST, tmp228_AST);
											consume();
											break;
										}
										default:
										{
											matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop51;}
										}
										}
										}
										member_declaration_AST = (AST)currentAST.root;
										
										if (!friend) {
										member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_DTOR_DECLARATION,"CSM_DTOR_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST)); //end_of_stmt();
										} else {
										member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_DECLARATION,"CSM_FUNCTION_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST)); //end_of_stmt();
										}
										
										currentAST.root = member_declaration_AST;
										currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
											member_declaration_AST.getFirstChild() : member_declaration_AST;
										currentAST.advanceChildToEnd();
									}
									else {
										boolean synPredMatched324 = false;
										if (((_tokenSet_32.member(LA1_50)) && (_tokenSet_13.member(LA2_50)))) {
											int _m324 = mark();
											guessing++;
											guess324:  while (true) {
												{
												dtor_head_g(true);
												if (matchError) {break guess324;}
												{
												switch ( LA(1)) {
												case LCURLY:
												{
													consume();
													break;
												}
												case ASSIGNEQUAL:
												{
													consume();
													{
													switch ( LA(1)) {
													case LITERAL_default:
													{
														consume();
														break;
													}
													case LITERAL_delete:
													{
														consume();
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess324;}
													}
													}
													}
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess324;}
												}
												}
												}
												}
											synPredMatched324 = true;
											break;} // guess324
											if (matchError) {
											   resetMatchError();
											}
											rewind(_m324);
											guessing--;
										}
										if ( synPredMatched324 ) {
											if (statementTrace>=1) 
											printf("member_declaration_5b[%d]: Destructor definition\n",
											LT(1).getLine());
											
											dtor_head(true);
											if (matchError) {break loop51;}
											astFactory.addASTChild(currentAST, returnAST);
											{
											switch ( LA(1)) {
											case LCURLY:
											{
												dtor_body();
												if (matchError) {break loop51;}
												astFactory.addASTChild(currentAST, returnAST);
												break;
											}
											case ASSIGNEQUAL:
											{
												AST tmp229_AST = null;
												tmp229_AST = astFactory.create(LT(1));
												astFactory.addASTChild(currentAST, tmp229_AST);
												consume();
												{
												switch ( LA(1)) {
												case LITERAL_default:
												{
													AST tmp230_AST = null;
													tmp230_AST = astFactory.create(LT(1));
													astFactory.addASTChild(currentAST, tmp230_AST);
													consume();
													break;
												}
												case LITERAL_delete:
												{
													AST tmp231_AST = null;
													tmp231_AST = astFactory.create(LT(1));
													astFactory.addASTChild(currentAST, tmp231_AST);
													consume();
													break;
												}
												default:
												{
													matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_14, tokenNames);if (matchError) {break loop51;}
												}
												}
												}
												break;
											}
											default:
											{
												matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_15, tokenNames);if (matchError) {break loop51;}
											}
											}
											}
											member_declaration_AST = (AST)currentAST.root;
											member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_DTOR_DEFINITION,"CSM_DTOR_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));
											currentAST.root = member_declaration_AST;
											currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
												member_declaration_AST.getFirstChild() : member_declaration_AST;
											currentAST.advanceChildToEnd();
										}
										else {
											boolean synPredMatched330 = false;
											if (((_tokenSet_26.member(LA1_50)) && (_tokenSet_27.member(LA2_50)))) {
												int _m330 = mark();
												guessing++;
												guess330:  while (true) {
													{
													{
													switch ( LA(1)) {
													case LITERAL___extension__:
													{
														consume();
														break;
													}
													case LSQUARE:
													case SCOPE:
													case IDENT:
													case LITERAL_typeof:
													case LITERAL___typeof__:
													case LITERAL___typeof:
													case LITERAL_typedef:
													case LITERAL_enum:
													case LITERAL_extern:
													case LITERAL_inline:
													case LITERAL__inline:
													case LITERAL___inline__:
													case LITERAL___inline:
													case LITERAL_virtual:
													case LITERAL_explicit:
													case LITERAL_friend:
													case LITERAL__stdcall:
													case LITERAL___stdcall:
													case LITERAL_typename:
													case LITERAL_auto:
													case LITERAL_register:
													case LITERAL_static:
													case LITERAL_mutable:
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL_char:
													case LITERAL_wchar_t:
													case LITERAL_bool:
													case LITERAL_short:
													case LITERAL_int:
													case LITERAL_long:
													case LITERAL_signed:
													case LITERAL___signed__:
													case LITERAL___signed:
													case LITERAL_unsigned:
													case LITERAL___unsigned__:
													case LITERAL_float:
													case LITERAL_double:
													case LITERAL_void:
													case LITERAL__declspec:
													case LITERAL___declspec:
													case LITERAL_class:
													case LITERAL_struct:
													case LITERAL_union:
													case LITERAL__int64:
													case LITERAL___int64:
													case LITERAL___w64:
													case LITERAL___attribute__:
													case LITERAL___complex__:
													case LITERAL___global:
													case LITERAL__Bool:
													case LITERAL__Complex:
													case LITERAL___thread:
													case LITERAL___attribute:
													case LITERAL__Imaginary:
													case LITERAL_bit:
													case LITERAL___symbolic:
													case LITERAL___hidden:
													case LITERAL_final:
													case LITERAL_override:
													case LITERAL_constexpr:
													case LITERAL_decltype:
													case LITERAL_thread_local:
													case LITERAL_alignas:
													case LITERAL_char16_t:
													case LITERAL_char32_t:
													case LITERAL___decltype:
													case LITERAL___complex:
													case LITERAL___forceinline:
													case LITERAL___clrcall:
													case LITERAL__Noreturn:
													case LITERAL___builtin_va_list:
													case LITERAL__BUILT_IN_TYPE__:
													case LITERAL__TYPE_QUALIFIER__:
													case LITERAL__STORAGE_CLASS_SPECIFIER__:
													{
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess330;}
													}
													}
													}
													declaration_specifiers_g(false, false);
													if (matchError) {break guess330;}
													function_declarator_g(false, false, false);
													if (matchError) {break guess330;}
													{
													switch ( LA(1)) {
													case EOF:
													{
														consume();
														break;
													}
													case SEMICOLON:
													{
														consume();
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess330;}
													}
													}
													}
													}
												synPredMatched330 = true;
												break;} // guess330
												if (matchError) {
												   resetMatchError();
												}
												rewind(_m330);
												guessing--;
											}
											if ( synPredMatched330 ) {
												if (statementTrace>=1) printf("member_declaration_6[%d]: Function declaration\n", LT(1).getLine());
												declaration(declOther);
												if (matchError) {break loop51;}
												astFactory.addASTChild(currentAST, returnAST);
												member_declaration_AST = (AST)currentAST.root;
												member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_DECLARATION,"CSM_FUNCTION_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));
												currentAST.root = member_declaration_AST;
												currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
													member_declaration_AST.getFirstChild() : member_declaration_AST;
												currentAST.advanceChildToEnd();
											}
											else {
												boolean synPredMatched335 = false;
												if (((_tokenSet_22.member(LA1_50)) && (_tokenSet_23.member(LA2_50)))) {
													int _m335 = mark();
													guessing++;
													guess335:  while (true) {
														{
														{
														switch ( LA(1)) {
														case LITERAL___extension__:
														{
															consume();
															break;
														}
														case LSQUARE:
														case SCOPE:
														case IDENT:
														case LITERAL_typeof:
														case LITERAL___typeof__:
														case LITERAL___typeof:
														case LITERAL_typedef:
														case LITERAL_enum:
														case LITERAL_extern:
														case LITERAL_inline:
														case LITERAL__inline:
														case LITERAL___inline__:
														case LITERAL___inline:
														case LITERAL_virtual:
														case LITERAL_explicit:
														case LITERAL_friend:
														case LITERAL__stdcall:
														case LITERAL___stdcall:
														case LITERAL_typename:
														case LITERAL_auto:
														case LITERAL_register:
														case LITERAL_static:
														case LITERAL_mutable:
														case LITERAL_const:
														case LITERAL___const__:
														case LITERAL___const:
														case LITERAL_const_cast:
														case LITERAL_volatile:
														case LITERAL___volatile__:
														case LITERAL___volatile:
														case LITERAL_char:
														case LITERAL_wchar_t:
														case LITERAL_bool:
														case LITERAL_short:
														case LITERAL_int:
														case LITERAL_long:
														case LITERAL_signed:
														case LITERAL___signed__:
														case LITERAL___signed:
														case LITERAL_unsigned:
														case LITERAL___unsigned__:
														case LITERAL_float:
														case LITERAL_double:
														case LITERAL_void:
														case LITERAL__declspec:
														case LITERAL___declspec:
														case LITERAL_class:
														case LITERAL_struct:
														case LITERAL_union:
														case LITERAL__int64:
														case LITERAL___int64:
														case LITERAL___w64:
														case LITERAL___attribute__:
														case LITERAL___complex__:
														case LITERAL___global:
														case LITERAL__Bool:
														case LITERAL__Complex:
														case LITERAL___thread:
														case LITERAL___attribute:
														case LITERAL__Imaginary:
														case LITERAL_bit:
														case LITERAL___symbolic:
														case LITERAL___hidden:
														case LITERAL_final:
														case LITERAL_override:
														case LITERAL_constexpr:
														case LITERAL_decltype:
														case LITERAL_thread_local:
														case LITERAL_alignas:
														case LITERAL_char16_t:
														case LITERAL_char32_t:
														case LITERAL___decltype:
														case LITERAL___complex:
														case LITERAL___forceinline:
														case LITERAL___clrcall:
														case LITERAL__Noreturn:
														case LITERAL___builtin_va_list:
														case LITERAL__BUILT_IN_TYPE__:
														case LITERAL__TYPE_QUALIFIER__:
														case LITERAL__STORAGE_CLASS_SPECIFIER__:
														{
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess335;}
														}
														}
														}
														declaration_specifiers_g(false, false);
														if (matchError) {break guess335;}
														function_declarator_g(true, false, false);
														if (matchError) {break guess335;}
														{
														switch ( LA(1)) {
														case LCURLY:
														{
															consume();
															break;
														}
														case LITERAL_try:
														case LITERAL___try:
														{
															literal_try_g();
															if (matchError) {break guess335;}
															break;
														}
														case ASSIGNEQUAL:
														{
															consume();
															{
															switch ( LA(1)) {
															case LITERAL_default:
															{
																consume();
																break;
															}
															case LITERAL_delete:
															{
																consume();
																break;
															}
															default:
															{
																matchError=true;if (matchError) {break guess335;}
															}
															}
															}
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess335;}
														}
														}
														}
														}
													synPredMatched335 = true;
													break;} // guess335
													if (matchError) {
													   resetMatchError();
													}
													rewind(_m335);
													guessing--;
												}
												if ( synPredMatched335 ) {
													beginFieldDeclaration(); if(statementTrace>=1) printf("member_declaration_7[%d]: Function definition\n", LT(1).getLine());
													function_definition();
													if (matchError) {break loop51;}
													astFactory.addASTChild(currentAST, returnAST);
													member_declaration_AST = (AST)currentAST.root;
													member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_DEFINITION,"CSM_FUNCTION_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));
													currentAST.root = member_declaration_AST;
													currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
														member_declaration_AST.getFirstChild() : member_declaration_AST;
													currentAST.advanceChildToEnd();
												}
												else {
													boolean synPredMatched339 = false;
													if (((_tokenSet_152.member(LA1_50)) && (_tokenSet_25.member(LA2_50)))) {
														int _m339 = mark();
														guessing++;
														guess339:  while (true) {
															{
															{
															switch ( LA(1)) {
															case LITERAL_static:
															{
																consume();
																break;
															}
															case LPAREN:
															case LSQUARE:
															case STAR:
															case AND:
															case AMPERSAND:
															case SCOPE:
															case IDENT:
															case LITERAL_OPERATOR:
															case LITERAL__stdcall:
															case LITERAL___stdcall:
															case LITERAL_this:
															case LITERAL_true:
															case LITERAL_false:
															case LITERAL__cdecl:
															case LITERAL___cdecl:
															case LITERAL__near:
															case LITERAL___near:
															case LITERAL__far:
															case LITERAL___far:
															case LITERAL___interrupt:
															case LITERAL_pascal:
															case LITERAL__pascal:
															case LITERAL___pascal:
															case LITERAL___attribute__:
															case LITERAL___attribute:
															case LITERAL_final:
															case LITERAL_override:
															case LITERAL_decltype:
															case LITERAL___decltype:
															case LITERAL___clrcall:
															{
																break;
															}
															default:
															{
																matchError=true;if (matchError) {break guess339;}
															}
															}
															}
															function_declarator_g(false, false, false);
															if (matchError) {break guess339;}
															{
															switch ( LA(1)) {
															case EOF:
															{
																consume();
																break;
															}
															case SEMICOLON:
															{
																consume();
																break;
															}
															default:
															{
																matchError=true;if (matchError) {break guess339;}
															}
															}
															}
															}
														synPredMatched339 = true;
														break;} // guess339
														if (matchError) {
														   resetMatchError();
														}
														rewind(_m339);
														guessing--;
													}
													if ( synPredMatched339 ) {
														beginFieldDeclaration();
														if( reportOddWarnings ) {
														printf("member_declaration[%d]: Warning Function declaration found without typename\n", LT(1).getLine());
														}
																if (statementTrace>=1) 
																	printf("member_declaration_11a[%d]: Function declaration\n",
																		LT(1).getLine());
																
														{
														switch ( LA(1)) {
														case LITERAL_static:
														{
															AST tmp232_AST = null;
															tmp232_AST = astFactory.create(LT(1));
															astFactory.addASTChild(currentAST, tmp232_AST);
															consume();
															break;
														}
														case LPAREN:
														case LSQUARE:
														case STAR:
														case AND:
														case AMPERSAND:
														case SCOPE:
														case IDENT:
														case LITERAL_OPERATOR:
														case LITERAL__stdcall:
														case LITERAL___stdcall:
														case LITERAL_this:
														case LITERAL_true:
														case LITERAL_false:
														case LITERAL__cdecl:
														case LITERAL___cdecl:
														case LITERAL__near:
														case LITERAL___near:
														case LITERAL__far:
														case LITERAL___far:
														case LITERAL___interrupt:
														case LITERAL_pascal:
														case LITERAL__pascal:
														case LITERAL___pascal:
														case LITERAL___attribute__:
														case LITERAL___attribute:
														case LITERAL_final:
														case LITERAL_override:
														case LITERAL_decltype:
														case LITERAL___decltype:
														case LITERAL___clrcall:
														{
															break;
														}
														default:
														{
															matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_152, tokenNames);if (matchError) {break loop51;}
														}
														}
														}
														function_declarator(false, false, false);
														if (matchError) {break loop51;}
														astFactory.addASTChild(currentAST, returnAST);
														{
														switch ( LA(1)) {
														case EOF:
														{
															consume();
															reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
															break;
														}
														case SEMICOLON:
														{
															AST tmp234_AST = null;
															tmp234_AST = astFactory.create(LT(1));
															astFactory.addASTChild(currentAST, tmp234_AST);
															consume();
															break;
														}
														default:
														{
															matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop51;}
														}
														}
														}
														member_declaration_AST = (AST)currentAST.root;
														member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_DECLARATION,"CSM_FUNCTION_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));
														currentAST.root = member_declaration_AST;
														currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
															member_declaration_AST.getFirstChild() : member_declaration_AST;
														currentAST.advanceChildToEnd();
													}
													else {
														boolean synPredMatched344 = false;
														if (((_tokenSet_152.member(LA1_50)) && (_tokenSet_25.member(LA2_50)))) {
															int _m344 = mark();
															guessing++;
															guess344:  while (true) {
																{
																{
																switch ( LA(1)) {
																case LITERAL_static:
																{
																	consume();
																	break;
																}
																case LPAREN:
																case LSQUARE:
																case STAR:
																case AND:
																case AMPERSAND:
																case SCOPE:
																case IDENT:
																case LITERAL_OPERATOR:
																case LITERAL__stdcall:
																case LITERAL___stdcall:
																case LITERAL_this:
																case LITERAL_true:
																case LITERAL_false:
																case LITERAL__cdecl:
																case LITERAL___cdecl:
																case LITERAL__near:
																case LITERAL___near:
																case LITERAL__far:
																case LITERAL___far:
																case LITERAL___interrupt:
																case LITERAL_pascal:
																case LITERAL__pascal:
																case LITERAL___pascal:
																case LITERAL___attribute__:
																case LITERAL___attribute:
																case LITERAL_final:
																case LITERAL_override:
																case LITERAL_decltype:
																case LITERAL___decltype:
																case LITERAL___clrcall:
																{
																	break;
																}
																default:
																{
																	matchError=true;if (matchError) {break guess344;}
																}
																}
																}
																function_declarator_g(true, false, false);
																if (matchError) {break guess344;}
																match(LCURLY);
																if (matchError) {break guess344;}
																}
															synPredMatched344 = true;
															break;} // guess344
															if (matchError) {
															   resetMatchError();
															}
															rewind(_m344);
															guessing--;
														}
														if ( synPredMatched344 ) {
															
															if( reportOddWarnings ) {
															printf("member_function[%d]: Warning Function definition found without typename\n", LT(1).getLine());
															}
																	    if (statementTrace>=1) {
																		printf("member_declaration_11b[%d]: Function definition\n",
																			LT(1).getLine());
																	    }
																	
															{
															switch ( LA(1)) {
															case LITERAL_static:
															{
																AST tmp235_AST = null;
																tmp235_AST = astFactory.create(LT(1));
																astFactory.addASTChild(currentAST, tmp235_AST);
																consume();
																break;
															}
															case LPAREN:
															case LSQUARE:
															case STAR:
															case AND:
															case AMPERSAND:
															case SCOPE:
															case IDENT:
															case LITERAL_OPERATOR:
															case LITERAL__stdcall:
															case LITERAL___stdcall:
															case LITERAL_this:
															case LITERAL_true:
															case LITERAL_false:
															case LITERAL__cdecl:
															case LITERAL___cdecl:
															case LITERAL__near:
															case LITERAL___near:
															case LITERAL__far:
															case LITERAL___far:
															case LITERAL___interrupt:
															case LITERAL_pascal:
															case LITERAL__pascal:
															case LITERAL___pascal:
															case LITERAL___attribute__:
															case LITERAL___attribute:
															case LITERAL_final:
															case LITERAL_override:
															case LITERAL_decltype:
															case LITERAL___decltype:
															case LITERAL___clrcall:
															{
																break;
															}
															default:
															{
																matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_152, tokenNames);if (matchError) {break loop51;}
															}
															}
															}
															function_declarator(true, false, false);
															if (matchError) {break loop51;}
															astFactory.addASTChild(currentAST, returnAST);
															compound_statement();
															if (matchError) {break loop51;}
															astFactory.addASTChild(currentAST, returnAST);
															member_declaration_AST = (AST)currentAST.root;
															member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_DEFINITION,"CSM_FUNCTION_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));
															currentAST.root = member_declaration_AST;
															currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
																member_declaration_AST.getFirstChild() : member_declaration_AST;
															currentAST.advanceChildToEnd();
														}
														else {
															boolean synPredMatched349 = false;
															if (((_tokenSet_22.member(LA1_50)) && (_tokenSet_23.member(LA2_50)))) {
																int _m349 = mark();
																guessing++;
																guess349:  while (true) {
																	{
																	{
																	switch ( LA(1)) {
																	case LITERAL___extension__:
																	{
																		consume();
																		break;
																	}
																	case LSQUARE:
																	case SCOPE:
																	case IDENT:
																	case LITERAL_typeof:
																	case LITERAL___typeof__:
																	case LITERAL___typeof:
																	case LITERAL_typedef:
																	case LITERAL_enum:
																	case LITERAL_extern:
																	case LITERAL_inline:
																	case LITERAL__inline:
																	case LITERAL___inline__:
																	case LITERAL___inline:
																	case LITERAL_virtual:
																	case LITERAL_explicit:
																	case LITERAL_friend:
																	case LITERAL__stdcall:
																	case LITERAL___stdcall:
																	case LITERAL_typename:
																	case LITERAL_auto:
																	case LITERAL_register:
																	case LITERAL_static:
																	case LITERAL_mutable:
																	case LITERAL_const:
																	case LITERAL___const__:
																	case LITERAL___const:
																	case LITERAL_const_cast:
																	case LITERAL_volatile:
																	case LITERAL___volatile__:
																	case LITERAL___volatile:
																	case LITERAL_char:
																	case LITERAL_wchar_t:
																	case LITERAL_bool:
																	case LITERAL_short:
																	case LITERAL_int:
																	case LITERAL_long:
																	case LITERAL_signed:
																	case LITERAL___signed__:
																	case LITERAL___signed:
																	case LITERAL_unsigned:
																	case LITERAL___unsigned__:
																	case LITERAL_float:
																	case LITERAL_double:
																	case LITERAL_void:
																	case LITERAL__declspec:
																	case LITERAL___declspec:
																	case LITERAL_class:
																	case LITERAL_struct:
																	case LITERAL_union:
																	case LITERAL__int64:
																	case LITERAL___int64:
																	case LITERAL___w64:
																	case LITERAL___attribute__:
																	case LITERAL___complex__:
																	case LITERAL___global:
																	case LITERAL__Bool:
																	case LITERAL__Complex:
																	case LITERAL___thread:
																	case LITERAL___attribute:
																	case LITERAL__Imaginary:
																	case LITERAL_bit:
																	case LITERAL___symbolic:
																	case LITERAL___hidden:
																	case LITERAL_final:
																	case LITERAL_override:
																	case LITERAL_constexpr:
																	case LITERAL_decltype:
																	case LITERAL_thread_local:
																	case LITERAL_alignas:
																	case LITERAL_char16_t:
																	case LITERAL_char32_t:
																	case LITERAL___decltype:
																	case LITERAL___complex:
																	case LITERAL___forceinline:
																	case LITERAL___clrcall:
																	case LITERAL__Noreturn:
																	case LITERAL___builtin_va_list:
																	case LITERAL__BUILT_IN_TYPE__:
																	case LITERAL__TYPE_QUALIFIER__:
																	case LITERAL__STORAGE_CLASS_SPECIFIER__:
																	{
																		break;
																	}
																	default:
																	{
																		matchError=true;if (matchError) {break guess349;}
																	}
																	}
																	}
																	declaration_specifiers_g(false, false);
																	if (matchError) {break guess349;}
																	function_declarator_with_fun_as_ret_type_g(false);
																	if (matchError) {break guess349;}
																	{
																	switch ( LA(1)) {
																	case EOF:
																	{
																		consume();
																		break;
																	}
																	case SEMICOLON:
																	{
																		consume();
																		break;
																	}
																	default:
																	{
																		matchError=true;if (matchError) {break guess349;}
																	}
																	}
																	}
																	}
																synPredMatched349 = true;
																break;} // guess349
																if (matchError) {
																   resetMatchError();
																}
																rewind(_m349);
																guessing--;
															}
															if ( synPredMatched349 ) {
																if (statementTrace>=1) 
																			printf("external_declaration_7a[%d]: Function prototype with function as return type\n",
																				LT(1).getLine());
																		
																function_declaration_with_fun_as_ret_type();
																if (matchError) {break loop51;}
																astFactory.addASTChild(currentAST, returnAST);
																member_declaration_AST = (AST)currentAST.root;
																member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_RET_FUN_DECLARATION,"CSM_FUNCTION_RET_FUN_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));
																currentAST.root = member_declaration_AST;
																currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
																	member_declaration_AST.getFirstChild() : member_declaration_AST;
																currentAST.advanceChildToEnd();
															}
															else {
																boolean synPredMatched352 = false;
																if (((_tokenSet_22.member(LA1_50)) && (_tokenSet_23.member(LA2_50)))) {
																	int _m352 = mark();
																	guessing++;
																	guess352:  while (true) {
																		{
																		{
																		switch ( LA(1)) {
																		case LITERAL___extension__:
																		{
																			consume();
																			break;
																		}
																		case LSQUARE:
																		case SCOPE:
																		case IDENT:
																		case LITERAL_typeof:
																		case LITERAL___typeof__:
																		case LITERAL___typeof:
																		case LITERAL_typedef:
																		case LITERAL_enum:
																		case LITERAL_extern:
																		case LITERAL_inline:
																		case LITERAL__inline:
																		case LITERAL___inline__:
																		case LITERAL___inline:
																		case LITERAL_virtual:
																		case LITERAL_explicit:
																		case LITERAL_friend:
																		case LITERAL__stdcall:
																		case LITERAL___stdcall:
																		case LITERAL_typename:
																		case LITERAL_auto:
																		case LITERAL_register:
																		case LITERAL_static:
																		case LITERAL_mutable:
																		case LITERAL_const:
																		case LITERAL___const__:
																		case LITERAL___const:
																		case LITERAL_const_cast:
																		case LITERAL_volatile:
																		case LITERAL___volatile__:
																		case LITERAL___volatile:
																		case LITERAL_char:
																		case LITERAL_wchar_t:
																		case LITERAL_bool:
																		case LITERAL_short:
																		case LITERAL_int:
																		case LITERAL_long:
																		case LITERAL_signed:
																		case LITERAL___signed__:
																		case LITERAL___signed:
																		case LITERAL_unsigned:
																		case LITERAL___unsigned__:
																		case LITERAL_float:
																		case LITERAL_double:
																		case LITERAL_void:
																		case LITERAL__declspec:
																		case LITERAL___declspec:
																		case LITERAL_class:
																		case LITERAL_struct:
																		case LITERAL_union:
																		case LITERAL__int64:
																		case LITERAL___int64:
																		case LITERAL___w64:
																		case LITERAL___attribute__:
																		case LITERAL___complex__:
																		case LITERAL___global:
																		case LITERAL__Bool:
																		case LITERAL__Complex:
																		case LITERAL___thread:
																		case LITERAL___attribute:
																		case LITERAL__Imaginary:
																		case LITERAL_bit:
																		case LITERAL___symbolic:
																		case LITERAL___hidden:
																		case LITERAL_final:
																		case LITERAL_override:
																		case LITERAL_constexpr:
																		case LITERAL_decltype:
																		case LITERAL_thread_local:
																		case LITERAL_alignas:
																		case LITERAL_char16_t:
																		case LITERAL_char32_t:
																		case LITERAL___decltype:
																		case LITERAL___complex:
																		case LITERAL___forceinline:
																		case LITERAL___clrcall:
																		case LITERAL__Noreturn:
																		case LITERAL___builtin_va_list:
																		case LITERAL__BUILT_IN_TYPE__:
																		case LITERAL__TYPE_QUALIFIER__:
																		case LITERAL__STORAGE_CLASS_SPECIFIER__:
																		{
																			break;
																		}
																		default:
																		{
																			matchError=true;if (matchError) {break guess352;}
																		}
																		}
																		}
																		declaration_specifiers_g(false, false);
																		if (matchError) {break guess352;}
																		function_declarator_with_fun_as_ret_type_g(true);
																		if (matchError) {break guess352;}
																		match(LCURLY);
																		if (matchError) {break guess352;}
																		}
																	synPredMatched352 = true;
																	break;} // guess352
																	if (matchError) {
																	   resetMatchError();
																	}
																	rewind(_m352);
																	guessing--;
																}
																if ( synPredMatched352 ) {
																	if (statementTrace>=1) 
																				printf("external_declaration_8b[%d]: Function definition with function as return type\n",
																					LT(1).getLine());
																			
																	function_definition_with_fun_as_ret_type();
																	if (matchError) {break loop51;}
																	astFactory.addASTChild(currentAST, returnAST);
																	member_declaration_AST = (AST)currentAST.root;
																	member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_RET_FUN_DEFINITION,"CSM_FUNCTION_RET_FUN_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));
																	currentAST.root = member_declaration_AST;
																	currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
																		member_declaration_AST.getFirstChild() : member_declaration_AST;
																	currentAST.advanceChildToEnd();
																}
																else {
																	boolean synPredMatched357 = false;
																	if (((_tokenSet_153.member(LA1_50)) && (_tokenSet_147.member(LA2_50)))) {
																		int _m357 = mark();
																		guessing++;
																		guess357:  while (true) {
																			{
																			{
																			_loop356:
																			do {
																				switch ( LA(1)) {
																				case LSQUARE:
																				case LITERAL___attribute__:
																				case LITERAL___attribute:
																				{
																					{
																					function_attribute_specification_g();
																					if (matchError) {break guess357;}
																					}
																					break;
																				}
																				case LITERAL_inline:
																				case LITERAL__inline:
																				case LITERAL___inline__:
																				case LITERAL___inline:
																				case LITERAL___forceinline:
																				{
																					literal_inline_g();
																					if (matchError) {break guess357;}
																					break;
																				}
																				case LITERAL_virtual:
																				{
																					consume();
																					break;
																				}
																				case LITERAL_constexpr:
																				{
																					consume();
																					break;
																				}
																				case LITERAL_explicit:
																				{
																					consume();
																					break;
																				}
																				default:
																				{
																					break _loop356;
																				}
																				}
																			} while (true);
																			}
																			conversion_function_decl_or_def_g();
																			if (matchError) {break guess357;}
																			}
																		synPredMatched357 = true;
																		break;} // guess357
																		if (matchError) {
																		   resetMatchError();
																		}
																		rewind(_m357);
																		guessing--;
																	}
																	if ( synPredMatched357 ) {
																		if (statementTrace>=1) printf("member_declaration_8[%d]: Operator function\n", LT(1).getLine());
																		{
																		_loop360:
																		do {
																			switch ( LA(1)) {
																			case LSQUARE:
																			case LITERAL___attribute__:
																			case LITERAL___attribute:
																			{
																				{
																				function_attribute_specification();
																				if (matchError) {break loop51;}
																				astFactory.addASTChild(currentAST, returnAST);
																				}
																				break;
																			}
																			case LITERAL_inline:
																			case LITERAL__inline:
																			case LITERAL___inline__:
																			case LITERAL___inline:
																			case LITERAL___forceinline:
																			{
																				literal_inline();
																				if (matchError) {break loop51;}
																				astFactory.addASTChild(currentAST, returnAST);
																				break;
																			}
																			case LITERAL_virtual:
																			{
																				AST tmp236_AST = null;
																				tmp236_AST = astFactory.create(LT(1));
																				astFactory.addASTChild(currentAST, tmp236_AST);
																				consume();
																				break;
																			}
																			case LITERAL_constexpr:
																			{
																				AST tmp237_AST = null;
																				tmp237_AST = astFactory.create(LT(1));
																				astFactory.addASTChild(currentAST, tmp237_AST);
																				consume();
																				break;
																			}
																			case LITERAL_explicit:
																			{
																				AST tmp238_AST = null;
																				tmp238_AST = astFactory.create(LT(1));
																				astFactory.addASTChild(currentAST, tmp238_AST);
																				consume();
																				break;
																			}
																			default:
																			{
																				break _loop360;
																			}
																			}
																		} while (true);
																		}
																		definition=conversion_function_decl_or_def();
																		if (matchError) {break loop51;}
																		astFactory.addASTChild(currentAST, returnAST);
																		member_declaration_AST = (AST)currentAST.root;
																		if( definition )   member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_USER_TYPE_CAST_DEFINITION,"CSM_USER_TYPE_CAST_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));
																		else               member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_USER_TYPE_CAST_DECLARATION,"CSM_USER_TYPE_CAST_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));
																		currentAST.root = member_declaration_AST;
																		currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
																			member_declaration_AST.getFirstChild() : member_declaration_AST;
																		currentAST.advanceChildToEnd();
																	}
																	else {
																		boolean synPredMatched363 = false;
																		if (((_tokenSet_90.member(LA1_50)) && (_tokenSet_154.member(LA2_50)))) {
																			int _m363 = mark();
																			guessing++;
																			guess363:  while (true) {
																				{
																				qualified_id_g();
																				if (matchError) {break guess363;}
																				{
																				switch ( LA(1)) {
																				case EOF:
																				{
																					consume();
																					break;
																				}
																				case SEMICOLON:
																				{
																					consume();
																					break;
																				}
																				default:
																				{
																					matchError=true;if (matchError) {break guess363;}
																				}
																				}
																				}
																				}
																			synPredMatched363 = true;
																			break;} // guess363
																			if (matchError) {
																			   resetMatchError();
																			}
																			rewind(_m363);
																			guessing--;
																		}
																		if ( synPredMatched363 ) {
																			if (statementTrace>=1) printf("member_declaration_9[%d]: Qualified literal_ident\n", LT(1).getLine());
																			visibility_redef_declaration();
																			if (matchError) {break loop51;}
																			astFactory.addASTChild(currentAST, returnAST);
																		}
																		else {
																			boolean synPredMatched366 = false;
																			if (((_tokenSet_28.member(LA1_50)) && (_tokenSet_155.member(LA2_50)))) {
																				int _m366 = mark();
																				guessing++;
																				guess366:  while (true) {
																					{
																					{
																					switch ( LA(1)) {
																					case LITERAL___extension__:
																					{
																						consume();
																						break;
																					}
																					case LSQUARE:
																					case SCOPE:
																					case IDENT:
																					case LITERAL_typeof:
																					case LITERAL___typeof__:
																					case LITERAL___typeof:
																					case LITERAL_typedef:
																					case LITERAL_enum:
																					case LITERAL_extern:
																					case LITERAL_inline:
																					case LITERAL__inline:
																					case LITERAL___inline__:
																					case LITERAL___inline:
																					case LITERAL_virtual:
																					case LITERAL_explicit:
																					case LITERAL_friend:
																					case LITERAL__stdcall:
																					case LITERAL___stdcall:
																					case LITERAL_typename:
																					case LITERAL_auto:
																					case LITERAL_register:
																					case LITERAL_static:
																					case LITERAL_mutable:
																					case LITERAL_const:
																					case LITERAL___const__:
																					case LITERAL___const:
																					case LITERAL_const_cast:
																					case LITERAL_volatile:
																					case LITERAL___volatile__:
																					case LITERAL___volatile:
																					case LITERAL_char:
																					case LITERAL_wchar_t:
																					case LITERAL_bool:
																					case LITERAL_short:
																					case LITERAL_int:
																					case LITERAL_long:
																					case LITERAL_signed:
																					case LITERAL___signed__:
																					case LITERAL___signed:
																					case LITERAL_unsigned:
																					case LITERAL___unsigned__:
																					case LITERAL_float:
																					case LITERAL_double:
																					case LITERAL_void:
																					case LITERAL__declspec:
																					case LITERAL___declspec:
																					case LITERAL_class:
																					case LITERAL_struct:
																					case LITERAL_union:
																					case LITERAL__int64:
																					case LITERAL___int64:
																					case LITERAL___w64:
																					case LITERAL___attribute__:
																					case LITERAL___complex__:
																					case LITERAL___global:
																					case LITERAL__Bool:
																					case LITERAL__Complex:
																					case LITERAL___thread:
																					case LITERAL___attribute:
																					case LITERAL__Imaginary:
																					case LITERAL_bit:
																					case LITERAL___symbolic:
																					case LITERAL___hidden:
																					case LITERAL_final:
																					case LITERAL_override:
																					case LITERAL_constexpr:
																					case LITERAL_decltype:
																					case LITERAL_thread_local:
																					case LITERAL_alignas:
																					case LITERAL_char16_t:
																					case LITERAL_char32_t:
																					case LITERAL___decltype:
																					case LITERAL___complex:
																					case LITERAL___forceinline:
																					case LITERAL___clrcall:
																					case LITERAL__Noreturn:
																					case LITERAL___builtin_va_list:
																					case LITERAL__BUILT_IN_TYPE__:
																					case LITERAL__TYPE_QUALIFIER__:
																					case LITERAL__STORAGE_CLASS_SPECIFIER__:
																					{
																						break;
																					}
																					default:
																					{
																						matchError=true;if (matchError) {break guess366;}
																					}
																					}
																					}
																					declaration_specifiers_g(true, false);
																					if (matchError) {break guess366;}
																					}
																				synPredMatched366 = true;
																				break;} // guess366
																				if (matchError) {
																				   resetMatchError();
																				}
																				rewind(_m366);
																				guessing--;
																			}
																			if ( synPredMatched366 ) {
																				beginFieldDeclaration();
																						 if (statementTrace>=1) 
																							printf("member_declaration_10[%d]: Declaration(s)\n",
																								LT(1).getLine());
																						
																				{
																				switch ( LA(1)) {
																				case LITERAL___extension__:
																				{
																					consume();
																					break;
																				}
																				case LSQUARE:
																				case SCOPE:
																				case IDENT:
																				case LITERAL_typeof:
																				case LITERAL___typeof__:
																				case LITERAL___typeof:
																				case LITERAL_typedef:
																				case LITERAL_enum:
																				case LITERAL_extern:
																				case LITERAL_inline:
																				case LITERAL__inline:
																				case LITERAL___inline__:
																				case LITERAL___inline:
																				case LITERAL_virtual:
																				case LITERAL_explicit:
																				case LITERAL_friend:
																				case LITERAL__stdcall:
																				case LITERAL___stdcall:
																				case LITERAL_typename:
																				case LITERAL_auto:
																				case LITERAL_register:
																				case LITERAL_static:
																				case LITERAL_mutable:
																				case LITERAL_const:
																				case LITERAL___const__:
																				case LITERAL___const:
																				case LITERAL_const_cast:
																				case LITERAL_volatile:
																				case LITERAL___volatile__:
																				case LITERAL___volatile:
																				case LITERAL_char:
																				case LITERAL_wchar_t:
																				case LITERAL_bool:
																				case LITERAL_short:
																				case LITERAL_int:
																				case LITERAL_long:
																				case LITERAL_signed:
																				case LITERAL___signed__:
																				case LITERAL___signed:
																				case LITERAL_unsigned:
																				case LITERAL___unsigned__:
																				case LITERAL_float:
																				case LITERAL_double:
																				case LITERAL_void:
																				case LITERAL__declspec:
																				case LITERAL___declspec:
																				case LITERAL_class:
																				case LITERAL_struct:
																				case LITERAL_union:
																				case LITERAL__int64:
																				case LITERAL___int64:
																				case LITERAL___w64:
																				case LITERAL___attribute__:
																				case LITERAL___complex__:
																				case LITERAL___global:
																				case LITERAL__Bool:
																				case LITERAL__Complex:
																				case LITERAL___thread:
																				case LITERAL___attribute:
																				case LITERAL__Imaginary:
																				case LITERAL_bit:
																				case LITERAL___symbolic:
																				case LITERAL___hidden:
																				case LITERAL_final:
																				case LITERAL_override:
																				case LITERAL_constexpr:
																				case LITERAL_decltype:
																				case LITERAL_thread_local:
																				case LITERAL_alignas:
																				case LITERAL_char16_t:
																				case LITERAL_char32_t:
																				case LITERAL___decltype:
																				case LITERAL___complex:
																				case LITERAL___forceinline:
																				case LITERAL___clrcall:
																				case LITERAL__Noreturn:
																				case LITERAL___builtin_va_list:
																				case LITERAL__BUILT_IN_TYPE__:
																				case LITERAL__TYPE_QUALIFIER__:
																				case LITERAL__STORAGE_CLASS_SPECIFIER__:
																				{
																					break;
																				}
																				default:
																				{
																					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_28, tokenNames);if (matchError) {break loop51;}
																				}
																				}
																				}
																				declaration_specifiers(true, false);
																				if (matchError) {break loop51;}
																				astFactory.addASTChild(currentAST, returnAST);
																				{
																				switch ( LA(1)) {
																				case ELLIPSIS:
																				case COLON:
																				case LPAREN:
																				case LSQUARE:
																				case STAR:
																				case AND:
																				case AMPERSAND:
																				case TILDE:
																				case SCOPE:
																				case IDENT:
																				case LITERAL_OPERATOR:
																				case LITERAL__stdcall:
																				case LITERAL___stdcall:
																				case LITERAL_this:
																				case LITERAL_true:
																				case LITERAL_false:
																				case LITERAL__cdecl:
																				case LITERAL___cdecl:
																				case LITERAL__near:
																				case LITERAL___near:
																				case LITERAL__far:
																				case LITERAL___far:
																				case LITERAL___interrupt:
																				case LITERAL_pascal:
																				case LITERAL__pascal:
																				case LITERAL___pascal:
																				case LITERAL___attribute__:
																				case LITERAL___attribute:
																				case LITERAL_final:
																				case LITERAL_override:
																				case LITERAL_decltype:
																				case LITERAL___decltype:
																				case LITERAL___clrcall:
																				{
																					member_declarator_list();
																					if (matchError) {break loop51;}
																					astFactory.addASTChild(currentAST, returnAST);
																					break;
																				}
																				case EOF:
																				case SEMICOLON:
																				{
																					break;
																				}
																				default:
																				{
																					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_156, tokenNames);if (matchError) {break loop51;}
																				}
																				}
																				}
																				{
																				switch ( LA(1)) {
																				case EOF:
																				{
																					consume();
																					reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
																					break;
																				}
																				case SEMICOLON:
																				{
																					AST tmp241_AST = null;
																					tmp241_AST = astFactory.create(LT(1));
																					astFactory.addASTChild(currentAST, tmp241_AST);
																					consume();
																					break;
																				}
																				default:
																				{
																					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop51;}
																				}
																				}
																				}
																				member_declaration_AST = (AST)currentAST.root;
																				member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FIELD,"CSM_FIELD", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));
																				currentAST.root = member_declaration_AST;
																				currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
																					member_declaration_AST.getFirstChild() : member_declaration_AST;
																				currentAST.advanceChildToEnd();
																			}
																			else {
																				boolean synPredMatched372 = false;
																				if ((((LA1_50==LITERAL_template||LA1_50==LITERAL_export))&&(isCPlusPlus()))) {
																					int _m372 = mark();
																					guessing++;
																					guess372:  while (true) {
																						{
																						{
																						switch ( LA(1)) {
																						case LITERAL_export:
																						{
																							consume();
																							break;
																						}
																						case LITERAL_template:
																						{
																							break;
																						}
																						default:
																						{
																							matchError=true;if (matchError) {break guess372;}
																						}
																						}
																						}
																						match(LITERAL_template);
																						if (matchError) {break guess372;}
																						}
																					synPredMatched372 = true;
																					break;} // guess372
																					if (matchError) {
																					   resetMatchError();
																					}
																					rewind(_m372);
																					guessing--;
																				}
																				if ( synPredMatched372 ) {
																					member_declaration_template();
																					if (matchError) {break loop51;}
																					astFactory.addASTChild(currentAST, returnAST);
																				}
																				else {
																					boolean synPredMatched374 = false;
																					if (((LA1_50==LITERAL_using) && (_tokenSet_0.member(LA2_50)))) {
																						int _m374 = mark();
																						guessing++;
																						guess374:  while (true) {
																							{
																							match(LITERAL_using);
																							if (matchError) {break guess374;}
																							literal_ident_g();
																							if (matchError) {break guess374;}
																							match(ASSIGNEQUAL);
																							if (matchError) {break guess374;}
																							}
																						synPredMatched374 = true;
																						break;} // guess374
																						if (matchError) {
																						   resetMatchError();
																						}
																						rewind(_m374);
																						guessing--;
																					}
																					if ( synPredMatched374 ) {
																						alias_declaration();
																						if (matchError) {break loop51;}
																						astFactory.addASTChild(currentAST, returnAST);
																						member_declaration_AST = (AST)currentAST.root;
																						member_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FIELD,"CSM_FIELD", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(member_declaration_AST));
																						currentAST.root = member_declaration_AST;
																						currentAST.child = member_declaration_AST!=null &&member_declaration_AST.getFirstChild()!=null ?
																							member_declaration_AST.getFirstChild() : member_declaration_AST;
																						currentAST.advanceChildToEnd();
																					}
																					else if ((LA1_50==LITERAL_using) && (_tokenSet_112.member(LA2_50))) {
																						using_declaration();
																						if (matchError) {break loop51;}
																						astFactory.addASTChild(currentAST, returnAST);
																					}
																					else if ((LA1_50==LITERAL_static_assert) && (LA2_50==LPAREN)) {
																						static_assert_declaration();
																						if (matchError) {break loop51;}
																						astFactory.addASTChild(currentAST, returnAST);
																					}
																				else {
																					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_157, tokenNames);if (matchError) {break loop51;}
																				}
																				}}}}}}}}}}}}}}}}}}
																				}
																				member_declaration_AST = (AST)currentAST.root;
																			break;} // loop51
																			if (matchError) {
																				reportError(matchException);
																				recover(matchException,_tokenSet_1);
																				resetMatchError();
																		}
																		returnAST = member_declaration_AST;
																	}
																	
	public final void member_declarator_list() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST member_declarator_list_AST = null;
		
		loop52:  while (true) {
			member_declarator();
			if (matchError) {break loop52;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			_loop648:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp242_AST = null;
					tmp242_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp242_AST);
					consume();
					member_declarator();
					if (matchError) {break loop52;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop648;
				}
				
			} while (true);
			}
			member_declarator_list_AST = (AST)currentAST.root;
		break;} // loop52
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_6);
			resetMatchError();
	}
	returnAST = member_declarator_list_AST;
}

	public final boolean  dtor_decl_spec() {
		boolean friend = false;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dtor_decl_spec_AST = null;
		
		loop53:  while (true) {
			{
			_loop826:
			do {
				switch ( LA(1)) {
				case LSQUARE:
				case LITERAL___attribute__:
				case LITERAL___attribute:
				{
					{
					function_attribute_specification();
					if (matchError) {break loop53;}
					astFactory.addASTChild(currentAST, returnAST);
					}
					break;
				}
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL___forceinline:
				{
					literal_inline();
					if (matchError) {break loop53;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LITERAL_friend:
				{
					AST tmp243_AST = null;
					tmp243_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp243_AST);
					consume();
					friend = true;
					break;
				}
				case LITERAL_virtual:
				{
					AST tmp244_AST = null;
					tmp244_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp244_AST);
					consume();
					break;
				}
				default:
				{
					break _loop826;
				}
				}
			} while (true);
			}
			dtor_decl_spec_AST = (AST)currentAST.root;
		break;} // loop53
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_35);
			resetMatchError();
	}
	returnAST = dtor_decl_spec_AST;
	return friend;
}

	public final void compound_statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST compound_statement_AST = null;
		
		loop54:  while (true) {
			int LA1_51 = LA(1);
			int LA2_51 = LA(2);
			
			if (((LA1_51==LCURLY) && (_tokenSet_1.member(LA2_51)))&&(isLazyCompound())) {
				balanceCurlies();
				if (matchError) {break loop54;}
				astFactory.addASTChild(currentAST, returnAST);
				compound_statement_AST = (AST)currentAST.root;
				compound_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_COMPOUND_STATEMENT_LAZY,"CSM_COMPOUND_STATEMENT_LAZY", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(compound_statement_AST));
				currentAST.root = compound_statement_AST;
				currentAST.child = compound_statement_AST!=null &&compound_statement_AST.getFirstChild()!=null ?
					compound_statement_AST.getFirstChild() : compound_statement_AST;
				currentAST.advanceChildToEnd();
				compound_statement_AST = (AST)currentAST.root;
			}
			else if (((LA1_51==LCURLY) && (_tokenSet_158.member(LA2_51)))&&(!isLazyCompound())) {
				{
				action.compound_statement(LT(1));
				AST tmp245_AST = null;
				tmp245_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp245_AST);
				match(LCURLY);
				if (matchError) {break loop54;}
				{
				if ((_tokenSet_159.member(LA(1)))) {
					statement_list();
					if (matchError) {break loop54;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA(1)==EOF||LA(1)==RCURLY)) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_158, tokenNames);if (matchError) {break loop54;}
				}
				
				}
				action.end_compound_statement(LT(1));
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
					break;
				}
				case RCURLY:
				{
					AST tmp247_AST = null;
					tmp247_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp247_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_84, tokenNames);if (matchError) {break loop54;}
				}
				}
				}
				compound_statement_AST = (AST)currentAST.root;
				compound_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_COMPOUND_STATEMENT,"CSM_COMPOUND_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(compound_statement_AST));
				currentAST.root = compound_statement_AST;
				currentAST.child = compound_statement_AST!=null &&compound_statement_AST.getFirstChild()!=null ?
					compound_statement_AST.getFirstChild() : compound_statement_AST;
				currentAST.advanceChildToEnd();
				}
				compound_statement_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_145, tokenNames);if (matchError) {break loop54;}
			}
			
		break;} // loop54
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((compound_statement_AST == null) && (currentAST.root != null)) {
			compound_statement_AST = (AST)currentAST.root;
			compound_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_COMPOUND_STATEMENT,"CSM_COMPOUND_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(compound_statement_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = compound_statement_AST;
}

	public final void visibility_redef_declaration() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST visibility_redef_declaration_AST = null;
		String qid="";
		
		loop55:  while (true) {
			qid=qualified_id();
			if (matchError) {break loop55;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case EOF:
			{
				consume();
				reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
				break;
			}
			case SEMICOLON:
			{
				consume();
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop55;}
			}
			}
			}
			visibility_redef_declaration_AST = (AST)currentAST.root;
			visibility_redef_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_VISIBILITY_REDEF,qid, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(visibility_redef_declaration_AST));
			currentAST.root = visibility_redef_declaration_AST;
			currentAST.child = visibility_redef_declaration_AST!=null &&visibility_redef_declaration_AST.getFirstChild()!=null ?
				visibility_redef_declaration_AST.getFirstChild() : visibility_redef_declaration_AST;
			currentAST.advanceChildToEnd();
			visibility_redef_declaration_AST = (AST)currentAST.root;
		break;} // loop55
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((visibility_redef_declaration_AST == null) && (currentAST.root != null)) {
			visibility_redef_declaration_AST = (AST)currentAST.root;
			visibility_redef_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_VISIBILITY_REDEF,qid, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(visibility_redef_declaration_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = visibility_redef_declaration_AST;
}

	public final void access_specifier() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST access_specifier_AST = null;
		
		loop56:  while (true) {
			switch ( LA(1)) {
			case LITERAL_public:
			{
				AST tmp250_AST = null;
				tmp250_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp250_AST);
				consume();
				access_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_protected:
			{
				AST tmp251_AST = null;
				tmp251_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp251_AST);
				consume();
				access_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_private:
			{
				AST tmp252_AST = null;
				tmp252_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp252_AST);
				consume();
				access_specifier_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_160, tokenNames);if (matchError) {break loop56;}
			}
			}
		break;} // loop56
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_161);
			resetMatchError();
	}
	returnAST = access_specifier_AST;
}

	public final void using_declaration() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST using_declaration_AST = null;
		Token  u = null;
		AST u_AST = null;
		Token  ns = null;
		AST ns_AST = null;
		String qid="";
		
		loop57:  while (true) {
			u = LT(1);
			u_AST = astFactory.create(u);
			astFactory.addASTChild(currentAST, u_AST);
			match(LITERAL_using);
			if (matchError) {break loop57;}
			{
			switch ( LA(1)) {
			case LITERAL_namespace:
			{
				ns = LT(1);
				ns_AST = astFactory.create(ns);
				astFactory.addASTChild(currentAST, ns_AST);
				consume();
				action.using_directive(u, ns);
				if(LA(1) == SCOPE) {action.using_directive(action.USING_DIRECTIVE__SCOPE, LT(1));}
				qid=qualified_id();
				if (matchError) {break loop57;}
				astFactory.addASTChild(currentAST, returnAST);
				action.end_using_directive(LT(0));
				using_declaration_AST = (AST)currentAST.root;
				using_declaration_AST = astFactory.create(CSM_USING_DIRECTIVE,qid, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST()); using_declaration_AST.addChild(u_AST);
				currentAST.root = using_declaration_AST;
				currentAST.child = using_declaration_AST!=null &&using_declaration_AST.getFirstChild()!=null ?
					using_declaration_AST.getFirstChild() : using_declaration_AST;
				currentAST.advanceChildToEnd();
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typename:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				action.using_declaration(u);
				if(LA(1) == SCOPE) {action.using_declaration(action.USING_DECLARATION__SCOPE, LT(1));}
				{
				switch ( LA(1)) {
				case LITERAL_typename:
				{
					AST tmp253_AST = null;
					tmp253_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp253_AST);
					consume();
					break;
				}
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_decltype:
				case LITERAL___decltype:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_162, tokenNames);if (matchError) {break loop57;}
				}
				}
				}
				qid=unqualified_id();
				if (matchError) {break loop57;}
				astFactory.addASTChild(currentAST, returnAST);
				action.end_using_declaration(LT(1));
				using_declaration_AST = (AST)currentAST.root;
				using_declaration_AST = astFactory.create(CSM_USING_DECLARATION,qid, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST()); using_declaration_AST.addChild(u_AST);
				currentAST.root = using_declaration_AST;
				currentAST.child = using_declaration_AST!=null &&using_declaration_AST.getFirstChild()!=null ?
					using_declaration_AST.getFirstChild() : using_declaration_AST;
				currentAST.advanceChildToEnd();
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_112, tokenNames);if (matchError) {break loop57;}
			}
			}
			}
			match(SEMICOLON);
			if (matchError) {break loop57;}
			using_declaration_AST = (AST)currentAST.root;
		break;} // loop57
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((using_declaration_AST == null) && (currentAST.root != null)) {
			using_declaration_AST = (AST)currentAST.root;
			using_declaration_AST = astFactory.create(CSM_USING_DECLARATION,qid, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST()); using_declaration_AST.addChild(u_AST);
			}
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = using_declaration_AST;
}

	public final void static_assert_declaration() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST static_assert_declaration_AST = null;
		
		loop58:  while (true) {
			AST tmp255_AST = null;
			tmp255_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp255_AST);
			match(LITERAL_static_assert);
			if (matchError) {break loop58;}
			AST tmp256_AST = null;
			tmp256_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp256_AST);
			match(LPAREN);
			if (matchError) {break loop58;}
			constant_expression();
			if (matchError) {break loop58;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp257_AST = null;
			tmp257_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp257_AST);
			match(COMMA);
			if (matchError) {break loop58;}
			{
			int _cnt1154=0;
			_loop1154:
			do {
				if ((LA(1)==STRING_LITERAL)) {
					AST tmp258_AST = null;
					tmp258_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp258_AST);
					consume();
				}
				else {
					if ( _cnt1154>=1 ) { break _loop1154; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_163, tokenNames);if (matchError) {break loop58;}}
				}
				
				_cnt1154++;
			} while (true);
			}
			AST tmp259_AST = null;
			tmp259_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp259_AST);
			match(RPAREN);
			if (matchError) {break loop58;}
			AST tmp260_AST = null;
			tmp260_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp260_AST);
			match(SEMICOLON);
			if (matchError) {break loop58;}
			static_assert_declaration_AST = (AST)currentAST.root;
		break;} // loop58
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = static_assert_declaration_AST;
}

	public final void ptr_operator() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ptr_operator_AST = null;
		
		loop59:  while (true) {
			{
			switch ( LA(1)) {
			case AMPERSAND:
			{
				AST tmp261_AST = null;
				tmp261_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp261_AST);
				consume();
				is_address = true;
				break;
			}
			case AND:
			{
				AST tmp262_AST = null;
				tmp262_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp262_AST);
				consume();
				is_address = true;
				break;
			}
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			{
				literal_cdecl();
				if (matchError) {break loop59;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL__near:
			case LITERAL___near:
			{
				literal_near();
				if (matchError) {break loop59;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL__far:
			case LITERAL___far:
			{
				literal_far();
				if (matchError) {break loop59;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL___interrupt:
			{
				AST tmp263_AST = null;
				tmp263_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp263_AST);
				consume();
				break;
			}
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			{
				literal_pascal();
				if (matchError) {break loop59;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			{
				literal_stdcall();
				if (matchError) {break loop59;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL___clrcall:
			{
				literal_clrcall();
				if (matchError) {break loop59;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case STAR:
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				ptr_to_member();
				if (matchError) {break loop59;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_57, tokenNames);if (matchError) {break loop59;}
			}
			}
			}
			ptr_operator_AST = (AST)currentAST.root;
			ptr_operator_AST=(AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_PTR_OPERATOR,"CSM_PTR_OPERATOR", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(ptr_operator_AST));
			currentAST.root = ptr_operator_AST;
			currentAST.child = ptr_operator_AST!=null &&ptr_operator_AST.getFirstChild()!=null ?
				ptr_operator_AST.getFirstChild() : ptr_operator_AST;
			currentAST.advanceChildToEnd();
			ptr_operator_AST = (AST)currentAST.root;
		break;} // loop59
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((ptr_operator_AST == null) && (currentAST.root != null)) {
			ptr_operator_AST = (AST)currentAST.root;
			ptr_operator_AST=(AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_PTR_OPERATOR,"CSM_PTR_OPERATOR", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(ptr_operator_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_164);
			resetMatchError();
	}
	returnAST = ptr_operator_AST;
}

	protected final void function_params() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_params_AST = null;
		
		loop60:  while (true) {
			AST tmp264_AST = null;
			tmp264_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp264_AST);
			match(LPAREN);
			if (matchError) {break loop60;}
			
					    //functionParameterList();
					    if (K_and_R == false) {
						    in_parameter_list = true;
					    }
					
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			case LPAREN:
			case LSQUARE:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				parameter_list(false);
				if (matchError) {break loop60;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_165, tokenNames);if (matchError) {break loop60;}
			}
			}
			}
			
					    if (K_and_R == false) {
				  		in_parameter_list = false;
					    } else {
						in_parameter_list = true;
					    }
					
			AST tmp265_AST = null;
			tmp265_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp265_AST);
			match(RPAREN);
			if (matchError) {break loop60;}
			function_params_AST = (AST)currentAST.root;
		break;} // loop60
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_134);
			resetMatchError();
	}
	returnAST = function_params_AST;
}

	public final void fun_cv_qualifier_seq() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST fun_cv_qualifier_seq_AST = null;
		CPPParser.TypeQualifier tq;
		
		loop61:  while (true) {
			{
			int LA1_52 = LA(1);
			int LA2_52 = LA(2);
			
			boolean synPredMatched678 = false;
			if (((_tokenSet_166.member(LA1_52)) && (_tokenSet_1.member(LA2_52)))) {
				int _m678 = mark();
				guessing++;
				guess678:  while (true) {
					{
					{
					_loop676:
					do {
						if ((_tokenSet_77.member(LA(1)))) {
							cv_qualifier_g();
							if (matchError) {break guess678;}
						}
						else {
							break _loop676;
						}
						
					} while (true);
					}
					{
					switch ( LA(1)) {
					case EOF:
					case ASSIGNEQUAL:
					case SEMICOLON:
					case RPAREN:
					case LCURLY:
					case LITERAL_try:
					case LITERAL___try:
					{
						is_post_declarator_token_g();
						if (matchError) {break guess678;}
						break;
					}
					case LITERAL_throw:
					{
						consume();
						break;
					}
					case LITERAL_noexcept:
					{
						consume();
						break;
					}
					case LITERAL___attribute__:
					case LITERAL___attribute:
					{
						literal_attribute_g();
						if (matchError) {break guess678;}
						break;
					}
					case POINTERTO:
					{
						consume();
						break;
					}
					case LITERAL_override:
					{
						consume();
						break;
					}
					case LITERAL_final:
					{
						consume();
						break;
					}
					case LITERAL_new:
					{
						consume();
						break;
					}
					case AMPERSAND:
					{
						consume();
						break;
					}
					case AND:
					{
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess678;}
					}
					}
					}
					}
				synPredMatched678 = true;
				break;} // guess678
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m678);
				guessing--;
			}
			if ( synPredMatched678 ) {
				{
				_loop680:
				do {
					int LA1_53 = LA(1);
					int LA2_53 = LA(2);
					
					if ((_tokenSet_77.member(LA1_53)) && (_tokenSet_166.member(LA2_53))) {
						tq=cv_qualifier();
						if (matchError) {break loop61;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						break _loop680;
					}
					
				} while (true);
				}
			}
			else if ((_tokenSet_166.member(LA1_52)) && (_tokenSet_1.member(LA2_52))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_166, tokenNames);if (matchError) {break loop61;}
			}
			
			}
			fun_cv_qualifier_seq_AST = (AST)currentAST.root;
		break;} // loop61
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_166);
			resetMatchError();
	}
	returnAST = fun_cv_qualifier_seq_AST;
}

	public final void ref_qualifier() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ref_qualifier_AST = null;
		
		loop62:  while (true) {
			switch ( LA(1)) {
			case AMPERSAND:
			{
				AST tmp266_AST = null;
				tmp266_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp266_AST);
				consume();
				ref_qualifier_AST = (AST)currentAST.root;
				break;
			}
			case AND:
			{
				AST tmp267_AST = null;
				tmp267_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp267_AST);
				consume();
				ref_qualifier_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_167, tokenNames);if (matchError) {break loop62;}
			}
			}
		break;} // loop62
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_168);
			resetMatchError();
	}
	returnAST = ref_qualifier_AST;
}

	public final void exception_specification() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST exception_specification_AST = null;
		String so;
		
		loop63:  while (true) {
			switch ( LA(1)) {
			case LITERAL_throw:
			{
				AST tmp268_AST = null;
				tmp268_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp268_AST);
				consume();
				AST tmp269_AST = null;
				tmp269_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp269_AST);
				match(LPAREN);
				if (matchError) {break loop63;}
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				case LPAREN:
				case LSQUARE:
				case STAR:
				case AND:
				case AMPERSAND:
				case TILDE:
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					exception_type_id();
					if (matchError) {break loop63;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					_loop896:
					do {
						if ((LA(1)==COMMA)) {
							AST tmp270_AST = null;
							tmp270_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp270_AST);
							consume();
							exception_type_id();
							if (matchError) {break loop63;}
							astFactory.addASTChild(currentAST, returnAST);
						}
						else {
							break _loop896;
						}
						
					} while (true);
					}
					break;
				}
				case RPAREN:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_165, tokenNames);if (matchError) {break loop63;}
				}
				}
				}
				AST tmp271_AST = null;
				tmp271_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp271_AST);
				match(RPAREN);
				if (matchError) {break loop63;}
				exception_specification_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_noexcept:
			{
				AST tmp272_AST = null;
				tmp272_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp272_AST);
				consume();
				{
				int LA1_54 = LA(1);
				int LA2_54 = LA(2);
				
				if ((LA1_54==LPAREN) && (_tokenSet_169.member(LA2_54))) {
					AST tmp273_AST = null;
					tmp273_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp273_AST);
					consume();
					constant_expression();
					if (matchError) {break loop63;}
					astFactory.addASTChild(currentAST, returnAST);
					AST tmp274_AST = null;
					tmp274_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp274_AST);
					match(RPAREN);
					if (matchError) {break loop63;}
				}
				else if ((_tokenSet_132.member(LA1_54)) && (_tokenSet_1.member(LA2_54))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_132, tokenNames);if (matchError) {break loop63;}
				}
				
				}
				exception_specification_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_170, tokenNames);if (matchError) {break loop63;}
			}
			}
		break;} // loop63
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_132);
			resetMatchError();
	}
	returnAST = exception_specification_AST;
}

	protected final void function_K_R_parameter() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_K_R_parameter_AST = null;
		
		loop64:  while (true) {
			declaration(declFunctionParam);
			if (matchError) {break loop64;}
			astFactory.addASTChild(currentAST, returnAST);
			function_K_R_parameter_AST = (AST)currentAST.root;
			function_K_R_parameter_AST=(AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_PARAMETER_DECLARATION,"CSM_PARAMETER_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(function_K_R_parameter_AST));
			currentAST.root = function_K_R_parameter_AST;
			currentAST.child = function_K_R_parameter_AST!=null &&function_K_R_parameter_AST.getFirstChild()!=null ?
				function_K_R_parameter_AST.getFirstChild() : function_K_R_parameter_AST;
			currentAST.advanceChildToEnd();
			function_K_R_parameter_AST = (AST)currentAST.root;
		break;} // loop64
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((function_K_R_parameter_AST == null) && (currentAST.root != null)) {
			function_K_R_parameter_AST = (AST)currentAST.root;
			function_K_R_parameter_AST=(AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_PARAMETER_DECLARATION,"CSM_PARAMETER_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(function_K_R_parameter_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_64);
			resetMatchError();
	}
	returnAST = function_K_R_parameter_AST;
}

	public final void function_try_block(
		boolean constructor
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_try_block_AST = null;
		
		loop65:  while (true) {
			int LA1_55 = LA(1);
			int LA2_55 = LA(2);
			
			if (((LA1_55==LITERAL_try||LA1_55==LITERAL___try) && (LA2_55==COLON||LA2_55==LCURLY))&&(isLazyCompound())) {
				literal_try();
				if (matchError) {break loop65;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				int LA1_56 = LA(1);
				int LA2_56 = LA(2);
				
				if (((LA1_56==COLON||LA1_56==LCURLY) && (_tokenSet_1.member(LA2_56)))&&((constructor))) {
					{
					switch ( LA(1)) {
					case COLON:
					{
						ctor_initializer();
						if (matchError) {break loop65;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LCURLY:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_127, tokenNames);if (matchError) {break loop65;}
					}
					}
					}
				}
				else if ((LA1_56==LCURLY) && (_tokenSet_1.member(LA2_56))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_127, tokenNames);if (matchError) {break loop65;}
				}
				
				}
				balanceCurlies();
				if (matchError) {break loop65;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				_loop1073:
				do {
					int LA1_57 = LA(1);
					int LA2_57 = LA(2);
					
					if ((LA1_57==LITERAL_catch||LA1_57==LITERAL___finally) && (LA2_57==LPAREN||LA2_57==LCURLY)) {
						{
						switch ( LA(1)) {
						case LITERAL_catch:
						{
							AST tmp275_AST = null;
							tmp275_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp275_AST);
							consume();
							AST tmp276_AST = null;
							tmp276_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp276_AST);
							match(LPAREN);
							if (matchError) {break loop65;}
							exception_declaration();
							if (matchError) {break loop65;}
							astFactory.addASTChild(currentAST, returnAST);
							AST tmp277_AST = null;
							tmp277_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp277_AST);
							match(RPAREN);
							if (matchError) {break loop65;}
							break;
						}
						case LITERAL___finally:
						{
							literal_finally();
							if (matchError) {break loop65;}
							astFactory.addASTChild(currentAST, returnAST);
							break;
						}
						default:
						{
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_171, tokenNames);if (matchError) {break loop65;}
						}
						}
						}
						balanceCurlies();
						if (matchError) {break loop65;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						break _loop1073;
					}
					
				} while (true);
				}
				function_try_block_AST = (AST)currentAST.root;
				function_try_block_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TRY_CATCH_STATEMENT_LAZY,"CSM_TRY_CATCH_STATEMENT_LAZY", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(function_try_block_AST));
				currentAST.root = function_try_block_AST;
				currentAST.child = function_try_block_AST!=null &&function_try_block_AST.getFirstChild()!=null ?
					function_try_block_AST.getFirstChild() : function_try_block_AST;
				currentAST.advanceChildToEnd();
				function_try_block_AST = (AST)currentAST.root;
			}
			else if (((LA1_55==LITERAL_try||LA1_55==LITERAL___try) && (LA2_55==COLON||LA2_55==LCURLY))&&(!isLazyCompound())) {
				try_block(constructor);
				if (matchError) {break loop65;}
				astFactory.addASTChild(currentAST, returnAST);
				function_try_block_AST = (AST)currentAST.root;
				function_try_block_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_COMPOUND_STATEMENT,"CSM_COMPOUND_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(function_try_block_AST));
				currentAST.root = function_try_block_AST;
				currentAST.child = function_try_block_AST!=null &&function_try_block_AST.getFirstChild()!=null ?
					function_try_block_AST.getFirstChild() : function_try_block_AST;
				currentAST.advanceChildToEnd();
				function_try_block_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_62, tokenNames);if (matchError) {break loop65;}
			}
			
		break;} // loop65
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((function_try_block_AST == null) && (currentAST.root != null)) {
			function_try_block_AST = (AST)currentAST.root;
			function_try_block_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_COMPOUND_STATEMENT,"CSM_COMPOUND_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(function_try_block_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = function_try_block_AST;
}

	protected final void is_declaration() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST is_declaration_AST = null;
		
		loop66:  while (true) {
			int LA1_58 = LA(1);
			int LA2_58 = LA(2);
			
			if ((LA1_58==LITERAL_extern) && (LA2_58==EOF)) {
				AST tmp278_AST = null;
				tmp278_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp278_AST);
				consume();
				is_declaration_AST = (AST)currentAST.root;
			}
			else if ((LA1_58==LITERAL_using)) {
				AST tmp279_AST = null;
				tmp279_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp279_AST);
				consume();
				is_declaration_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_22.member(LA1_58)) && (_tokenSet_172.member(LA2_58))) {
				{
				declaration_specifiers(true, false);
				if (matchError) {break loop66;}
				astFactory.addASTChild(currentAST, returnAST);
				declarator(declOther, 0);
				if (matchError) {break loop66;}
				astFactory.addASTChild(currentAST, returnAST);
				}
				is_declaration_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_173, tokenNames);if (matchError) {break loop66;}
			}
			
		break;} // loop66
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = is_declaration_AST;
}

	public final void declarator(
		int kind, int level
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declarator_AST = null;
		
		loop67:  while (true) {
			int LA1_59 = LA(1);
			int LA2_59 = LA(2);
			
			boolean synPredMatched686 = false;
			if ((((_tokenSet_21.member(LA1_59)) && (LA2_59==LPAREN||LA2_59==LSQUARE))&&(level < 5))) {
				int _m686 = mark();
				guessing++;
				guess686:  while (true) {
					{
					attribute_specification_g();
					if (matchError) {break guess686;}
					}
				synPredMatched686 = true;
				break;} // guess686
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m686);
				guessing--;
			}
			if ( synPredMatched686 ) {
				attribute_specification();
				if (matchError) {break loop67;}
				declarator(kind, level + 1);
				if (matchError) {break loop67;}
				astFactory.addASTChild(currentAST, returnAST);
				declarator_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched688 = false;
				if ((((_tokenSet_57.member(LA1_59)) && (_tokenSet_174.member(LA2_59)))&&(level < 5))) {
					int _m688 = mark();
					guessing++;
					guess688:  while (true) {
						{
						ptr_operator_g();
						if (matchError) {break guess688;}
						}
					synPredMatched688 = true;
					break;} // guess688
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m688);
					guessing--;
				}
				if ( synPredMatched688 ) {
					ptr_operator();
					if (matchError) {break loop67;}
					astFactory.addASTChild(currentAST, returnAST);
					restrict_declarator(kind, level + 1);
					if (matchError) {break loop67;}
					astFactory.addASTChild(currentAST, returnAST);
					declarator_AST = (AST)currentAST.root;
				}
				else {
					boolean synPredMatched690 = false;
					if ((((LA1_59==LPAREN) && (_tokenSet_109.member(LA2_59)))&&(level < 5 && (_td || (_ts != tsInvalid))))) {
						int _m690 = mark();
						guessing++;
						guess690:  while (true) {
							{
							match(LPAREN);
							if (matchError) {break guess690;}
							declarator_g(kind, level + 1);
							if (matchError) {break guess690;}
							match(RPAREN);
							if (matchError) {break guess690;}
							is_post_declarator_token_g();
							if (matchError) {break guess690;}
							}
						synPredMatched690 = true;
						break;} // guess690
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m690);
						guessing--;
					}
					if ( synPredMatched690 ) {
						AST tmp280_AST = null;
						tmp280_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp280_AST);
						consume();
						declarator(kind, level + 1);
						if (matchError) {break loop67;}
						astFactory.addASTChild(currentAST, returnAST);
						AST tmp281_AST = null;
						tmp281_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp281_AST);
						match(RPAREN);
						if (matchError) {break loop67;}
						declarator_AST = (AST)currentAST.root;
					}
					else {
						boolean synPredMatched692 = false;
						if ((((LA1_59==LPAREN) && (_tokenSet_109.member(LA2_59)))&&(level < 5))) {
							int _m692 = mark();
							guessing++;
							guess692:  while (true) {
								{
								match(LPAREN);
								if (matchError) {break guess692;}
								declarator_g(kind, level + 1);
								if (matchError) {break guess692;}
								match(RPAREN);
								if (matchError) {break guess692;}
								match(ASSIGNEQUAL);
								if (matchError) {break guess692;}
								match(LCURLY);
								if (matchError) {break guess692;}
								}
							synPredMatched692 = true;
							break;} // guess692
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m692);
							guessing--;
						}
						if ( synPredMatched692 ) {
							AST tmp282_AST = null;
							tmp282_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp282_AST);
							consume();
							declarator(kind, level + 1);
							if (matchError) {break loop67;}
							astFactory.addASTChild(currentAST, returnAST);
							AST tmp283_AST = null;
							tmp283_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp283_AST);
							match(RPAREN);
							if (matchError) {break loop67;}
							declarator_AST = (AST)currentAST.root;
						}
						else if (((_tokenSet_175.member(LA1_59)) && (_tokenSet_176.member(LA2_59)))&&(level < 5)) {
							direct_declarator(kind, level + 1);
							if (matchError) {break loop67;}
							astFactory.addASTChild(currentAST, returnAST);
							declarator_AST = (AST)currentAST.root;
						}
						else {
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_109, tokenNames);if (matchError) {break loop67;}
						}
						}}}
					break;} // loop67
					if (matchError) {
						reportError(matchException);
						recover(matchException,_tokenSet_177);
						resetMatchError();
				}
				returnAST = declarator_AST;
			}
			
	public final void linkage_specification() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST linkage_specification_AST = null;
		
		loop68:  while (true) {
			AST tmp284_AST = null;
			tmp284_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp284_AST);
			match(LITERAL_extern);
			if (matchError) {break loop68;}
			AST tmp285_AST = null;
			tmp285_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp285_AST);
			match(STRING_LITERAL);
			if (matchError) {break loop68;}
			{
			switch ( LA(1)) {
			case LCURLY:
			{
				AST tmp286_AST = null;
				tmp286_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp286_AST);
				consume();
				{
				_loop421:
				do {
					if ((_tokenSet_2.member(LA(1)))) {
						external_declaration();
						if (matchError) {break loop68;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						break _loop421;
					}
					
				} while (true);
				}
				AST tmp287_AST = null;
				tmp287_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp287_AST);
				match(RCURLY);
				if (matchError) {break loop68;}
				break;
			}
			case ELLIPSIS:
			case SEMICOLON:
			case LPAREN:
			case LSQUARE:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_template:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_namespace:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_using:
			case LITERAL_export:
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___extension__:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_static_assert:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				external_declaration();
				if (matchError) {break loop68;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_178, tokenNames);if (matchError) {break loop68;}
			}
			}
			}
			linkage_specification_AST = (AST)currentAST.root;
			linkage_specification_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_LINKAGE_SPECIFICATION,"CSM_LINKAGE_SPECIFICATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(linkage_specification_AST));
			currentAST.root = linkage_specification_AST;
			currentAST.child = linkage_specification_AST!=null &&linkage_specification_AST.getFirstChild()!=null ?
				linkage_specification_AST.getFirstChild() : linkage_specification_AST;
			currentAST.advanceChildToEnd();
			linkage_specification_AST = (AST)currentAST.root;
		break;} // loop68
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((linkage_specification_AST == null) && (currentAST.root != null)) {
			linkage_specification_AST = (AST)currentAST.root;
			linkage_specification_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_LINKAGE_SPECIFICATION,"CSM_LINKAGE_SPECIFICATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(linkage_specification_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = linkage_specification_AST;
}

	public final void unknown_pretype_declaration_specifiers() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unknown_pretype_declaration_specifiers_AST = null;
		String s;
		
		loop69:  while (true) {
			unknown_pretype_declaration_specifiers_list();
			if (matchError) {break loop69;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			int LA1_60 = LA(1);
			int LA2_60 = LA(2);
			
			boolean synPredMatched457 = false;
			if (((_tokenSet_0.member(LA1_60)) && (_tokenSet_22.member(LA2_60)))) {
				int _m457 = mark();
				guessing++;
				guess457:  while (true) {
					{
					literal_ident_g();
					if (matchError) {break guess457;}
					{
					int LA1_61 = LA(1);
					int LA2_61 = LA(2);
					
					switch ( LA1_61) {
					case LITERAL_typedef:
					{
						consume();
						break;
					}
					case LITERAL_explicit:
					{
						consume();
						break;
					}
					case LITERAL_enum:
					{
						consume();
						break;
					}
					case LITERAL_typename:
					{
						consume();
						break;
					}
					case LITERAL__stdcall:
					case LITERAL___stdcall:
					{
						literal_stdcall_g();
						if (matchError) {break guess457;}
						break;
					}
					case LITERAL___clrcall:
					{
						literal_clrcall_g();
						if (matchError) {break guess457;}
						break;
					}
					default:
						if ((LA1_61==LITERAL_final) && (true)) {
							consume();
						}
						else if ((_tokenSet_179.member(LA1_61)) && (_tokenSet_180.member(LA2_61))) {
							{
							_loop454:
							do {
								switch ( LA(1)) {
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL__TYPE_QUALIFIER__:
								{
									postfix_cv_qualifier_g();
									if (matchError) {break guess457;}
									break;
								}
								case LITERAL_constexpr:
								{
									consume();
									break;
								}
								case LITERAL_inline:
								case LITERAL__inline:
								case LITERAL___inline__:
								case LITERAL___inline:
								case LITERAL___forceinline:
								{
									literal_inline_g();
									if (matchError) {break guess457;}
									break;
								}
								case LITERAL_extern:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_thread_local:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									storage_class_specifier_g();
									if (matchError) {break guess457;}
									break;
								}
								default:
								{
									break _loop454;
								}
								}
							} while (true);
							}
							literal_ident_g();
							if (matchError) {break guess457;}
							{
							_loop456:
							do {
								switch ( LA(1)) {
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL__TYPE_QUALIFIER__:
								{
									postfix_cv_qualifier_g();
									if (matchError) {break guess457;}
									break;
								}
								case LITERAL_constexpr:
								{
									consume();
									break;
								}
								case LITERAL_inline:
								case LITERAL__inline:
								case LITERAL___inline__:
								case LITERAL___inline:
								case LITERAL___forceinline:
								{
									literal_inline_g();
									if (matchError) {break guess457;}
									break;
								}
								case LITERAL_extern:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_thread_local:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									storage_class_specifier_g();
									if (matchError) {break guess457;}
									break;
								}
								default:
								{
									break _loop456;
								}
								}
							} while (true);
							}
							literal_ident_g();
							if (matchError) {break guess457;}
						}
					else {
						matchError=true;if (matchError) {break guess457;}
					}
					}
					}
					}
				synPredMatched457 = true;
				break;} // guess457
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m457);
				guessing--;
			}
			if ( synPredMatched457 ) {
				s=literal_ident();
				if (matchError) {break loop69;}
			}
			else if ((_tokenSet_22.member(LA1_60)) && (_tokenSet_48.member(LA2_60))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_22, tokenNames);if (matchError) {break loop69;}
			}
			
			}
			unknown_pretype_declaration_specifiers_AST = (AST)currentAST.root;
		break;} // loop69
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_22);
			resetMatchError();
	}
	returnAST = unknown_pretype_declaration_specifiers_AST;
}

	protected final void postfix_cv_qualifier() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST postfix_cv_qualifier_AST = null;
		
		loop70:  while (true) {
			{
			int _cnt1307=0;
			_loop1307:
			do {
				if ((_tokenSet_181.member(LA(1)))) {
					{
					switch ( LA(1)) {
					case LITERAL_volatile:
					case LITERAL___volatile__:
					case LITERAL___volatile:
					{
						literal_volatile();
						if (matchError) {break loop70;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LITERAL_const:
					case LITERAL___const__:
					case LITERAL___const:
					{
						literal_const();
						if (matchError) {break loop70;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LITERAL__TYPE_QUALIFIER__:
					{
						AST tmp288_AST = null;
						tmp288_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp288_AST);
						consume();
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_181, tokenNames);if (matchError) {break loop70;}
					}
					}
					}
					{
					_loop1306:
					do {
						int LA1_62 = LA(1);
						int LA2_62 = LA(2);
						
						if ((_tokenSet_182.member(LA1_62)) && (_tokenSet_183.member(LA2_62))) {
							unnamed_ptr_operator();
							if (matchError) {break loop70;}
							astFactory.addASTChild(currentAST, returnAST);
							postfix_cv_qualifier_AST = (AST)currentAST.root;
							postfix_cv_qualifier_AST=(AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_PTR_OPERATOR,"CSM_PTR_OPERATOR", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(postfix_cv_qualifier_AST));
							currentAST.root = postfix_cv_qualifier_AST;
							currentAST.child = postfix_cv_qualifier_AST!=null &&postfix_cv_qualifier_AST.getFirstChild()!=null ?
								postfix_cv_qualifier_AST.getFirstChild() : postfix_cv_qualifier_AST;
							currentAST.advanceChildToEnd();
						}
						else {
							break _loop1306;
						}
						
					} while (true);
					}
				}
				else {
					if ( _cnt1307>=1 ) { break _loop1307; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_181, tokenNames);if (matchError) {break loop70;}}
				}
				
				_cnt1307++;
			} while (true);
			}
			postfix_cv_qualifier_AST = (AST)currentAST.root;
		break;} // loop70
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((postfix_cv_qualifier_AST == null) && (currentAST.root != null)) {
			postfix_cv_qualifier_AST = (AST)currentAST.root;
			postfix_cv_qualifier_AST=(AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_PTR_OPERATOR,"CSM_PTR_OPERATOR", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(postfix_cv_qualifier_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_184);
			resetMatchError();
	}
	returnAST = postfix_cv_qualifier_AST;
}

	public final CPPParser.StorageClass  cpp11_storage_class_specifier() {
		CPPParser.StorageClass sc = scInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cpp11_storage_class_specifier_AST = null;
		
		loop71:  while (true) {
			sc=common_storage_class_specifier();
			if (matchError) {break loop71;}
			astFactory.addASTChild(currentAST, returnAST);
			cpp11_storage_class_specifier_AST = (AST)currentAST.root;
		break;} // loop71
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_22);
			resetMatchError();
	}
	returnAST = cpp11_storage_class_specifier_AST;
	return sc;
}

	protected final void literal_stdcall() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_stdcall_AST = null;
		
		loop72:  while (true) {
			switch ( LA(1)) {
			case LITERAL__stdcall:
			{
				AST tmp289_AST = null;
				tmp289_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp289_AST);
				consume();
				literal_stdcall_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___stdcall:
			{
				AST tmp290_AST = null;
				tmp290_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp290_AST);
				consume();
				literal_stdcall_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_185, tokenNames);if (matchError) {break loop72;}
			}
			}
		break;} // loop72
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_186);
			resetMatchError();
	}
	returnAST = literal_stdcall_AST;
}

	protected final void literal_clrcall() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_clrcall_AST = null;
		
		loop73:  while (true) {
			AST tmp291_AST = null;
			tmp291_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp291_AST);
			match(LITERAL___clrcall);
			if (matchError) {break loop73;}
			literal_clrcall_AST = (AST)currentAST.root;
		break;} // loop73
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_186);
			resetMatchError();
	}
	returnAST = literal_clrcall_AST;
}

	protected final void type_attribute_specification() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST type_attribute_specification_AST = null;
		
		loop74:  while (true) {
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				attribute_specification_list();
				if (matchError) {break loop74;}
				break;
			}
			case LITERAL__declspec:
			case LITERAL___declspec:
			{
				declspec();
				if (matchError) {break loop74;}
				break;
			}
			case LITERAL_alignas:
			{
				AST tmp292_AST = null;
				tmp292_AST = astFactory.create(LT(1));
				consume();
				balanceParens();
				if (matchError) {break loop74;}
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_52, tokenNames);if (matchError) {break loop74;}
			}
			}
		break;} // loop74
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_75);
			resetMatchError();
	}
	returnAST = type_attribute_specification_AST;
}

	public final void unknown_posttype_declaration_specifiers() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unknown_posttype_declaration_specifiers_AST = null;
		
		loop75:  while (true) {
			unknown_posttype_declaration_specifiers_list();
			if (matchError) {break loop75;}
			astFactory.addASTChild(currentAST, returnAST);
			unknown_posttype_declaration_specifiers_AST = (AST)currentAST.root;
		break;} // loop75
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_47);
			resetMatchError();
	}
	returnAST = unknown_posttype_declaration_specifiers_AST;
}

	protected final void literal_typeof() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_typeof_AST = null;
		
		loop76:  while (true) {
			switch ( LA(1)) {
			case LITERAL_typeof:
			{
				AST tmp293_AST = null;
				tmp293_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp293_AST);
				consume();
				literal_typeof_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___typeof:
			{
				AST tmp294_AST = null;
				tmp294_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp294_AST);
				consume();
				literal_typeof_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___typeof__:
			{
				AST tmp295_AST = null;
				tmp295_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp295_AST);
				consume();
				literal_typeof_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_187, tokenNames);if (matchError) {break loop76;}
			}
			}
		break;} // loop76
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_139);
			resetMatchError();
	}
	returnAST = literal_typeof_AST;
}

	protected final void typeof_param() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST typeof_param_AST = null;
		
		loop77:  while (true) {
			int LA1_63 = LA(1);
			int LA2_63 = LA(2);
			
			boolean synPredMatched472 = false;
			if (((_tokenSet_22.member(LA1_63)) && (_tokenSet_188.member(LA2_63)))) {
				int _m472 = mark();
				guessing++;
				guess472:  while (true) {
					{
					type_name_g();
					if (matchError) {break guess472;}
					if (!(LA(1) != PLUS))
					{matchError=true;
					if (matchError) {break guess472;}}
					}
				synPredMatched472 = true;
				break;} // guess472
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m472);
				guessing--;
			}
			if ( synPredMatched472 ) {
				type_name();
				if (matchError) {break loop77;}
				astFactory.addASTChild(currentAST, returnAST);
				typeof_param_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_189.member(LA1_63)) && (_tokenSet_190.member(LA2_63))) {
				expression();
				if (matchError) {break loop77;}
				astFactory.addASTChild(currentAST, returnAST);
				typeof_param_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_191, tokenNames);if (matchError) {break loop77;}
			}
			
		break;} // loop77
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_192);
			resetMatchError();
	}
	returnAST = typeof_param_AST;
}

	public final void unknown_pretype_declaration_specifiers_list() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unknown_pretype_declaration_specifiers_list_AST = null;
		String s;
		
		loop78:  while (true) {
			{
			int LA1_64 = LA(1);
			int LA2_64 = LA(2);
			
			boolean synPredMatched461 = false;
			if (((_tokenSet_0.member(LA1_64)) && (_tokenSet_22.member(LA2_64)))) {
				int _m461 = mark();
				guessing++;
				guess461:  while (true) {
					{
					literal_ident_g();
					if (matchError) {break guess461;}
					literal_ident_g();
					if (matchError) {break guess461;}
					literal_ident_g();
					if (matchError) {break guess461;}
					}
				synPredMatched461 = true;
				break;} // guess461
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m461);
				guessing--;
			}
			if ( synPredMatched461 ) {
				s=literal_ident();
				if (matchError) {break loop78;}
				unknown_pretype_declaration_specifiers_list();
				if (matchError) {break loop78;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_22.member(LA1_64)) && (_tokenSet_48.member(LA2_64))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_22, tokenNames);if (matchError) {break loop78;}
			}
			
			}
			unknown_pretype_declaration_specifiers_list_AST = (AST)currentAST.root;
		break;} // loop78
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_22);
			resetMatchError();
	}
	returnAST = unknown_pretype_declaration_specifiers_list_AST;
}

	public final void unknown_posttype_declaration_specifiers_list() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unknown_posttype_declaration_specifiers_list_AST = null;
		String s;
		
		loop79:  while (true) {
			{
			int LA1_65 = LA(1);
			int LA2_65 = LA(2);
			
			boolean synPredMatched466 = false;
			if (((_tokenSet_0.member(LA1_65)) && (_tokenSet_47.member(LA2_65)))) {
				int _m466 = mark();
				guessing++;
				guess466:  while (true) {
					{
					literal_ident_g();
					if (matchError) {break guess466;}
					literal_ident_g();
					if (matchError) {break guess466;}
					}
				synPredMatched466 = true;
				break;} // guess466
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m466);
				guessing--;
			}
			if ( synPredMatched466 ) {
				s=literal_ident();
				if (matchError) {break loop79;}
				unknown_posttype_declaration_specifiers_list();
				if (matchError) {break loop79;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_47.member(LA1_65)) && (_tokenSet_1.member(LA2_65))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_47, tokenNames);if (matchError) {break loop79;}
			}
			
			}
			unknown_posttype_declaration_specifiers_list_AST = (AST)currentAST.root;
		break;} // loop79
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_47);
			resetMatchError();
	}
	returnAST = unknown_posttype_declaration_specifiers_list_AST;
}

	public final void type_name() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST type_name_AST = null;
		
		loop80:  while (true) {
			declaration_specifiers(true, false);
			if (matchError) {break loop80;}
			astFactory.addASTChild(currentAST, returnAST);
			abstract_declarator();
			if (matchError) {break loop80;}
			astFactory.addASTChild(currentAST, returnAST);
			type_name_AST = (AST)currentAST.root;
		break;} // loop80
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_193);
			resetMatchError();
	}
	returnAST = type_name_AST;
}

	public final void expression() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST expression_AST = null;
		
		loop81:  while (true) {
			assignment_expression();
			if (matchError) {break loop81;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			_loop1166:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp296_AST = null;
					tmp296_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp296_AST);
					consume();
					assignment_expression();
					if (matchError) {break loop81;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop1166;
				}
				
			} while (true);
			}
			expression_AST = (AST)currentAST.root;
			expression_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_EXPRESSION,"CSM_EXPRESSION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(expression_AST));
			currentAST.root = expression_AST;
			currentAST.child = expression_AST!=null &&expression_AST.getFirstChild()!=null ?
				expression_AST.getFirstChild() : expression_AST;
			currentAST.advanceChildToEnd();
			expression_AST = (AST)currentAST.root;
		break;} // loop81
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((expression_AST == null) && (currentAST.root != null)) {
			expression_AST = (AST)currentAST.root;
			expression_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_EXPRESSION,"CSM_EXPRESSION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(expression_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_194);
			resetMatchError();
	}
	returnAST = expression_AST;
}

	public final CPPParser.StorageClass  common_storage_class_specifier() {
		CPPParser.StorageClass sc = scInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST common_storage_class_specifier_AST = null;
		
		loop82:  while (true) {
			switch ( LA(1)) {
			case LITERAL_register:
			{
				AST tmp297_AST = null;
				tmp297_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp297_AST);
				consume();
				sc = scREGISTER;
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_static:
			{
				AST tmp298_AST = null;
				tmp298_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp298_AST);
				consume();
				sc = scSTATIC;
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_extern:
			{
				AST tmp299_AST = null;
				tmp299_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp299_AST);
				consume();
				sc = scEXTERN;
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_mutable:
			{
				AST tmp300_AST = null;
				tmp300_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp300_AST);
				consume();
				sc = scMUTABLE;
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___thread:
			{
				AST tmp301_AST = null;
				tmp301_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp301_AST);
				consume();
				sc = scTHREAD;
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				AST tmp302_AST = null;
				tmp302_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp302_AST);
				consume();
				sc = scOTHER;
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___symbolic:
			{
				AST tmp303_AST = null;
				tmp303_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp303_AST);
				consume();
				sc = scOTHER;
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___global:
			{
				AST tmp304_AST = null;
				tmp304_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp304_AST);
				consume();
				sc = scOTHER;
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___hidden:
			{
				AST tmp305_AST = null;
				tmp305_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp305_AST);
				consume();
				sc = scOTHER;
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_thread_local:
			{
				AST tmp306_AST = null;
				tmp306_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp306_AST);
				consume();
				sc = scOTHER;
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_51, tokenNames);if (matchError) {break loop82;}
			}
			}
		break;} // loop82
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_75);
			resetMatchError();
	}
	returnAST = common_storage_class_specifier_AST;
	return sc;
}

	protected final void literal_const() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_const_AST = null;
		
		loop83:  while (true) {
			switch ( LA(1)) {
			case LITERAL_const:
			{
				AST tmp307_AST = null;
				tmp307_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp307_AST);
				consume();
				literal_const_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___const:
			{
				AST tmp308_AST = null;
				tmp308_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp308_AST);
				consume();
				literal_const_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___const__:
			{
				AST tmp309_AST = null;
				tmp309_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp309_AST);
				consume();
				literal_const_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_195, tokenNames);if (matchError) {break loop83;}
			}
			}
		break;} // loop83
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_196);
			resetMatchError();
	}
	returnAST = literal_const_AST;
}

	protected final void literal_volatile() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_volatile_AST = null;
		
		loop84:  while (true) {
			switch ( LA(1)) {
			case LITERAL_volatile:
			{
				AST tmp310_AST = null;
				tmp310_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp310_AST);
				consume();
				literal_volatile_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___volatile:
			{
				AST tmp311_AST = null;
				tmp311_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp311_AST);
				consume();
				literal_volatile_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___volatile__:
			{
				AST tmp312_AST = null;
				tmp312_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp312_AST);
				consume();
				literal_volatile_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_197, tokenNames);if (matchError) {break loop84;}
			}
			}
		break;} // loop84
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_196);
			resetMatchError();
	}
	returnAST = literal_volatile_AST;
}

	public final /*TypeSpecifier*/int  simple_type_specifier(
		boolean noTypeId
	) {
		/*TypeSpecifier*/int ts = tsInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST simple_type_specifier_AST = null;
		
		loop85:  while (true) {
			{
			int LA1_66 = LA(1);
			int LA2_66 = LA(2);
			
			if (((_tokenSet_198.member(LA1_66)) && (_tokenSet_199.member(LA2_66)))&&(!noTypeId && qualifiedItemIsOneOf(qiType|qiCtor))) {
				qualified_type();
				if (matchError) {break loop85;}
				astFactory.addASTChild(currentAST, returnAST);
				ts=tsTYPEID;
				simple_type_specifier_AST = (AST)currentAST.root;
				simple_type_specifier_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TYPE_COMPOUND,"CSM_TYPE_COMPOUND", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(simple_type_specifier_AST));
				currentAST.root = simple_type_specifier_AST;
				currentAST.child = simple_type_specifier_AST!=null &&simple_type_specifier_AST.getFirstChild()!=null ?
					simple_type_specifier_AST.getFirstChild() : simple_type_specifier_AST;
				currentAST.advanceChildToEnd();
			}
			else if ((_tokenSet_200.member(LA1_66))) {
				ts=builtin_cv_type_specifier(ts);
				if (matchError) {break loop85;}
				astFactory.addASTChild(currentAST, returnAST);
				simple_type_specifier_AST = (AST)currentAST.root;
				simple_type_specifier_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TYPE_BUILTIN,"CSM_TYPE_BUILTIN", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(simple_type_specifier_AST));
				currentAST.root = simple_type_specifier_AST;
				currentAST.child = simple_type_specifier_AST!=null &&simple_type_specifier_AST.getFirstChild()!=null ?
					simple_type_specifier_AST.getFirstChild() : simple_type_specifier_AST;
				currentAST.advanceChildToEnd();
			}
			else {
				boolean synPredMatched483 = false;
				if ((((_tokenSet_198.member(LA1_66)) && (_tokenSet_199.member(LA2_66)))&&(!noTypeId))) {
					int _m483 = mark();
					guessing++;
					guess483:  while (true) {
						{
						qualified_type_g();
						if (matchError) {break guess483;}
						}
					synPredMatched483 = true;
					break;} // guess483
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m483);
					guessing--;
				}
				if ( synPredMatched483 ) {
					qualified_type();
					if (matchError) {break loop85;}
					astFactory.addASTChild(currentAST, returnAST);
					ts=tsTYPEID;
					simple_type_specifier_AST = (AST)currentAST.root;
					simple_type_specifier_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TYPE_COMPOUND,"CSM_TYPE_COMPOUND", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(simple_type_specifier_AST));
					currentAST.root = simple_type_specifier_AST;
					currentAST.child = simple_type_specifier_AST!=null &&simple_type_specifier_AST.getFirstChild()!=null ?
						simple_type_specifier_AST.getFirstChild() : simple_type_specifier_AST;
					currentAST.advanceChildToEnd();
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_201, tokenNames);if (matchError) {break loop85;}
				}
				}
				}
				simple_type_specifier_AST = (AST)currentAST.root;
			break;} // loop85
			if (matchError) {
				// when recover we'd like to perform any "build AST" actions
				if ((simple_type_specifier_AST == null) && (currentAST.root != null)) {
				simple_type_specifier_AST = (AST)currentAST.root;
				simple_type_specifier_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TYPE_COMPOUND,"CSM_TYPE_COMPOUND", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(simple_type_specifier_AST));
				}
				reportError(matchException);
				recover(matchException,_tokenSet_92);
				resetMatchError();
		}
		returnAST = simple_type_specifier_AST;
		return ts;
	}
	
	public final /*TypeSpecifier*/int  class_specifier(
		DeclSpecifier ds
	) {
		/*TypeSpecifier*/int ts = tsInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST class_specifier_AST = null;
		String saveClass = ""; String id = ""; StorageClass sc = scInvalid;
		
		loop86:  while (true) {
			action.class_kind(LT(1));
			{
			switch ( LA(1)) {
			case LITERAL_class:
			{
				AST tmp313_AST = null;
				tmp313_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp313_AST);
				consume();
				ts = tsCLASS;
				break;
			}
			case LITERAL_struct:
			{
				AST tmp314_AST = null;
				tmp314_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp314_AST);
				consume();
				ts = tsSTRUCT;
				break;
			}
			case LITERAL_union:
			{
				AST tmp315_AST = null;
				tmp315_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp315_AST);
				consume();
				ts = tsUNION;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_69, tokenNames);if (matchError) {break loop86;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_alignas:
			{
				type_attribute_specification();
				if (matchError) {break loop86;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LCURLY:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_extern:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL___global:
			case LITERAL___thread:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL___decltype:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_202, tokenNames);if (matchError) {break loop86;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_extern:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL___global:
			case LITERAL___thread:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_thread_local:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				sc=storage_class_specifier();
				if (matchError) {break loop86;}
				break;
			}
			case LCURLY:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_203, tokenNames);if (matchError) {break loop86;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				id=class_qualified_id();
				if (matchError) {break loop86;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				int LA1_67 = LA(1);
				int LA2_67 = LA(2);
				
				if ((_tokenSet_126.member(LA1_67)) && (_tokenSet_1.member(LA2_67))) {
					{
					switch ( LA(1)) {
					case LITERAL_final:
					{
						AST tmp316_AST = null;
						tmp316_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp316_AST);
						consume();
						break;
					}
					case LITERAL_explicit:
					{
						AST tmp317_AST = null;
						tmp317_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp317_AST);
						consume();
						break;
					}
					case COLON:
					case LCURLY:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_126, tokenNames);if (matchError) {break loop86;}
					}
					}
					}
					{
					switch ( LA(1)) {
					case COLON:
					{
						base_clause();
						if (matchError) {break loop86;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LCURLY:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_127, tokenNames);if (matchError) {break loop86;}
					}
					}
					}
					{
					int LA1_68 = LA(1);
					int LA2_68 = LA(2);
					
					if (((LA1_68==LCURLY) && (_tokenSet_1.member(LA2_68)))&&(checkClassDefinitionDepth(NESTED_CLASSES_LIMIT))) {
						
						saveClass = enclosingClass;
						enclosingClass = id;
						
						action.class_body(LT(1));
						AST tmp318_AST = null;
						tmp318_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp318_AST);
						match(LCURLY);
						if (matchError) {break loop86;}
						beginClassDefinition(ts, id);
						class_members();
						if (matchError) {break loop86;}
						astFactory.addASTChild(currentAST, returnAST);
						endClassDefinition();
						enclosingClass = saveClass;
						action.end_class_body(LT(1));
						action.end_class_declaration(LT(1));
						action.end_simple_declaration(LT(1));
						{
						switch ( LA(1)) {
						case EOF:
						{
							consume();
							reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
							break;
						}
						case RCURLY:
						{
							AST tmp320_AST = null;
							tmp320_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp320_AST);
							consume();
							break;
						}
						default:
						{
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_84, tokenNames);if (matchError) {break loop86;}
						}
						}
						}
					}
					else if ((LA1_68==LCURLY) && (_tokenSet_1.member(LA2_68))) {
						balanceCurlies();
						if (matchError) {break loop86;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_145, tokenNames);if (matchError) {break loop86;}
					}
					
					}
				}
				else if ((_tokenSet_88.member(LA1_67)) && (_tokenSet_1.member(LA2_67))) {
					classForwardDeclaration(ts, ds, id);
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_204, tokenNames);if (matchError) {break loop86;}
				}
				
				}
				break;
			}
			case LCURLY:
			{
				{
				int LA1_69 = LA(1);
				int LA2_69 = LA(2);
				
				if (((LA1_69==LCURLY) && (_tokenSet_205.member(LA2_69)))&&(checkClassDefinitionDepth(NESTED_CLASSES_LIMIT))) {
					action.class_body(LT(1));
					AST tmp321_AST = null;
					tmp321_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp321_AST);
					match(LCURLY);
					if (matchError) {break loop86;}
					saveClass = enclosingClass; enclosingClass = (String ) "__anonymous";
					beginClassDefinition(ts, "anonymous");
					{
					_loop512:
					do {
						if ((_tokenSet_157.member(LA(1)))) {
							member_declaration();
							if (matchError) {break loop86;}
							astFactory.addASTChild(currentAST, returnAST);
						}
						else {
							break _loop512;
						}
						
					} while (true);
					}
					endClassDefinition();
					action.end_class_body(LT(1));
					action.end_class_declaration(LT(1));
					action.end_simple_declaration(LT(1));
					{
					switch ( LA(1)) {
					case EOF:
					{
						consume();
						reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
						break;
					}
					case RCURLY:
					{
						AST tmp323_AST = null;
						tmp323_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp323_AST);
						consume();
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_84, tokenNames);if (matchError) {break loop86;}
					}
					}
					}
					enclosingClass = saveClass;
				}
				else if ((LA1_69==LCURLY) && (_tokenSet_1.member(LA2_69))) {
					balanceCurlies();
					if (matchError) {break loop86;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_145, tokenNames);if (matchError) {break loop86;}
				}
				
				}
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_206, tokenNames);if (matchError) {break loop86;}
			}
			}
			}
			class_specifier_AST = (AST)currentAST.root;
		break;} // loop86
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_88);
			resetMatchError();
	}
	returnAST = class_specifier_AST;
	return ts;
}

	public final void qualified_type() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qualified_type_AST = null;
		String s;
		
		loop87:  while (true) {
			s=scope_override();
			if (matchError) {break loop87;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				s=literal_ident();
				if (matchError) {break loop87;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				type_decltype();
				if (matchError) {break loop87;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_100, tokenNames);if (matchError) {break loop87;}
			}
			}
			}
			{
			int LA1_70 = LA(1);
			int LA2_70 = LA(2);
			
			if ((LA1_70==LESSTHAN) && (_tokenSet_91.member(LA2_70))) {
				AST tmp324_AST = null;
				tmp324_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp324_AST);
				consume();
				template_argument_list();
				if (matchError) {break loop87;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp325_AST = null;
				tmp325_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp325_AST);
				match(GREATERTHAN);
				if (matchError) {break loop87;}
			}
			else if ((_tokenSet_92.member(LA1_70)) && (_tokenSet_1.member(LA2_70))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_92, tokenNames);if (matchError) {break loop87;}
			}
			
			}
			qualified_type_AST = (AST)currentAST.root;
		break;} // loop87
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_92);
			resetMatchError();
	}
	returnAST = qualified_type_AST;
}

	public final /*TypeSpecifier*/int  builtin_cv_type_specifier(
		/*TypeSpecifier*/int old_ts
	) {
		/*TypeSpecifier*/int ts = old_ts;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST builtin_cv_type_specifier_AST = null;
		TypeQualifier tq;StorageClass sc;
		
		loop88:  while (true) {
			{
			int _cnt486=0;
			_loop486:
			do {
				int LA1_71 = LA(1);
				int LA2_71 = LA(2);
				
				if ((_tokenSet_200.member(LA1_71)) && (_tokenSet_92.member(LA2_71))) {
					ts=builtin_type(ts);
					if (matchError) {break loop88;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					if ( _cnt486>=1 ) { break _loop486; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_200, tokenNames);if (matchError) {break loop88;}}
				}
				
				_cnt486++;
			} while (true);
			}
			{
			int LA1_72 = LA(1);
			int LA2_72 = LA(2);
			
			boolean synPredMatched489 = false;
			if (((_tokenSet_77.member(LA1_72)) && (_tokenSet_200.member(LA2_72)))) {
				int _m489 = mark();
				guessing++;
				guess489:  while (true) {
					{
					cv_qualifier_g();
					if (matchError) {break guess489;}
					builtin_type_g(ts);
					if (matchError) {break guess489;}
					}
				synPredMatched489 = true;
				break;} // guess489
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m489);
				guessing--;
			}
			if ( synPredMatched489 ) {
				tq=cv_qualifier();
				if (matchError) {break loop88;}
				astFactory.addASTChild(currentAST, returnAST);
				ts=builtin_cv_type_specifier(ts);
				if (matchError) {break loop88;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_92.member(LA1_72)) && (_tokenSet_1.member(LA2_72))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_92, tokenNames);if (matchError) {break loop88;}
			}
			
			}
			{
			int LA1_73 = LA(1);
			int LA2_73 = LA(2);
			
			boolean synPredMatched492 = false;
			if (((_tokenSet_46.member(LA1_73)) && (_tokenSet_200.member(LA2_73)))) {
				int _m492 = mark();
				guessing++;
				guess492:  while (true) {
					{
					storage_class_specifier_g();
					if (matchError) {break guess492;}
					builtin_type_g(ts);
					if (matchError) {break guess492;}
					}
				synPredMatched492 = true;
				break;} // guess492
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m492);
				guessing--;
			}
			if ( synPredMatched492 ) {
				sc=storage_class_specifier();
				if (matchError) {break loop88;}
				astFactory.addASTChild(currentAST, returnAST);
				ts=builtin_cv_type_specifier(ts);
				if (matchError) {break loop88;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_92.member(LA1_73)) && (_tokenSet_1.member(LA2_73))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_92, tokenNames);if (matchError) {break loop88;}
			}
			
			}
			{
			int LA1_74 = LA(1);
			int LA2_74 = LA(2);
			
			boolean synPredMatched495 = false;
			if (((LA1_74==LITERAL_virtual) && (_tokenSet_200.member(LA2_74)))) {
				int _m495 = mark();
				guessing++;
				guess495:  while (true) {
					{
					match(LITERAL_virtual);
					if (matchError) {break guess495;}
					builtin_type_g(ts);
					if (matchError) {break guess495;}
					}
				synPredMatched495 = true;
				break;} // guess495
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m495);
				guessing--;
			}
			if ( synPredMatched495 ) {
				AST tmp326_AST = null;
				tmp326_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp326_AST);
				consume();
				ts=builtin_cv_type_specifier(ts);
				if (matchError) {break loop88;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_92.member(LA1_74)) && (_tokenSet_1.member(LA2_74))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_92, tokenNames);if (matchError) {break loop88;}
			}
			
			}
			builtin_cv_type_specifier_AST = (AST)currentAST.root;
		break;} // loop88
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_92);
			resetMatchError();
	}
	returnAST = builtin_cv_type_specifier_AST;
	return ts;
}

	public final /*TypeSpecifier*/int  builtin_type(
		/*TypeSpecifier*/int old_ts
	) {
		/*TypeSpecifier*/int ts = old_ts;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST builtin_type_AST = null;
		
		loop89:  while (true) {
			switch ( LA(1)) {
			case LITERAL_char:
			{
				AST tmp327_AST = null;
				tmp327_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp327_AST);
				consume();
				ts |= tsCHAR;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_wchar_t:
			{
				AST tmp328_AST = null;
				tmp328_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp328_AST);
				consume();
				ts |= tsWCHAR_T;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_char16_t:
			{
				AST tmp329_AST = null;
				tmp329_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp329_AST);
				consume();
				ts |= tsOTHER;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_char32_t:
			{
				AST tmp330_AST = null;
				tmp330_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp330_AST);
				consume();
				ts |= tsOTHER;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_bool:
			{
				AST tmp331_AST = null;
				tmp331_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp331_AST);
				consume();
				ts |= tsBOOL;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__Bool:
			{
				AST tmp332_AST = null;
				tmp332_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp332_AST);
				consume();
				ts |= tsBOOL;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_short:
			{
				AST tmp333_AST = null;
				tmp333_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp333_AST);
				consume();
				ts |= tsSHORT;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_int:
			{
				AST tmp334_AST = null;
				tmp334_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp334_AST);
				consume();
				ts |= tsINT;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__int64:
			case LITERAL___int64:
			{
				literal_int64();
				if (matchError) {break loop89;}
				astFactory.addASTChild(currentAST, returnAST);
				ts |= tsLONG;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___w64:
			{
				AST tmp335_AST = null;
				tmp335_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp335_AST);
				consume();
				ts |= tsLONG;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_long:
			{
				AST tmp336_AST = null;
				tmp336_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp336_AST);
				consume();
				ts |= tsLONG;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			{
				literal_signed();
				if (matchError) {break loop89;}
				astFactory.addASTChild(currentAST, returnAST);
				ts |= tsSIGNED;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			{
				literal_unsigned();
				if (matchError) {break loop89;}
				astFactory.addASTChild(currentAST, returnAST);
				ts |= tsUNSIGNED;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_float:
			{
				AST tmp337_AST = null;
				tmp337_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp337_AST);
				consume();
				ts |= tsFLOAT;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_double:
			{
				AST tmp338_AST = null;
				tmp338_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp338_AST);
				consume();
				ts |= tsDOUBLE;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_void:
			{
				AST tmp339_AST = null;
				tmp339_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp339_AST);
				consume();
				ts |= tsVOID;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___complex__:
			case LITERAL__Complex:
			case LITERAL___complex:
			{
				literal_complex();
				if (matchError) {break loop89;}
				astFactory.addASTChild(currentAST, returnAST);
				ts |= tsCOMPLEX;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__Imaginary:
			{
				AST tmp340_AST = null;
				tmp340_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp340_AST);
				consume();
				ts |= tsIMAGINARY;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_bit:
			{
				AST tmp341_AST = null;
				tmp341_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp341_AST);
				consume();
				ts |= tsBOOL;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__BUILT_IN_TYPE__:
			{
				AST tmp342_AST = null;
				tmp342_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp342_AST);
				consume();
				ts |= tsOTHER;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___builtin_va_list:
			{
				AST tmp343_AST = null;
				tmp343_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp343_AST);
				consume();
				ts |= tsOTHER;
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_200, tokenNames);if (matchError) {break loop89;}
			}
			}
		break;} // loop89
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = builtin_type_AST;
	return ts;
}

	protected final void literal_int64() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_int64_AST = null;
		
		loop90:  while (true) {
			switch ( LA(1)) {
			case LITERAL__int64:
			{
				AST tmp344_AST = null;
				tmp344_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp344_AST);
				consume();
				literal_int64_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___int64:
			{
				AST tmp345_AST = null;
				tmp345_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp345_AST);
				consume();
				literal_int64_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_207, tokenNames);if (matchError) {break loop90;}
			}
			}
		break;} // loop90
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = literal_int64_AST;
}

	protected final void literal_signed() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_signed_AST = null;
		
		loop91:  while (true) {
			switch ( LA(1)) {
			case LITERAL_signed:
			{
				AST tmp346_AST = null;
				tmp346_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp346_AST);
				consume();
				literal_signed_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___signed:
			{
				AST tmp347_AST = null;
				tmp347_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp347_AST);
				consume();
				literal_signed_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___signed__:
			{
				AST tmp348_AST = null;
				tmp348_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp348_AST);
				consume();
				literal_signed_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_208, tokenNames);if (matchError) {break loop91;}
			}
			}
		break;} // loop91
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = literal_signed_AST;
}

	protected final void literal_unsigned() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_unsigned_AST = null;
		
		loop92:  while (true) {
			switch ( LA(1)) {
			case LITERAL_unsigned:
			{
				AST tmp349_AST = null;
				tmp349_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp349_AST);
				consume();
				literal_unsigned_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___unsigned__:
			{
				AST tmp350_AST = null;
				tmp350_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp350_AST);
				consume();
				literal_unsigned_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_209, tokenNames);if (matchError) {break loop92;}
			}
			}
		break;} // loop92
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = literal_unsigned_AST;
}

	protected final void literal_complex() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_complex_AST = null;
		
		loop93:  while (true) {
			switch ( LA(1)) {
			case LITERAL__Complex:
			{
				AST tmp351_AST = null;
				tmp351_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp351_AST);
				consume();
				literal_complex_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___complex__:
			{
				AST tmp352_AST = null;
				tmp352_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp352_AST);
				consume();
				literal_complex_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___complex:
			{
				AST tmp353_AST = null;
				tmp353_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp353_AST);
				consume();
				literal_complex_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_210, tokenNames);if (matchError) {break loop93;}
			}
			}
		break;} // loop93
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = literal_complex_AST;
}

	public final void type_decltype() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST type_decltype_AST = null;
		
		loop94:  while (true) {
			literal_decltype();
			if (matchError) {break loop94;}
			astFactory.addASTChild(currentAST, returnAST);
			decltype_expression();
			if (matchError) {break loop94;}
			astFactory.addASTChild(currentAST, returnAST);
			type_decltype_AST = (AST)currentAST.root;
			type_decltype_AST=(AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TYPE_DECLTYPE,"CSM_TYPE_DECLTYPE", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(type_decltype_AST));
			currentAST.root = type_decltype_AST;
			currentAST.child = type_decltype_AST!=null &&type_decltype_AST.getFirstChild()!=null ?
				type_decltype_AST.getFirstChild() : type_decltype_AST;
			currentAST.advanceChildToEnd();
			type_decltype_AST = (AST)currentAST.root;
		break;} // loop94
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((type_decltype_AST == null) && (currentAST.root != null)) {
			type_decltype_AST = (AST)currentAST.root;
			type_decltype_AST=(AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TYPE_DECLTYPE,"CSM_TYPE_DECLTYPE", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(type_decltype_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_92);
			resetMatchError();
	}
	returnAST = type_decltype_AST;
}

	public final String  class_qualified_id() {
		String q = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST class_qualified_id_AST = null;
		
		String so;
		String id;
		StringBuilder qitem = new StringBuilder();
		
		
		loop95:  while (true) {
			so=scope_override();
			if (matchError) {break loop95;}
			astFactory.addASTChild(currentAST, returnAST);
			qitem.append(so);
			{
			switch ( LA(1)) {
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				id=literal_ident();
				if (matchError) {break loop95;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				int LA1_75 = LA(1);
				int LA2_75 = LA(2);
				
				if ((LA1_75==LESSTHAN) && (_tokenSet_91.member(LA2_75))) {
					AST tmp354_AST = null;
					tmp354_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp354_AST);
					consume();
					template_argument_list();
					if (matchError) {break loop95;}
					astFactory.addASTChild(currentAST, returnAST);
					AST tmp355_AST = null;
					tmp355_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp355_AST);
					match(GREATERTHAN);
					if (matchError) {break loop95;}
				}
				else if ((_tokenSet_204.member(LA1_75)) && (_tokenSet_1.member(LA2_75))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_204, tokenNames);if (matchError) {break loop95;}
				}
				
				}
				qitem.append(id);
				break;
			}
			case LITERAL_OPERATOR:
			{
				AST tmp356_AST = null;
				tmp356_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp356_AST);
				consume();
				optor();
				if (matchError) {break loop95;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				int LA1_76 = LA(1);
				int LA2_76 = LA(2);
				
				if ((LA1_76==LESSTHAN) && (_tokenSet_91.member(LA2_76))) {
					AST tmp357_AST = null;
					tmp357_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp357_AST);
					consume();
					template_argument_list();
					if (matchError) {break loop95;}
					astFactory.addASTChild(currentAST, returnAST);
					AST tmp358_AST = null;
					tmp358_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp358_AST);
					match(GREATERTHAN);
					if (matchError) {break loop95;}
				}
				else if ((_tokenSet_204.member(LA1_76)) && (_tokenSet_1.member(LA2_76))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_204, tokenNames);if (matchError) {break loop95;}
				}
				
				}
				qitem.append("operator"); qitem.append("NYI");
				break;
			}
			case LITERAL_this:
			{
				AST tmp359_AST = null;
				tmp359_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp359_AST);
				consume();
				break;
			}
			case LITERAL_true:
			case LITERAL_false:
			{
				{
				switch ( LA(1)) {
				case LITERAL_true:
				{
					AST tmp360_AST = null;
					tmp360_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp360_AST);
					consume();
					break;
				}
				case LITERAL_false:
				{
					AST tmp361_AST = null;
					tmp361_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp361_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_93, tokenNames);if (matchError) {break loop95;}
				}
				}
				}
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_95, tokenNames);if (matchError) {break loop95;}
			}
			}
			}
			class_qualified_id_AST = (AST)currentAST.root;
			q = qitem.toString(); class_qualified_id_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_QUALIFIED_ID,q, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(class_qualified_id_AST));
			currentAST.root = class_qualified_id_AST;
			currentAST.child = class_qualified_id_AST!=null &&class_qualified_id_AST.getFirstChild()!=null ?
				class_qualified_id_AST.getFirstChild() : class_qualified_id_AST;
			currentAST.advanceChildToEnd();
			class_qualified_id_AST = (AST)currentAST.root;
		break;} // loop95
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((class_qualified_id_AST == null) && (currentAST.root != null)) {
			class_qualified_id_AST = (AST)currentAST.root;
			q = qitem.toString(); class_qualified_id_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_QUALIFIED_ID,q, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(class_qualified_id_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_204);
			resetMatchError();
	}
	returnAST = class_qualified_id_AST;
	return q;
}

	public final void base_clause() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST base_clause_AST = null;
		
		loop96:  while (true) {
			AST tmp362_AST = null;
			tmp362_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp362_AST);
			match(COLON);
			if (matchError) {break loop96;}
			base_specifier();
			if (matchError) {break loop96;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			{
				AST tmp363_AST = null;
				tmp363_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp363_AST);
				consume();
				break;
			}
			case COMMA:
			case SEMICOLON:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_211, tokenNames);if (matchError) {break loop96;}
			}
			}
			}
			{
			_loop640:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp364_AST = null;
					tmp364_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp364_AST);
					consume();
					base_specifier();
					if (matchError) {break loop96;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					switch ( LA(1)) {
					case ELLIPSIS:
					{
						AST tmp365_AST = null;
						tmp365_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp365_AST);
						consume();
						break;
					}
					case COMMA:
					case SEMICOLON:
					case LCURLY:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_211, tokenNames);if (matchError) {break loop96;}
					}
					}
					}
				}
				else {
					break _loop640;
				}
				
			} while (true);
			}
			base_clause_AST = (AST)currentAST.root;
		break;} // loop96
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_212);
			resetMatchError();
	}
	returnAST = base_clause_AST;
}

	public final void class_members() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST class_members_AST = null;
		
		loop97:  while (true) {
			{
			_loop518:
			do {
				// nongreedy exit test
				if ((LA(1)==EOF||LA(1)==RCURLY) && (_tokenSet_88.member(LA(2)))) break _loop518;
				int LA1_77 = LA(1);
				int LA2_77 = LA(2);
				
				if ((_tokenSet_157.member(LA1_77)) && (_tokenSet_1.member(LA2_77))) {
					member_declaration();
					if (matchError) {break loop97;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA1_77==LCURLY)) {
					balanceCurlies();
					if (matchError) {break loop97;}
					astFactory.addASTChild(currentAST, returnAST);
					reportError(new NoViableAltException(LT(0), getFilename()));
				}
				else if ((_tokenSet_213.member(LA1_77)) && (_tokenSet_1.member(LA2_77))) {
					{
					{
					match(_tokenSet_213);
					if (matchError) {break loop97;}
					}
					}
					reportError(new NoViableAltException(LT(0), getFilename()));
				}
				else {
					break _loop518;
				}
				
			} while (true);
			}
			class_members_AST = (AST)currentAST.root;
		break;} // loop97
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_84);
			resetMatchError();
	}
	returnAST = class_members_AST;
}

	protected final void balanceCurlies() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST balanceCurlies_AST = null;
		
		loop98:  while (true) {
			AST tmp367_AST = null;
			tmp367_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp367_AST);
			match(LCURLY);
			if (matchError) {break loop98;}
			{
			if (!(balanceBraces(CPPTokenTypes.LCURLY, CPPTokenTypes.RCURLY)))
			{matchError=true;
			matchException = new SemanticException("balanceBraces(CPPTokenTypes.LCURLY, CPPTokenTypes.RCURLY)");
			if (matchError) {break loop98;}}
			}
			{
			int LA1_78 = LA(1);
			int LA2_78 = LA(2);
			
			if (((LA1_78 >= ELLIPSIS && LA1_78 <= CSM_END)) && (_tokenSet_1.member(LA2_78))) {
				AST tmp368_AST = null;
				tmp368_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp368_AST);
				matchNot(EOF);
				if (matchError) {break loop98;}
			}
			else if ((_tokenSet_1.member(LA1_78)) && (_tokenSet_1.member(LA2_78))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_1, tokenNames);if (matchError) {break loop98;}
			}
			
			}
			balanceCurlies_AST = (AST)currentAST.root;
		break;} // loop98
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = balanceCurlies_AST;
}

	public final void fix_fake_class_members() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST fix_fake_class_members_AST = null;
		
		loop99:  while (true) {
			class_members();
			if (matchError) {break loop99;}
			astFactory.addASTChild(currentAST, returnAST);
			fix_fake_class_members_AST = (AST)currentAST.root;
			fix_fake_class_members_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CLASS_DECLARATION,"CSM_CLASS_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(fix_fake_class_members_AST));
			currentAST.root = fix_fake_class_members_AST;
			currentAST.child = fix_fake_class_members_AST!=null &&fix_fake_class_members_AST.getFirstChild()!=null ?
				fix_fake_class_members_AST.getFirstChild() : fix_fake_class_members_AST;
			currentAST.advanceChildToEnd();
			fix_fake_class_members_AST = (AST)currentAST.root;
		break;} // loop99
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((fix_fake_class_members_AST == null) && (currentAST.root != null)) {
			fix_fake_class_members_AST = (AST)currentAST.root;
			fix_fake_class_members_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CLASS_DECLARATION,"CSM_CLASS_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(fix_fake_class_members_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = fix_fake_class_members_AST;
}

	public final void fix_fake_enum_members() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST fix_fake_enum_members_AST = null;
		
		loop100:  while (true) {
			enumerator_list();
			if (matchError) {break loop100;}
			astFactory.addASTChild(currentAST, returnAST);
			fix_fake_enum_members_AST = (AST)currentAST.root;
			fix_fake_enum_members_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ENUM_DECLARATION,"CSM_ENUM_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(fix_fake_enum_members_AST));
			currentAST.root = fix_fake_enum_members_AST;
			currentAST.child = fix_fake_enum_members_AST!=null &&fix_fake_enum_members_AST.getFirstChild()!=null ?
				fix_fake_enum_members_AST.getFirstChild() : fix_fake_enum_members_AST;
			currentAST.advanceChildToEnd();
			fix_fake_enum_members_AST = (AST)currentAST.root;
		break;} // loop100
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((fix_fake_enum_members_AST == null) && (currentAST.root != null)) {
			fix_fake_enum_members_AST = (AST)currentAST.root;
			fix_fake_enum_members_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ENUM_DECLARATION,"CSM_ENUM_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(fix_fake_enum_members_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = fix_fake_enum_members_AST;
}

	public final void enumerator_list() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST enumerator_list_AST = null;
		
		loop101:  while (true) {
			switch ( LA(1)) {
			case COMMA:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				{
				switch ( LA(1)) {
				case COMMA:
				{
					consume();
					break;
				}
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_214, tokenNames);if (matchError) {break loop101;}
				}
				}
				}
				enumerator();
				if (matchError) {break loop101;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				_loop548:
				do {
					int LA1_79 = LA(1);
					int LA2_79 = LA(2);
					
					if ((LA1_79==COMMA) && (_tokenSet_0.member(LA2_79))) {
						{
						match(COMMA);
						if (matchError) {break loop101;}
						}
						enumerator();
						if (matchError) {break loop101;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						break _loop548;
					}
					
				} while (true);
				}
				{
				switch ( LA(1)) {
				case COMMA:
				{
					consume();
					break;
				}
				case EOF:
				case RCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_216, tokenNames);if (matchError) {break loop101;}
				}
				}
				}
				enumerator_list_AST = (AST)currentAST.root;
				enumerator_list_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ENUMERATOR_LIST,"CSM_ENUMERATOR_LIST", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(enumerator_list_AST));
				currentAST.root = enumerator_list_AST;
				currentAST.child = enumerator_list_AST!=null &&enumerator_list_AST.getFirstChild()!=null ?
					enumerator_list_AST.getFirstChild() : enumerator_list_AST;
				currentAST.advanceChildToEnd();
				enumerator_list_AST = (AST)currentAST.root;
				break;
			}
			case EOF:
			case RCURLY:
			{
				enumerator_list_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_217, tokenNames);if (matchError) {break loop101;}
			}
			}
		break;} // loop101
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_84);
			resetMatchError();
	}
	returnAST = enumerator_list_AST;
}

	public final void strongly_typed_enum_type_specifier() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST strongly_typed_enum_type_specifier_AST = null;
		int ts = 0;
		
		loop102:  while (true) {
			AST tmp372_AST = null;
			tmp372_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp372_AST);
			match(COLON);
			if (matchError) {break loop102;}
			{
			int LA1_80 = LA(1);
			int LA2_80 = LA(2);
			
			if ((_tokenSet_85.member(LA1_80)) && (_tokenSet_218.member(LA2_80))) {
				cv_qualifier_seq();
				if (matchError) {break loop102;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_219.member(LA1_80)) && (_tokenSet_220.member(LA2_80))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_85, tokenNames);if (matchError) {break loop102;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LITERAL_typename:
			{
				AST tmp373_AST = null;
				tmp373_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp373_AST);
				consume();
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___complex__:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_219, tokenNames);if (matchError) {break loop102;}
			}
			}
			}
			ts=simple_type_specifier(false);
			if (matchError) {break loop102;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			int LA1_81 = LA(1);
			int LA2_81 = LA(2);
			
			if ((_tokenSet_86.member(LA1_81)) && (_tokenSet_1.member(LA2_81))) {
				cv_qualifier_seq();
				if (matchError) {break loop102;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_86.member(LA1_81)) && (_tokenSet_1.member(LA2_81))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_86, tokenNames);if (matchError) {break loop102;}
			}
			
			}
			strongly_typed_enum_type_specifier_AST = (AST)currentAST.root;
		break;} // loop102
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_86);
			resetMatchError();
	}
	returnAST = strongly_typed_enum_type_specifier_AST;
}

	public final void cv_qualifier_seq() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cv_qualifier_seq_AST = null;
		TypeQualifier tq;
		
		loop103:  while (true) {
			{
			_loop683:
			do {
				int LA1_82 = LA(1);
				int LA2_82 = LA(2);
				
				if ((_tokenSet_77.member(LA1_82)) && (_tokenSet_78.member(LA2_82))) {
					tq=cv_qualifier();
					if (matchError) {break loop103;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop683;
				}
				
			} while (true);
			}
			cv_qualifier_seq_AST = (AST)currentAST.root;
		break;} // loop103
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_78);
			resetMatchError();
	}
	returnAST = cv_qualifier_seq_AST;
}

	public final String  enum_qualified_id() {
		String qid = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST enum_qualified_id_AST = null;
		
		loop104:  while (true) {
			int LA1_83 = LA(1);
			int LA2_83 = LA(2);
			
			boolean synPredMatched540 = false;
			if (((_tokenSet_90.member(LA1_83)) && (_tokenSet_221.member(LA2_83)))) {
				int _m540 = mark();
				guessing++;
				guess540:  while (true) {
					{
					match(SCOPE);
					if (matchError) {break guess540;}
					literal_ident_g();
					if (matchError) {break guess540;}
					}
				synPredMatched540 = true;
				break;} // guess540
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m540);
				guessing--;
			}
			if ( synPredMatched540 ) {
				qid=qualified_id();
				if (matchError) {break loop104;}
				astFactory.addASTChild(currentAST, returnAST);
				enum_qualified_id_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched543 = false;
				if (((_tokenSet_90.member(LA1_83)) && (_tokenSet_221.member(LA2_83)))) {
					int _m543 = mark();
					guessing++;
					guess543:  while (true) {
						{
						literal_ident_g();
						if (matchError) {break guess543;}
						{
						switch ( LA(1)) {
						case SCOPE:
						{
							consume();
							break;
						}
						case LESSTHAN:
						{
							consume();
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess543;}
						}
						}
						}
						}
					synPredMatched543 = true;
					break;} // guess543
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m543);
					guessing--;
				}
				if ( synPredMatched543 ) {
					qid=qualified_id();
					if (matchError) {break loop104;}
					astFactory.addASTChild(currentAST, returnAST);
					enum_qualified_id_AST = (AST)currentAST.root;
				}
				else if ((_tokenSet_0.member(LA1_83)) && (_tokenSet_86.member(LA2_83))) {
					qid=literal_ident();
					if (matchError) {break loop104;}
					astFactory.addASTChild(currentAST, returnAST);
					enum_qualified_id_AST = (AST)currentAST.root;
					enum_qualified_id_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_QUALIFIED_ID,qid, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(enum_qualified_id_AST));
					currentAST.root = enum_qualified_id_AST;
					currentAST.child = enum_qualified_id_AST!=null &&enum_qualified_id_AST.getFirstChild()!=null ?
						enum_qualified_id_AST.getFirstChild() : enum_qualified_id_AST;
					currentAST.advanceChildToEnd();
					enum_qualified_id_AST = (AST)currentAST.root;
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_90, tokenNames);if (matchError) {break loop104;}
				}
				}
			break;} // loop104
			if (matchError) {
				// when recover we'd like to perform any "build AST" actions
				if ((enum_qualified_id_AST == null) && (currentAST.root != null)) {
				enum_qualified_id_AST = (AST)currentAST.root;
				enum_qualified_id_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_QUALIFIED_ID,qid, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(enum_qualified_id_AST));
				}
				reportError(matchException);
				recover(matchException,_tokenSet_86);
				resetMatchError();
		}
		returnAST = enum_qualified_id_AST;
		return qid;
	}
	
	public final void enumerator() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST enumerator_AST = null;
		String id = "";
		
		loop105:  while (true) {
			id=literal_ident();
			if (matchError) {break loop105;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case ASSIGNEQUAL:
			{
				AST tmp374_AST = null;
				tmp374_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp374_AST);
				consume();
				constant_expression();
				if (matchError) {break loop105;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case COMMA:
			case RCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_222, tokenNames);if (matchError) {break loop105;}
			}
			}
			}
			enumerator_AST = (AST)currentAST.root;
		break;} // loop105
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_216);
			resetMatchError();
	}
	returnAST = enumerator_AST;
}

	public final void constant_expression() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST constant_expression_AST = null;
		
		loop106:  while (true) {
			lazy_expression(false, false, 0);
			if (matchError) {break loop106;}
			astFactory.addASTChild(currentAST, returnAST);
			constant_expression_AST = (AST)currentAST.root;
			constant_expression_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_EXPRESSION,"CSM_EXPRESSION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(constant_expression_AST));
			currentAST.root = constant_expression_AST;
			currentAST.child = constant_expression_AST!=null &&constant_expression_AST.getFirstChild()!=null ?
				constant_expression_AST.getFirstChild() : constant_expression_AST;
			currentAST.advanceChildToEnd();
			constant_expression_AST = (AST)currentAST.root;
		break;} // loop106
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((constant_expression_AST == null) && (currentAST.root != null)) {
			constant_expression_AST = (AST)currentAST.root;
			constant_expression_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_EXPRESSION,"CSM_EXPRESSION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(constant_expression_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_223);
			resetMatchError();
	}
	returnAST = constant_expression_AST;
}

	protected final void literal_cdecl() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_cdecl_AST = null;
		
		loop107:  while (true) {
			switch ( LA(1)) {
			case LITERAL__cdecl:
			{
				AST tmp375_AST = null;
				tmp375_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp375_AST);
				consume();
				literal_cdecl_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___cdecl:
			{
				AST tmp376_AST = null;
				tmp376_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp376_AST);
				consume();
				literal_cdecl_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_224, tokenNames);if (matchError) {break loop107;}
			}
			}
		break;} // loop107
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_186);
			resetMatchError();
	}
	returnAST = literal_cdecl_AST;
}

	public final void optor() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST optor_AST = null;
		
		loop108:  while (true) {
			switch ( LA(1)) {
			case LITERAL_new:
			{
				AST tmp377_AST = null;
				tmp377_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp377_AST);
				consume();
				{
				int LA1_84 = LA(1);
				int LA2_84 = LA(2);
				
				if ((LA1_84==LSQUARE) && (LA2_84==RSQUARE)) {
					AST tmp378_AST = null;
					tmp378_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp378_AST);
					consume();
					AST tmp379_AST = null;
					tmp379_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp379_AST);
					consume();
				}
				else if ((_tokenSet_92.member(LA1_84)) && (_tokenSet_1.member(LA2_84))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_92, tokenNames);if (matchError) {break loop108;}
				}
				
				}
				optor_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_delete:
			{
				AST tmp380_AST = null;
				tmp380_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp380_AST);
				consume();
				{
				int LA1_85 = LA(1);
				int LA2_85 = LA(2);
				
				if ((LA1_85==LSQUARE) && (LA2_85==RSQUARE)) {
					AST tmp381_AST = null;
					tmp381_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp381_AST);
					consume();
					AST tmp382_AST = null;
					tmp382_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp382_AST);
					consume();
				}
				else if ((_tokenSet_92.member(LA1_85)) && (_tokenSet_1.member(LA2_85))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_92, tokenNames);if (matchError) {break loop108;}
				}
				
				}
				optor_AST = (AST)currentAST.root;
				break;
			}
			case LPAREN:
			{
				AST tmp383_AST = null;
				tmp383_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp383_AST);
				consume();
				AST tmp384_AST = null;
				tmp384_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp384_AST);
				match(RPAREN);
				if (matchError) {break loop108;}
				optor_AST = (AST)currentAST.root;
				break;
			}
			case LSQUARE:
			{
				AST tmp385_AST = null;
				tmp385_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp385_AST);
				consume();
				AST tmp386_AST = null;
				tmp386_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp386_AST);
				match(RSQUARE);
				if (matchError) {break loop108;}
				optor_AST = (AST)currentAST.root;
				break;
			}
			case ASSIGNEQUAL:
			case COMMA:
			case POINTERTO:
			case EQUAL:
			case NOTEQUAL:
			case LESSTHANOREQUALTO:
			case LESSTHAN:
			case GREATERTHANOREQUALTO:
			case GREATERTHAN:
			case DIVIDE:
			case DIVIDEEQUAL:
			case PLUS:
			case PLUSEQUAL:
			case PLUSPLUS:
			case MINUS:
			case MINUSEQUAL:
			case MINUSMINUS:
			case STAR:
			case TIMESEQUAL:
			case MOD:
			case MODEQUAL:
			case SHIFTRIGHT:
			case SHIFTRIGHTEQUAL:
			case SHIFTLEFT:
			case SHIFTLEFTEQUAL:
			case AND:
			case NOT:
			case OR:
			case AMPERSAND:
			case BITWISEANDEQUAL:
			case TILDE:
			case BITWISEOR:
			case BITWISEOREQUAL:
			case BITWISEXOR:
			case BITWISEXOREQUAL:
			case POINTERTOMBR:
			{
				optor_simple_tokclass();
				if (matchError) {break loop108;}
				astFactory.addASTChild(currentAST, returnAST);
				optor_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_94, tokenNames);if (matchError) {break loop108;}
			}
			}
		break;} // loop108
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_92);
			resetMatchError();
	}
	returnAST = optor_AST;
}

	public final String  unqualified_id() {
		String q = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unqualified_id_AST = null;
		
			    String so, id;
			    StringBuilder qitem = new StringBuilder();
			
		
		loop109:  while (true) {
			so=scope_override();
			if (matchError) {break loop109;}
			astFactory.addASTChild(currentAST, returnAST);
			qitem.append(so);
			{
			switch ( LA(1)) {
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				id=literal_ident();
				if (matchError) {break loop109;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case LESSTHAN:
				{
					AST tmp387_AST = null;
					tmp387_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp387_AST);
					consume();
					template_argument_list();
					if (matchError) {break loop109;}
					astFactory.addASTChild(currentAST, returnAST);
					AST tmp388_AST = null;
					tmp388_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp388_AST);
					match(GREATERTHAN);
					if (matchError) {break loop109;}
					break;
				}
				case SEMICOLON:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_115, tokenNames);if (matchError) {break loop109;}
				}
				}
				}
				qitem.append(id);
				break;
			}
			case LITERAL_OPERATOR:
			{
				AST tmp389_AST = null;
				tmp389_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp389_AST);
				consume();
				{
				int LA1_86 = LA(1);
				int LA2_86 = LA(2);
				
				boolean synPredMatched564 = false;
				if (((_tokenSet_94.member(LA1_86)) && (_tokenSet_225.member(LA2_86)))) {
					int _m564 = mark();
					guessing++;
					guess564:  while (true) {
						{
						optor_g();
						if (matchError) {break guess564;}
						}
					synPredMatched564 = true;
					break;} // guess564
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m564);
					guessing--;
				}
				if ( synPredMatched564 ) {
					optor();
					if (matchError) {break loop109;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					switch ( LA(1)) {
					case LESSTHAN:
					{
						AST tmp390_AST = null;
						tmp390_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp390_AST);
						consume();
						template_argument_list();
						if (matchError) {break loop109;}
						astFactory.addASTChild(currentAST, returnAST);
						AST tmp391_AST = null;
						tmp391_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp391_AST);
						match(GREATERTHAN);
						if (matchError) {break loop109;}
						break;
					}
					case SEMICOLON:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_115, tokenNames);if (matchError) {break loop109;}
					}
					}
					}
					qitem.append("operator"); qitem.append("NYI");
				}
				else if ((LA1_86==STRING_LITERAL)) {
					AST tmp392_AST = null;
					tmp392_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp392_AST);
					consume();
					id=literal_ident();
					if (matchError) {break loop109;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					switch ( LA(1)) {
					case LESSTHAN:
					{
						AST tmp393_AST = null;
						tmp393_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp393_AST);
						consume();
						template_argument_list();
						if (matchError) {break loop109;}
						astFactory.addASTChild(currentAST, returnAST);
						AST tmp394_AST = null;
						tmp394_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp394_AST);
						match(GREATERTHAN);
						if (matchError) {break loop109;}
						break;
					}
					case SEMICOLON:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_115, tokenNames);if (matchError) {break loop109;}
					}
					}
					}
					qitem.append("operator"); qitem.append("NYI");
				}
				else if ((_tokenSet_22.member(LA1_86)) && (_tokenSet_226.member(LA2_86))) {
					declaration_specifiers(false, false);
					if (matchError) {break loop109;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					switch ( LA(1)) {
					case STAR:
					case AND:
					case AMPERSAND:
					case SCOPE:
					case IDENT:
					case LITERAL__stdcall:
					case LITERAL___stdcall:
					case LITERAL__cdecl:
					case LITERAL___cdecl:
					case LITERAL__near:
					case LITERAL___near:
					case LITERAL__far:
					case LITERAL___far:
					case LITERAL___interrupt:
					case LITERAL_pascal:
					case LITERAL__pascal:
					case LITERAL___pascal:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_decltype:
					case LITERAL___decltype:
					case LITERAL___clrcall:
					{
						ptr_operator();
						if (matchError) {break loop109;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case SEMICOLON:
					case LESSTHAN:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_227, tokenNames);if (matchError) {break loop109;}
					}
					}
					}
					{
					switch ( LA(1)) {
					case LESSTHAN:
					{
						AST tmp395_AST = null;
						tmp395_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp395_AST);
						consume();
						template_parameter_list();
						if (matchError) {break loop109;}
						astFactory.addASTChild(currentAST, returnAST);
						AST tmp396_AST = null;
						tmp396_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp396_AST);
						match(GREATERTHAN);
						if (matchError) {break loop109;}
						break;
					}
					case SEMICOLON:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_115, tokenNames);if (matchError) {break loop109;}
					}
					}
					}
					qitem.append("operator"); qitem.append("NYI");
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_228, tokenNames);if (matchError) {break loop109;}
				}
				
				}
				break;
			}
			case LITERAL_this:
			{
				AST tmp397_AST = null;
				tmp397_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp397_AST);
				consume();
				break;
			}
			case LITERAL_true:
			case LITERAL_false:
			{
				{
				switch ( LA(1)) {
				case LITERAL_true:
				{
					AST tmp398_AST = null;
					tmp398_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp398_AST);
					consume();
					break;
				}
				case LITERAL_false:
				{
					AST tmp399_AST = null;
					tmp399_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp399_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_93, tokenNames);if (matchError) {break loop109;}
				}
				}
				}
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_95, tokenNames);if (matchError) {break loop109;}
			}
			}
			}
			unqualified_id_AST = (AST)currentAST.root;
			q = qitem.toString(); unqualified_id_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_QUALIFIED_ID,q, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(unqualified_id_AST));
			currentAST.root = unqualified_id_AST;
			currentAST.child = unqualified_id_AST!=null &&unqualified_id_AST.getFirstChild()!=null ?
				unqualified_id_AST.getFirstChild() : unqualified_id_AST;
			currentAST.advanceChildToEnd();
			unqualified_id_AST = (AST)currentAST.root;
		break;} // loop109
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((unqualified_id_AST == null) && (currentAST.root != null)) {
			unqualified_id_AST = (AST)currentAST.root;
			q = qitem.toString(); unqualified_id_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_QUALIFIED_ID,q, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(unqualified_id_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_229);
			resetMatchError();
	}
	returnAST = unqualified_id_AST;
	return q;
}

	public final void template_parameter_list() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_parameter_list_AST = null;
		
		loop110:  while (true) {
			template_parameter();
			if (matchError) {break loop110;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			_loop930:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp400_AST = null;
					tmp400_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp400_AST);
					consume();
					template_parameter();
					if (matchError) {break loop110;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop930;
				}
				
			} while (true);
			}
			template_parameter_list_AST = (AST)currentAST.root;
		break;} // loop110
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_121);
			resetMatchError();
	}
	returnAST = template_parameter_list_AST;
}

	public final void typeID() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST typeID_AST = null;
		String s;
		
		loop111:  while (true) {
			if (!(isTypeName((LT(1).getText()))))
			{matchError=true;
			matchException = new SemanticException("isTypeName((LT(1).getText()))");
			if (matchError) {break loop111;}}
			s=literal_ident();
			if (matchError) {break loop111;}
			astFactory.addASTChild(currentAST, returnAST);
			typeID_AST = (AST)currentAST.root;
		break;} // loop111
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = typeID_AST;
}

	public final void init_declarator(
		int kind
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST init_declarator_AST = null;
		
		loop112:  while (true) {
			declarator(kind, 0);
			if (matchError) {break loop112;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case ASSIGNEQUAL:
			{
				AST tmp401_AST = null;
				tmp401_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp401_AST);
				consume();
				initializer();
				if (matchError) {break loop112;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LPAREN:
			{
				AST tmp402_AST = null;
				tmp402_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp402_AST);
				consume();
				cpp11_expression_list();
				if (matchError) {break loop112;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp403_AST = null;
				tmp403_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp403_AST);
				match(RPAREN);
				if (matchError) {break loop112;}
				break;
			}
			case LCURLY:
			{
				array_initializer();
				if (matchError) {break loop112;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case COLON:
			case COMMA:
			case SEMICOLON:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_230, tokenNames);if (matchError) {break loop112;}
			}
			}
			}
			init_declarator_AST = (AST)currentAST.root;
		break;} // loop112
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_231);
			resetMatchError();
	}
	returnAST = init_declarator_AST;
}

	public final void cast_array_initializer_head() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cast_array_initializer_head_AST = null;
		
		loop113:  while (true) {
			{
			switch ( LA(1)) {
			case AMPERSAND:
			{
				AST tmp404_AST = null;
				tmp404_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp404_AST);
				consume();
				break;
			}
			case LPAREN:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_232, tokenNames);if (matchError) {break loop113;}
			}
			}
			}
			{
			_loop611:
			do {
				if ((LA(1)==LPAREN)) {
					balanceParensInExpression();
					if (matchError) {break loop113;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop611;
				}
				
			} while (true);
			}
			AST tmp405_AST = null;
			tmp405_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp405_AST);
			match(LCURLY);
			if (matchError) {break loop113;}
			cast_array_initializer_head_AST = (AST)currentAST.root;
		break;} // loop113
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = cast_array_initializer_head_AST;
}

	public final void initializer() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST initializer_AST = null;
		String s;
		
		loop114:  while (true) {
			int LA1_87 = LA(1);
			int LA2_87 = LA(2);
			
			boolean synPredMatched585 = false;
			if (((_tokenSet_0.member(LA1_87)) && (LA2_87==COLON))) {
				int _m585 = mark();
				guessing++;
				guess585:  while (true) {
					{
					literal_ident_g();
					if (matchError) {break guess585;}
					match(COLON);
					if (matchError) {break guess585;}
					}
				synPredMatched585 = true;
				break;} // guess585
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m585);
				guessing--;
			}
			if ( synPredMatched585 ) {
				s=literal_ident();
				if (matchError) {break loop114;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp406_AST = null;
				tmp406_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp406_AST);
				match(COLON);
				if (matchError) {break loop114;}
				{
				int LA1_88 = LA(1);
				int LA2_88 = LA(2);
				
				if ((_tokenSet_233.member(LA1_88)) && (_tokenSet_1.member(LA2_88))) {
					initializer();
					if (matchError) {break loop114;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((_tokenSet_234.member(LA1_88)) && (_tokenSet_1.member(LA2_88))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_235, tokenNames);if (matchError) {break loop114;}
				}
				
				}
				initializer_AST = (AST)currentAST.root;
			}
			else if ((LA1_87==LCURLY)) {
				array_initializer();
				if (matchError) {break loop114;}
				astFactory.addASTChild(currentAST, returnAST);
				initializer_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_169.member(LA1_87)) && (_tokenSet_1.member(LA2_87))) {
				{
				int LA1_89 = LA(1);
				int LA2_89 = LA(2);
				
				boolean synPredMatched590 = false;
				if (((_tokenSet_236.member(LA1_89)) && (_tokenSet_190.member(LA2_89)))) {
					int _m590 = mark();
					guessing++;
					guess590:  while (true) {
						{
						{
						switch ( LA(1)) {
						case LITERAL___extension__:
						{
							consume();
							break;
						}
						case LPAREN:
						case LCURLY:
						case AMPERSAND:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess590;}
						}
						}
						}
						cast_array_initializer_head_g();
						if (matchError) {break guess590;}
						}
					synPredMatched590 = true;
					break;} // guess590
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m590);
					guessing--;
				}
				if ( synPredMatched590 ) {
					{
					switch ( LA(1)) {
					case LITERAL___extension__:
					{
						AST tmp407_AST = null;
						tmp407_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp407_AST);
						consume();
						break;
					}
					case LPAREN:
					case AMPERSAND:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_236, tokenNames);if (matchError) {break loop114;}
					}
					}
					}
					cast_array_initializer();
					if (matchError) {break loop114;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					int LA1_90 = LA(1);
					int LA2_90 = LA(2);
					
					if ((_tokenSet_169.member(LA1_90)) && (_tokenSet_1.member(LA2_90))) {
						lazy_expression(false, false, 0);
						if (matchError) {break loop114;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((_tokenSet_237.member(LA1_90)) && (_tokenSet_1.member(LA2_90))) {
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_238, tokenNames);if (matchError) {break loop114;}
					}
					
					}
				}
				else if ((_tokenSet_169.member(LA1_89)) && (_tokenSet_1.member(LA2_89))) {
					lazy_expression(false, false, 0);
					if (matchError) {break loop114;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_169, tokenNames);if (matchError) {break loop114;}
				}
				
				}
				{
				switch ( LA(1)) {
				case ASSIGNEQUAL:
				case DIVIDEEQUAL:
				case PLUSEQUAL:
				case MINUSEQUAL:
				case TIMESEQUAL:
				case MODEQUAL:
				case SHIFTRIGHTEQUAL:
				case SHIFTLEFTEQUAL:
				case BITWISEANDEQUAL:
				case BITWISEOREQUAL:
				case BITWISEXOREQUAL:
				{
					{
					switch ( LA(1)) {
					case ASSIGNEQUAL:
					{
						AST tmp408_AST = null;
						tmp408_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp408_AST);
						consume();
						break;
					}
					case TIMESEQUAL:
					{
						AST tmp409_AST = null;
						tmp409_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp409_AST);
						consume();
						break;
					}
					case DIVIDEEQUAL:
					{
						AST tmp410_AST = null;
						tmp410_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp410_AST);
						consume();
						break;
					}
					case MINUSEQUAL:
					{
						AST tmp411_AST = null;
						tmp411_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp411_AST);
						consume();
						break;
					}
					case PLUSEQUAL:
					{
						AST tmp412_AST = null;
						tmp412_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp412_AST);
						consume();
						break;
					}
					case MODEQUAL:
					{
						AST tmp413_AST = null;
						tmp413_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp413_AST);
						consume();
						break;
					}
					case SHIFTLEFTEQUAL:
					{
						AST tmp414_AST = null;
						tmp414_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp414_AST);
						consume();
						break;
					}
					case SHIFTRIGHTEQUAL:
					{
						AST tmp415_AST = null;
						tmp415_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp415_AST);
						consume();
						break;
					}
					case BITWISEANDEQUAL:
					{
						AST tmp416_AST = null;
						tmp416_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp416_AST);
						consume();
						break;
					}
					case BITWISEXOREQUAL:
					{
						AST tmp417_AST = null;
						tmp417_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp417_AST);
						consume();
						break;
					}
					case BITWISEOREQUAL:
					{
						AST tmp418_AST = null;
						tmp418_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp418_AST);
						consume();
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_239, tokenNames);if (matchError) {break loop114;}
					}
					}
					}
					initializer();
					if (matchError) {break loop114;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case EOF:
				case ELLIPSIS:
				case COLON:
				case COMMA:
				case SEMICOLON:
				case RCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_237, tokenNames);if (matchError) {break loop114;}
				}
				}
				}
				initializer_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_233, tokenNames);if (matchError) {break loop114;}
			}
			
		break;} // loop114
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_234);
			resetMatchError();
	}
	returnAST = initializer_AST;
}

	public final void cpp11_expression_list() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cpp11_expression_list_AST = null;
		
		loop115:  while (true) {
			cpp11_assignment_expression();
			if (matchError) {break loop115;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			_loop1169:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp419_AST = null;
					tmp419_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp419_AST);
					consume();
					cpp11_assignment_expression();
					if (matchError) {break loop115;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop1169;
				}
				
			} while (true);
			}
			cpp11_expression_list_AST = (AST)currentAST.root;
		break;} // loop115
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_192);
			resetMatchError();
	}
	returnAST = cpp11_expression_list_AST;
}

	public final void array_initializer() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST array_initializer_AST = null;
		
		loop116:  while (true) {
			int LA1_91 = LA(1);
			int LA2_91 = LA(2);
			
			if ((LA1_91==LCURLY) && (LA2_91==RCURLY)) {
				AST tmp420_AST = null;
				tmp420_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp420_AST);
				consume();
				AST tmp421_AST = null;
				tmp421_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp421_AST);
				consume();
				array_initializer_AST = (AST)currentAST.root;
			}
			else if ((LA1_91==LCURLY) && (_tokenSet_233.member(LA2_91))) {
				AST tmp422_AST = null;
				tmp422_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp422_AST);
				consume();
				initializer();
				if (matchError) {break loop116;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				{
					AST tmp423_AST = null;
					tmp423_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp423_AST);
					consume();
					break;
				}
				case EOF:
				case COMMA:
				case RCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_240, tokenNames);if (matchError) {break loop116;}
				}
				}
				}
				{
				_loop606:
				do {
					int LA1_92 = LA(1);
					int LA2_92 = LA(2);
					
					boolean synPredMatched604 = false;
					if (((LA1_92==COMMA) && (_tokenSet_216.member(LA2_92)))) {
						int _m604 = mark();
						guessing++;
						guess604:  while (true) {
							{
							match(COMMA);
							if (matchError) {break guess604;}
							{
							switch ( LA(1)) {
							case RCURLY:
							{
								consume();
								break;
							}
							case EOF:
							{
								consume();
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess604;}
							}
							}
							}
							}
						synPredMatched604 = true;
						break;} // guess604
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m604);
						guessing--;
					}
					if ( synPredMatched604 ) {
						AST tmp424_AST = null;
						tmp424_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp424_AST);
						consume();
					}
					else if ((LA1_92==COMMA) && (_tokenSet_233.member(LA2_92))) {
						AST tmp425_AST = null;
						tmp425_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp425_AST);
						consume();
						initializer();
						if (matchError) {break loop116;}
						astFactory.addASTChild(currentAST, returnAST);
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						{
							AST tmp426_AST = null;
							tmp426_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp426_AST);
							consume();
							break;
						}
						case EOF:
						case COMMA:
						case RCURLY:
						{
							break;
						}
						default:
						{
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_240, tokenNames);if (matchError) {break loop116;}
						}
						}
						}
					}
					else {
						break _loop606;
					}
					
				} while (true);
				}
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
					break;
				}
				case RCURLY:
				{
					AST tmp428_AST = null;
					tmp428_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp428_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_84, tokenNames);if (matchError) {break loop116;}
				}
				}
				}
				array_initializer_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_145, tokenNames);if (matchError) {break loop116;}
			}
			
		break;} // loop116
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_241);
			resetMatchError();
	}
	returnAST = array_initializer_AST;
}

	public final void cast_array_initializer() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cast_array_initializer_AST = null;
		
		loop117:  while (true) {
			{
			switch ( LA(1)) {
			case AMPERSAND:
			{
				AST tmp429_AST = null;
				tmp429_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp429_AST);
				consume();
				break;
			}
			case LPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_242, tokenNames);if (matchError) {break loop117;}
			}
			}
			}
			{
			int _cnt598=0;
			_loop598:
			do {
				if ((LA(1)==LPAREN)) {
					balanceParensInExpression();
					if (matchError) {break loop117;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					if ( _cnt598>=1 ) { break _loop598; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_139, tokenNames);if (matchError) {break loop117;}}
				}
				
				_cnt598++;
			} while (true);
			}
			array_initializer();
			if (matchError) {break loop117;}
			astFactory.addASTChild(currentAST, returnAST);
			cast_array_initializer_AST = (AST)currentAST.root;
		break;} // loop117
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_243);
			resetMatchError();
	}
	returnAST = cast_array_initializer_AST;
}

	public final void lazy_expression(
		boolean inTemplateParams, boolean searchingGreaterthen, int templateLevel
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_expression_AST = null;
		/*TypeSpecifier*/int ts=0; String s;
		
		loop118:  while (true) {
			{
			int _cnt1211=0;
			_loop1211:
			do {
				int LA1_93 = LA(1);
				int LA2_93 = LA(2);
				
				if ((_tokenSet_169.member(LA1_93)) && (_tokenSet_1.member(LA2_93))) {
					{
					int LA1_94 = LA(1);
					int LA2_94 = LA(2);
					
					switch ( LA1_94) {
					case OR:
					{
						AST tmp430_AST = null;
						tmp430_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp430_AST);
						consume();
						break;
					}
					case AND:
					{
						AST tmp431_AST = null;
						tmp431_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp431_AST);
						consume();
						break;
					}
					case BITWISEOR:
					{
						AST tmp432_AST = null;
						tmp432_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp432_AST);
						consume();
						break;
					}
					case BITWISEXOR:
					{
						AST tmp433_AST = null;
						tmp433_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp433_AST);
						consume();
						break;
					}
					case AMPERSAND:
					{
						AST tmp434_AST = null;
						tmp434_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp434_AST);
						consume();
						break;
					}
					case NOTEQUAL:
					{
						AST tmp435_AST = null;
						tmp435_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp435_AST);
						consume();
						break;
					}
					case EQUAL:
					{
						AST tmp436_AST = null;
						tmp436_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp436_AST);
						consume();
						break;
					}
					case LESSTHAN:
					{
						AST tmp437_AST = null;
						tmp437_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp437_AST);
						consume();
						break;
					}
					case LESSTHANOREQUALTO:
					{
						AST tmp438_AST = null;
						tmp438_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp438_AST);
						consume();
						break;
					}
					case GREATERTHANOREQUALTO:
					{
						AST tmp439_AST = null;
						tmp439_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp439_AST);
						consume();
						break;
					}
					case QUESTIONMARK:
					{
						AST tmp440_AST = null;
						tmp440_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp440_AST);
						consume();
						{
						if ((_tokenSet_189.member(LA(1)))) {
							expression();
							if (matchError) {break loop118;}
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((LA(1)==COLON)) {
						}
						else {
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_244, tokenNames);if (matchError) {break loop118;}
						}
						
						}
						AST tmp441_AST = null;
						tmp441_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp441_AST);
						match(COLON);
						if (matchError) {break loop118;}
						{
						assignment_expression();
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						}
						break;
					}
					case SHIFTLEFT:
					{
						AST tmp442_AST = null;
						tmp442_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp442_AST);
						consume();
						break;
					}
					case SHIFTRIGHT:
					{
						AST tmp443_AST = null;
						tmp443_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp443_AST);
						consume();
						break;
					}
					case PLUS:
					{
						AST tmp444_AST = null;
						tmp444_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp444_AST);
						consume();
						break;
					}
					case MINUS:
					{
						AST tmp445_AST = null;
						tmp445_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp445_AST);
						consume();
						break;
					}
					case STAR:
					{
						AST tmp446_AST = null;
						tmp446_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp446_AST);
						consume();
						break;
					}
					case DIVIDE:
					{
						AST tmp447_AST = null;
						tmp447_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp447_AST);
						consume();
						break;
					}
					case MOD:
					{
						AST tmp448_AST = null;
						tmp448_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp448_AST);
						consume();
						break;
					}
					case DOTMBR:
					{
						AST tmp449_AST = null;
						tmp449_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp449_AST);
						consume();
						break;
					}
					case POINTERTOMBR:
					{
						AST tmp450_AST = null;
						tmp450_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp450_AST);
						consume();
						break;
					}
					case PLUSPLUS:
					{
						AST tmp451_AST = null;
						tmp451_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp451_AST);
						consume();
						break;
					}
					case MINUSMINUS:
					{
						AST tmp452_AST = null;
						tmp452_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp452_AST);
						consume();
						break;
					}
					case DOT:
					{
						AST tmp453_AST = null;
						tmp453_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp453_AST);
						consume();
						break;
					}
					case POINTERTO:
					{
						AST tmp454_AST = null;
						tmp454_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp454_AST);
						consume();
						break;
					}
					case NOT:
					{
						AST tmp455_AST = null;
						tmp455_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp455_AST);
						consume();
						break;
					}
					case TILDE:
					{
						AST tmp456_AST = null;
						tmp456_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp456_AST);
						consume();
						break;
					}
					case ELLIPSIS:
					{
						AST tmp457_AST = null;
						tmp457_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp457_AST);
						consume();
						break;
					}
					case LPAREN:
					{
						balanceParensInExpression();
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						{
						if ((LA(1)==LCURLY)) {
							balanceCurlies();
							if (matchError) {break loop118;}
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((_tokenSet_243.member(LA(1)))) {
						}
						else {
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_241, tokenNames);if (matchError) {break loop118;}
						}
						
						}
						break;
					}
					case LSQUARE:
					{
						balanceSquaresInExpression();
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						{
						int LA1_95 = LA(1);
						int LA2_95 = LA(2);
						
						boolean synPredMatched1190 = false;
						if (((_tokenSet_245.member(LA1_95)) && (_tokenSet_1.member(LA2_95)))) {
							int _m1190 = mark();
							guessing++;
							guess1190:  while (true) {
								{
								lambda_expression_post_capture_predicate_g();
								if (matchError) {break guess1190;}
								}
							synPredMatched1190 = true;
							break;} // guess1190
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m1190);
							guessing--;
						}
						if ( synPredMatched1190 ) {
							lambda_expression_post_capture();
							if (matchError) {break loop118;}
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((_tokenSet_243.member(LA1_95)) && (_tokenSet_1.member(LA2_95))) {
						}
						else {
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_246, tokenNames);if (matchError) {break loop118;}
						}
						
						}
						break;
					}
					case FLOATONE:
					case FLOATTWO:
					case HEXADECIMALINT:
					case OCTALINT:
					case DECIMALINT:
					case CHAR_LITERAL:
					case STRING_LITERAL:
					case BINARYINT:
					case LITERAL_true:
					case LITERAL_false:
					case LITERAL_nullptr:
					case LITERAL___null:
					{
						constant();
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LITERAL_typename:
					{
						AST tmp458_AST = null;
						tmp458_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp458_AST);
						consume();
						break;
					}
					case LITERAL___interrupt:
					{
						AST tmp459_AST = null;
						tmp459_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp459_AST);
						consume();
						break;
					}
					case LITERAL___extension__:
					{
						AST tmp460_AST = null;
						tmp460_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp460_AST);
						consume();
						break;
					}
					case LITERAL_template:
					{
						AST tmp461_AST = null;
						tmp461_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp461_AST);
						consume();
						break;
					}
					case LITERAL_new:
					{
						AST tmp462_AST = null;
						tmp462_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp462_AST);
						consume();
						break;
					}
					case LITERAL_delete:
					{
						AST tmp463_AST = null;
						tmp463_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp463_AST);
						consume();
						break;
					}
					case LITERAL_this:
					{
						AST tmp464_AST = null;
						tmp464_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp464_AST);
						consume();
						break;
					}
					case LITERAL_volatile:
					case LITERAL___volatile__:
					case LITERAL___volatile:
					{
						literal_volatile();
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LITERAL_const:
					case LITERAL___const__:
					case LITERAL___const:
					{
						literal_const();
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LITERAL__TYPE_QUALIFIER__:
					{
						AST tmp465_AST = null;
						tmp465_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp465_AST);
						consume();
						break;
					}
					case LITERAL__cdecl:
					case LITERAL___cdecl:
					{
						literal_cdecl();
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LITERAL__near:
					case LITERAL___near:
					{
						literal_near();
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LITERAL__far:
					case LITERAL___far:
					{
						literal_far();
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LITERAL_pascal:
					case LITERAL__pascal:
					case LITERAL___pascal:
					{
						literal_pascal();
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LITERAL__stdcall:
					case LITERAL___stdcall:
					{
						literal_stdcall();
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LITERAL___clrcall:
					{
						literal_clrcall();
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LITERAL_char:
					case LITERAL_wchar_t:
					case LITERAL_bool:
					case LITERAL_short:
					case LITERAL_int:
					case LITERAL_long:
					case LITERAL_signed:
					case LITERAL___signed__:
					case LITERAL___signed:
					case LITERAL_unsigned:
					case LITERAL___unsigned__:
					case LITERAL_float:
					case LITERAL_double:
					case LITERAL_void:
					case LITERAL__int64:
					case LITERAL___int64:
					case LITERAL___w64:
					case LITERAL___complex__:
					case LITERAL__Bool:
					case LITERAL__Complex:
					case LITERAL__Imaginary:
					case LITERAL_bit:
					case LITERAL_char16_t:
					case LITERAL_char32_t:
					case LITERAL___complex:
					case LITERAL___builtin_va_list:
					case LITERAL__BUILT_IN_TYPE__:
					{
						ts=builtin_type(0);
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						{
						_loop1192:
						do {
							int LA1_96 = LA(1);
							int LA2_96 = LA(2);
							
							if ((LA1_96==LSQUARE) && (_tokenSet_190.member(LA2_96))) {
								balanceSquaresInExpression();
								if (matchError) {break loop118;}
								astFactory.addASTChild(currentAST, returnAST);
							}
							else {
								break _loop1192;
							}
							
						} while (true);
						}
						{
						if ((LA(1)==LCURLY)) {
							balanceCurlies();
							if (matchError) {break loop118;}
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((_tokenSet_243.member(LA(1)))) {
						}
						else {
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_241, tokenNames);if (matchError) {break loop118;}
						}
						
						}
						break;
					}
					case LITERAL_decltype:
					case LITERAL___decltype:
					{
						lazy_type_decltype(templateLevel);
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						ts = tsTYPEID;
						break;
					}
					case LITERAL_struct:
					{
						AST tmp466_AST = null;
						tmp466_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp466_AST);
						consume();
						break;
					}
					case LITERAL_union:
					{
						AST tmp467_AST = null;
						tmp467_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp467_AST);
						consume();
						break;
					}
					case LITERAL_class:
					{
						AST tmp468_AST = null;
						tmp468_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp468_AST);
						consume();
						break;
					}
					case LITERAL_enum:
					{
						AST tmp469_AST = null;
						tmp469_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp469_AST);
						consume();
						break;
					}
					case LITERAL_sizeof:
					{
						AST tmp470_AST = null;
						tmp470_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp470_AST);
						consume();
						break;
					}
					case LITERAL___real:
					{
						AST tmp471_AST = null;
						tmp471_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp471_AST);
						consume();
						break;
					}
					case LITERAL___imag:
					{
						AST tmp472_AST = null;
						tmp472_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp472_AST);
						consume();
						break;
					}
					case LITERAL_alignof:
					{
						AST tmp473_AST = null;
						tmp473_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp473_AST);
						consume();
						break;
					}
					case LITERAL___alignof:
					{
						AST tmp474_AST = null;
						tmp474_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp474_AST);
						consume();
						break;
					}
					case LITERAL___alignof__:
					{
						AST tmp475_AST = null;
						tmp475_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp475_AST);
						consume();
						break;
					}
					case LITERAL___is_class:
					case LITERAL___is_enum:
					case LITERAL___is_pod:
					case LITERAL___is_base_of:
					case LITERAL___has_trivial_constructor:
					case LITERAL___has_nothrow_assign:
					case LITERAL___has_nothrow_copy:
					case LITERAL___has_nothrow_constructor:
					case LITERAL___has_trivial_assign:
					case LITERAL___has_trivial_copy:
					case LITERAL___has_trivial_destructor:
					case LITERAL___has_virtual_destructor:
					case LITERAL___is_abstract:
					case LITERAL___is_empty:
					case LITERAL___is_literal_type:
					case LITERAL___is_polymorphic:
					case LITERAL___is_standard_layout:
					case LITERAL___is_trivial:
					case LITERAL___is_union:
					case LITERAL___underlying_type:
					{
						trait_type_literals();
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LITERAL_auto:
					{
						AST tmp476_AST = null;
						tmp476_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp476_AST);
						consume();
						break;
					}
					case LITERAL_constexpr:
					{
						AST tmp477_AST = null;
						tmp477_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp477_AST);
						consume();
						break;
					}
					case LITERAL_thread_local:
					{
						AST tmp478_AST = null;
						tmp478_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp478_AST);
						consume();
						break;
					}
					case LITERAL_static_assert:
					{
						AST tmp479_AST = null;
						tmp479_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp479_AST);
						consume();
						break;
					}
					case LITERAL_alignas:
					{
						AST tmp480_AST = null;
						tmp480_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp480_AST);
						consume();
						break;
					}
					case LITERAL_noexcept:
					{
						AST tmp481_AST = null;
						tmp481_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp481_AST);
						consume();
						break;
					}
					case LITERAL_OPERATOR:
					{
						AST tmp482_AST = null;
						tmp482_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp482_AST);
						consume();
						{
						int LA1_97 = LA(1);
						int LA2_97 = LA(2);
						
						if ((_tokenSet_247.member(LA1_97)) && (_tokenSet_243.member(LA2_97))) {
							optor_simple_tokclass();
							if (matchError) {break loop118;}
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((_tokenSet_248.member(LA1_97)) && (_tokenSet_249.member(LA2_97))) {
							{
							_loop1196:
							do {
								switch ( LA(1)) {
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								{
									literal_volatile();
									if (matchError) {break loop118;}
									astFactory.addASTChild(currentAST, returnAST);
									break;
								}
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								{
									literal_const();
									if (matchError) {break loop118;}
									astFactory.addASTChild(currentAST, returnAST);
									break;
								}
								case LITERAL__TYPE_QUALIFIER__:
								{
									AST tmp483_AST = null;
									tmp483_AST = astFactory.create(LT(1));
									astFactory.addASTChild(currentAST, tmp483_AST);
									consume();
									break;
								}
								default:
								{
									break _loop1196;
								}
								}
							} while (true);
							}
							{
							switch ( LA(1)) {
							case LITERAL_struct:
							{
								AST tmp484_AST = null;
								tmp484_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp484_AST);
								consume();
								break;
							}
							case LITERAL_union:
							{
								AST tmp485_AST = null;
								tmp485_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp485_AST);
								consume();
								break;
							}
							case LITERAL_class:
							{
								AST tmp486_AST = null;
								tmp486_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp486_AST);
								consume();
								break;
							}
							case LITERAL_enum:
							{
								AST tmp487_AST = null;
								tmp487_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp487_AST);
								consume();
								break;
							}
							default:
							{
								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_250, tokenNames);if (matchError) {break loop118;}
							}
							}
							}
							{
							int _cnt1199=0;
							_loop1199:
							do {
								int LA1_98 = LA(1);
								int LA2_98 = LA(2);
								
								if ((LA1_98==LITERAL_template) && (_tokenSet_243.member(LA2_98))) {
									AST tmp488_AST = null;
									tmp488_AST = astFactory.create(LT(1));
									astFactory.addASTChild(currentAST, tmp488_AST);
									consume();
								}
								else if ((_tokenSet_0.member(LA1_98)) && (_tokenSet_243.member(LA2_98))) {
									s=literal_ident();
									if (matchError) {break loop118;}
									astFactory.addASTChild(currentAST, returnAST);
								}
								else if ((LA1_98==LESSTHAN) && (_tokenSet_91.member(LA2_98))) {
									balanceLessthanGreaterthanInExpression(templateLevel);
									if (matchError) {break loop118;}
									astFactory.addASTChild(currentAST, returnAST);
								}
								else if ((LA1_98==SCOPE) && (_tokenSet_243.member(LA2_98))) {
									AST tmp489_AST = null;
									tmp489_AST = astFactory.create(LT(1));
									astFactory.addASTChild(currentAST, tmp489_AST);
									consume();
								}
								else {
									if ( _cnt1199>=1 ) { break _loop1199; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_251, tokenNames);if (matchError) {break loop118;}}
								}
								
								_cnt1199++;
							} while (true);
							}
							{
							int LA1_99 = LA(1);
							int LA2_99 = LA(2);
							
							if ((LA1_99==COLON) && ((LA2_99 >= ELLIPSIS && LA2_99 <= CSM_END))) {
								lazy_base_close();
								if (matchError) {break loop118;}
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((_tokenSet_243.member(LA1_99)) && (_tokenSet_1.member(LA2_99))) {
							}
							else {
								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_243, tokenNames);if (matchError) {break loop118;}
							}
							
							}
						}
						else if ((_tokenSet_243.member(LA1_97)) && (_tokenSet_1.member(LA2_97))) {
						}
						else {
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_243, tokenNames);if (matchError) {break loop118;}
						}
						
						}
						break;
					}
					case LITERAL_const_cast:
					case LITERAL_dynamic_cast:
					case LITERAL_static_cast:
					case LITERAL_reinterpret_cast:
					{
						{
						switch ( LA(1)) {
						case LITERAL_dynamic_cast:
						{
							AST tmp490_AST = null;
							tmp490_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp490_AST);
							consume();
							break;
						}
						case LITERAL_static_cast:
						{
							AST tmp491_AST = null;
							tmp491_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp491_AST);
							consume();
							break;
						}
						case LITERAL_reinterpret_cast:
						{
							AST tmp492_AST = null;
							tmp492_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp492_AST);
							consume();
							break;
						}
						case LITERAL_const_cast:
						{
							AST tmp493_AST = null;
							tmp493_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp493_AST);
							consume();
							break;
						}
						default:
						{
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_252, tokenNames);if (matchError) {break loop118;}
						}
						}
						}
						balanceLessthanGreaterthanInExpression(templateLevel);
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case SCOPE:
					{
						AST tmp494_AST = null;
						tmp494_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp494_AST);
						consume();
						break;
					}
					default:
						boolean synPredMatched1203 = false;
						if ((((_tokenSet_0.member(LA1_94)) && (LA2_94==LESSTHAN))&&((!inTemplateParams && !searchingGreaterthen)))) {
							int _m1203 = mark();
							guessing++;
							guess1203:  while (true) {
								{
								literal_ident_g();
								if (matchError) {break guess1203;}
								balanceLessthanGreaterthanInExpression_g(templateLevel);
								if (matchError) {break guess1203;}
								}
							synPredMatched1203 = true;
							break;} // guess1203
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m1203);
							guessing--;
						}
						if ( synPredMatched1203 ) {
							s=literal_ident();
							if (matchError) {break loop118;}
							astFactory.addASTChild(currentAST, returnAST);
							balanceLessthanGreaterthanInExpression(templateLevel);
							if (matchError) {break loop118;}
							astFactory.addASTChild(currentAST, returnAST);
							{
							if ((LA(1)==LCURLY)) {
								balanceCurlies();
								if (matchError) {break loop118;}
								astFactory.addASTChild(currentAST, returnAST);
							}
							else if ((_tokenSet_243.member(LA(1)))) {
							}
							else {
								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_241, tokenNames);if (matchError) {break loop118;}
							}
							
							}
						}
						else {
							boolean synPredMatched1206 = false;
							if ((((_tokenSet_0.member(LA1_94)) && (LA2_94==LESSTHAN))&&((inTemplateParams && !searchingGreaterthen)))) {
								int _m1206 = mark();
								guessing++;
								guess1206:  while (true) {
									{
									literal_ident_g();
									if (matchError) {break guess1206;}
									balanceLessthanGreaterthanInExpression_g(templateLevel);
									if (matchError) {break guess1206;}
									isGreaterthanInTheRestOfExpression_g(templateLevel);
									if (matchError) {break guess1206;}
									}
								synPredMatched1206 = true;
								break;} // guess1206
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m1206);
								guessing--;
							}
							if ( synPredMatched1206 ) {
								s=literal_ident();
								if (matchError) {break loop118;}
								astFactory.addASTChild(currentAST, returnAST);
								balanceLessthanGreaterthanInExpression(templateLevel);
								if (matchError) {break loop118;}
								astFactory.addASTChild(currentAST, returnAST);
								{
								if ((LA(1)==LCURLY)) {
									balanceCurlies();
									if (matchError) {break loop118;}
									astFactory.addASTChild(currentAST, returnAST);
								}
								else if ((_tokenSet_243.member(LA(1)))) {
								}
								else {
									matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_241, tokenNames);if (matchError) {break loop118;}
								}
								
								}
							}
							else if ((_tokenSet_0.member(LA1_94)) && (_tokenSet_241.member(LA2_94))) {
								s=literal_ident();
								if (matchError) {break loop118;}
								astFactory.addASTChild(currentAST, returnAST);
								{
								_loop1209:
								do {
									int LA1_100 = LA(1);
									int LA2_100 = LA(2);
									
									if ((LA1_100==LSQUARE) && (_tokenSet_190.member(LA2_100))) {
										balanceSquaresInExpression();
										if (matchError) {break loop118;}
										astFactory.addASTChild(currentAST, returnAST);
									}
									else {
										break _loop1209;
									}
									
								} while (true);
								}
								{
								if ((LA(1)==LCURLY)) {
									balanceCurlies();
									if (matchError) {break loop118;}
									astFactory.addASTChild(currentAST, returnAST);
								}
								else if ((_tokenSet_243.member(LA(1)))) {
								}
								else {
									matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_241, tokenNames);if (matchError) {break loop118;}
								}
								
								}
							}
						else {
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_169, tokenNames);if (matchError) {break loop118;}
						}
						}}
						}
					}
					else {
						if ( _cnt1211>=1 ) { break _loop1211; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_169, tokenNames);if (matchError) {break loop118;}}
					}
					
					_cnt1211++;
				} while (true);
				}
				{
				int LA1_101 = LA(1);
				int LA2_101 = LA(2);
				
				if (((_tokenSet_243.member(LA1_101)) && (_tokenSet_1.member(LA2_101)))&&((!inTemplateParams))) {
					{
					int LA1_102 = LA(1);
					int LA2_102 = LA(2);
					
					boolean synPredMatched1215 = false;
					if (((LA1_102==GREATERTHAN) && (_tokenSet_253.member(LA2_102)))) {
						int _m1215 = mark();
						guessing++;
						guess1215:  while (true) {
							{
							match(GREATERTHAN);
							if (matchError) {break guess1215;}
							lazy_expression_predicate_g();
							if (matchError) {break guess1215;}
							}
						synPredMatched1215 = true;
						break;} // guess1215
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1215);
						guessing--;
					}
					if ( synPredMatched1215 ) {
						{
						int _cnt1217=0;
						_loop1217:
						do {
							if ((LA(1)==GREATERTHAN)) {
								AST tmp495_AST = null;
								tmp495_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp495_AST);
								consume();
							}
							else {
								if ( _cnt1217>=1 ) { break _loop1217; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_121, tokenNames);if (matchError) {break loop118;}}
							}
							
							_cnt1217++;
						} while (true);
						}
						lazy_expression(false, false, templateLevel);
						if (matchError) {break loop118;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((_tokenSet_243.member(LA1_102)) && (_tokenSet_1.member(LA2_102))) {
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_243, tokenNames);if (matchError) {break loop118;}
					}
					
					}
				}
				else if ((_tokenSet_243.member(LA1_101)) && (_tokenSet_1.member(LA2_101))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_243, tokenNames);if (matchError) {break loop118;}
				}
				
				}
				lazy_expression_AST = (AST)currentAST.root;
			break;} // loop118
			if (matchError) {
				reportError(matchException);
				recover(matchException,_tokenSet_243);
				resetMatchError();
		}
		returnAST = lazy_expression_AST;
	}
	
	protected final void balanceParensInExpression() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST balanceParensInExpression_AST = null;
		/*TypeSpecifier*/int ts=0; String s;
		
		loop119:  while (true) {
			AST tmp496_AST = null;
			tmp496_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp496_AST);
			match(LPAREN);
			if (matchError) {break loop119;}
			{
			_loop1256:
			do {
				// nongreedy exit test
				if ((LA(1)==RPAREN) && (_tokenSet_1.member(LA(2)))) break _loop1256;
				int LA1_103 = LA(1);
				int LA2_103 = LA(2);
				
				switch ( LA1_103) {
				case LCURLY:
				{
					balanceCurlies();
					if (matchError) {break loop119;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LPAREN:
				{
					balanceParensInExpression();
					if (matchError) {break loop119;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LSQUARE:
				{
					balanceSquaresInExpression();
					if (matchError) {break loop119;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					int LA1_104 = LA(1);
					int LA2_104 = LA(2);
					
					boolean synPredMatched1253 = false;
					if (((_tokenSet_245.member(LA1_104)) && (_tokenSet_1.member(LA2_104)))) {
						int _m1253 = mark();
						guessing++;
						guess1253:  while (true) {
							{
							lambda_expression_post_capture_predicate_g();
							if (matchError) {break guess1253;}
							}
						synPredMatched1253 = true;
						break;} // guess1253
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1253);
						guessing--;
					}
					if ( synPredMatched1253 ) {
						lambda_expression_post_capture();
						if (matchError) {break loop119;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((_tokenSet_190.member(LA1_104)) && (_tokenSet_1.member(LA2_104))) {
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_190, tokenNames);if (matchError) {break loop119;}
					}
					
					}
					break;
				}
				case RSQUARE:
				case RCURLY:
				{
					{
					switch ( LA(1)) {
					case RCURLY:
					{
						AST tmp497_AST = null;
						tmp497_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp497_AST);
						consume();
						break;
					}
					case RSQUARE:
					{
						AST tmp498_AST = null;
						tmp498_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp498_AST);
						consume();
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_254, tokenNames);if (matchError) {break loop119;}
					}
					}
					}
					reportError(new NoViableAltException(LT(0), getFilename()));
					break;
				}
				default:
					boolean synPredMatched1244 = false;
					if (((_tokenSet_0.member(LA1_103)) && (_tokenSet_190.member(LA2_103)))) {
						int _m1244 = mark();
						guessing++;
						guess1244:  while (true) {
							{
							literal_ident_g();
							if (matchError) {break guess1244;}
							}
						synPredMatched1244 = true;
						break;} // guess1244
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1244);
						guessing--;
					}
					if ( synPredMatched1244 ) {
						s=literal_ident();
						if (matchError) {break loop119;}
						astFactory.addASTChild(currentAST, returnAST);
						{
						_loop1246:
						do {
							int LA1_105 = LA(1);
							int LA2_105 = LA(2);
							
							if ((LA1_105==LSQUARE) && (_tokenSet_190.member(LA2_105))) {
								balanceSquaresInExpression();
								if (matchError) {break loop119;}
								astFactory.addASTChild(currentAST, returnAST);
							}
							else {
								break _loop1246;
							}
							
						} while (true);
						}
					}
					else {
						boolean synPredMatched1248 = false;
						if (((_tokenSet_200.member(LA1_103)) && (_tokenSet_190.member(LA2_103)))) {
							int _m1248 = mark();
							guessing++;
							guess1248:  while (true) {
								{
								builtin_type_g(0);
								if (matchError) {break guess1248;}
								}
							synPredMatched1248 = true;
							break;} // guess1248
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m1248);
							guessing--;
						}
						if ( synPredMatched1248 ) {
							ts=builtin_type(0);
							if (matchError) {break loop119;}
							astFactory.addASTChild(currentAST, returnAST);
							{
							_loop1250:
							do {
								int LA1_106 = LA(1);
								int LA2_106 = LA(2);
								
								if ((LA1_106==LSQUARE) && (_tokenSet_190.member(LA2_106))) {
									balanceSquaresInExpression();
									if (matchError) {break loop119;}
									astFactory.addASTChild(currentAST, returnAST);
								}
								else {
									break _loop1250;
								}
								
							} while (true);
							}
						}
						else if ((_tokenSet_255.member(LA1_103)) && (_tokenSet_190.member(LA2_103))) {
							{
							AST tmp499_AST = null;
							tmp499_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp499_AST);
							match(_tokenSet_255);
							if (matchError) {break loop119;}
							}
						}
					else {
						break _loop1256;
					}
					}}
				} while (true);
				}
				AST tmp500_AST = null;
				tmp500_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp500_AST);
				match(RPAREN);
				if (matchError) {break loop119;}
				balanceParensInExpression_AST = (AST)currentAST.root;
			break;} // loop119
			if (matchError) {
				reportError(matchException);
				recover(matchException,_tokenSet_1);
				resetMatchError();
		}
		returnAST = balanceParensInExpression_AST;
	}
	
	public final void enum_head() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST enum_head_AST = null;
		String s;
		
		loop120:  while (true) {
			AST tmp501_AST = null;
			tmp501_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp501_AST);
			match(LITERAL_enum);
			if (matchError) {break loop120;}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_alignas:
			{
				type_attribute_specification();
				if (matchError) {break loop120;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case COLON:
			case SEMICOLON:
			case LCURLY:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_256, tokenNames);if (matchError) {break loop120;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_class:
			{
				AST tmp502_AST = null;
				tmp502_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp502_AST);
				consume();
				break;
			}
			case LITERAL_struct:
			{
				AST tmp503_AST = null;
				tmp503_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp503_AST);
				consume();
				break;
			}
			case COLON:
			case SEMICOLON:
			case LCURLY:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_257, tokenNames);if (matchError) {break loop120;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				s=enum_qualified_id();
				if (matchError) {break loop120;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case COLON:
			case SEMICOLON:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_258, tokenNames);if (matchError) {break loop120;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case COLON:
			{
				strongly_typed_enum_type_specifier();
				if (matchError) {break loop120;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case SEMICOLON:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_259, tokenNames);if (matchError) {break loop120;}
			}
			}
			}
			enum_head_AST = (AST)currentAST.root;
		break;} // loop120
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_212);
			resetMatchError();
	}
	returnAST = enum_head_AST;
}

	protected final void typedef_class_fwd() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST typedef_class_fwd_AST = null;
		String id = "", td = "";
		
		loop121:  while (true) {
			AST tmp504_AST = null;
			tmp504_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp504_AST);
			match(LITERAL_typedef);
			if (matchError) {break loop121;}
			{
			switch ( LA(1)) {
			case LITERAL_struct:
			{
				AST tmp505_AST = null;
				tmp505_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp505_AST);
				consume();
				break;
			}
			case LITERAL_union:
			{
				AST tmp506_AST = null;
				tmp506_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp506_AST);
				consume();
				break;
			}
			case LITERAL_class:
			{
				AST tmp507_AST = null;
				tmp507_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp507_AST);
				consume();
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_69, tokenNames);if (matchError) {break loop121;}
			}
			}
			}
			id=qualified_id();
			if (matchError) {break loop121;}
			astFactory.addASTChild(currentAST, returnAST);
			td=qualified_id();
			if (matchError) {break loop121;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp508_AST = null;
			tmp508_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp508_AST);
			match(SEMICOLON);
			if (matchError) {break loop121;}
			typedef_class_fwd_AST = (AST)currentAST.root;
		break;} // loop121
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = typedef_class_fwd_AST;
}

	public final void base_specifier() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST base_specifier_AST = null;
		
		loop122:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_virtual:
			{
				AST tmp509_AST = null;
				tmp509_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp509_AST);
				consume();
				{
				switch ( LA(1)) {
				case LITERAL_public:
				case LITERAL_protected:
				case LITERAL_private:
				{
					access_specifier();
					if (matchError) {break loop122;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case SCOPE:
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_decltype:
				case LITERAL___decltype:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_260, tokenNames);if (matchError) {break loop122;}
				}
				}
				}
				qualified_type();
				if (matchError) {break loop122;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL_public:
			case LITERAL_protected:
			case LITERAL_private:
			{
				access_specifier();
				if (matchError) {break loop122;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case LITERAL_virtual:
				{
					AST tmp510_AST = null;
					tmp510_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp510_AST);
					consume();
					break;
				}
				case SCOPE:
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_decltype:
				case LITERAL___decltype:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_261, tokenNames);if (matchError) {break loop122;}
				}
				}
				}
				qualified_type();
				if (matchError) {break loop122;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				qualified_type();
				if (matchError) {break loop122;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_262, tokenNames);if (matchError) {break loop122;}
			}
			}
			}
			base_specifier_AST = (AST)currentAST.root;
			base_specifier_AST=(AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_BASE_SPECIFIER,"CSM_BASE_SPECIFIER", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(base_specifier_AST));
			currentAST.root = base_specifier_AST;
			currentAST.child = base_specifier_AST!=null &&base_specifier_AST.getFirstChild()!=null ?
				base_specifier_AST.getFirstChild() : base_specifier_AST;
			currentAST.advanceChildToEnd();
			base_specifier_AST = (AST)currentAST.root;
		break;} // loop122
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((base_specifier_AST == null) && (currentAST.root != null)) {
			base_specifier_AST = (AST)currentAST.root;
			base_specifier_AST=(AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_BASE_SPECIFIER,"CSM_BASE_SPECIFIER", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(base_specifier_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_211);
			resetMatchError();
	}
	returnAST = base_specifier_AST;
}

	public final void member_declarator() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST member_declarator_AST = null;
		String s;
		
		loop123:  while (true) {
			int LA1_107 = LA(1);
			int LA2_107 = LA(2);
			
			boolean synPredMatched652 = false;
			if (((_tokenSet_263.member(LA1_107)) && (_tokenSet_264.member(LA2_107)))) {
				int _m652 = mark();
				guessing++;
				guess652:  while (true) {
					{
					{
					switch ( LA(1)) {
					case IDENT:
					case LITERAL_final:
					case LITERAL_override:
					{
						literal_ident_g();
						if (matchError) {break guess652;}
						break;
					}
					case COLON:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess652;}
					}
					}
					}
					match(COLON);
					if (matchError) {break guess652;}
					constant_expression_g();
					if (matchError) {break guess652;}
					}
				synPredMatched652 = true;
				break;} // guess652
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m652);
				guessing--;
			}
			if ( synPredMatched652 ) {
				{
				switch ( LA(1)) {
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				{
					s=literal_ident();
					if (matchError) {break loop123;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case COLON:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_263, tokenNames);if (matchError) {break loop123;}
				}
				}
				}
				AST tmp511_AST = null;
				tmp511_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp511_AST);
				match(COLON);
				if (matchError) {break loop123;}
				constant_expression();
				if (matchError) {break loop123;}
				astFactory.addASTChild(currentAST, returnAST);
				member_declarator_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_109.member(LA1_107)) && (_tokenSet_110.member(LA2_107))) {
				init_declarator(declOther);
				if (matchError) {break loop123;}
				astFactory.addASTChild(currentAST, returnAST);
				member_declarator_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_265, tokenNames);if (matchError) {break loop123;}
			}
			
		break;} // loop123
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_266);
			resetMatchError();
	}
	returnAST = member_declarator_AST;
}

	public final void conversion_function_head() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST conversion_function_head_AST = null;
		CPPParser.TypeQualifier tq;
		
		loop124:  while (true) {
			AST tmp512_AST = null;
			tmp512_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp512_AST);
			match(LITERAL_OPERATOR);
			if (matchError) {break loop124;}
			declaration_specifiers(true, false);
			if (matchError) {break loop124;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			_loop656:
			do {
				if ((_tokenSet_57.member(LA(1)))) {
					ptr_operator();
					if (matchError) {break loop124;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop656;
				}
				
			} while (true);
			}
			{
			switch ( LA(1)) {
			case LESSTHAN:
			{
				AST tmp513_AST = null;
				tmp513_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp513_AST);
				consume();
				template_parameter_list();
				if (matchError) {break loop124;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp514_AST = null;
				tmp514_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp514_AST);
				match(GREATERTHAN);
				if (matchError) {break loop124;}
				break;
			}
			case LPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_267, tokenNames);if (matchError) {break loop124;}
			}
			}
			}
			AST tmp515_AST = null;
			tmp515_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp515_AST);
			match(LPAREN);
			if (matchError) {break loop124;}
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			case LPAREN:
			case LSQUARE:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				parameter_list(false);
				if (matchError) {break loop124;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_165, tokenNames);if (matchError) {break loop124;}
			}
			}
			}
			AST tmp516_AST = null;
			tmp516_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp516_AST);
			match(RPAREN);
			if (matchError) {break loop124;}
			{
			_loop660:
			do {
				if ((_tokenSet_77.member(LA(1)))) {
					tq=cv_qualifier();
					if (matchError) {break loop124;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop660;
				}
				
			} while (true);
			}
			{
			switch ( LA(1)) {
			case AND:
			case AMPERSAND:
			{
				ref_qualifier();
				if (matchError) {break loop124;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case ASSIGNEQUAL:
			case SEMICOLON:
			case LCURLY:
			case LITERAL_throw:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_noexcept:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_268, tokenNames);if (matchError) {break loop124;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification();
				if (matchError) {break loop124;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case ASSIGNEQUAL:
			case SEMICOLON:
			case LCURLY:
			case LITERAL_final:
			case LITERAL_override:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_269, tokenNames);if (matchError) {break loop124;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_final:
			case LITERAL_override:
			{
				virt_specifiers();
				if (matchError) {break loop124;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case ASSIGNEQUAL:
			case SEMICOLON:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_270, tokenNames);if (matchError) {break loop124;}
			}
			}
			}
			conversion_function_head_AST = (AST)currentAST.root;
		break;} // loop124
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_106);
			resetMatchError();
	}
	returnAST = conversion_function_head_AST;
}

	public final void parameter_list(
		boolean symTabCheck
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST parameter_list_AST = null;
		
		loop125:  while (true) {
			parameter_declaration_list(symTabCheck);
			if (matchError) {break loop125;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			{
				AST tmp517_AST = null;
				tmp517_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp517_AST);
				consume();
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_271, tokenNames);if (matchError) {break loop125;}
			}
			}
			}
			parameter_list_AST = (AST)currentAST.root;
			parameter_list_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_PARMLIST,"CSM_PARMLIST", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(parameter_list_AST));
			currentAST.root = parameter_list_AST;
			currentAST.child = parameter_list_AST!=null &&parameter_list_AST.getFirstChild()!=null ?
				parameter_list_AST.getFirstChild() : parameter_list_AST;
			currentAST.advanceChildToEnd();
			parameter_list_AST = (AST)currentAST.root;
		break;} // loop125
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((parameter_list_AST == null) && (currentAST.root != null)) {
			parameter_list_AST = (AST)currentAST.root;
			parameter_list_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_PARMLIST,"CSM_PARMLIST", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(parameter_list_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_192);
			resetMatchError();
	}
	returnAST = parameter_list_AST;
}

	protected final void virt_specifiers() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST virt_specifiers_AST = null;
		
		loop126:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_override:
			{
				AST tmp518_AST = null;
				tmp518_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp518_AST);
				consume();
				break;
			}
			case LITERAL_final:
			{
				AST tmp519_AST = null;
				tmp519_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp519_AST);
				consume();
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_272, tokenNames);if (matchError) {break loop126;}
			}
			}
			}
			{
			_loop901:
			do {
				int LA1_108 = LA(1);
				int LA2_108 = LA(2);
				
				if ((LA1_108==LITERAL_override) && (_tokenSet_273.member(LA2_108))) {
					AST tmp520_AST = null;
					tmp520_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp520_AST);
					consume();
				}
				else if ((LA1_108==LITERAL_final) && (_tokenSet_273.member(LA2_108))) {
					AST tmp521_AST = null;
					tmp521_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp521_AST);
					consume();
				}
				else {
					break _loop901;
				}
				
			} while (true);
			}
			virt_specifiers_AST = (AST)currentAST.root;
		break;} // loop126
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_273);
			resetMatchError();
	}
	returnAST = virt_specifiers_AST;
}

	protected final boolean  conversion_function_special_definition() {
		boolean definition = false;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST conversion_function_special_definition_AST = null;
		
		loop127:  while (true) {
			AST tmp522_AST = null;
			tmp522_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp522_AST);
			match(ASSIGNEQUAL);
			if (matchError) {break loop127;}
			{
			switch ( LA(1)) {
			case OCTALINT:
			{
				AST tmp523_AST = null;
				tmp523_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp523_AST);
				consume();
				break;
			}
			case LITERAL_delete:
			{
				AST tmp524_AST = null;
				tmp524_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp524_AST);
				consume();
				definition = true;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_274, tokenNames);if (matchError) {break loop127;}
			}
			}
			}
			conversion_function_special_definition_AST = (AST)currentAST.root;
		break;} // loop127
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_229);
			resetMatchError();
	}
	returnAST = conversion_function_special_definition_AST;
	return definition;
}

	protected final void is_post_declarator_token() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST is_post_declarator_token_AST = null;
		
		loop128:  while (true) {
			switch ( LA(1)) {
			case SEMICOLON:
			{
				AST tmp525_AST = null;
				tmp525_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp525_AST);
				consume();
				is_post_declarator_token_AST = (AST)currentAST.root;
				break;
			}
			case ASSIGNEQUAL:
			{
				AST tmp526_AST = null;
				tmp526_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp526_AST);
				consume();
				is_post_declarator_token_AST = (AST)currentAST.root;
				break;
			}
			case LCURLY:
			{
				AST tmp527_AST = null;
				tmp527_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp527_AST);
				consume();
				is_post_declarator_token_AST = (AST)currentAST.root;
				break;
			}
			case EOF:
			{
				AST tmp528_AST = null;
				tmp528_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp528_AST);
				consume();
				is_post_declarator_token_AST = (AST)currentAST.root;
				break;
			}
			case RPAREN:
			{
				AST tmp529_AST = null;
				tmp529_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp529_AST);
				consume();
				is_post_declarator_token_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_try:
			case LITERAL___try:
			{
				literal_try();
				if (matchError) {break loop128;}
				astFactory.addASTChild(currentAST, returnAST);
				is_post_declarator_token_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_275, tokenNames);if (matchError) {break loop128;}
			}
			}
		break;} // loop128
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = is_post_declarator_token_AST;
}

	protected final void literal_attribute() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_attribute_AST = null;
		
		loop129:  while (true) {
			switch ( LA(1)) {
			case LITERAL___attribute:
			{
				AST tmp530_AST = null;
				tmp530_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp530_AST);
				consume();
				literal_attribute_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___attribute__:
			{
				AST tmp531_AST = null;
				tmp531_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp531_AST);
				consume();
				literal_attribute_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_276, tokenNames);if (matchError) {break loop129;}
			}
			}
		break;} // loop129
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_139);
			resetMatchError();
	}
	returnAST = literal_attribute_AST;
}

	public final void attribute_specification() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST attribute_specification_AST = null;
		
		loop130:  while (true) {
			switch ( LA(1)) {
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				literal_attribute();
				if (matchError) {break loop130;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp532_AST = null;
				tmp532_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp532_AST);
				match(LPAREN);
				if (matchError) {break loop130;}
				balanceParens();
				if (matchError) {break loop130;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp533_AST = null;
				tmp533_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp533_AST);
				match(RPAREN);
				if (matchError) {break loop130;}
				attribute_specification_AST = (AST)currentAST.root;
				break;
			}
			case LSQUARE:
			{
				{
				if (!(isCPlusPlus11()))
				{matchError=true;
				matchException = new SemanticException("isCPlusPlus11()");
				if (matchError) {break loop130;}}
				AST tmp534_AST = null;
				tmp534_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp534_AST);
				match(LSQUARE);
				if (matchError) {break loop130;}
				balanceSquares();
				if (matchError) {break loop130;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp535_AST = null;
				tmp535_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp535_AST);
				match(RSQUARE);
				if (matchError) {break loop130;}
				}
				attribute_specification_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_21, tokenNames);if (matchError) {break loop130;}
			}
			}
		break;} // loop130
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_278);
			resetMatchError();
	}
	returnAST = attribute_specification_AST;
}

	public final void restrict_declarator(
		int kind, int level
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST restrict_declarator_AST = null;
		CPPParser.TypeQualifier tq;
		
		loop131:  while (true) {
			int LA1_109 = LA(1);
			int LA2_109 = LA(2);
			
			boolean synPredMatched695 = false;
			if (((LA1_109==LPAREN) && (_tokenSet_109.member(LA2_109)))) {
				int _m695 = mark();
				guessing++;
				guess695:  while (true) {
					{
					match(LPAREN);
					if (matchError) {break guess695;}
					declarator_g(kind, level);
					if (matchError) {break guess695;}
					match(RPAREN);
					if (matchError) {break guess695;}
					is_post_declarator_token_g();
					if (matchError) {break guess695;}
					}
				synPredMatched695 = true;
				break;} // guess695
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m695);
				guessing--;
			}
			if ( synPredMatched695 ) {
				AST tmp536_AST = null;
				tmp536_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp536_AST);
				consume();
				declarator(kind, level);
				if (matchError) {break loop131;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp537_AST = null;
				tmp537_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp537_AST);
				match(RPAREN);
				if (matchError) {break loop131;}
				restrict_declarator_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched697 = false;
				if (((_tokenSet_21.member(LA1_109)) && (LA2_109==LPAREN||LA2_109==LSQUARE))) {
					int _m697 = mark();
					guessing++;
					guess697:  while (true) {
						{
						attribute_specification_g();
						if (matchError) {break guess697;}
						}
					synPredMatched697 = true;
					break;} // guess697
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m697);
					guessing--;
				}
				if ( synPredMatched697 ) {
					attribute_specification();
					if (matchError) {break loop131;}
					restrict_declarator(kind, level);
					if (matchError) {break loop131;}
					astFactory.addASTChild(currentAST, returnAST);
					restrict_declarator_AST = (AST)currentAST.root;
				}
				else {
					boolean synPredMatched699 = false;
					if (((_tokenSet_57.member(LA1_109)) && (_tokenSet_174.member(LA2_109)))) {
						int _m699 = mark();
						guessing++;
						guess699:  while (true) {
							{
							ptr_operator_g();
							if (matchError) {break guess699;}
							}
						synPredMatched699 = true;
						break;} // guess699
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m699);
						guessing--;
					}
					if ( synPredMatched699 ) {
						ptr_operator();
						if (matchError) {break loop131;}
						astFactory.addASTChild(currentAST, returnAST);
						restrict_declarator(kind, level);
						if (matchError) {break loop131;}
						astFactory.addASTChild(currentAST, returnAST);
						restrict_declarator_AST = (AST)currentAST.root;
					}
					else if ((_tokenSet_279.member(LA1_109)) && (_tokenSet_280.member(LA2_109))) {
						{
						switch ( LA(1)) {
						case LITERAL_restrict:
						case LITERAL___restrict:
						case LITERAL___restrict__:
						{
							literal_restrict();
							if (matchError) {break loop131;}
							{
							_loop702:
							do {
								if ((_tokenSet_77.member(LA(1)))) {
									tq=cv_qualifier();
									if (matchError) {break loop131;}
									astFactory.addASTChild(currentAST, returnAST);
								}
								else {
									break _loop702;
								}
								
							} while (true);
							}
							break;
						}
						case ELLIPSIS:
						case LPAREN:
						case LSQUARE:
						case TILDE:
						case SCOPE:
						case IDENT:
						case LITERAL_OPERATOR:
						case LITERAL_this:
						case LITERAL_true:
						case LITERAL_false:
						case LITERAL__cdecl:
						case LITERAL___cdecl:
						case LITERAL___attribute__:
						case LITERAL___attribute:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_decltype:
						case LITERAL___decltype:
						{
							break;
						}
						default:
						{
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_279, tokenNames);if (matchError) {break loop131;}
						}
						}
						}
						direct_declarator(kind, level);
						if (matchError) {break loop131;}
						astFactory.addASTChild(currentAST, returnAST);
						restrict_declarator_AST = (AST)currentAST.root;
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_281, tokenNames);if (matchError) {break loop131;}
					}
					}}
				break;} // loop131
				if (matchError) {
					reportError(matchException);
					recover(matchException,_tokenSet_177);
					resetMatchError();
			}
			returnAST = restrict_declarator_AST;
		}
		
	public final void direct_declarator(
		int kind, int level
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST direct_declarator_AST = null;
		String id; TypeQualifier tq;
		
		loop132:  while (true) {
			int LA1_110 = LA(1);
			int LA2_110 = LA(2);
			
			boolean synPredMatched705 = false;
			if (((_tokenSet_59.member(LA1_110)) && (_tokenSet_60.member(LA2_110)))) {
				int _m705 = mark();
				guessing++;
				guess705:  while (true) {
					{
					function_like_var_declarator_g();
					if (matchError) {break guess705;}
					}
				synPredMatched705 = true;
				break;} // guess705
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m705);
				guessing--;
			}
			if ( synPredMatched705 ) {
				function_like_var_declarator();
				if (matchError) {break loop132;}
				astFactory.addASTChild(currentAST, returnAST);
				direct_declarator_AST = (AST)currentAST.root;
				if(kind != declFunctionParam && (kind == declStatement || kind == declNotFirst || LA(1) == COMMA)) {direct_declarator_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_VARIABLE_LIKE_FUNCTION_DECLARATION,"CSM_VARIABLE_LIKE_FUNCTION_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(direct_declarator_AST));}
				currentAST.root = direct_declarator_AST;
				currentAST.child = direct_declarator_AST!=null &&direct_declarator_AST.getFirstChild()!=null ?
					direct_declarator_AST.getFirstChild() : direct_declarator_AST;
				currentAST.advanceChildToEnd();
				direct_declarator_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched708 = false;
				if (((_tokenSet_282.member(LA1_110)) && (_tokenSet_60.member(LA2_110)))) {
					int _m708 = mark();
					guessing++;
					guess708:  while (true) {
						{
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						{
							consume();
							break;
						}
						case SCOPE:
						case IDENT:
						case LITERAL_OPERATOR:
						case LITERAL_this:
						case LITERAL_true:
						case LITERAL_false:
						case LITERAL__cdecl:
						case LITERAL___cdecl:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_decltype:
						case LITERAL___decltype:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess708;}
						}
						}
						}
						qualified_id_g();
						if (matchError) {break guess708;}
						match(LPAREN);
						if (matchError) {break guess708;}
						matchNot(LCURLY);
						if (matchError) {break guess708;}
						}
					synPredMatched708 = true;
					break;} // guess708
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m708);
					guessing--;
				}
				if ( synPredMatched708 ) {
					{
					switch ( LA(1)) {
					case ELLIPSIS:
					{
						AST tmp538_AST = null;
						tmp538_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp538_AST);
						consume();
						break;
					}
					case SCOPE:
					case IDENT:
					case LITERAL_OPERATOR:
					case LITERAL_this:
					case LITERAL_true:
					case LITERAL_false:
					case LITERAL__cdecl:
					case LITERAL___cdecl:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_decltype:
					case LITERAL___decltype:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_282, tokenNames);if (matchError) {break loop132;}
					}
					}
					}
					id=qualified_id();
					if (matchError) {break loop132;}
					astFactory.addASTChild(currentAST, returnAST);
					declaratorID(id, qiVar);
					{
					switch ( LA(1)) {
					case LSQUARE:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					{
						variable_attribute_specification();
						if (matchError) {break loop132;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case LPAREN:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_283, tokenNames);if (matchError) {break loop132;}
					}
					}
					}
					AST tmp539_AST = null;
					tmp539_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp539_AST);
					match(LPAREN);
					if (matchError) {break loop132;}
					{
					if ((_tokenSet_284.member(LA(1)))) {
						cpp11_expression_list();
						if (matchError) {break loop132;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((LA(1)==RPAREN)) {
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_285, tokenNames);if (matchError) {break loop132;}
					}
					
					}
					AST tmp540_AST = null;
					tmp540_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp540_AST);
					match(RPAREN);
					if (matchError) {break loop132;}
					direct_declarator_AST = (AST)currentAST.root;
					direct_declarator_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_VARIABLE_DECLARATION,"CSM_VARIABLE_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(direct_declarator_AST));
					currentAST.root = direct_declarator_AST;
					currentAST.child = direct_declarator_AST!=null &&direct_declarator_AST.getFirstChild()!=null ?
						direct_declarator_AST.getFirstChild() : direct_declarator_AST;
					currentAST.advanceChildToEnd();
					direct_declarator_AST = (AST)currentAST.root;
				}
				else if ((_tokenSet_286.member(LA1_110)) && (_tokenSet_287.member(LA2_110))) {
					{
					switch ( LA(1)) {
					case LSQUARE:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					{
						variable_attribute_specification();
						if (matchError) {break loop132;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case ELLIPSIS:
					case SCOPE:
					case IDENT:
					case LITERAL_OPERATOR:
					case LITERAL_this:
					case LITERAL_true:
					case LITERAL_false:
					case LITERAL__cdecl:
					case LITERAL___cdecl:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_decltype:
					case LITERAL___decltype:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_286, tokenNames);if (matchError) {break loop132;}
					}
					}
					}
					{
					int LA1_111 = LA(1);
					int LA2_111 = LA(2);
					
					boolean synPredMatched716 = false;
					if (((_tokenSet_282.member(LA1_111)) && (_tokenSet_288.member(LA2_111)))) {
						int _m716 = mark();
						guessing++;
						guess716:  while (true) {
							{
							{
							switch ( LA(1)) {
							case ELLIPSIS:
							{
								consume();
								break;
							}
							case SCOPE:
							case IDENT:
							case LITERAL_OPERATOR:
							case LITERAL_this:
							case LITERAL_true:
							case LITERAL_false:
							case LITERAL__cdecl:
							case LITERAL___cdecl:
							case LITERAL_final:
							case LITERAL_override:
							case LITERAL_decltype:
							case LITERAL___decltype:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess716;}
							}
							}
							}
							qualified_id_g();
							if (matchError) {break guess716;}
							match(LSQUARE);
							if (matchError) {break guess716;}
							}
						synPredMatched716 = true;
						break;} // guess716
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m716);
						guessing--;
					}
					if ( synPredMatched716 ) {
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						{
							AST tmp541_AST = null;
							tmp541_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp541_AST);
							consume();
							break;
						}
						case SCOPE:
						case IDENT:
						case LITERAL_OPERATOR:
						case LITERAL_this:
						case LITERAL_true:
						case LITERAL_false:
						case LITERAL__cdecl:
						case LITERAL___cdecl:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_decltype:
						case LITERAL___decltype:
						{
							break;
						}
						default:
						{
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_282, tokenNames);if (matchError) {break loop132;}
						}
						}
						}
						id=qualified_id();
						if (matchError) {break loop132;}
						astFactory.addASTChild(currentAST, returnAST);
						
						if (_td==true) {
						declaratorID(id,qiType);
						} else {
						declaratorID(id,qiVar);
						}
						is_address = false; is_pointer = false;
						
						{
						int _cnt720=0;
						_loop720:
						do {
							int LA1_112 = LA(1);
							int LA2_112 = LA(2);
							
							if ((LA1_112==LSQUARE) && (_tokenSet_289.member(LA2_112))) {
								AST tmp542_AST = null;
								tmp542_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp542_AST);
								consume();
								{
								if ((_tokenSet_169.member(LA(1)))) {
									constant_expression();
									if (matchError) {break loop132;}
									astFactory.addASTChild(currentAST, returnAST);
								}
								else if ((LA(1)==RSQUARE)) {
								}
								else {
									matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_289, tokenNames);if (matchError) {break loop132;}
								}
								
								}
								AST tmp543_AST = null;
								tmp543_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp543_AST);
								match(RSQUARE);
								if (matchError) {break loop132;}
							}
							else {
								if ( _cnt720>=1 ) { break _loop720; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_277, tokenNames);if (matchError) {break loop132;}}
							}
							
							_cnt720++;
						} while (true);
						}
						declaratorArray();
						direct_declarator_AST = (AST)currentAST.root;
						
						if (_td==true) {
						// todo: build tree in this case
						} else  {
						direct_declarator_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ARRAY_DECLARATION,"CSM_ARRAY_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(direct_declarator_AST));
						}
						
						currentAST.root = direct_declarator_AST;
						currentAST.child = direct_declarator_AST!=null &&direct_declarator_AST.getFirstChild()!=null ?
							direct_declarator_AST.getFirstChild() : direct_declarator_AST;
						currentAST.advanceChildToEnd();
					}
					else if ((_tokenSet_282.member(LA1_111)) && (_tokenSet_287.member(LA2_111))) {
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						{
							AST tmp544_AST = null;
							tmp544_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp544_AST);
							consume();
							break;
						}
						case SCOPE:
						case IDENT:
						case LITERAL_OPERATOR:
						case LITERAL_this:
						case LITERAL_true:
						case LITERAL_false:
						case LITERAL__cdecl:
						case LITERAL___cdecl:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_decltype:
						case LITERAL___decltype:
						{
							break;
						}
						default:
						{
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_282, tokenNames);if (matchError) {break loop132;}
						}
						}
						}
						id=qualified_id();
						if (matchError) {break loop132;}
						astFactory.addASTChild(currentAST, returnAST);
						direct_declarator_AST = (AST)currentAST.root;
						
						if (_td==true) {
						// todo: build tree in this case
						declaratorID(id,qiType);
						} else {
						direct_declarator_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_VARIABLE_DECLARATION,"CSM_VARIABLE_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(direct_declarator_AST));
						declaratorID(id,qiVar);
						}
						is_address = false; is_pointer = false;
						
						currentAST.root = direct_declarator_AST;
						currentAST.child = direct_declarator_AST!=null &&direct_declarator_AST.getFirstChild()!=null ?
							direct_declarator_AST.getFirstChild() : direct_declarator_AST;
						currentAST.advanceChildToEnd();
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_282, tokenNames);if (matchError) {break loop132;}
					}
					
					}
					{
					int LA1_113 = LA(1);
					int LA2_113 = LA(2);
					
					if ((_tokenSet_21.member(LA1_113)) && (LA2_113==LPAREN||LA2_113==LSQUARE)) {
						variable_attribute_specification();
						if (matchError) {break loop132;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((_tokenSet_290.member(LA1_113)) && (_tokenSet_1.member(LA2_113))) {
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_290, tokenNames);if (matchError) {break loop132;}
					}
					
					}
					{
					switch ( LA(1)) {
					case LITERAL_asm:
					case LITERAL__asm:
					case LITERAL___asm__:
					case LITERAL___asm:
					{
						asm_block();
						if (matchError) {break loop132;}
						break;
					}
					case EOF:
					case ELLIPSIS:
					case ASSIGNEQUAL:
					case COLON:
					case COMMA:
					case SEMICOLON:
					case LPAREN:
					case RPAREN:
					case LSQUARE:
					case LCURLY:
					case GREATERTHAN:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_290, tokenNames);if (matchError) {break loop132;}
					}
					}
					}
					{
					switch ( LA(1)) {
					case LSQUARE:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					{
						variable_attribute_specification();
						if (matchError) {break loop132;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case EOF:
					case ELLIPSIS:
					case ASSIGNEQUAL:
					case COLON:
					case COMMA:
					case SEMICOLON:
					case LPAREN:
					case RPAREN:
					case LCURLY:
					case GREATERTHAN:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_291, tokenNames);if (matchError) {break loop132;}
					}
					}
					}
					direct_declarator_AST = (AST)currentAST.root;
				}
				else if ((LA1_110==TILDE)) {
					AST tmp545_AST = null;
					tmp545_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp545_AST);
					consume();
					id=literal_ident();
					if (matchError) {break loop132;}
					astFactory.addASTChild(currentAST, returnAST);
					declaratorID(id,qiDtor);
					
					if( reportOddWarnings ) printf("direct_declarator[%d]: Warning direct_declarator5 entered unexpectedly with %s\n", LT(1).getLine(),(id));
							
					AST tmp546_AST = null;
					tmp546_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp546_AST);
					match(LPAREN);
					if (matchError) {break loop132;}
					{
					switch ( LA(1)) {
					case ELLIPSIS:
					case LPAREN:
					case LSQUARE:
					case STAR:
					case AND:
					case AMPERSAND:
					case TILDE:
					case SCOPE:
					case IDENT:
					case LITERAL_OPERATOR:
					case LITERAL_typeof:
					case LITERAL___typeof__:
					case LITERAL___typeof:
					case LITERAL_typedef:
					case LITERAL_enum:
					case LITERAL_extern:
					case LITERAL_inline:
					case LITERAL__inline:
					case LITERAL___inline__:
					case LITERAL___inline:
					case LITERAL_virtual:
					case LITERAL_explicit:
					case LITERAL_friend:
					case LITERAL__stdcall:
					case LITERAL___stdcall:
					case LITERAL_typename:
					case LITERAL_auto:
					case LITERAL_register:
					case LITERAL_static:
					case LITERAL_mutable:
					case LITERAL_const:
					case LITERAL___const__:
					case LITERAL___const:
					case LITERAL_const_cast:
					case LITERAL_volatile:
					case LITERAL___volatile__:
					case LITERAL___volatile:
					case LITERAL_char:
					case LITERAL_wchar_t:
					case LITERAL_bool:
					case LITERAL_short:
					case LITERAL_int:
					case LITERAL_long:
					case LITERAL_signed:
					case LITERAL___signed__:
					case LITERAL___signed:
					case LITERAL_unsigned:
					case LITERAL___unsigned__:
					case LITERAL_float:
					case LITERAL_double:
					case LITERAL_void:
					case LITERAL__declspec:
					case LITERAL___declspec:
					case LITERAL_class:
					case LITERAL_struct:
					case LITERAL_union:
					case LITERAL_this:
					case LITERAL_true:
					case LITERAL_false:
					case LITERAL__cdecl:
					case LITERAL___cdecl:
					case LITERAL__near:
					case LITERAL___near:
					case LITERAL__far:
					case LITERAL___far:
					case LITERAL___interrupt:
					case LITERAL_pascal:
					case LITERAL__pascal:
					case LITERAL___pascal:
					case LITERAL__int64:
					case LITERAL___int64:
					case LITERAL___w64:
					case LITERAL___attribute__:
					case LITERAL___complex__:
					case LITERAL___global:
					case LITERAL__Bool:
					case LITERAL__Complex:
					case LITERAL___thread:
					case LITERAL___attribute:
					case LITERAL__Imaginary:
					case LITERAL_bit:
					case LITERAL___symbolic:
					case LITERAL___hidden:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_constexpr:
					case LITERAL_decltype:
					case LITERAL_thread_local:
					case LITERAL_alignas:
					case LITERAL_char16_t:
					case LITERAL_char32_t:
					case LITERAL___decltype:
					case LITERAL___complex:
					case LITERAL___forceinline:
					case LITERAL___clrcall:
					case LITERAL__Noreturn:
					case LITERAL___builtin_va_list:
					case LITERAL__BUILT_IN_TYPE__:
					case LITERAL__TYPE_QUALIFIER__:
					case LITERAL__STORAGE_CLASS_SPECIFIER__:
					{
						parameter_list(false);
						if (matchError) {break loop132;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case RPAREN:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_165, tokenNames);if (matchError) {break loop132;}
					}
					}
					}
					AST tmp547_AST = null;
					tmp547_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp547_AST);
					match(RPAREN);
					if (matchError) {break loop132;}
					direct_declarator_AST = (AST)currentAST.root;
				}
				else if ((LA1_110==LPAREN) && (_tokenSet_109.member(LA2_110))) {
					AST tmp548_AST = null;
					tmp548_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp548_AST);
					consume();
					declarator(kind, level+1);
					if (matchError) {break loop132;}
					astFactory.addASTChild(currentAST, returnAST);
					AST tmp549_AST = null;
					tmp549_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp549_AST);
					match(RPAREN);
					if (matchError) {break loop132;}
					{
					int LA1_114 = LA(1);
					int LA2_114 = LA(2);
					
					if ((_tokenSet_21.member(LA1_114)) && (LA2_114==LPAREN||LA2_114==LSQUARE)) {
						variable_attribute_specification();
						if (matchError) {break loop132;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((_tokenSet_291.member(LA1_114)) && (_tokenSet_1.member(LA2_114))) {
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_291, tokenNames);if (matchError) {break loop132;}
					}
					
					}
					{
					int LA1_115 = LA(1);
					int LA2_115 = LA(2);
					
					if (((_tokenSet_291.member(LA1_115)) && (_tokenSet_1.member(LA2_115)))&&(_ts != tsInvalid)) {
						{
						int LA1_116 = LA(1);
						int LA2_116 = LA(2);
						
						if ((LA1_116==LPAREN||LA1_116==LSQUARE) && (_tokenSet_292.member(LA2_116))) {
							declarator_suffixes();
							if (matchError) {break loop132;}
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((_tokenSet_291.member(LA1_116)) && (_tokenSet_1.member(LA2_116))) {
						}
						else {
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_291, tokenNames);if (matchError) {break loop132;}
						}
						
						}
					}
					else if ((LA1_115==LPAREN||LA1_115==LSQUARE) && (_tokenSet_292.member(LA2_115))) {
						declarator_suffixes();
						if (matchError) {break loop132;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_291, tokenNames);if (matchError) {break loop132;}
					}
					
					}
					{
					switch ( LA(1)) {
					case LSQUARE:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					{
						variable_attribute_specification();
						if (matchError) {break loop132;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case EOF:
					case ELLIPSIS:
					case ASSIGNEQUAL:
					case COLON:
					case COMMA:
					case SEMICOLON:
					case LPAREN:
					case RPAREN:
					case LCURLY:
					case GREATERTHAN:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_291, tokenNames);if (matchError) {break loop132;}
					}
					}
					}
					direct_declarator_AST = (AST)currentAST.root;
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_175, tokenNames);if (matchError) {break loop132;}
				}
				}
			break;} // loop132
			if (matchError) {
				reportError(matchException);
				recover(matchException,_tokenSet_177);
				resetMatchError();
		}
		returnAST = direct_declarator_AST;
	}
	
	protected final void literal_restrict() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_restrict_AST = null;
		
		loop133:  while (true) {
			switch ( LA(1)) {
			case LITERAL_restrict:
			{
				AST tmp550_AST = null;
				tmp550_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp550_AST);
				consume();
				literal_restrict_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___restrict:
			{
				AST tmp551_AST = null;
				tmp551_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp551_AST);
				consume();
				literal_restrict_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___restrict__:
			{
				AST tmp552_AST = null;
				tmp552_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp552_AST);
				consume();
				literal_restrict_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_293, tokenNames);if (matchError) {break loop133;}
			}
			}
		break;} // loop133
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_132);
			resetMatchError();
	}
	returnAST = literal_restrict_AST;
}

	public final void function_like_var_declarator() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_like_var_declarator_AST = null;
		String id; TypeQualifier tq;
		
		loop134:  while (true) {
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification();
				if (matchError) {break loop134;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LPAREN:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_59, tokenNames);if (matchError) {break loop134;}
			}
			}
			}
			id=idInBalanceParensHard();
			if (matchError) {break loop134;}
			astFactory.addASTChild(currentAST, returnAST);
			declaratorID(id, qiFun);
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				variable_attribute_specification();
				if (matchError) {break loop134;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_283, tokenNames);if (matchError) {break loop134;}
			}
			}
			}
			AST tmp553_AST = null;
			tmp553_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp553_AST);
			match(LPAREN);
			if (matchError) {break loop134;}
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			case LPAREN:
			case LSQUARE:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				parameter_list(false);
				if (matchError) {break loop134;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_165, tokenNames);if (matchError) {break loop134;}
			}
			}
			}
			AST tmp554_AST = null;
			tmp554_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp554_AST);
			match(RPAREN);
			if (matchError) {break loop134;}
			{
			int LA1_117 = LA(1);
			int LA2_117 = LA(2);
			
			if ((_tokenSet_294.member(LA1_117)) && (_tokenSet_1.member(LA2_117))) {
				cv_qualifier_seq();
				if (matchError) {break loop134;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_295.member(LA1_117)) && (_tokenSet_1.member(LA2_117))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_294, tokenNames);if (matchError) {break loop134;}
			}
			
			}
			{
			switch ( LA(1)) {
			case AND:
			case AMPERSAND:
			{
				ref_qualifier();
				if (matchError) {break loop134;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case COLON:
			case COMMA:
			case SEMICOLON:
			case POINTERTO:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case GREATERTHAN:
			case LITERAL_throw:
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			case LITERAL_new:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_noexcept:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_295, tokenNames);if (matchError) {break loop134;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification();
				if (matchError) {break loop134;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case COLON:
			case COMMA:
			case SEMICOLON:
			case POINTERTO:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case GREATERTHAN:
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			case LITERAL_new:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_296, tokenNames);if (matchError) {break loop134;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case POINTERTO:
			{
				trailing_type();
				if (matchError) {break loop134;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case COLON:
			case COMMA:
			case SEMICOLON:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case GREATERTHAN:
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			case LITERAL_new:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_297, tokenNames);if (matchError) {break loop134;}
			}
			}
			}
			{
			int LA1_118 = LA(1);
			int LA2_118 = LA(2);
			
			if ((LA1_118==LITERAL_final||LA1_118==LITERAL_override) && (_tokenSet_298.member(LA2_118))) {
				virt_specifiers();
				if (matchError) {break loop134;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_298.member(LA1_118)) && (_tokenSet_1.member(LA2_118))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_298, tokenNames);if (matchError) {break loop134;}
			}
			
			}
			{
			int LA1_119 = LA(1);
			int LA2_119 = LA(2);
			
			if ((_tokenSet_21.member(LA1_119)) && (LA2_119==LPAREN||LA2_119==LSQUARE)) {
				function_attribute_specification();
				if (matchError) {break loop134;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_298.member(LA1_119)) && (_tokenSet_1.member(LA2_119))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_298, tokenNames);if (matchError) {break loop134;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			{
				asm_block();
				if (matchError) {break loop134;}
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case COLON:
			case COMMA:
			case SEMICOLON:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case GREATERTHAN:
			case LITERAL_new:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_298, tokenNames);if (matchError) {break loop134;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification();
				if (matchError) {break loop134;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case COLON:
			case COMMA:
			case SEMICOLON:
			case LPAREN:
			case RPAREN:
			case LCURLY:
			case GREATERTHAN:
			case LITERAL_new:
			case LITERAL_final:
			case LITERAL_override:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_299, tokenNames);if (matchError) {break loop134;}
			}
			}
			}
			{
			_loop743:
			do {
				switch ( LA(1)) {
				case LITERAL_override:
				{
					AST tmp555_AST = null;
					tmp555_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp555_AST);
					consume();
					break;
				}
				case LITERAL_final:
				{
					AST tmp556_AST = null;
					tmp556_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp556_AST);
					consume();
					break;
				}
				case LITERAL_new:
				{
					AST tmp557_AST = null;
					tmp557_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp557_AST);
					consume();
					break;
				}
				default:
				{
					break _loop743;
				}
				}
			} while (true);
			}
			function_like_var_declarator_AST = (AST)currentAST.root;
		break;} // loop134
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_177);
			resetMatchError();
	}
	returnAST = function_like_var_declarator_AST;
}

	protected final void variable_attribute_specification() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST variable_attribute_specification_AST = null;
		
		loop135:  while (true) {
			attribute_specification_list();
			if (matchError) {break loop135;}
		break;} // loop135
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_300);
			resetMatchError();
	}
	returnAST = variable_attribute_specification_AST;
}

	public final void declarator_suffixes() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declarator_suffixes_AST = null;
		TypeQualifier tq;
		
		loop136:  while (true) {
			{
			int LA1_120 = LA(1);
			int LA2_120 = LA(2);
			
			if ((LA1_120==LSQUARE)) {
				{
				int _cnt748=0;
				_loop748:
				do {
					int LA1_121 = LA(1);
					int LA2_121 = LA(2);
					
					if ((LA1_121==LSQUARE) && (_tokenSet_289.member(LA2_121))) {
						AST tmp558_AST = null;
						tmp558_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp558_AST);
						consume();
						{
						if ((_tokenSet_169.member(LA(1)))) {
							constant_expression();
							if (matchError) {break loop136;}
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((LA(1)==RSQUARE)) {
						}
						else {
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_289, tokenNames);if (matchError) {break loop136;}
						}
						
						}
						AST tmp559_AST = null;
						tmp559_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp559_AST);
						match(RSQUARE);
						if (matchError) {break loop136;}
					}
					else {
						if ( _cnt748>=1 ) { break _loop748; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_277, tokenNames);if (matchError) {break loop136;}}
					}
					
					_cnt748++;
				} while (true);
				}
				declaratorArray();
			}
			else {
				boolean synPredMatched750 = false;
				if (((LA1_120==LPAREN) && (_tokenSet_165.member(LA2_120)))) {
					int _m750 = mark();
					guessing++;
					guess750:  while (true) {
						{
						match(LPAREN);
						if (matchError) {break guess750;}
						match(RPAREN);
						if (matchError) {break guess750;}
						}
					synPredMatched750 = true;
					break;} // guess750
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m750);
					guessing--;
				}
				if ( synPredMatched750 ) {
					declarator_param_list();
					if (matchError) {break loop136;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if (((LA1_120==LPAREN) && (_tokenSet_165.member(LA2_120)))&&((!((LA(1)==LPAREN)&&(LA(2)==IDENT||LA(2)==LITERAL_final))||(qualifiedItemIsOneOf(qiType|qiCtor,1))))) {
					declarator_param_list();
					if (matchError) {break loop136;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_301, tokenNames);if (matchError) {break loop136;}
				}
				}
				}
				declarator_suffixes_AST = (AST)currentAST.root;
			break;} // loop136
			if (matchError) {
				reportError(matchException);
				recover(matchException,_tokenSet_291);
				resetMatchError();
		}
		returnAST = declarator_suffixes_AST;
	}
	
	protected final String  idInBalanceParensHard() {
		String id = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST idInBalanceParensHard_AST = null;
		
		loop137:  while (true) {
			switch ( LA(1)) {
			case LPAREN:
			{
				{
				AST tmp560_AST = null;
				tmp560_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp560_AST);
				match(LPAREN);
				if (matchError) {break loop137;}
				id=idInBalanceParensHard();
				if (matchError) {break loop137;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp561_AST = null;
				tmp561_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp561_AST);
				match(RPAREN);
				if (matchError) {break loop137;}
				}
				idInBalanceParensHard_AST = (AST)currentAST.root;
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				id=qualified_id();
				if (matchError) {break loop137;}
				astFactory.addASTChild(currentAST, returnAST);
				idInBalanceParensHard_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_302, tokenNames);if (matchError) {break loop137;}
			}
			}
		break;} // loop137
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_303);
			resetMatchError();
	}
	returnAST = idInBalanceParensHard_AST;
	return id;
}

	public final void trailing_type() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST trailing_type_AST = null;
		int ts = tsInvalid; TypeQualifier tq;
		
		loop138:  while (true) {
			AST tmp562_AST = null;
			tmp562_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp562_AST);
			match(POINTERTO);
			if (matchError) {break loop138;}
			cv_qualifier_seq();
			if (matchError) {break loop138;}
			astFactory.addASTChild(currentAST, returnAST);
			ts=trailing_type_specifier();
			if (matchError) {break loop138;}
			astFactory.addASTChild(currentAST, returnAST);
			cv_qualifier_seq();
			if (matchError) {break loop138;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			int LA1_122 = LA(1);
			int LA2_122 = LA(2);
			
			boolean synPredMatched774 = false;
			if (((_tokenSet_304.member(LA1_122)) && (_tokenSet_305.member(LA2_122)))) {
				int _m774 = mark();
				guessing++;
				guess774:  while (true) {
					{
					is_abstract_declarator_g();
					if (matchError) {break guess774;}
					}
				synPredMatched774 = true;
				break;} // guess774
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m774);
				guessing--;
			}
			if ( synPredMatched774 ) {
				greedy_abstract_declarator();
				if (matchError) {break loop138;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_132.member(LA1_122)) && (_tokenSet_1.member(LA2_122))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_132, tokenNames);if (matchError) {break loop138;}
			}
			
			}
			trailing_type_AST = (AST)currentAST.root;
		break;} // loop138
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_132);
			resetMatchError();
	}
	returnAST = trailing_type_AST;
}

	public final void declarator_param_list() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declarator_param_list_AST = null;
		
		loop139:  while (true) {
			AST tmp563_AST = null;
			tmp563_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp563_AST);
			match(LPAREN);
			if (matchError) {break loop139;}
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			case LPAREN:
			case LSQUARE:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				parameter_list(false);
				if (matchError) {break loop139;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_165, tokenNames);if (matchError) {break loop139;}
			}
			}
			}
			AST tmp564_AST = null;
			tmp564_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp564_AST);
			match(RPAREN);
			if (matchError) {break loop139;}
			cv_qualifier_seq();
			if (matchError) {break loop139;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			int LA1_123 = LA(1);
			int LA2_123 = LA(2);
			
			if ((LA1_123==AND||LA1_123==AMPERSAND) && (_tokenSet_168.member(LA2_123))) {
				ref_qualifier();
				if (matchError) {break loop139;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_168.member(LA1_123)) && (_tokenSet_1.member(LA2_123))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_168, tokenNames);if (matchError) {break loop139;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification();
				if (matchError) {break loop139;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case COLON:
			case COMMA:
			case SEMICOLON:
			case POINTERTO:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case GREATERTHAN:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_namespace:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_try:
			case LITERAL_using:
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			case LITERAL_new:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_static_assert:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL___try:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_168, tokenNames);if (matchError) {break loop139;}
			}
			}
			}
			{
			int LA1_124 = LA(1);
			int LA2_124 = LA(2);
			
			if ((LA1_124==POINTERTO) && (_tokenSet_306.member(LA2_124))) {
				trailing_type();
				if (matchError) {break loop139;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_132.member(LA1_124)) && (_tokenSet_1.member(LA2_124))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_132, tokenNames);if (matchError) {break loop139;}
			}
			
			}
			declarator_param_list_AST = (AST)currentAST.root;
		break;} // loop139
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_132);
			resetMatchError();
	}
	returnAST = declarator_param_list_AST;
}

	public final void function_direct_declarator(
		boolean definition, boolean symTabCheck
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_direct_declarator_AST = null;
		String q;
		
		loop140:  while (true) {
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification();
				if (matchError) {break loop140;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LPAREN:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_59, tokenNames);if (matchError) {break loop140;}
			}
			}
			}
			{
			function_direct_declarator_2(definition, symTabCheck);
			if (matchError) {break loop140;}
			astFactory.addASTChild(currentAST, returnAST);
			}
			fun_cv_qualifier_seq();
			if (matchError) {break loop140;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			int LA1_125 = LA(1);
			int LA2_125 = LA(2);
			
			if ((LA1_125==AND||LA1_125==AMPERSAND) && (_tokenSet_166.member(LA2_125))) {
				ref_qualifier();
				if (matchError) {break loop140;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_166.member(LA1_125)) && (_tokenSet_1.member(LA2_125))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_166, tokenNames);if (matchError) {break loop140;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification();
				if (matchError) {break loop140;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case SEMICOLON:
			case POINTERTO:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_namespace:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_try:
			case LITERAL_using:
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_static_assert:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL___try:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_166, tokenNames);if (matchError) {break loop140;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case POINTERTO:
			{
				trailing_type();
				if (matchError) {break loop140;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case SEMICOLON:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_namespace:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_try:
			case LITERAL_using:
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_static_assert:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL___try:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_307, tokenNames);if (matchError) {break loop140;}
			}
			}
			}
			{
			int LA1_126 = LA(1);
			int LA2_126 = LA(2);
			
			if ((LA1_126==LITERAL_final||LA1_126==LITERAL_override) && (_tokenSet_308.member(LA2_126))) {
				virt_specifiers();
				if (matchError) {break loop140;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_308.member(LA1_126)) && (_tokenSet_1.member(LA2_126))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_308, tokenNames);if (matchError) {break loop140;}
			}
			
			}
			{
			int LA1_127 = LA(1);
			int LA2_127 = LA(2);
			
			boolean synPredMatched766 = false;
			if (((LA1_127==ASSIGNEQUAL) && (LA2_127==OCTALINT))) {
				int _m766 = mark();
				guessing++;
				guess766:  while (true) {
					{
					match(ASSIGNEQUAL);
					if (matchError) {break guess766;}
					{
					match(_tokenSet_309);
					if (matchError) {break guess766;}
					}
					}
				synPredMatched766 = true;
				break;} // guess766
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m766);
				guessing--;
			}
			if ( synPredMatched766 ) {
				AST tmp565_AST = null;
				tmp565_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp565_AST);
				consume();
				AST tmp566_AST = null;
				tmp566_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp566_AST);
				consume();
			}
			else if ((_tokenSet_308.member(LA1_127)) && (_tokenSet_1.member(LA2_127))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_308, tokenNames);if (matchError) {break loop140;}
			}
			
			}
			{
			int LA1_128 = LA(1);
			int LA2_128 = LA(2);
			
			if ((_tokenSet_21.member(LA1_128)) && (LA2_128==LPAREN||LA2_128==LSQUARE)) {
				function_attribute_specification();
				if (matchError) {break loop140;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_308.member(LA1_128)) && (_tokenSet_1.member(LA2_128))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_308, tokenNames);if (matchError) {break loop140;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			{
				asm_block();
				if (matchError) {break loop140;}
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case SEMICOLON:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_namespace:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_try:
			case LITERAL_using:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_static_assert:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL___try:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_308, tokenNames);if (matchError) {break loop140;}
			}
			}
			}
			{
			int LA1_129 = LA(1);
			int LA2_129 = LA(2);
			
			if ((_tokenSet_21.member(LA1_129)) && (LA2_129==LPAREN||LA2_129==LSQUARE)) {
				function_attribute_specification();
				if (matchError) {break loop140;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_61.member(LA1_129)) && (_tokenSet_1.member(LA2_129))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_61, tokenNames);if (matchError) {break loop140;}
			}
			
			}
			function_direct_declarator_AST = (AST)currentAST.root;
		break;} // loop140
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_61);
			resetMatchError();
	}
	returnAST = function_direct_declarator_AST;
}

	protected final void function_direct_declarator_2(
		boolean definition, boolean symTabCheck
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_direct_declarator_2_AST = null;
		String q; CPPParser.TypeQualifier tq;
		
		loop141:  while (true) {
			q=idInBalanceParensHard();
			if (matchError) {break loop141;}
			astFactory.addASTChild(currentAST, returnAST);
			declaratorID(q, qiFun);
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification();
				if (matchError) {break loop141;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_283, tokenNames);if (matchError) {break loop141;}
			}
			}
			}
			function_parameters(symTabCheck);
			if (matchError) {break loop141;}
			astFactory.addASTChild(currentAST, returnAST);
			function_direct_declarator_2_AST = (AST)currentAST.root;
		break;} // loop141
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_166);
			resetMatchError();
	}
	returnAST = function_direct_declarator_2_AST;
}

	public final /*TypeSpecifier*/int  trailing_type_specifier() {
		/*TypeSpecifier*/int ts = tsInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST trailing_type_specifier_AST = null;
		String id;
		
		loop142:  while (true) {
			switch ( LA(1)) {
			case SCOPE:
			case IDENT:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___complex__:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			{
				ts=simple_type_specifier(false);
				if (matchError) {break loop142;}
				astFactory.addASTChild(currentAST, returnAST);
				trailing_type_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_enum:
			case LITERAL_typename:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			{
				{
				switch ( LA(1)) {
				case LITERAL_class:
				{
					AST tmp567_AST = null;
					tmp567_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp567_AST);
					consume();
					break;
				}
				case LITERAL_struct:
				{
					AST tmp568_AST = null;
					tmp568_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp568_AST);
					consume();
					break;
				}
				case LITERAL_union:
				{
					AST tmp569_AST = null;
					tmp569_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp569_AST);
					consume();
					break;
				}
				case LITERAL_enum:
				{
					AST tmp570_AST = null;
					tmp570_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp570_AST);
					consume();
					break;
				}
				case LITERAL_typename:
				{
					AST tmp571_AST = null;
					tmp571_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp571_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_310, tokenNames);if (matchError) {break loop142;}
				}
				}
				}
				id=qualified_id();
				if (matchError) {break loop142;}
				astFactory.addASTChild(currentAST, returnAST);
				trailing_type_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_auto:
			{
				AST tmp572_AST = null;
				tmp572_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp572_AST);
				consume();
				trailing_type_specifier_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_311, tokenNames);if (matchError) {break loop142;}
			}
			}
		break;} // loop142
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_132);
			resetMatchError();
	}
	returnAST = trailing_type_specifier_AST;
	return ts;
}

	public final void is_abstract_declarator() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST is_abstract_declarator_AST = null;
		
		loop143:  while (true) {
			switch ( LA(1)) {
			case STAR:
			case AND:
			case AMPERSAND:
			case SCOPE:
			case IDENT:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			case LITERAL___clrcall:
			{
				ptr_operator();
				if (matchError) {break loop143;}
				astFactory.addASTChild(currentAST, returnAST);
				is_abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			case LPAREN:
			{
				AST tmp573_AST = null;
				tmp573_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp573_AST);
				consume();
				is_abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			case LSQUARE:
			{
				AST tmp574_AST = null;
				tmp574_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp574_AST);
				consume();
				is_abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			case ELLIPSIS:
			{
				AST tmp575_AST = null;
				tmp575_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp575_AST);
				consume();
				is_abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_304, tokenNames);if (matchError) {break loop143;}
			}
			}
		break;} // loop143
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = is_abstract_declarator_AST;
}

/**
 * This rule could be used when nothing goes after it (i.e. parent rule is not anchored).
 * NOTE: it doesn't handle top-level empty alternative
 */
	public final void greedy_abstract_declarator() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST greedy_abstract_declarator_AST = null;
		
		loop144:  while (true) {
			switch ( LA(1)) {
			case STAR:
			case AND:
			case AMPERSAND:
			case SCOPE:
			case IDENT:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			case LITERAL___clrcall:
			{
				ptr_operator();
				if (matchError) {break loop144;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case LITERAL_restrict:
				case LITERAL___restrict:
				case LITERAL___restrict__:
				{
					literal_restrict();
					if (matchError) {break loop144;}
					break;
				}
				case EOF:
				case ELLIPSIS:
				case ASSIGNEQUAL:
				case COLON:
				case COMMA:
				case SEMICOLON:
				case POINTERTO:
				case LPAREN:
				case RPAREN:
				case LSQUARE:
				case LCURLY:
				case GREATERTHAN:
				case STAR:
				case AND:
				case AMPERSAND:
				case TILDE:
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_namespace:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL_try:
				case LITERAL_using:
				case LITERAL_asm:
				case LITERAL__asm:
				case LITERAL___asm__:
				case LITERAL___asm:
				case LITERAL_new:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_static_assert:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL___try:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_312, tokenNames);if (matchError) {break loop144;}
				}
				}
				}
				{
				int LA1_130 = LA(1);
				int LA2_130 = LA(2);
				
				if ((_tokenSet_304.member(LA1_130)) && (_tokenSet_305.member(LA2_130))) {
					greedy_abstract_declarator();
					if (matchError) {break loop144;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((_tokenSet_132.member(LA1_130)) && (_tokenSet_1.member(LA2_130))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_132, tokenNames);if (matchError) {break loop144;}
				}
				
				}
				greedy_abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			case LPAREN:
			case LSQUARE:
			{
				{
				int _cnt879=0;
				_loop879:
				do {
					int LA1_131 = LA(1);
					int LA2_131 = LA(2);
					
					if ((LA1_131==LPAREN||LA1_131==LSQUARE) && (_tokenSet_292.member(LA2_131))) {
						abstract_declarator_suffix();
						if (matchError) {break loop144;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						if ( _cnt879>=1 ) { break _loop879; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_301, tokenNames);if (matchError) {break loop144;}}
					}
					
					_cnt879++;
				} while (true);
				}
				greedy_abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			case ELLIPSIS:
			{
				AST tmp576_AST = null;
				tmp576_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp576_AST);
				consume();
				greedy_abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_304, tokenNames);if (matchError) {break loop144;}
			}
			}
		break;} // loop144
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_132);
			resetMatchError();
	}
	returnAST = greedy_abstract_declarator_AST;
}

	public final void function_parameters(
		boolean symTabCheck
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_parameters_AST = null;
		
		loop145:  while (true) {
			AST tmp577_AST = null;
			tmp577_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp577_AST);
			match(LPAREN);
			if (matchError) {break loop145;}
			{
			int LA1_132 = LA(1);
			int LA2_132 = LA(2);
			
			boolean synPredMatched782 = false;
			if (((LA1_132==LPAREN) && (_tokenSet_165.member(LA2_132)))) {
				int _m782 = mark();
				guessing++;
				guess782:  while (true) {
					{
					match(LPAREN);
					if (matchError) {break guess782;}
					}
				synPredMatched782 = true;
				break;} // guess782
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m782);
				guessing--;
			}
			if ( synPredMatched782 ) {
				function_parameters(symTabCheck);
				if (matchError) {break loop145;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_165.member(LA1_132)) && (_tokenSet_313.member(LA2_132))) {
				//functionParameterList();
				if (K_and_R == false) {
				in_parameter_list = true;
				}
				
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				case LPAREN:
				case LSQUARE:
				case STAR:
				case AND:
				case AMPERSAND:
				case TILDE:
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					parameter_list(symTabCheck);
					if (matchError) {break loop145;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case RPAREN:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_165, tokenNames);if (matchError) {break loop145;}
				}
				}
				}
				if (K_and_R == false) {
				in_parameter_list = false;
				} else {
				in_parameter_list = true;
				}
				
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_165, tokenNames);if (matchError) {break loop145;}
			}
			
			}
			AST tmp578_AST = null;
			tmp578_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp578_AST);
			match(RPAREN);
			if (matchError) {break loop145;}
			function_parameters_AST = (AST)currentAST.root;
		break;} // loop145
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_166);
			resetMatchError();
	}
	returnAST = function_parameters_AST;
}

	public final void ctor_head() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ctor_head_AST = null;
		boolean friend = false; boolean ctorName = false;
		
		loop146:  while (true) {
			friend=ctor_decl_spec();
			if (matchError) {break loop146;}
			astFactory.addASTChild(currentAST, returnAST);
			ctorName=ctor_declarator(true);
			if (matchError) {break loop146;}
			astFactory.addASTChild(currentAST, returnAST);
			ctor_head_AST = (AST)currentAST.root;
		break;} // loop146
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_67);
			resetMatchError();
	}
	returnAST = ctor_head_AST;
}

	public final boolean  ctor_direct_declarator(
		boolean definition
	) {
		boolean isCtor = false;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ctor_direct_declarator_AST = null;
		String q;
		
		loop147:  while (true) {
			isCtor = qualifiedItemIsOneOf(qiCtor);
			q=qualified_ctor_id();
			if (matchError) {break loop147;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case LESSTHAN:
			{
				AST tmp579_AST = null;
				tmp579_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp579_AST);
				consume();
				template_argument_list();
				if (matchError) {break loop147;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp580_AST = null;
				tmp580_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp580_AST);
				match(GREATERTHAN);
				if (matchError) {break loop147;}
				break;
			}
			case LPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_267, tokenNames);if (matchError) {break loop147;}
			}
			}
			}
			AST tmp581_AST = null;
			tmp581_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp581_AST);
			match(LPAREN);
			if (matchError) {break loop147;}
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			case LPAREN:
			case LSQUARE:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				parameter_list(false);
				if (matchError) {break loop147;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_165, tokenNames);if (matchError) {break loop147;}
			}
			}
			}
			AST tmp582_AST = null;
			tmp582_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp582_AST);
			match(RPAREN);
			if (matchError) {break loop147;}
			{
			int LA1_133 = LA(1);
			int LA2_133 = LA(2);
			
			if ((_tokenSet_314.member(LA1_133)) && (_tokenSet_1.member(LA2_133))) {
				cv_qualifier_seq();
				if (matchError) {break loop147;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_315.member(LA1_133)) && (_tokenSet_1.member(LA2_133))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_314, tokenNames);if (matchError) {break loop147;}
			}
			
			}
			{
			switch ( LA(1)) {
			case AND:
			case AMPERSAND:
			{
				ref_qualifier();
				if (matchError) {break loop147;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case COLON:
			case SEMICOLON:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case LITERAL_throw:
			case LITERAL_try:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_noexcept:
			case LITERAL___try:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_315, tokenNames);if (matchError) {break loop147;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification();
				if (matchError) {break loop147;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case COLON:
			case SEMICOLON:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case LITERAL_try:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL___try:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_316, tokenNames);if (matchError) {break loop147;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_final:
			case LITERAL_override:
			{
				virt_specifiers();
				if (matchError) {break loop147;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case COLON:
			case SEMICOLON:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case LITERAL_try:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL___try:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_317, tokenNames);if (matchError) {break loop147;}
			}
			}
			}
			{
			int LA1_134 = LA(1);
			int LA2_134 = LA(2);
			
			boolean synPredMatched806 = false;
			if (((LA1_134==ASSIGNEQUAL) && (LA2_134==OCTALINT))) {
				int _m806 = mark();
				guessing++;
				guess806:  while (true) {
					{
					match(ASSIGNEQUAL);
					if (matchError) {break guess806;}
					match(OCTALINT);
					if (matchError) {break guess806;}
					}
				synPredMatched806 = true;
				break;} // guess806
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m806);
				guessing--;
			}
			if ( synPredMatched806 ) {
				AST tmp583_AST = null;
				tmp583_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp583_AST);
				consume();
				AST tmp584_AST = null;
				tmp584_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp584_AST);
				consume();
			}
			else if ((_tokenSet_318.member(LA1_134)) && (_tokenSet_1.member(LA2_134))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_318, tokenNames);if (matchError) {break loop147;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification();
				if (matchError) {break loop147;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case COLON:
			case SEMICOLON:
			case RPAREN:
			case LCURLY:
			case LITERAL_try:
			case LITERAL___try:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_318, tokenNames);if (matchError) {break loop147;}
			}
			}
			}
			ctor_direct_declarator_AST = (AST)currentAST.root;
		break;} // loop147
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_66);
			resetMatchError();
	}
	returnAST = ctor_direct_declarator_AST;
	return isCtor;
}

	public final String  qualified_ctor_id() {
		String q = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qualified_ctor_id_AST = null;
		
		loop148:  while (true) {
			switch ( LA(1)) {
			case LPAREN:
			{
				AST tmp585_AST = null;
				tmp585_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp585_AST);
				consume();
				q=qualified_ctor_id();
				if (matchError) {break loop148;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp586_AST = null;
				tmp586_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp586_AST);
				match(RPAREN);
				if (matchError) {break loop148;}
				qualified_ctor_id_AST = (AST)currentAST.root;
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				q=qualified_ctor_direct_id();
				if (matchError) {break loop148;}
				astFactory.addASTChild(currentAST, returnAST);
				qualified_ctor_id_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_33, tokenNames);if (matchError) {break loop148;}
			}
			}
		break;} // loop148
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_319);
			resetMatchError();
	}
	returnAST = qualified_ctor_id_AST;
	return q;
}

	public final String  qualified_ctor_direct_id() {
		String q = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qualified_ctor_direct_id_AST = null;
		
			    String str;
			    StringBuilder  qitem = new StringBuilder();
			
		
		loop149:  while (true) {
			str=scope_override();
			if (matchError) {break loop149;}
			astFactory.addASTChild(currentAST, returnAST);
			qitem.append(str);
			str=literal_ident();
			if (matchError) {break loop149;}
			astFactory.addASTChild(currentAST, returnAST);
			qualified_ctor_direct_id_AST = (AST)currentAST.root;
			qitem.append(str);        
				 q = qitem.toString();
				qualified_ctor_direct_id_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_QUALIFIED_ID,q, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(qualified_ctor_direct_id_AST));
			currentAST.root = qualified_ctor_direct_id_AST;
			currentAST.child = qualified_ctor_direct_id_AST!=null &&qualified_ctor_direct_id_AST.getFirstChild()!=null ?
				qualified_ctor_direct_id_AST.getFirstChild() : qualified_ctor_direct_id_AST;
			currentAST.advanceChildToEnd();
			qualified_ctor_direct_id_AST = (AST)currentAST.root;
		break;} // loop149
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((qualified_ctor_direct_id_AST == null) && (currentAST.root != null)) {
			qualified_ctor_direct_id_AST = (AST)currentAST.root;
			qitem.append(str);        
				 q = qitem.toString();
				qualified_ctor_direct_id_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_QUALIFIED_ID,q, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(qualified_ctor_direct_id_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_319);
			resetMatchError();
	}
	returnAST = qualified_ctor_direct_id_AST;
	return q;
}

	public final void ctor_initializer() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ctor_initializer_AST = null;
		
		loop150:  while (true) {
			match(COLON);
			if (matchError) {break loop150;}
			superclass_init();
			if (matchError) {break loop150;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			{
				AST tmp588_AST = null;
				tmp588_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp588_AST);
				consume();
				break;
			}
			case COMMA:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_320, tokenNames);if (matchError) {break loop150;}
			}
			}
			}
			{
			_loop817:
			do {
				if ((LA(1)==COMMA)) {
					consume();
					superclass_init();
					if (matchError) {break loop150;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					switch ( LA(1)) {
					case ELLIPSIS:
					{
						AST tmp590_AST = null;
						tmp590_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp590_AST);
						consume();
						break;
					}
					case COMMA:
					case LCURLY:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_320, tokenNames);if (matchError) {break loop150;}
					}
					}
					}
				}
				else {
					break _loop817;
				}
				
			} while (true);
			}
			ctor_initializer_AST = (AST)currentAST.root;
			ctor_initializer_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CTOR_INITIALIZER_LIST,"CSM_CTOR_INITIALIZER_LIST", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(ctor_initializer_AST));
			currentAST.root = ctor_initializer_AST;
			currentAST.child = ctor_initializer_AST!=null &&ctor_initializer_AST.getFirstChild()!=null ?
				ctor_initializer_AST.getFirstChild() : ctor_initializer_AST;
			currentAST.advanceChildToEnd();
			ctor_initializer_AST = (AST)currentAST.root;
		break;} // loop150
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((ctor_initializer_AST == null) && (currentAST.root != null)) {
			ctor_initializer_AST = (AST)currentAST.root;
			ctor_initializer_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CTOR_INITIALIZER_LIST,"CSM_CTOR_INITIALIZER_LIST", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(ctor_initializer_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_145);
			resetMatchError();
	}
	returnAST = ctor_initializer_AST;
}

	public final void superclass_init() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST superclass_init_AST = null;
		String q;
		
		loop151:  while (true) {
			q=qualified_id();
			if (matchError) {break loop151;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case LPAREN:
			{
				AST tmp591_AST = null;
				tmp591_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp591_AST);
				consume();
				{
				if ((_tokenSet_284.member(LA(1)))) {
					cpp11_expression_list();
					if (matchError) {break loop151;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA(1)==RPAREN)) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_285, tokenNames);if (matchError) {break loop151;}
				}
				
				}
				AST tmp592_AST = null;
				tmp592_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp592_AST);
				match(RPAREN);
				if (matchError) {break loop151;}
				break;
			}
			case LCURLY:
			{
				array_initializer();
				if (matchError) {break loop151;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_321, tokenNames);if (matchError) {break loop151;}
			}
			}
			}
			superclass_init_AST = (AST)currentAST.root;
			superclass_init_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CTOR_INITIALIZER,"CSM_CTOR_INITIALIZER", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(superclass_init_AST));
			currentAST.root = superclass_init_AST;
			currentAST.child = superclass_init_AST!=null &&superclass_init_AST.getFirstChild()!=null ?
				superclass_init_AST.getFirstChild() : superclass_init_AST;
			currentAST.advanceChildToEnd();
			superclass_init_AST = (AST)currentAST.root;
		break;} // loop151
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((superclass_init_AST == null) && (currentAST.root != null)) {
			superclass_init_AST = (AST)currentAST.root;
			superclass_init_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CTOR_INITIALIZER,"CSM_CTOR_INITIALIZER", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(superclass_init_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_320);
			resetMatchError();
	}
	returnAST = superclass_init_AST;
}

	public final void dtor_direct_declarator(
		boolean definition
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dtor_direct_declarator_AST = null;
		String q;
		
		loop152:  while (true) {
			q=qualified_dtor_id();
			if (matchError) {break loop152;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case LESSTHAN:
			{
				AST tmp593_AST = null;
				tmp593_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp593_AST);
				consume();
				template_argument_list();
				if (matchError) {break loop152;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp594_AST = null;
				tmp594_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp594_AST);
				match(GREATERTHAN);
				if (matchError) {break loop152;}
				break;
			}
			case LPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_267, tokenNames);if (matchError) {break loop152;}
			}
			}
			}
			AST tmp595_AST = null;
			tmp595_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp595_AST);
			match(LPAREN);
			if (matchError) {break loop152;}
			{
			switch ( LA(1)) {
			case LITERAL_void:
			{
				AST tmp596_AST = null;
				tmp596_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp596_AST);
				consume();
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_322, tokenNames);if (matchError) {break loop152;}
			}
			}
			}
			AST tmp597_AST = null;
			tmp597_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp597_AST);
			match(RPAREN);
			if (matchError) {break loop152;}
			{
			int LA1_135 = LA(1);
			int LA2_135 = LA(2);
			
			if ((_tokenSet_323.member(LA1_135)) && (_tokenSet_1.member(LA2_135))) {
				cv_qualifier_seq();
				if (matchError) {break loop152;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_324.member(LA1_135)) && (_tokenSet_1.member(LA2_135))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_323, tokenNames);if (matchError) {break loop152;}
			}
			
			}
			{
			switch ( LA(1)) {
			case AND:
			case AMPERSAND:
			{
				ref_qualifier();
				if (matchError) {break loop152;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case SEMICOLON:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case LITERAL_throw:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_noexcept:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_324, tokenNames);if (matchError) {break loop152;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification();
				if (matchError) {break loop152;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case SEMICOLON:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_325, tokenNames);if (matchError) {break loop152;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_final:
			case LITERAL_override:
			{
				virt_specifiers();
				if (matchError) {break loop152;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case SEMICOLON:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_326, tokenNames);if (matchError) {break loop152;}
			}
			}
			}
			{
			int LA1_136 = LA(1);
			int LA2_136 = LA(2);
			
			boolean synPredMatched839 = false;
			if (((LA1_136==ASSIGNEQUAL) && (LA2_136==OCTALINT))) {
				int _m839 = mark();
				guessing++;
				guess839:  while (true) {
					{
					match(ASSIGNEQUAL);
					if (matchError) {break guess839;}
					match(OCTALINT);
					if (matchError) {break guess839;}
					}
				synPredMatched839 = true;
				break;} // guess839
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m839);
				guessing--;
			}
			if ( synPredMatched839 ) {
				AST tmp598_AST = null;
				tmp598_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp598_AST);
				consume();
				AST tmp599_AST = null;
				tmp599_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp599_AST);
				consume();
			}
			else if ((_tokenSet_327.member(LA1_136)) && (_tokenSet_1.member(LA2_136))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_327, tokenNames);if (matchError) {break loop152;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification();
				if (matchError) {break loop152;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case SEMICOLON:
			case RPAREN:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_327, tokenNames);if (matchError) {break loop152;}
			}
			}
			}
			dtor_direct_declarator_AST = (AST)currentAST.root;
		break;} // loop152
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_68);
			resetMatchError();
	}
	returnAST = dtor_direct_declarator_AST;
}

	public final String  qualified_dtor_id() {
		String q = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qualified_dtor_id_AST = null;
		
		loop153:  while (true) {
			switch ( LA(1)) {
			case LPAREN:
			{
				AST tmp600_AST = null;
				tmp600_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp600_AST);
				consume();
				q=qualified_dtor_id();
				if (matchError) {break loop153;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp601_AST = null;
				tmp601_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp601_AST);
				match(RPAREN);
				if (matchError) {break loop153;}
				qualified_dtor_id_AST = (AST)currentAST.root;
				break;
			}
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				q=qualified_dtor_direct_id();
				if (matchError) {break loop153;}
				astFactory.addASTChild(currentAST, returnAST);
				qualified_dtor_id_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_35, tokenNames);if (matchError) {break loop153;}
			}
			}
		break;} // loop153
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_319);
			resetMatchError();
	}
	returnAST = qualified_dtor_id_AST;
	return q;
}

	public final String  qualified_dtor_direct_id() {
		String q = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qualified_dtor_direct_id_AST = null;
		
			    String str;
			    StringBuilder  qitem = new StringBuilder();
			
		
		loop154:  while (true) {
			str=scope_override();
			if (matchError) {break loop154;}
			astFactory.addASTChild(currentAST, returnAST);
			qitem.append(str);
			AST tmp602_AST = null;
			tmp602_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp602_AST);
			match(TILDE);
			if (matchError) {break loop154;}
			str=literal_ident();
			if (matchError) {break loop154;}
			astFactory.addASTChild(currentAST, returnAST);
			qualified_dtor_direct_id_AST = (AST)currentAST.root;
			
			qitem.append("~");
			qitem.append(str);
			q = qitem.toString();
			qualified_dtor_direct_id_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_QUALIFIED_ID,q, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(qualified_dtor_direct_id_AST));
			
			currentAST.root = qualified_dtor_direct_id_AST;
			currentAST.child = qualified_dtor_direct_id_AST!=null &&qualified_dtor_direct_id_AST.getFirstChild()!=null ?
				qualified_dtor_direct_id_AST.getFirstChild() : qualified_dtor_direct_id_AST;
			currentAST.advanceChildToEnd();
			qualified_dtor_direct_id_AST = (AST)currentAST.root;
		break;} // loop154
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((qualified_dtor_direct_id_AST == null) && (currentAST.root != null)) {
			qualified_dtor_direct_id_AST = (AST)currentAST.root;
			
			qitem.append("~");
			qitem.append(str);
			q = qitem.toString();
			qualified_dtor_direct_id_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_QUALIFIED_ID,q, new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST())).add(qualified_dtor_direct_id_AST));
			
			}
			reportError(matchException);
			recover(matchException,_tokenSet_319);
			resetMatchError();
	}
	returnAST = qualified_dtor_direct_id_AST;
	return q;
}

	public final void parameter_declaration_list(
		boolean symTabCheck
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST parameter_declaration_list_AST = null;
		
		loop155:  while (true) {
			{
			if (!(!symTabCheck || action.isType(LT(1).getText())))
			{matchError=true;
			matchException = new SemanticException("!symTabCheck || action.isType(LT(1).getText())");
			if (matchError) {break loop155;}}
			parameter_declaration(false);
			if (matchError) {break loop155;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			_loop849:
			do {
				if ((LA(1)==COMMA)) {
					consume();
					parameter_declaration(false);
					if (matchError) {break loop155;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop849;
				}
				
			} while (true);
			}
			}
			parameter_declaration_list_AST = (AST)currentAST.root;
		break;} // loop155
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_271);
			resetMatchError();
	}
	returnAST = parameter_declaration_list_AST;
}

	public final void parameter_declaration(
		boolean inTemplateParams
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST parameter_declaration_AST = null;
		int oldTs = _ts;
		
		loop156:  while (true) {
			{
			if (!(beginParameterDeclaration()))
			{matchError=true;
			matchException = new SemanticException("beginParameterDeclaration()");
			if (matchError) {break loop156;}}
			}
			{
			int LA1_137 = LA(1);
			int LA2_137 = LA(2);
			
			if (((_tokenSet_22.member(LA1_137)) && (_tokenSet_329.member(LA2_137)))&&(!((LA(1)==SCOPE) && (LA(2)==STAR||LA(2)==LITERAL_OPERATOR)) &&
			    (!(LA(1)==SCOPE||LA(1)==IDENT||LA(1)==LITERAL_final) ||
			    qualifiedItemIsOneOf(qiType|qiCtor) ))) {
				declaration_specifiers(true, false);
				if (matchError) {break loop156;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				int LA1_138 = LA(1);
				int LA2_138 = LA(2);
				
				boolean synPredMatched855 = false;
				if (((_tokenSet_109.member(LA1_138)) && (_tokenSet_330.member(LA2_138)))) {
					int _m855 = mark();
					guessing++;
					guess855:  while (true) {
						{
						declarator_g(declFunctionParam, 0);
						if (matchError) {break guess855;}
						}
					synPredMatched855 = true;
					break;} // guess855
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m855);
					guessing--;
				}
				if ( synPredMatched855 ) {
					declarator(declFunctionParam, 0);
					if (matchError) {break loop156;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((_tokenSet_331.member(LA1_138)) && (_tokenSet_332.member(LA2_138))) {
					abstract_declarator();
					if (matchError) {break loop156;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_333, tokenNames);if (matchError) {break loop156;}
				}
				
				}
			}
			else {
				boolean synPredMatched857 = false;
				if (((_tokenSet_109.member(LA1_137)) && (_tokenSet_330.member(LA2_137)))) {
					int _m857 = mark();
					guessing++;
					guess857:  while (true) {
						{
						declarator_g(declOther, 0);
						if (matchError) {break guess857;}
						}
					synPredMatched857 = true;
					break;} // guess857
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m857);
					guessing--;
				}
				if ( synPredMatched857 ) {
					declarator(declOther, 0);
					if (matchError) {break loop156;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA1_137==ELLIPSIS) && (_tokenSet_334.member(LA2_137))) {
					AST tmp604_AST = null;
					tmp604_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp604_AST);
					consume();
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_328, tokenNames);if (matchError) {break loop156;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case ASSIGNEQUAL:
				{
					AST tmp605_AST = null;
					tmp605_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp605_AST);
					consume();
					{
					int LA1_139 = LA(1);
					int LA2_139 = LA(2);
					
					if (((_tokenSet_169.member(LA1_139)) && (_tokenSet_190.member(LA2_139)))&&(inTemplateParams)) {
						template_param_expression();
						if (matchError) {break loop156;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((_tokenSet_284.member(LA1_139)) && (_tokenSet_190.member(LA2_139))) {
						cpp11_assignment_expression();
						if (matchError) {break loop156;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_284, tokenNames);if (matchError) {break loop156;}
					}
					
					}
					break;
				}
				case ELLIPSIS:
				case COMMA:
				case RPAREN:
				case GREATERTHAN:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_334, tokenNames);if (matchError) {break loop156;}
				}
				}
				}
				{
				if (!(endParameterDeclaration(oldTs)))
				{matchError=true;
				matchException = new SemanticException("endParameterDeclaration(oldTs)");
				if (matchError) {break loop156;}}
				}
				parameter_declaration_AST = (AST)currentAST.root;
				parameter_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_PARAMETER_DECLARATION,"CSM_PARAMETER_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(parameter_declaration_AST));
				currentAST.root = parameter_declaration_AST;
				currentAST.child = parameter_declaration_AST!=null &&parameter_declaration_AST.getFirstChild()!=null ?
					parameter_declaration_AST.getFirstChild() : parameter_declaration_AST;
				currentAST.advanceChildToEnd();
				parameter_declaration_AST = (AST)currentAST.root;
			break;} // loop156
			if (matchError) {
				// when recover we'd like to perform any "build AST" actions
				if ((parameter_declaration_AST == null) && (currentAST.root != null)) {
				parameter_declaration_AST = (AST)currentAST.root;
				parameter_declaration_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_PARAMETER_DECLARATION,"CSM_PARAMETER_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(parameter_declaration_AST));
				}
				reportError(matchException);
				recover(matchException,_tokenSet_335);
				resetMatchError();
		}
		returnAST = parameter_declaration_AST;
	}
	
	public final void abstract_declarator() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST abstract_declarator_AST = null;
		
		loop157:  while (true) {
			int LA1_140 = LA(1);
			int LA2_140 = LA(2);
			
			switch ( LA1_140) {
			case STAR:
			case AND:
			case AMPERSAND:
			case SCOPE:
			case IDENT:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			case LITERAL___clrcall:
			{
				ptr_operator();
				if (matchError) {break loop157;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case LITERAL_restrict:
				case LITERAL___restrict:
				case LITERAL___restrict__:
				{
					literal_restrict();
					if (matchError) {break loop157;}
					break;
				}
				case ELLIPSIS:
				case ASSIGNEQUAL:
				case COMMA:
				case SEMICOLON:
				case POINTERTO:
				case LPAREN:
				case RPAREN:
				case LSQUARE:
				case GREATERTHAN:
				case STAR:
				case AND:
				case AMPERSAND:
				case SCOPE:
				case IDENT:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_decltype:
				case LITERAL___decltype:
				case LITERAL___clrcall:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_336, tokenNames);if (matchError) {break loop157;}
				}
				}
				}
				abstract_declarator();
				if (matchError) {break loop157;}
				astFactory.addASTChild(currentAST, returnAST);
				abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			case LPAREN:
			case LSQUARE:
			{
				{
				int _cnt872=0;
				_loop872:
				do {
					if ((LA(1)==LPAREN||LA(1)==LSQUARE)) {
						abstract_declarator_suffix();
						if (matchError) {break loop157;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						if ( _cnt872>=1 ) { break _loop872; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_301, tokenNames);if (matchError) {break loop157;}}
					}
					
					_cnt872++;
				} while (true);
				}
				abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			default:
				boolean synPredMatched874 = false;
				if (((LA1_140==ELLIPSIS) && (_tokenSet_337.member(LA2_140)))) {
					int _m874 = mark();
					guessing++;
					guess874:  while (true) {
						{
						match(ELLIPSIS);
						if (matchError) {break guess874;}
						}
					synPredMatched874 = true;
					break;} // guess874
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m874);
					guessing--;
				}
				if ( synPredMatched874 ) {
					AST tmp606_AST = null;
					tmp606_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp606_AST);
					consume();
					abstract_declarator_AST = (AST)currentAST.root;
				}
				else if ((_tokenSet_337.member(LA1_140)) && (_tokenSet_1.member(LA2_140))) {
					abstract_declarator_AST = (AST)currentAST.root;
				}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_338, tokenNames);if (matchError) {break loop157;}
			}
			}
		break;} // loop157
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_337);
			resetMatchError();
	}
	returnAST = abstract_declarator_AST;
}

	public final void template_param_expression() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_param_expression_AST = null;
		
		loop158:  while (true) {
			lazy_expression(true, false, 1);
			if (matchError) {break loop158;}
			astFactory.addASTChild(currentAST, returnAST);
			template_param_expression_AST = (AST)currentAST.root;
			template_param_expression_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_EXPRESSION,"CSM_EXPRESSION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_param_expression_AST));
			currentAST.root = template_param_expression_AST;
			currentAST.child = template_param_expression_AST!=null &&template_param_expression_AST.getFirstChild()!=null ?
				template_param_expression_AST.getFirstChild() : template_param_expression_AST;
			currentAST.advanceChildToEnd();
			template_param_expression_AST = (AST)currentAST.root;
		break;} // loop158
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((template_param_expression_AST == null) && (currentAST.root != null)) {
			template_param_expression_AST = (AST)currentAST.root;
			template_param_expression_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_EXPRESSION,"CSM_EXPRESSION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_param_expression_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_339);
			resetMatchError();
	}
	returnAST = template_param_expression_AST;
}

	public final void cpp11_assignment_expression() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cpp11_assignment_expression_AST = null;
		
		loop159:  while (true) {
			if ((_tokenSet_189.member(LA(1)))) {
				assignment_expression();
				if (matchError) {break loop159;}
				astFactory.addASTChild(currentAST, returnAST);
				cpp11_assignment_expression_AST = (AST)currentAST.root;
			}
			else if ((LA(1)==LCURLY)) {
				array_initializer();
				if (matchError) {break loop159;}
				astFactory.addASTChild(currentAST, returnAST);
				cpp11_assignment_expression_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_284, tokenNames);if (matchError) {break loop159;}
			}
			
		break;} // loop159
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_335);
			resetMatchError();
	}
	returnAST = cpp11_assignment_expression_AST;
}

	public final void simple_parameter_declaration() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST simple_parameter_declaration_AST = null;
		String s;
		
		loop160:  while (true) {
			declaration_specifiers(false, true);
			if (matchError) {break loop160;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			_loop866:
			do {
				if ((_tokenSet_0.member(LA(1)))) {
					s=literal_ident();
					if (matchError) {break loop160;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop866;
				}
				
			} while (true);
			}
			simple_parameter_declaration_AST = (AST)currentAST.root;
		break;} // loop160
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_340);
			resetMatchError();
	}
	returnAST = simple_parameter_declaration_AST;
}

	public final void abstract_declarator_suffix() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST abstract_declarator_suffix_AST = null;
		
		loop161:  while (true) {
			int LA1_141 = LA(1);
			int LA2_141 = LA(2);
			
			if ((LA1_141==LSQUARE)) {
				AST tmp607_AST = null;
				tmp607_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp607_AST);
				consume();
				{
				if ((_tokenSet_169.member(LA(1)))) {
					constant_expression();
					if (matchError) {break loop161;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA(1)==RSQUARE)) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_289, tokenNames);if (matchError) {break loop161;}
				}
				
				}
				AST tmp608_AST = null;
				tmp608_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp608_AST);
				match(RSQUARE);
				if (matchError) {break loop161;}
				declaratorArray();
				abstract_declarator_suffix_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched885 = false;
				if (((LA1_141==LPAREN) && (_tokenSet_165.member(LA2_141)))) {
					int _m885 = mark();
					guessing++;
					guess885:  while (true) {
						{
						match(LPAREN);
						if (matchError) {break guess885;}
						match(RPAREN);
						if (matchError) {break guess885;}
						}
					synPredMatched885 = true;
					break;} // guess885
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m885);
					guessing--;
				}
				if ( synPredMatched885 ) {
					declarator_param_list();
					if (matchError) {break loop161;}
					astFactory.addASTChild(currentAST, returnAST);
					abstract_declarator_suffix_AST = (AST)currentAST.root;
				}
				else {
					boolean synPredMatched887 = false;
					if (((LA1_141==LPAREN) && (_tokenSet_341.member(LA2_141)))) {
						int _m887 = mark();
						guessing++;
						guess887:  while (true) {
							{
							match(LPAREN);
							if (matchError) {break guess887;}
							abstract_declarator_g();
							if (matchError) {break guess887;}
							match(RPAREN);
							if (matchError) {break guess887;}
							}
						synPredMatched887 = true;
						break;} // guess887
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m887);
						guessing--;
					}
					if ( synPredMatched887 ) {
						AST tmp609_AST = null;
						tmp609_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp609_AST);
						consume();
						abstract_declarator();
						if (matchError) {break loop161;}
						astFactory.addASTChild(currentAST, returnAST);
						AST tmp610_AST = null;
						tmp610_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp610_AST);
						match(RPAREN);
						if (matchError) {break loop161;}
						abstract_declarator_suffix_AST = (AST)currentAST.root;
					}
					else if ((LA1_141==LPAREN) && (_tokenSet_165.member(LA2_141))) {
						declarator_param_list();
						if (matchError) {break loop161;}
						astFactory.addASTChild(currentAST, returnAST);
						abstract_declarator_suffix_AST = (AST)currentAST.root;
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_301, tokenNames);if (matchError) {break loop161;}
					}
					}}
				break;} // loop161
				if (matchError) {
					reportError(matchException);
					recover(matchException,_tokenSet_132);
					resetMatchError();
			}
			returnAST = abstract_declarator_suffix_AST;
		}
		
	protected final void exception_type_id() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST exception_type_id_AST = null;
		/*TypeSpecifier*/int ts; String so;
		
		loop162:  while (true) {
			parameter_declaration(false);
			if (matchError) {break loop162;}
			astFactory.addASTChild(currentAST, returnAST);
			exception_type_id_AST = (AST)currentAST.root;
		break;} // loop162
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_342);
			resetMatchError();
	}
	returnAST = exception_type_id_AST;
}

	protected final void attribute_specification_list() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST attribute_specification_list_AST = null;
		
		loop163:  while (true) {
			attribute_specification();
			if (matchError) {break loop163;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			int LA1_142 = LA(1);
			int LA2_142 = LA(2);
			
			if ((_tokenSet_21.member(LA1_142)) && (LA2_142==LPAREN||LA2_142==LSQUARE)) {
				attribute_specification_list();
				if (matchError) {break loop163;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_92.member(LA1_142)) && (_tokenSet_1.member(LA2_142))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_92, tokenNames);if (matchError) {break loop163;}
			}
			
			}
			attribute_specification_list_AST = (AST)currentAST.root;
		break;} // loop163
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_92);
			resetMatchError();
	}
	returnAST = attribute_specification_list_AST;
}

	protected final void declspec() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declspec_AST = null;
		
		loop164:  while (true) {
			literal_declspec();
			if (matchError) {break loop164;}
			balanceParens();
			if (matchError) {break loop164;}
		break;} // loop164
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_75);
			resetMatchError();
	}
	returnAST = declspec_AST;
}

	protected final void literal_declspec() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_declspec_AST = null;
		
		loop165:  while (true) {
			switch ( LA(1)) {
			case LITERAL__declspec:
			{
				AST tmp611_AST = null;
				tmp611_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp611_AST);
				consume();
				literal_declspec_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___declspec:
			{
				AST tmp612_AST = null;
				tmp612_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp612_AST);
				consume();
				literal_declspec_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_343, tokenNames);if (matchError) {break loop165;}
			}
			}
		break;} // loop165
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_139);
			resetMatchError();
	}
	returnAST = literal_declspec_AST;
}

	protected final void balanceParens() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST balanceParens_AST = null;
		
		loop166:  while (true) {
			AST tmp613_AST = null;
			tmp613_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp613_AST);
			match(LPAREN);
			if (matchError) {break loop166;}
			{
			_loop914:
			do {
				// nongreedy exit test
				if ((LA(1)==RPAREN) && (_tokenSet_1.member(LA(2)))) break _loop914;
				int LA1_143 = LA(1);
				int LA2_143 = LA(2);
				
				if ((LA1_143==LPAREN) && ((LA2_143 >= ELLIPSIS && LA2_143 <= CSM_END))) {
					balanceParens();
					if (matchError) {break loop166;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if (((LA1_143 >= ELLIPSIS && LA1_143 <= CSM_END)) && ((LA2_143 >= ELLIPSIS && LA2_143 <= CSM_END))) {
					AST tmp614_AST = null;
					tmp614_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp614_AST);
					matchNot(EOF);
					if (matchError) {break loop166;}
				}
				else {
					break _loop914;
				}
				
			} while (true);
			}
			AST tmp615_AST = null;
			tmp615_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp615_AST);
			match(RPAREN);
			if (matchError) {break loop166;}
			balanceParens_AST = (AST)currentAST.root;
		break;} // loop166
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = balanceParens_AST;
}

	protected final void balanceSquares() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST balanceSquares_AST = null;
		
		loop167:  while (true) {
			AST tmp616_AST = null;
			tmp616_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp616_AST);
			match(LSQUARE);
			if (matchError) {break loop167;}
			{
			_loop920:
			do {
				// nongreedy exit test
				if ((LA(1)==RSQUARE) && ((LA(2) >= ELLIPSIS && LA(2) <= CSM_END))) break _loop920;
				int LA1_144 = LA(1);
				int LA2_144 = LA(2);
				
				if ((LA1_144==LSQUARE) && ((LA2_144 >= ELLIPSIS && LA2_144 <= CSM_END))) {
					balanceSquares();
					if (matchError) {break loop167;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if (((LA1_144 >= ELLIPSIS && LA1_144 <= CSM_END)) && ((LA2_144 >= ELLIPSIS && LA2_144 <= CSM_END))) {
					AST tmp617_AST = null;
					tmp617_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp617_AST);
					matchNot(EOF);
					if (matchError) {break loop167;}
				}
				else {
					break _loop920;
				}
				
			} while (true);
			}
			AST tmp618_AST = null;
			tmp618_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp618_AST);
			match(RSQUARE);
			if (matchError) {break loop167;}
			balanceSquares_AST = (AST)currentAST.root;
		break;} // loop167
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_344);
			resetMatchError();
	}
	returnAST = balanceSquares_AST;
}

	protected final void balanceLessthanGreaterthan() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST balanceLessthanGreaterthan_AST = null;
		
		loop168:  while (true) {
			AST tmp619_AST = null;
			tmp619_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp619_AST);
			match(LESSTHAN);
			if (matchError) {break loop168;}
			{
			_loop923:
			do {
				int LA1_145 = LA(1);
				int LA2_145 = LA(2);
				
				if (((LA1_145 >= ELLIPSIS && LA1_145 <= CSM_END)) && ((LA2_145 >= ELLIPSIS && LA2_145 <= CSM_END))) {
					AST tmp620_AST = null;
					tmp620_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp620_AST);
					matchNot(EOF);
					if (matchError) {break loop168;}
				}
				else {
					break _loop923;
				}
				
			} while (true);
			}
			AST tmp621_AST = null;
			tmp621_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp621_AST);
			match(GREATERTHAN);
			if (matchError) {break loop168;}
			balanceLessthanGreaterthan_AST = (AST)currentAST.root;
		break;} // loop168
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = balanceLessthanGreaterthan_AST;
}

	public final void template_parameter() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_parameter_AST = null;
		String id = "";
		
		loop169:  while (true) {
			{
			int LA1_146 = LA(1);
			int LA2_146 = LA(2);
			
			boolean synPredMatched939 = false;
			if (((LA1_146==LITERAL_typename||LA1_146==LITERAL_class) && (_tokenSet_345.member(LA2_146)))) {
				int _m939 = mark();
				guessing++;
				guess939:  while (true) {
					{
					{
					switch ( LA(1)) {
					case LITERAL_class:
					{
						consume();
						break;
					}
					case LITERAL_typename:
					{
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess939;}
					}
					}
					}
					{
					switch ( LA(1)) {
					case ELLIPSIS:
					{
						consume();
						break;
					}
					case ASSIGNEQUAL:
					case COMMA:
					case GREATERTHAN:
					case IDENT:
					case LITERAL_final:
					case LITERAL_override:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess939;}
					}
					}
					}
					{
					switch ( LA(1)) {
					case IDENT:
					case LITERAL_final:
					case LITERAL_override:
					{
						literal_ident_g();
						if (matchError) {break guess939;}
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						{
							consume();
							break;
						}
						case ASSIGNEQUAL:
						case COMMA:
						case GREATERTHAN:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess939;}
						}
						}
						}
						break;
					}
					case ASSIGNEQUAL:
					case COMMA:
					case GREATERTHAN:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess939;}
					}
					}
					}
					{
					switch ( LA(1)) {
					case ASSIGNEQUAL:
					{
						consume();
						break;
					}
					case COMMA:
					{
						consume();
						break;
					}
					case GREATERTHAN:
					{
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess939;}
					}
					}
					}
					}
				synPredMatched939 = true;
				break;} // guess939
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m939);
				guessing--;
			}
			if ( synPredMatched939 ) {
				{
				switch ( LA(1)) {
				case LITERAL_class:
				{
					AST tmp622_AST = null;
					tmp622_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp622_AST);
					consume();
					break;
				}
				case LITERAL_typename:
				{
					AST tmp623_AST = null;
					tmp623_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp623_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_346, tokenNames);if (matchError) {break loop169;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				{
					AST tmp624_AST = null;
					tmp624_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp624_AST);
					consume();
					break;
				}
				case ASSIGNEQUAL:
				case COMMA:
				case GREATERTHAN:
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_345, tokenNames);if (matchError) {break loop169;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				{
					id=literal_ident();
					if (matchError) {break loop169;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					switch ( LA(1)) {
					case ELLIPSIS:
					{
						AST tmp625_AST = null;
						tmp625_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp625_AST);
						consume();
						break;
					}
					case ASSIGNEQUAL:
					case COMMA:
					case GREATERTHAN:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_347, tokenNames);if (matchError) {break loop169;}
					}
					}
					}
					break;
				}
				case ASSIGNEQUAL:
				case COMMA:
				case GREATERTHAN:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_348, tokenNames);if (matchError) {break loop169;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case ASSIGNEQUAL:
				{
					AST tmp626_AST = null;
					tmp626_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp626_AST);
					consume();
					assigned_type_name();
					if (matchError) {break loop169;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case COMMA:
				case GREATERTHAN:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_349, tokenNames);if (matchError) {break loop169;}
				}
				}
				}
				templateTypeParameter((id == null) ? "" : id);
			}
			else if ((LA1_146==LITERAL_template||LA1_146==LITERAL_export)) {
				template_template_parameter();
				if (matchError) {break loop169;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_328.member(LA1_146)) && (_tokenSet_350.member(LA2_146))) {
				parameter_declaration(true);
				if (matchError) {break loop169;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_351, tokenNames);if (matchError) {break loop169;}
			}
			
			}
			template_parameter_AST = (AST)currentAST.root;
		break;} // loop169
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_352);
			resetMatchError();
	}
	returnAST = template_parameter_AST;
}

	public final void assigned_type_name() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST assigned_type_name_AST = null;
		/*TypeSpecifier*/int ts;
		TypeQualifier tq;
		DeclSpecifier ds = dsInvalid;
		
		loop170:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL__TYPE_QUALIFIER__:
			{
				tq=cv_qualifier();
				if (matchError) {break loop170;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_enum:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___complex__:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_306, tokenNames);if (matchError) {break loop170;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_typename:
			{
				AST tmp627_AST = null;
				tmp627_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp627_AST);
				consume();
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_enum:
			case LITERAL_auto:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___complex__:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_311, tokenNames);if (matchError) {break loop170;}
			}
			}
			}
			ts=type_specifier(ds, false);
			if (matchError) {break loop170;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL__TYPE_QUALIFIER__:
			{
				postfix_cv_qualifier();
				if (matchError) {break loop170;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case ELLIPSIS:
			case COMMA:
			case LPAREN:
			case LSQUARE:
			case GREATERTHAN:
			case STAR:
			case AND:
			case AMPERSAND:
			case SCOPE:
			case IDENT:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			case LITERAL___clrcall:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_183, tokenNames);if (matchError) {break loop170;}
			}
			}
			}
			abstract_declarator();
			if (matchError) {break loop170;}
			astFactory.addASTChild(currentAST, returnAST);
			assigned_type_name_AST = (AST)currentAST.root;
		break;} // loop170
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_352);
			resetMatchError();
	}
	returnAST = assigned_type_name_AST;
}

	protected final void template_template_parameter() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_template_parameter_AST = null;
		String s;
		
		loop171:  while (true) {
			template_head();
			if (matchError) {break loop171;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp628_AST = null;
			tmp628_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp628_AST);
			match(LITERAL_class);
			if (matchError) {break loop171;}
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			{
				AST tmp629_AST = null;
				tmp629_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp629_AST);
				consume();
				break;
			}
			case ASSIGNEQUAL:
			case COMMA:
			case GREATERTHAN:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_345, tokenNames);if (matchError) {break loop171;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				s=literal_ident();
				if (matchError) {break loop171;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case ASSIGNEQUAL:
			case COMMA:
			case GREATERTHAN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_348, tokenNames);if (matchError) {break loop171;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case ASSIGNEQUAL:
			{
				AST tmp630_AST = null;
				tmp630_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp630_AST);
				consume();
				assigned_type_name();
				if (matchError) {break loop171;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case COMMA:
			case GREATERTHAN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_349, tokenNames);if (matchError) {break loop171;}
			}
			}
			}
			template_template_parameter_AST = (AST)currentAST.root;
			template_template_parameter_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPLATE_TEMPLATE_PARAMETER,"CSM_TEMPLATE_TEMPLATE_PARAMETER", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_template_parameter_AST));
			currentAST.root = template_template_parameter_AST;
			currentAST.child = template_template_parameter_AST!=null &&template_template_parameter_AST.getFirstChild()!=null ?
				template_template_parameter_AST.getFirstChild() : template_template_parameter_AST;
			currentAST.advanceChildToEnd();
			template_template_parameter_AST = (AST)currentAST.root;
		break;} // loop171
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((template_template_parameter_AST == null) && (currentAST.root != null)) {
			template_template_parameter_AST = (AST)currentAST.root;
			template_template_parameter_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TEMPLATE_TEMPLATE_PARAMETER,"CSM_TEMPLATE_TEMPLATE_PARAMETER", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(template_template_parameter_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_352);
			resetMatchError();
	}
	returnAST = template_template_parameter_AST;
}

	public final void template_id() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_id_AST = null;
		String s;
		
		loop172:  while (true) {
			s=literal_ident();
			if (matchError) {break loop172;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp631_AST = null;
			tmp631_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp631_AST);
			match(LESSTHAN);
			if (matchError) {break loop172;}
			template_argument_list();
			if (matchError) {break loop172;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp632_AST = null;
			tmp632_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp632_AST);
			match(GREATERTHAN);
			if (matchError) {break loop172;}
			template_id_AST = (AST)currentAST.root;
		break;} // loop172
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = template_id_AST;
}

	public final void template_argument() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_argument_AST = null;
		String s;
		
		loop173:  while (true) {
			int LA1_147 = LA(1);
			int LA2_147 = LA(2);
			
			if (((_tokenSet_102.member(LA1_147)) && (_tokenSet_91.member(LA2_147)))&&((isTemplateTooDeep(1, 10)))) {
				{
				_loop974:
				do {
					if ((_tokenSet_353.member(LA(1)))) {
						{
						AST tmp633_AST = null;
						tmp633_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp633_AST);
						match(_tokenSet_353);
						if (matchError) {break loop173;}
						}
					}
					else {
						break _loop974;
					}
					
				} while (true);
				}
				{
				int _cnt979=0;
				_loop979:
				do {
					if ((LA(1)==LESSTHAN)) {
						lazy_template();
						if (matchError) {break loop173;}
						astFactory.addASTChild(currentAST, returnAST);
						{
						_loop978:
						do {
							if ((_tokenSet_354.member(LA(1)))) {
								{
								AST tmp634_AST = null;
								tmp634_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp634_AST);
								match(_tokenSet_354);
								if (matchError) {break loop173;}
								}
							}
							else {
								break _loop978;
							}
							
						} while (true);
						}
					}
					else {
						if ( _cnt979>=1 ) { break _loop979; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_355, tokenNames);if (matchError) {break loop173;}}
					}
					
					_cnt979++;
				} while (true);
				}
				template_argument_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched984 = false;
				if (((_tokenSet_356.member(LA1_147)) && (_tokenSet_357.member(LA2_147)))) {
					int _m984 = mark();
					guessing++;
					guess984:  while (true) {
						{
						{
						switch ( LA(1)) {
						case SCOPE:
						{
							consume();
							break;
						}
						case IDENT:
						case LITERAL_final:
						case LITERAL_override:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess984;}
						}
						}
						}
						{
						_loop983:
						do {
							int LA1_148 = LA(1);
							int LA2_148 = LA(2);
							
							if ((_tokenSet_0.member(LA1_148)) && (LA2_148==SCOPE)) {
								literal_ident_g();
								if (matchError) {break guess984;}
								match(SCOPE);
								if (matchError) {break guess984;}
							}
							else {
								break _loop983;
							}
							
						} while (true);
						}
						literal_ident_g();
						if (matchError) {break guess984;}
						templateDepthChecker_g(20);
						if (matchError) {break guess984;}
						}
					synPredMatched984 = true;
					break;} // guess984
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m984);
					guessing--;
				}
				if ( synPredMatched984 ) {
					{
					switch ( LA(1)) {
					case SCOPE:
					{
						AST tmp635_AST = null;
						tmp635_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp635_AST);
						consume();
						break;
					}
					case IDENT:
					case LITERAL_final:
					case LITERAL_override:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_356, tokenNames);if (matchError) {break loop173;}
					}
					}
					}
					{
					_loop987:
					do {
						int LA1_149 = LA(1);
						int LA2_149 = LA(2);
						
						if ((_tokenSet_0.member(LA1_149)) && (LA2_149==SCOPE)) {
							s=literal_ident();
							if (matchError) {break loop173;}
							astFactory.addASTChild(currentAST, returnAST);
							AST tmp636_AST = null;
							tmp636_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp636_AST);
							match(SCOPE);
							if (matchError) {break loop173;}
						}
						else {
							break _loop987;
						}
						
					} while (true);
					}
					s=literal_ident();
					if (matchError) {break loop173;}
					astFactory.addASTChild(currentAST, returnAST);
					templateDepthChecker(20);
					if (matchError) {break loop173;}
					astFactory.addASTChild(currentAST, returnAST);
					template_argument_AST = (AST)currentAST.root;
				}
				else {
					boolean synPredMatched993 = false;
					if (((_tokenSet_22.member(LA1_147)) && (_tokenSet_358.member(LA2_147)))) {
						int _m993 = mark();
						guessing++;
						guess993:  while (true) {
							{
							{
							switch ( LA(1)) {
							case SCOPE:
							{
								consume();
								break;
							}
							case IDENT:
							case LITERAL_final:
							case LITERAL_override:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess993;}
							}
							}
							}
							{
							_loop991:
							do {
								int LA1_150 = LA(1);
								int LA2_150 = LA(2);
								
								if ((_tokenSet_0.member(LA1_150)) && (LA2_150==SCOPE)) {
									literal_ident_g();
									if (matchError) {break guess993;}
									match(SCOPE);
									if (matchError) {break guess993;}
								}
								else {
									break _loop991;
								}
								
							} while (true);
							}
							literal_ident_g();
							if (matchError) {break guess993;}
							simpleBalanceLessthanGreaterthanInExpression_g();
							if (matchError) {break guess993;}
							{
							switch ( LA(1)) {
							case COMMA:
							{
								consume();
								break;
							}
							case GREATERTHAN:
							{
								consume();
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess993;}
							}
							}
							}
							}
						synPredMatched993 = true;
						break;} // guess993
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m993);
						guessing--;
					}
					if ( synPredMatched993 ) {
						type_name();
						if (matchError) {break loop173;}
						astFactory.addASTChild(currentAST, returnAST);
						template_argument_AST = (AST)currentAST.root;
					}
					else {
						boolean synPredMatched996 = false;
						if (((_tokenSet_22.member(LA1_147)) && (_tokenSet_358.member(LA2_147)))) {
							int _m996 = mark();
							guessing++;
							guess996:  while (true) {
								{
								type_name_g();
								if (matchError) {break guess996;}
								{
								switch ( LA(1)) {
								case COMMA:
								{
									consume();
									break;
								}
								case GREATERTHAN:
								{
									consume();
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess996;}
								}
								}
								}
								}
							synPredMatched996 = true;
							break;} // guess996
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m996);
							guessing--;
						}
						if ( synPredMatched996 ) {
							type_name();
							if (matchError) {break loop173;}
							astFactory.addASTChild(currentAST, returnAST);
							template_argument_AST = (AST)currentAST.root;
						}
						else if ((_tokenSet_169.member(LA1_147)) && (_tokenSet_190.member(LA2_147))) {
							template_param_expression();
							if (matchError) {break loop173;}
							astFactory.addASTChild(currentAST, returnAST);
							template_argument_AST = (AST)currentAST.root;
						}
						else {
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_102, tokenNames);if (matchError) {break loop173;}
						}
						}}}
					break;} // loop173
					if (matchError) {
						reportError(matchException);
						recover(matchException,_tokenSet_120);
						resetMatchError();
				}
				returnAST = template_argument_AST;
			}
			
	public final void lazy_template_argument_list() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_template_argument_list_AST = null;
		
		loop174:  while (true) {
			lazy_template_argument();
			if (matchError) {break loop174;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			_loop961:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp637_AST = null;
					tmp637_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp637_AST);
					consume();
					lazy_template_argument();
					if (matchError) {break loop174;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop961;
				}
				
			} while (true);
			}
			lazy_template_argument_list_AST = (AST)currentAST.root;
		break;} // loop174
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = lazy_template_argument_list_AST;
}

	public final void lazy_template_argument() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_template_argument_AST = null;
		
		loop175:  while (true) {
			int LA1_151 = LA(1);
			int LA2_151 = LA(2);
			
			if (((_tokenSet_102.member(LA1_151)) && (_tokenSet_91.member(LA2_151)))&&((isTemplateTooDeep(1, 10)))) {
				{
				_loop965:
				do {
					if ((_tokenSet_353.member(LA(1)))) {
						{
						AST tmp638_AST = null;
						tmp638_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp638_AST);
						match(_tokenSet_353);
						if (matchError) {break loop175;}
						}
					}
					else {
						break _loop965;
					}
					
				} while (true);
				}
				{
				int _cnt970=0;
				_loop970:
				do {
					if ((LA(1)==LESSTHAN)) {
						lazy_template();
						if (matchError) {break loop175;}
						astFactory.addASTChild(currentAST, returnAST);
						{
						_loop969:
						do {
							if ((_tokenSet_354.member(LA(1)))) {
								{
								AST tmp639_AST = null;
								tmp639_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp639_AST);
								match(_tokenSet_354);
								if (matchError) {break loop175;}
								}
							}
							else {
								break _loop969;
							}
							
						} while (true);
						}
					}
					else {
						if ( _cnt970>=1 ) { break _loop970; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_355, tokenNames);if (matchError) {break loop175;}}
					}
					
					_cnt970++;
				} while (true);
				}
				lazy_template_argument_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_169.member(LA1_151)) && (_tokenSet_359.member(LA2_151))) {
				template_param_expression();
				if (matchError) {break loop175;}
				astFactory.addASTChild(currentAST, returnAST);
				lazy_template_argument_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_102, tokenNames);if (matchError) {break loop175;}
			}
			
		break;} // loop175
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_340);
			resetMatchError();
	}
	returnAST = lazy_template_argument_AST;
}

	public final void lazy_template() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_template_AST = null;
		
		loop176:  while (true) {
			AST tmp640_AST = null;
			tmp640_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp640_AST);
			match(LESSTHAN);
			if (matchError) {break loop176;}
			{
			{
			_loop1001:
			do {
				if ((_tokenSet_353.member(LA(1)))) {
					{
					AST tmp641_AST = null;
					tmp641_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp641_AST);
					match(_tokenSet_353);
					if (matchError) {break loop176;}
					}
				}
				else if ((LA(1)==LESSTHAN)) {
					lazy_template();
					if (matchError) {break loop176;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop1001;
				}
				
			} while (true);
			}
			}
			AST tmp642_AST = null;
			tmp642_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp642_AST);
			match(GREATERTHAN);
			if (matchError) {break loop176;}
			lazy_template_AST = (AST)currentAST.root;
		break;} // loop176
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = lazy_template_AST;
}

	public final void templateDepthChecker(
		int i
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST templateDepthChecker_AST = null;
		
		loop177:  while (true) {
			AST tmp643_AST = null;
			tmp643_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp643_AST);
			match(LESSTHAN);
			if (matchError) {break loop177;}
			{
			{
			int LA1_152 = LA(1);
			int LA2_152 = LA(2);
			
			if (((_tokenSet_102.member(LA1_152)) && (_tokenSet_91.member(LA2_152)))&&((i > 0))) {
				{
				_loop1007:
				do {
					if ((_tokenSet_353.member(LA(1)))) {
						{
						AST tmp644_AST = null;
						tmp644_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp644_AST);
						match(_tokenSet_353);
						if (matchError) {break loop177;}
						}
					}
					else {
						break _loop1007;
					}
					
				} while (true);
				}
				templateDepthChecker(i - 1);
				if (matchError) {break loop177;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				_loop1010:
				do {
					if ((_tokenSet_102.member(LA(1)))) {
						{
						AST tmp645_AST = null;
						tmp645_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp645_AST);
						match(_tokenSet_102);
						if (matchError) {break loop177;}
						}
					}
					else {
						break _loop1010;
					}
					
				} while (true);
				}
			}
			else if (((_tokenSet_91.member(LA1_152)) && (_tokenSet_1.member(LA2_152)))&&((i <= 0))) {
				{
				_loop1013:
				do {
					if ((_tokenSet_353.member(LA(1)))) {
						{
						AST tmp646_AST = null;
						tmp646_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp646_AST);
						match(_tokenSet_353);
						if (matchError) {break loop177;}
						}
					}
					else if ((LA(1)==LESSTHAN)) {
						templateDepthChecker(i - 1);
						if (matchError) {break loop177;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						break _loop1013;
					}
					
				} while (true);
				}
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_91, tokenNames);if (matchError) {break loop177;}
			}
			
			}
			}
			AST tmp647_AST = null;
			tmp647_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp647_AST);
			match(GREATERTHAN);
			if (matchError) {break loop177;}
			templateDepthChecker_AST = (AST)currentAST.root;
		break;} // loop177
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = templateDepthChecker_AST;
}

	public final void simpleBalanceLessthanGreaterthanInExpression() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST simpleBalanceLessthanGreaterthanInExpression_AST = null;
		String s;
		
		loop178:  while (true) {
			AST tmp648_AST = null;
			tmp648_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp648_AST);
			match(LESSTHAN);
			if (matchError) {break loop178;}
			{
			switch ( LA(1)) {
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				{
				switch ( LA(1)) {
				case SCOPE:
				{
					AST tmp649_AST = null;
					tmp649_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp649_AST);
					consume();
					break;
				}
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_356, tokenNames);if (matchError) {break loop178;}
				}
				}
				}
				{
				_loop1285:
				do {
					int LA1_153 = LA(1);
					int LA2_153 = LA(2);
					
					if ((_tokenSet_0.member(LA1_153)) && (LA2_153==SCOPE)) {
						s=literal_ident();
						if (matchError) {break loop178;}
						astFactory.addASTChild(currentAST, returnAST);
						AST tmp650_AST = null;
						tmp650_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp650_AST);
						match(SCOPE);
						if (matchError) {break loop178;}
					}
					else {
						break _loop1285;
					}
					
				} while (true);
				}
				s=literal_ident();
				if (matchError) {break loop178;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case LESSTHAN:
				{
					simpleBalanceLessthanGreaterthanInExpression();
					if (matchError) {break loop178;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case COMMA:
				case GREATERTHAN:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_360, tokenNames);if (matchError) {break loop178;}
				}
				}
				}
				break;
			}
			case FLOATONE:
			case FLOATTWO:
			case HEXADECIMALINT:
			case OCTALINT:
			case DECIMALINT:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case BINARYINT:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_nullptr:
			case LITERAL___null:
			{
				constant();
				if (matchError) {break loop178;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case COMMA:
			case GREATERTHAN:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_361, tokenNames);if (matchError) {break loop178;}
			}
			}
			}
			{
			_loop1293:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp651_AST = null;
					tmp651_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp651_AST);
					consume();
					{
					switch ( LA(1)) {
					case SCOPE:
					case IDENT:
					case LITERAL_final:
					case LITERAL_override:
					{
						{
						switch ( LA(1)) {
						case SCOPE:
						{
							AST tmp652_AST = null;
							tmp652_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp652_AST);
							consume();
							break;
						}
						case IDENT:
						case LITERAL_final:
						case LITERAL_override:
						{
							break;
						}
						default:
						{
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_356, tokenNames);if (matchError) {break loop178;}
						}
						}
						}
						{
						_loop1291:
						do {
							int LA1_154 = LA(1);
							int LA2_154 = LA(2);
							
							if ((_tokenSet_0.member(LA1_154)) && (LA2_154==SCOPE)) {
								s=literal_ident();
								if (matchError) {break loop178;}
								astFactory.addASTChild(currentAST, returnAST);
								AST tmp653_AST = null;
								tmp653_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp653_AST);
								match(SCOPE);
								if (matchError) {break loop178;}
							}
							else {
								break _loop1291;
							}
							
						} while (true);
						}
						s=literal_ident();
						if (matchError) {break loop178;}
						astFactory.addASTChild(currentAST, returnAST);
						{
						switch ( LA(1)) {
						case LESSTHAN:
						{
							simpleBalanceLessthanGreaterthanInExpression();
							if (matchError) {break loop178;}
							astFactory.addASTChild(currentAST, returnAST);
							break;
						}
						case COMMA:
						case GREATERTHAN:
						{
							break;
						}
						default:
						{
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_360, tokenNames);if (matchError) {break loop178;}
						}
						}
						}
						break;
					}
					case FLOATONE:
					case FLOATTWO:
					case HEXADECIMALINT:
					case OCTALINT:
					case DECIMALINT:
					case CHAR_LITERAL:
					case STRING_LITERAL:
					case BINARYINT:
					case LITERAL_true:
					case LITERAL_false:
					case LITERAL_nullptr:
					case LITERAL___null:
					{
						constant();
						if (matchError) {break loop178;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_362, tokenNames);if (matchError) {break loop178;}
					}
					}
					}
				}
				else {
					break _loop1293;
				}
				
			} while (true);
			}
			AST tmp654_AST = null;
			tmp654_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp654_AST);
			match(GREATERTHAN);
			if (matchError) {break loop178;}
			simpleBalanceLessthanGreaterthanInExpression_AST = (AST)currentAST.root;
		break;} // loop178
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_241);
			resetMatchError();
	}
	returnAST = simpleBalanceLessthanGreaterthanInExpression_AST;
}

	public final void statement_list() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST statement_list_AST = null;
		
		loop179:  while (true) {
			{
			int _cnt1016=0;
			_loop1016:
			do {
				if ((_tokenSet_159.member(LA(1)))) {
					statement();
					if (matchError) {break loop179;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					if ( _cnt1016>=1 ) { break _loop1016; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_159, tokenNames);if (matchError) {break loop179;}}
				}
				
				_cnt1016++;
			} while (true);
			}
			statement_list_AST = (AST)currentAST.root;
		break;} // loop179
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_84);
			resetMatchError();
	}
	returnAST = statement_list_AST;
}

	public final void statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST statement_AST = null;
		StorageClass sc = scInvalid; int ts = 0;
		
		loop180:  while (true) {
			{
			int LA1_155 = LA(1);
			int LA2_155 = LA(2);
			
			switch ( LA1_155) {
			case LITERAL_case:
			{
				if (statementTrace>=1) 
							printf("statement_3[%d]: case_statement\n", LT(1).getLine());
						
				case_statement();
				if (matchError) {break loop180;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL_default:
			{
				if (statementTrace>=1) 
							printf("statement_4[%d]: default_statement\n", LT(1).getLine());
						
				default_statement();
				if (matchError) {break loop180;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LCURLY:
			{
				if (statementTrace>=1) 
							printf("statement_6[%d]: compound_statement\n", LT(1).getLine());
						
				compound_statement();
				if (matchError) {break loop180;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL_if:
			case LITERAL_switch:
			{
				if (statementTrace>=1) 
							printf("statement_7[%d]: selection_statement\n", LT(1).getLine());
						
				selection_statement();
				if (matchError) {break loop180;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL_while:
			case LITERAL_do:
			case LITERAL_for:
			{
				if (statementTrace>=1) 
							printf("statement_8[%d]: iteration_statement\n", LT(1).getLine());
						
				iteration_statement();
				if (matchError) {break loop180;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL_goto:
			case LITERAL_continue:
			case LITERAL_break:
			case LITERAL_return:
			{
				if (statementTrace>=1) 
							printf("statement_9[%d]: jump_statement\n", LT(1).getLine());
						
				jump_statement();
				if (matchError) {break loop180;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL_try:
			case LITERAL___try:
			{
				if (statementTrace>=1) 
							printf("statement_11[%d]: try_block\n", LT(1).getLine());
						
				try_block(false);
				if (matchError) {break loop180;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			default:
				boolean synPredMatched1025 = false;
				if (((_tokenSet_26.member(LA1_155)) && (_tokenSet_27.member(LA2_155)))) {
					int _m1025 = mark();
					guessing++;
					guess1025:  while (true) {
						{
						{
						_loop1024:
						do {
							switch ( LA(1)) {
							case LITERAL_extern:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL___global:
							case LITERAL___thread:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_thread_local:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								storage_class_specifier_g();
								if (matchError) {break guess1025;}
								break;
							}
							case LITERAL_const:
							case LITERAL___const__:
							case LITERAL___const:
							case LITERAL_const_cast:
							case LITERAL_volatile:
							case LITERAL___volatile__:
							case LITERAL___volatile:
							case LITERAL__TYPE_QUALIFIER__:
							{
								cv_qualifier_g();
								if (matchError) {break guess1025;}
								break;
							}
							case LITERAL_typedef:
							{
								consume();
								break;
							}
							default:
							{
								break _loop1024;
							}
							}
						} while (true);
						}
						class_head_g();
						if (matchError) {break guess1025;}
						}
					synPredMatched1025 = true;
					break;} // guess1025
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m1025);
					guessing--;
				}
				if ( synPredMatched1025 ) {
					if (statementTrace>=1) 
								printf("statement_1[%d]: Class definition\n",
									LT(1).getLine());
							
					declaration(declOther);
					if (matchError) {break loop180;}
					astFactory.addASTChild(currentAST, returnAST);
					statement_AST = (AST)currentAST.root;
					statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CLASS_DECLARATION,"CSM_CLASS_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(statement_AST));
					currentAST.root = statement_AST;
					currentAST.child = statement_AST!=null &&statement_AST.getFirstChild()!=null ?
						statement_AST.getFirstChild() : statement_AST;
					currentAST.advanceChildToEnd();
				}
				else {
					boolean synPredMatched1029 = false;
					if (((_tokenSet_26.member(LA1_155)) && (_tokenSet_27.member(LA2_155)))) {
						int _m1029 = mark();
						guessing++;
						guess1029:  while (true) {
							{
							{
							_loop1028:
							do {
								switch ( LA(1)) {
								case LITERAL_extern:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_thread_local:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									storage_class_specifier_g();
									if (matchError) {break guess1029;}
									break;
								}
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_const_cast:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL__TYPE_QUALIFIER__:
								{
									cv_qualifier_g();
									if (matchError) {break guess1029;}
									break;
								}
								case LITERAL_typedef:
								{
									consume();
									break;
								}
								default:
								{
									break _loop1028;
								}
								}
							} while (true);
							}
							class_forward_declaration_g();
							if (matchError) {break guess1029;}
							}
						synPredMatched1029 = true;
						break;} // guess1029
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1029);
						guessing--;
					}
					if ( synPredMatched1029 ) {
						if (statementTrace>=1)
									printf("statement_1[%d]: Class forward declaration\n",
										LT(1).getLine());
								
						declaration(declOther);
						if (matchError) {break loop180;}
						astFactory.addASTChild(currentAST, returnAST);
						statement_AST = (AST)currentAST.root;
						statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_GENERIC_DECLARATION,"CSM_GENERIC_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(statement_AST));
						currentAST.root = statement_AST;
						currentAST.child = statement_AST!=null &&statement_AST.getFirstChild()!=null ?
							statement_AST.getFirstChild() : statement_AST;
						currentAST.advanceChildToEnd();
					}
					else {
						boolean synPredMatched1035 = false;
						if (((_tokenSet_363.member(LA1_155)) && (_tokenSet_364.member(LA2_155)))) {
							int _m1035 = mark();
							guessing++;
							guess1035:  while (true) {
								{
								{
								switch ( LA(1)) {
								case LITERAL_extern:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_thread_local:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									storage_class_specifier_g();
									if (matchError) {break guess1035;}
									break;
								}
								case LITERAL_enum:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess1035;}
								}
								}
								}
								match(LITERAL_enum);
								if (matchError) {break guess1035;}
								{
								switch ( LA(1)) {
								case LITERAL_class:
								{
									consume();
									break;
								}
								case LITERAL_struct:
								{
									consume();
									break;
								}
								case COLON:
								case LCURLY:
								case IDENT:
								case LITERAL_final:
								case LITERAL_override:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess1035;}
								}
								}
								}
								{
								switch ( LA(1)) {
								case IDENT:
								case LITERAL_final:
								case LITERAL_override:
								{
									literal_ident_g();
									if (matchError) {break guess1035;}
									break;
								}
								case COLON:
								case LCURLY:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess1035;}
								}
								}
								}
								{
								switch ( LA(1)) {
								case COLON:
								{
									consume();
									ts=builtin_cv_type_specifier_g(ts);
									if (matchError) {break guess1035;}
									break;
								}
								case LCURLY:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess1035;}
								}
								}
								}
								match(LCURLY);
								if (matchError) {break guess1035;}
								}
							synPredMatched1035 = true;
							break;} // guess1035
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m1035);
							guessing--;
						}
						if ( synPredMatched1035 ) {
							{
							switch ( LA(1)) {
							case LITERAL_extern:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL___global:
							case LITERAL___thread:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_thread_local:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								sc=storage_class_specifier();
								if (matchError) {break loop180;}
								astFactory.addASTChild(currentAST, returnAST);
								break;
							}
							case LITERAL_enum:
							{
								break;
							}
							default:
							{
								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_363, tokenNames);if (matchError) {break loop180;}
							}
							}
							}
							if (statementTrace>=1) 
										printf("statement_2[%d]: Enum definition\n",
											LT(1).getLine());
									
							enum_specifier();
							if (matchError) {break loop180;}
							astFactory.addASTChild(currentAST, returnAST);
							{
							switch ( LA(1)) {
							case ELLIPSIS:
							case COLON:
							case LPAREN:
							case LSQUARE:
							case STAR:
							case AND:
							case AMPERSAND:
							case TILDE:
							case SCOPE:
							case IDENT:
							case LITERAL_OPERATOR:
							case LITERAL__stdcall:
							case LITERAL___stdcall:
							case LITERAL_this:
							case LITERAL_true:
							case LITERAL_false:
							case LITERAL__cdecl:
							case LITERAL___cdecl:
							case LITERAL__near:
							case LITERAL___near:
							case LITERAL__far:
							case LITERAL___far:
							case LITERAL___interrupt:
							case LITERAL_pascal:
							case LITERAL__pascal:
							case LITERAL___pascal:
							case LITERAL___attribute__:
							case LITERAL___attribute:
							case LITERAL_final:
							case LITERAL_override:
							case LITERAL_decltype:
							case LITERAL___decltype:
							case LITERAL___clrcall:
							{
								member_declarator_list();
								if (matchError) {break loop180;}
								astFactory.addASTChild(currentAST, returnAST);
								break;
							}
							case SEMICOLON:
							{
								break;
							}
							default:
							{
								matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_148, tokenNames);if (matchError) {break loop180;}
							}
							}
							}
							match(SEMICOLON);
							if (matchError) {break loop180;}
							statement_AST = (AST)currentAST.root;
							statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ENUM_DECLARATION,"CSM_ENUM_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(statement_AST));
							currentAST.root = statement_AST;
							currentAST.child = statement_AST!=null &&statement_AST.getFirstChild()!=null ?
								statement_AST.getFirstChild() : statement_AST;
							currentAST.advanceChildToEnd();
						}
						else {
							boolean synPredMatched1039 = false;
							if (((_tokenSet_2.member(LA1_155)) && (_tokenSet_365.member(LA2_155)))) {
								int _m1039 = mark();
								guessing++;
								guess1039:  while (true) {
									{
									match(LITERAL_typedef);
									if (matchError) {break guess1039;}
									}
								synPredMatched1039 = true;
								break;} // guess1039
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m1039);
								guessing--;
							}
							if ( synPredMatched1039 ) {
								external_declaration();
								if (matchError) {break loop180;}
								astFactory.addASTChild(currentAST, returnAST);
							}
							else {
								boolean synPredMatched1044 = false;
								if ((((_tokenSet_2.member(LA1_155)) && (_tokenSet_365.member(LA2_155)))&&(isC()))) {
									int _m1044 = mark();
									guessing++;
									guess1044:  while (true) {
										{
										{
										switch ( LA(1)) {
										case LITERAL___extension__:
										{
											consume();
											break;
										}
										case LSQUARE:
										case SCOPE:
										case IDENT:
										case LITERAL_typeof:
										case LITERAL___typeof__:
										case LITERAL___typeof:
										case LITERAL_typedef:
										case LITERAL_enum:
										case LITERAL_extern:
										case LITERAL_inline:
										case LITERAL__inline:
										case LITERAL___inline__:
										case LITERAL___inline:
										case LITERAL_virtual:
										case LITERAL_explicit:
										case LITERAL_friend:
										case LITERAL__stdcall:
										case LITERAL___stdcall:
										case LITERAL_typename:
										case LITERAL_auto:
										case LITERAL_register:
										case LITERAL_static:
										case LITERAL_mutable:
										case LITERAL_const:
										case LITERAL___const__:
										case LITERAL___const:
										case LITERAL_const_cast:
										case LITERAL_volatile:
										case LITERAL___volatile__:
										case LITERAL___volatile:
										case LITERAL_char:
										case LITERAL_wchar_t:
										case LITERAL_bool:
										case LITERAL_short:
										case LITERAL_int:
										case LITERAL_long:
										case LITERAL_signed:
										case LITERAL___signed__:
										case LITERAL___signed:
										case LITERAL_unsigned:
										case LITERAL___unsigned__:
										case LITERAL_float:
										case LITERAL_double:
										case LITERAL_void:
										case LITERAL__declspec:
										case LITERAL___declspec:
										case LITERAL_class:
										case LITERAL_struct:
										case LITERAL_union:
										case LITERAL__int64:
										case LITERAL___int64:
										case LITERAL___w64:
										case LITERAL___attribute__:
										case LITERAL___complex__:
										case LITERAL___global:
										case LITERAL__Bool:
										case LITERAL__Complex:
										case LITERAL___thread:
										case LITERAL___attribute:
										case LITERAL__Imaginary:
										case LITERAL_bit:
										case LITERAL___symbolic:
										case LITERAL___hidden:
										case LITERAL_final:
										case LITERAL_override:
										case LITERAL_constexpr:
										case LITERAL_decltype:
										case LITERAL_thread_local:
										case LITERAL_alignas:
										case LITERAL_char16_t:
										case LITERAL_char32_t:
										case LITERAL___decltype:
										case LITERAL___complex:
										case LITERAL___forceinline:
										case LITERAL___clrcall:
										case LITERAL__Noreturn:
										case LITERAL___builtin_va_list:
										case LITERAL__BUILT_IN_TYPE__:
										case LITERAL__TYPE_QUALIFIER__:
										case LITERAL__STORAGE_CLASS_SPECIFIER__:
										{
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break guess1044;}
										}
										}
										}
										{
										int LA1_156 = LA(1);
										int LA2_156 = LA(2);
										
										if ((_tokenSet_21.member(LA1_156)) && (LA2_156==LPAREN||LA2_156==LSQUARE)) {
											function_attribute_specification_g();
											if (matchError) {break guess1044;}
										}
										else if ((_tokenSet_22.member(LA1_156)) && (_tokenSet_23.member(LA2_156))) {
										}
										else {
											matchError=true;if (matchError) {break guess1044;}
										}
										
										}
										declaration_specifiers_g(false, false);
										if (matchError) {break guess1044;}
										{
										int LA1_157 = LA(1);
										int LA2_157 = LA(2);
										
										if ((_tokenSet_21.member(LA1_157)) && (LA2_157==LPAREN||LA2_157==LSQUARE)) {
											function_attribute_specification_g();
											if (matchError) {break guess1044;}
										}
										else if ((_tokenSet_24.member(LA1_157)) && (_tokenSet_25.member(LA2_157))) {
										}
										else {
											matchError=true;if (matchError) {break guess1044;}
										}
										
										}
										function_declarator_g(true, false, false);
										if (matchError) {break guess1044;}
										match(LCURLY);
										if (matchError) {break guess1044;}
										}
									synPredMatched1044 = true;
									break;} // guess1044
									if (matchError) {
									   resetMatchError();
									}
									rewind(_m1044);
									guessing--;
								}
								if ( synPredMatched1044 ) {
									external_declaration();
									if (matchError) {break loop180;}
									astFactory.addASTChild(currentAST, returnAST);
									statement_AST = (AST)currentAST.root;
									statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_DECLARATION_STATEMENT,"CSM_DECLARATION_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(statement_AST));
									currentAST.root = statement_AST;
									currentAST.child = statement_AST!=null &&statement_AST.getFirstChild()!=null ?
										statement_AST.getFirstChild() : statement_AST;
									currentAST.advanceChildToEnd();
								}
								else {
									boolean synPredMatched1046 = false;
									if ((((_tokenSet_0.member(LA1_155)) && (_tokenSet_0.member(LA2_155)))&&( LT(1).getText().equals(LITERAL_EXEC) && LT(2).getText().equals(LITERAL_SQL) ))) {
										int _m1046 = mark();
										guessing++;
										guess1046:  while (true) {
											{
											literal_ident_g();
											if (matchError) {break guess1046;}
											literal_ident_g();
											if (matchError) {break guess1046;}
											}
										synPredMatched1046 = true;
										break;} // guess1046
										if (matchError) {
										   resetMatchError();
										}
										rewind(_m1046);
										guessing--;
									}
									if ( synPredMatched1046 ) {
										pro_c_statement();
										if (matchError) {break loop180;}
										astFactory.addASTChild(currentAST, returnAST);
										if (statementTrace>=1)
													printf("statement_13[%d]: pro_c_statement\n", LT(1).getLine());
												
									}
									else {
										boolean synPredMatched1048 = false;
										if (((_tokenSet_26.member(LA1_155)) && (_tokenSet_27.member(LA2_155)))) {
											int _m1048 = mark();
											guessing++;
											guess1048:  while (true) {
												{
												is_known_typename_g();
												if (matchError) {break guess1048;}
												match(LPAREN);
												if (matchError) {break guess1048;}
												literal_ident_g();
												if (matchError) {break guess1048;}
												match(RPAREN);
												if (matchError) {break guess1048;}
												}
											synPredMatched1048 = true;
											break;} // guess1048
											if (matchError) {
											   resetMatchError();
											}
											rewind(_m1048);
											guessing--;
										}
										if ( synPredMatched1048 ) {
											if (statementTrace>=1) 
											printf("statement_1a[%d]: declaration\n", LT(1).getLine());
											
											declaration(declGeneric);
											if (matchError) {break loop180;}
											astFactory.addASTChild(currentAST, returnAST);
											statement_AST = (AST)currentAST.root;
											statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_DECLARATION_STATEMENT,"CSM_DECLARATION_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(statement_AST));
											currentAST.root = statement_AST;
											currentAST.child = statement_AST!=null &&statement_AST.getFirstChild()!=null ?
												statement_AST.getFirstChild() : statement_AST;
											currentAST.advanceChildToEnd();
										}
										else {
											boolean synPredMatched1050 = false;
											if (((_tokenSet_26.member(LA1_155)) && (_tokenSet_27.member(LA2_155)))) {
												int _m1050 = mark();
												guessing++;
												guess1050:  while (true) {
													{
													int LA1_158 = LA(1);
													int LA2_158 = LA(2);
													
													switch ( LA1_158) {
													case LITERAL_namespace:
													{
														consume();
														break;
													}
													case LITERAL_static_assert:
													{
														consume();
														break;
													}
													default:
														if ((_tokenSet_173.member(LA1_158)) && (true)) {
															is_declaration_g();
															if (matchError) {break guess1050;}
														}
														else if ((_tokenSet_54.member(LA1_158)) && (LA2_158==LITERAL_namespace)) {
															literal_inline_g();
															if (matchError) {break guess1050;}
															match(LITERAL_namespace);
															if (matchError) {break guess1050;}
														}
													else {
														matchError=true;if (matchError) {break guess1050;}
													}
													}
													}
												synPredMatched1050 = true;
												break;} // guess1050
												if (matchError) {
												   resetMatchError();
												}
												rewind(_m1050);
												guessing--;
											}
											if ( synPredMatched1050 ) {
												if (statementTrace>=1) 
															printf("statement_1[%d]: declaration\n", LT(1).getLine());
														
												declaration(declStatement);
												if (matchError) {break loop180;}
												astFactory.addASTChild(currentAST, returnAST);
												statement_AST = (AST)currentAST.root;
												statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_DECLARATION_STATEMENT,"CSM_DECLARATION_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(statement_AST));
												currentAST.root = statement_AST;
												currentAST.child = statement_AST!=null &&statement_AST.getFirstChild()!=null ?
													statement_AST.getFirstChild() : statement_AST;
												currentAST.advanceChildToEnd();
											}
											else {
												boolean synPredMatched1052 = false;
												if (((_tokenSet_0.member(LA1_155)) && (LA2_155==COLON))) {
													int _m1052 = mark();
													guessing++;
													guess1052:  while (true) {
														{
														literal_ident_g();
														if (matchError) {break guess1052;}
														match(COLON);
														if (matchError) {break guess1052;}
														}
													synPredMatched1052 = true;
													break;} // guess1052
													if (matchError) {
													   resetMatchError();
													}
													rewind(_m1052);
													guessing--;
												}
												if ( synPredMatched1052 ) {
													if (statementTrace>=1) 
																printf("statement_2[%d]: labeled_statement\n", LT(1).getLine());
															
													labeled_statement();
													if (matchError) {break loop180;}
													astFactory.addASTChild(currentAST, returnAST);
												}
												else if ((_tokenSet_189.member(LA1_155)) && ((LA2_155 >= ELLIPSIS && LA2_155 <= CSM_END))) {
													if (statementTrace>=1) 
																printf("statement_5[%d]: expression\n", LT(1).getLine());
															
													expression();
													if (matchError) {break loop180;}
													astFactory.addASTChild(currentAST, returnAST);
													match(SEMICOLON);
													if (matchError) {break loop180;}
													statement_AST = (AST)currentAST.root;
													/*end_of_stmt();*/statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_EXPRESSION_STATEMENT,"CSM_EXPRESSION_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(statement_AST));
													currentAST.root = statement_AST;
													currentAST.child = statement_AST!=null &&statement_AST.getFirstChild()!=null ?
														statement_AST.getFirstChild() : statement_AST;
													currentAST.advanceChildToEnd();
												}
												else if ((LA1_155==SEMICOLON) && (_tokenSet_366.member(LA2_155))) {
													if (statementTrace>=1) 
																printf("statement_10[%d]: SEMICOLON\n", LT(1).getLine());
															
													match(SEMICOLON);
													if (matchError) {break loop180;}
												}
												else if (((LA1_155 >= LITERAL_asm && LA1_155 <= LITERAL___asm)) && (_tokenSet_367.member(LA2_155))) {
													if (statementTrace>=1) 
																printf("statement_13[%d]: asm_block\n", LT(1).getLine());
															
													asm_block();
													if (matchError) {break loop180;}
													astFactory.addASTChild(currentAST, returnAST);
												}
											else {
												matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_159, tokenNames);if (matchError) {break loop180;}
											}
											}}}}}}}}}
											}
											statement_AST = (AST)currentAST.root;
										break;} // loop180
										if (matchError) {
											reportError(matchException);
											recover(matchException,_tokenSet_366);
											resetMatchError();
									}
									returnAST = statement_AST;
								}
								
	public final void single_statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST single_statement_AST = null;
		
		loop181:  while (true) {
			int LA1_159 = LA(1);
			int LA2_159 = LA(2);
			
			boolean synPredMatched1019 = false;
			if (((_tokenSet_0.member(LA1_159)) && (LA2_159==COLON))) {
				int _m1019 = mark();
				guessing++;
				guess1019:  while (true) {
					{
					literal_ident_g();
					if (matchError) {break guess1019;}
					match(COLON);
					if (matchError) {break guess1019;}
					}
				synPredMatched1019 = true;
				break;} // guess1019
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1019);
				guessing--;
			}
			if ( synPredMatched1019 ) {
				compound_labeled_statement();
				if (matchError) {break loop181;}
				astFactory.addASTChild(currentAST, returnAST);
				single_statement_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_159.member(LA1_159)) && (_tokenSet_1.member(LA2_159))) {
				statement();
				if (matchError) {break loop181;}
				astFactory.addASTChild(currentAST, returnAST);
				single_statement_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_159, tokenNames);if (matchError) {break loop181;}
			}
			
		break;} // loop181
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_366);
			resetMatchError();
	}
	returnAST = single_statement_AST;
}

	public final void compound_labeled_statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST compound_labeled_statement_AST = null;
		
		loop182:  while (true) {
			labeled_statement();
			if (matchError) {break loop182;}
			astFactory.addASTChild(currentAST, returnAST);
			compound_labeled_statement_AST = (AST)currentAST.root;
			compound_labeled_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_COMPOUND_STATEMENT,"CSM_COMPOUND_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(compound_labeled_statement_AST));
			currentAST.root = compound_labeled_statement_AST;
			currentAST.child = compound_labeled_statement_AST!=null &&compound_labeled_statement_AST.getFirstChild()!=null ?
				compound_labeled_statement_AST.getFirstChild() : compound_labeled_statement_AST;
			currentAST.advanceChildToEnd();
			compound_labeled_statement_AST = (AST)currentAST.root;
		break;} // loop182
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((compound_labeled_statement_AST == null) && (currentAST.root != null)) {
			compound_labeled_statement_AST = (AST)currentAST.root;
			compound_labeled_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_COMPOUND_STATEMENT,"CSM_COMPOUND_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(compound_labeled_statement_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_366);
			resetMatchError();
	}
	returnAST = compound_labeled_statement_AST;
}

	protected final void is_known_typename() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST is_known_typename_AST = null;
		/*TypeSpecifier*/int ts=0;
		
		loop183:  while (true) {
			switch ( LA(1)) {
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___complex__:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___complex:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			{
				ts=builtin_type(0);
				if (matchError) {break loop183;}
				astFactory.addASTChild(currentAST, returnAST);
				is_known_typename_AST = (AST)currentAST.root;
				break;
			}
			case IDENT:
			{
				is_va_list_type();
				if (matchError) {break loop183;}
				astFactory.addASTChild(currentAST, returnAST);
				is_known_typename_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_368, tokenNames);if (matchError) {break loop183;}
			}
			}
		break;} // loop183
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = is_known_typename_AST;
}

	public final void labeled_statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST labeled_statement_AST = null;
		
		loop184:  while (true) {
			label();
			if (matchError) {break loop184;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp658_AST = null;
			tmp658_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp658_AST);
			match(COLON);
			if (matchError) {break loop184;}
			{
			int LA1_160 = LA(1);
			int LA2_160 = LA(2);
			
			if ((_tokenSet_21.member(LA1_160)) && (LA2_160==LPAREN||LA2_160==LSQUARE)) {
				attribute_specification();
				if (matchError) {break loop184;}
			}
			else if ((_tokenSet_159.member(LA1_160)) && (_tokenSet_1.member(LA2_160))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_159, tokenNames);if (matchError) {break loop184;}
			}
			
			}
			single_statement();
			if (matchError) {break loop184;}
			astFactory.addASTChild(currentAST, returnAST);
			labeled_statement_AST = (AST)currentAST.root;
		break;} // loop184
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_366);
			resetMatchError();
	}
	returnAST = labeled_statement_AST;
}

	public final void case_statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST case_statement_AST = null;
		
		loop185:  while (true) {
			AST tmp659_AST = null;
			tmp659_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp659_AST);
			match(LITERAL_case);
			if (matchError) {break loop185;}
			case_expression();
			if (matchError) {break loop185;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp660_AST = null;
			tmp660_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp660_AST);
			match(COLON);
			if (matchError) {break loop185;}
			single_statement();
			if (matchError) {break loop185;}
			astFactory.addASTChild(currentAST, returnAST);
			case_statement_AST = (AST)currentAST.root;
		break;} // loop185
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_366);
			resetMatchError();
	}
	returnAST = case_statement_AST;
}

	public final void default_statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST default_statement_AST = null;
		
		loop186:  while (true) {
			default_label();
			if (matchError) {break loop186;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp661_AST = null;
			tmp661_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp661_AST);
			match(COLON);
			if (matchError) {break loop186;}
			single_statement();
			if (matchError) {break loop186;}
			astFactory.addASTChild(currentAST, returnAST);
			default_statement_AST = (AST)currentAST.root;
		break;} // loop186
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_366);
			resetMatchError();
	}
	returnAST = default_statement_AST;
}

	public final void selection_statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST selection_statement_AST = null;
		
		loop187:  while (true) {
			switch ( LA(1)) {
			case LITERAL_if:
			{
				AST tmp662_AST = null;
				tmp662_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp662_AST);
				consume();
				AST tmp663_AST = null;
				tmp663_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp663_AST);
				match(LPAREN);
				if (matchError) {break loop187;}
				condition();
				if (matchError) {break loop187;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp664_AST = null;
				tmp664_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp664_AST);
				match(RPAREN);
				if (matchError) {break loop187;}
				single_statement();
				if (matchError) {break loop187;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				int LA1_161 = LA(1);
				int LA2_161 = LA(2);
				
				if ((LA1_161==LITERAL_else) && (_tokenSet_159.member(LA2_161))) {
					AST tmp665_AST = null;
					tmp665_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp665_AST);
					consume();
					single_statement();
					if (matchError) {break loop187;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((_tokenSet_366.member(LA1_161)) && (_tokenSet_1.member(LA2_161))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_366, tokenNames);if (matchError) {break loop187;}
				}
				
				}
				selection_statement_AST = (AST)currentAST.root;
				selection_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_IF_STATEMENT,"CSM_IF_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(selection_statement_AST));
				currentAST.root = selection_statement_AST;
				currentAST.child = selection_statement_AST!=null &&selection_statement_AST.getFirstChild()!=null ?
					selection_statement_AST.getFirstChild() : selection_statement_AST;
				currentAST.advanceChildToEnd();
				selection_statement_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_switch:
			{
				AST tmp666_AST = null;
				tmp666_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp666_AST);
				consume();
				AST tmp667_AST = null;
				tmp667_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp667_AST);
				match(LPAREN);
				if (matchError) {break loop187;}
				condition();
				if (matchError) {break loop187;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp668_AST = null;
				tmp668_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp668_AST);
				match(RPAREN);
				if (matchError) {break loop187;}
				single_statement();
				if (matchError) {break loop187;}
				astFactory.addASTChild(currentAST, returnAST);
				selection_statement_AST = (AST)currentAST.root;
				selection_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_SWITCH_STATEMENT,"CSM_SWITCH_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(selection_statement_AST));
				currentAST.root = selection_statement_AST;
				currentAST.child = selection_statement_AST!=null &&selection_statement_AST.getFirstChild()!=null ?
					selection_statement_AST.getFirstChild() : selection_statement_AST;
				currentAST.advanceChildToEnd();
				selection_statement_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_369, tokenNames);if (matchError) {break loop187;}
			}
			}
		break;} // loop187
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((selection_statement_AST == null) && (currentAST.root != null)) {
			selection_statement_AST = (AST)currentAST.root;
			selection_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_SWITCH_STATEMENT,"CSM_SWITCH_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(selection_statement_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_366);
			resetMatchError();
	}
	returnAST = selection_statement_AST;
}

	public final void iteration_statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST iteration_statement_AST = null;
		
		loop188:  while (true) {
			switch ( LA(1)) {
			case LITERAL_while:
			{
				while_statement();
				if (matchError) {break loop188;}
				astFactory.addASTChild(currentAST, returnAST);
				iteration_statement_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_do:
			{
				do_while_statement();
				if (matchError) {break loop188;}
				astFactory.addASTChild(currentAST, returnAST);
				iteration_statement_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_for:
			{
				for_statement();
				if (matchError) {break loop188;}
				astFactory.addASTChild(currentAST, returnAST);
				iteration_statement_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_370, tokenNames);if (matchError) {break loop188;}
			}
			}
		break;} // loop188
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_366);
			resetMatchError();
	}
	returnAST = iteration_statement_AST;
}

	public final void jump_statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST jump_statement_AST = null;
		String s;
		
		loop189:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_goto:
			{
				AST tmp669_AST = null;
				tmp669_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp669_AST);
				consume();
				{
				int LA1_162 = LA(1);
				int LA2_162 = LA(2);
				
				boolean synPredMatched1108 = false;
				if (((_tokenSet_0.member(LA1_162)) && (LA2_162==EOF||LA2_162==SEMICOLON))) {
					int _m1108 = mark();
					guessing++;
					guess1108:  while (true) {
						{
						literal_ident_g();
						if (matchError) {break guess1108;}
						{
						switch ( LA(1)) {
						case EOF:
						{
							consume();
							break;
						}
						case SEMICOLON:
						{
							consume();
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess1108;}
						}
						}
						}
						}
					synPredMatched1108 = true;
					break;} // guess1108
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m1108);
					guessing--;
				}
				if ( synPredMatched1108 ) {
					s=literal_ident();
					if (matchError) {break loop189;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((_tokenSet_189.member(LA1_162)) && (_tokenSet_1.member(LA2_162))) {
					expression();
					if (matchError) {break loop189;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_189, tokenNames);if (matchError) {break loop189;}
				}
				
				}
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
					break;
				}
				case SEMICOLON:
				{
					AST tmp671_AST = null;
					tmp671_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp671_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop189;}
				}
				}
				}
				jump_statement_AST = (AST)currentAST.root;
				/*end_of_stmt();*/ jump_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_GOTO_STATEMENT,"CSM_GOTO_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(jump_statement_AST));
				currentAST.root = jump_statement_AST;
				currentAST.child = jump_statement_AST!=null &&jump_statement_AST.getFirstChild()!=null ?
					jump_statement_AST.getFirstChild() : jump_statement_AST;
				currentAST.advanceChildToEnd();
				break;
			}
			case LITERAL_continue:
			{
				AST tmp672_AST = null;
				tmp672_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp672_AST);
				consume();
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
					break;
				}
				case SEMICOLON:
				{
					AST tmp674_AST = null;
					tmp674_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp674_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop189;}
				}
				}
				}
				jump_statement_AST = (AST)currentAST.root;
				/*end_of_stmt();*/ jump_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CONTINUE_STATEMENT,"CSM_CONTINUE_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(jump_statement_AST));
				currentAST.root = jump_statement_AST;
				currentAST.child = jump_statement_AST!=null &&jump_statement_AST.getFirstChild()!=null ?
					jump_statement_AST.getFirstChild() : jump_statement_AST;
				currentAST.advanceChildToEnd();
				break;
			}
			case LITERAL_break:
			{
				AST tmp675_AST = null;
				tmp675_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp675_AST);
				consume();
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
					break;
				}
				case SEMICOLON:
				{
					AST tmp677_AST = null;
					tmp677_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp677_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop189;}
				}
				}
				}
				jump_statement_AST = (AST)currentAST.root;
				/*end_of_stmt();*/ jump_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_BREAK_STATEMENT,"CSM_BREAK_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(jump_statement_AST));
				currentAST.root = jump_statement_AST;
				currentAST.child = jump_statement_AST!=null &&jump_statement_AST.getFirstChild()!=null ?
					jump_statement_AST.getFirstChild() : jump_statement_AST;
				currentAST.advanceChildToEnd();
				break;
			}
			case LITERAL_return:
			{
				AST tmp678_AST = null;
				tmp678_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp678_AST);
				consume();
				in_return = true;
				{
				if ((_tokenSet_284.member(LA(1)))) {
					{
					int LA1_163 = LA(1);
					int LA2_163 = LA(2);
					
					boolean synPredMatched1116 = false;
					if (((_tokenSet_233.member(LA1_163)) && (_tokenSet_1.member(LA2_163)))) {
						int _m1116 = mark();
						guessing++;
						guess1116:  while (true) {
							{
							{
							switch ( LA(1)) {
							case LITERAL___extension__:
							{
								consume();
								break;
							}
							case LPAREN:
							case LCURLY:
							case AMPERSAND:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess1116;}
							}
							}
							}
							cast_array_initializer_head_g();
							if (matchError) {break guess1116;}
							}
						synPredMatched1116 = true;
						break;} // guess1116
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1116);
						guessing--;
					}
					if ( synPredMatched1116 ) {
						initializer();
						if (matchError) {break loop189;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((_tokenSet_189.member(LA1_163)) && (_tokenSet_1.member(LA2_163))) {
						expression();
						if (matchError) {break loop189;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_284, tokenNames);if (matchError) {break loop189;}
					}
					
					}
				}
				else if ((LA(1)==EOF||LA(1)==SEMICOLON)) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_371, tokenNames);if (matchError) {break loop189;}
				}
				
				}
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
					break;
				}
				case SEMICOLON:
				{
					AST tmp680_AST = null;
					tmp680_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp680_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop189;}
				}
				}
				}
				jump_statement_AST = (AST)currentAST.root;
				in_return = false; /*end_of_stmt();*/ jump_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_RETURN_STATEMENT,"CSM_RETURN_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(jump_statement_AST));
				currentAST.root = jump_statement_AST;
				currentAST.child = jump_statement_AST!=null &&jump_statement_AST.getFirstChild()!=null ?
					jump_statement_AST.getFirstChild() : jump_statement_AST;
				currentAST.advanceChildToEnd();
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_372, tokenNames);if (matchError) {break loop189;}
			}
			}
			}
			jump_statement_AST = (AST)currentAST.root;
		break;} // loop189
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((jump_statement_AST == null) && (currentAST.root != null)) {
			jump_statement_AST = (AST)currentAST.root;
			in_return = false; /*end_of_stmt();*/ jump_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_RETURN_STATEMENT,"CSM_RETURN_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(jump_statement_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_366);
			resetMatchError();
	}
	returnAST = jump_statement_AST;
}

	public final void try_block(
		boolean constructor
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST try_block_AST = null;
		
		loop190:  while (true) {
			literal_try();
			if (matchError) {break loop190;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			int LA1_164 = LA(1);
			int LA2_164 = LA(2);
			
			if (((LA1_164==COLON||LA1_164==LCURLY) && (_tokenSet_1.member(LA2_164)))&&((constructor))) {
				{
				switch ( LA(1)) {
				case COLON:
				{
					ctor_initializer();
					if (matchError) {break loop190;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_127, tokenNames);if (matchError) {break loop190;}
				}
				}
				}
			}
			else if ((LA1_164==LCURLY) && (_tokenSet_1.member(LA2_164))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_127, tokenNames);if (matchError) {break loop190;}
			}
			
			}
			compound_statement();
			if (matchError) {break loop190;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			_loop1124:
			do {
				int LA1_165 = LA(1);
				int LA2_165 = LA(2);
				
				if ((LA1_165==LITERAL_catch||LA1_165==LITERAL___finally) && (LA2_165==LPAREN||LA2_165==LCURLY)) {
					handler();
					if (matchError) {break loop190;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop1124;
				}
				
			} while (true);
			}
			try_block_AST = (AST)currentAST.root;
			try_block_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TRY_STATEMENT,"CSM_TRY_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(try_block_AST));
			currentAST.root = try_block_AST;
			currentAST.child = try_block_AST!=null &&try_block_AST.getFirstChild()!=null ?
				try_block_AST.getFirstChild() : try_block_AST;
			currentAST.advanceChildToEnd();
			try_block_AST = (AST)currentAST.root;
		break;} // loop190
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((try_block_AST == null) && (currentAST.root != null)) {
			try_block_AST = (AST)currentAST.root;
			try_block_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_TRY_STATEMENT,"CSM_TRY_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(try_block_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = try_block_AST;
}

	protected final void label() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST label_AST = null;
		String s;
		
		loop191:  while (true) {
			s=literal_ident();
			if (matchError) {break loop191;}
			astFactory.addASTChild(currentAST, returnAST);
			label_AST = (AST)currentAST.root;
			label_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_LABELED_STATEMENT,"CSM_LABELED_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(label_AST));
			currentAST.root = label_AST;
			currentAST.child = label_AST!=null &&label_AST.getFirstChild()!=null ?
				label_AST.getFirstChild() : label_AST;
			currentAST.advanceChildToEnd();
			label_AST = (AST)currentAST.root;
		break;} // loop191
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((label_AST == null) && (currentAST.root != null)) {
			label_AST = (AST)currentAST.root;
			label_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_LABELED_STATEMENT,"CSM_LABELED_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(label_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_373);
			resetMatchError();
	}
	returnAST = label_AST;
}

	protected final void is_va_list_type() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST is_va_list_type_AST = null;
		Token  id = null;
		AST id_AST = null;
		
		loop192:  while (true) {
			id = LT(1);
			id_AST = astFactory.create(id);
			astFactory.addASTChild(currentAST, id_AST);
			match(IDENT);
			if (matchError) {break loop192;}
			if (!("va_list".contentEquals(id.getText())))
			{matchError=true;
			matchException = new SemanticException("\"va_list\".contentEquals(id.getText())");
			if (matchError) {break loop192;}}
			is_va_list_type_AST = (AST)currentAST.root;
		break;} // loop192
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = is_va_list_type_AST;
}

	public final void case_expression() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST case_expression_AST = null;
		
		loop193:  while (true) {
			constant_expression();
			if (matchError) {break loop193;}
			astFactory.addASTChild(currentAST, returnAST);
			case_expression_AST = (AST)currentAST.root;
			case_expression_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CASE_STATEMENT,"CSM_CASE_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(case_expression_AST));
			currentAST.root = case_expression_AST;
			currentAST.child = case_expression_AST!=null &&case_expression_AST.getFirstChild()!=null ?
				case_expression_AST.getFirstChild() : case_expression_AST;
			currentAST.advanceChildToEnd();
			case_expression_AST = (AST)currentAST.root;
		break;} // loop193
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((case_expression_AST == null) && (currentAST.root != null)) {
			case_expression_AST = (AST)currentAST.root;
			case_expression_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CASE_STATEMENT,"CSM_CASE_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(case_expression_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_373);
			resetMatchError();
	}
	returnAST = case_expression_AST;
}

	protected final void default_label() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST default_label_AST = null;
		
		loop194:  while (true) {
			AST tmp681_AST = null;
			tmp681_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp681_AST);
			match(LITERAL_default);
			if (matchError) {break loop194;}
			default_label_AST = (AST)currentAST.root;
			default_label_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_DEFAULT_STATEMENT,"CSM_DEFAULT_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(default_label_AST));
			currentAST.root = default_label_AST;
			currentAST.child = default_label_AST!=null &&default_label_AST.getFirstChild()!=null ?
				default_label_AST.getFirstChild() : default_label_AST;
			currentAST.advanceChildToEnd();
			default_label_AST = (AST)currentAST.root;
		break;} // loop194
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((default_label_AST == null) && (currentAST.root != null)) {
			default_label_AST = (AST)currentAST.root;
			default_label_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_DEFAULT_STATEMENT,"CSM_DEFAULT_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(default_label_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_373);
			resetMatchError();
	}
	returnAST = default_label_AST;
}

	public final void exception_declaration() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST exception_declaration_AST = null;
		
		loop195:  while (true) {
			parameter_declaration_list(false);
			if (matchError) {break loop195;}
			astFactory.addASTChild(currentAST, returnAST);
			exception_declaration_AST = (AST)currentAST.root;
		break;} // loop195
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_192);
			resetMatchError();
	}
	returnAST = exception_declaration_AST;
}

	protected final void literal_finally() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_finally_AST = null;
		
		loop196:  while (true) {
			AST tmp682_AST = null;
			tmp682_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp682_AST);
			match(LITERAL___finally);
			if (matchError) {break loop196;}
			literal_finally_AST = (AST)currentAST.root;
		break;} // loop196
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_145);
			resetMatchError();
	}
	returnAST = literal_finally_AST;
}

	protected final void condition() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST condition_AST = null;
		
		loop197:  while (true) {
			{
			int LA1_166 = LA(1);
			int LA2_166 = LA(2);
			
			boolean synPredMatched1077 = false;
			if (((_tokenSet_22.member(LA1_166)) && (_tokenSet_172.member(LA2_166)))) {
				int _m1077 = mark();
				guessing++;
				guess1077:  while (true) {
					{
					condition_declaration_g();
					if (matchError) {break guess1077;}
					}
				synPredMatched1077 = true;
				break;} // guess1077
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1077);
				guessing--;
			}
			if ( synPredMatched1077 ) {
				condition_declaration();
				if (matchError) {break loop197;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_189.member(LA1_166)) && (_tokenSet_1.member(LA2_166))) {
				condition_expression();
				if (matchError) {break loop197;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_191, tokenNames);if (matchError) {break loop197;}
			}
			
			}
			condition_AST = (AST)currentAST.root;
			condition_AST=(AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CONDITION,"CSM_CONDITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(condition_AST));
			currentAST.root = condition_AST;
			currentAST.child = condition_AST!=null &&condition_AST.getFirstChild()!=null ?
				condition_AST.getFirstChild() : condition_AST;
			currentAST.advanceChildToEnd();
			condition_AST = (AST)currentAST.root;
		break;} // loop197
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((condition_AST == null) && (currentAST.root != null)) {
			condition_AST = (AST)currentAST.root;
			condition_AST=(AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CONDITION,"CSM_CONDITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(condition_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_374);
			resetMatchError();
	}
	returnAST = condition_AST;
}

	protected final void condition_declaration() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST condition_declaration_AST = null;
		int ts = tsInvalid;
		
		loop198:  while (true) {
			declaration_specifiers(true, false);
			if (matchError) {break loop198;}
			astFactory.addASTChild(currentAST, returnAST);
			declarator(declStatement, 0);
			if (matchError) {break loop198;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case ASSIGNEQUAL:
			{
				AST tmp683_AST = null;
				tmp683_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp683_AST);
				consume();
				assignment_expression();
				if (matchError) {break loop198;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LCURLY:
			{
				array_initializer();
				if (matchError) {break loop198;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_15, tokenNames);if (matchError) {break loop198;}
			}
			}
			}
			condition_declaration_AST = (AST)currentAST.root;
		break;} // loop198
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_374);
			resetMatchError();
	}
	returnAST = condition_declaration_AST;
}

	protected final void condition_expression() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST condition_expression_AST = null;
		
		loop199:  while (true) {
			expression();
			if (matchError) {break loop199;}
			astFactory.addASTChild(currentAST, returnAST);
			condition_expression_AST = (AST)currentAST.root;
		break;} // loop199
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_374);
			resetMatchError();
	}
	returnAST = condition_expression_AST;
}

	public final void assignment_expression() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST assignment_expression_AST = null;
		
		loop200:  while (true) {
			{
			int LA1_167 = LA(1);
			int LA2_167 = LA(2);
			
			boolean synPredMatched1174 = false;
			if (((LA1_167==LPAREN||LA1_167==AMPERSAND) && (_tokenSet_190.member(LA2_167)))) {
				int _m1174 = mark();
				guessing++;
				guess1174:  while (true) {
					{
					cast_array_initializer_head_g();
					if (matchError) {break guess1174;}
					}
				synPredMatched1174 = true;
				break;} // guess1174
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1174);
				guessing--;
			}
			if ( synPredMatched1174 ) {
				cast_array_initializer();
				if (matchError) {break loop200;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_169.member(LA1_167)) && (_tokenSet_1.member(LA2_167))) {
				lazy_expression(false, false, 0);
				if (matchError) {break loop200;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((LA1_167==LITERAL_throw)) {
				throw_expression();
				if (matchError) {break loop200;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_189, tokenNames);if (matchError) {break loop200;}
			}
			
			}
			{
			int LA1_168 = LA(1);
			int LA2_168 = LA(2);
			
			if ((_tokenSet_239.member(LA1_168)) && (_tokenSet_284.member(LA2_168))) {
				{
				switch ( LA(1)) {
				case ASSIGNEQUAL:
				{
					AST tmp684_AST = null;
					tmp684_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp684_AST);
					consume();
					break;
				}
				case TIMESEQUAL:
				{
					AST tmp685_AST = null;
					tmp685_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp685_AST);
					consume();
					break;
				}
				case DIVIDEEQUAL:
				{
					AST tmp686_AST = null;
					tmp686_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp686_AST);
					consume();
					break;
				}
				case MINUSEQUAL:
				{
					AST tmp687_AST = null;
					tmp687_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp687_AST);
					consume();
					break;
				}
				case PLUSEQUAL:
				{
					AST tmp688_AST = null;
					tmp688_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp688_AST);
					consume();
					break;
				}
				case MODEQUAL:
				{
					AST tmp689_AST = null;
					tmp689_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp689_AST);
					consume();
					break;
				}
				case SHIFTLEFTEQUAL:
				{
					AST tmp690_AST = null;
					tmp690_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp690_AST);
					consume();
					break;
				}
				case SHIFTRIGHTEQUAL:
				{
					AST tmp691_AST = null;
					tmp691_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp691_AST);
					consume();
					break;
				}
				case BITWISEANDEQUAL:
				{
					AST tmp692_AST = null;
					tmp692_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp692_AST);
					consume();
					break;
				}
				case BITWISEXOREQUAL:
				{
					AST tmp693_AST = null;
					tmp693_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp693_AST);
					consume();
					break;
				}
				case BITWISEOREQUAL:
				{
					AST tmp694_AST = null;
					tmp694_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp694_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_239, tokenNames);if (matchError) {break loop200;}
				}
				}
				}
				{
				if ((_tokenSet_189.member(LA(1)))) {
					assignment_expression();
					if (matchError) {break loop200;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA(1)==LCURLY)) {
					array_initializer();
					if (matchError) {break loop200;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_284, tokenNames);if (matchError) {break loop200;}
				}
				
				}
			}
			else if ((_tokenSet_243.member(LA1_168)) && (_tokenSet_1.member(LA2_168))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_243, tokenNames);if (matchError) {break loop200;}
			}
			
			}
			assignment_expression_AST = (AST)currentAST.root;
		break;} // loop200
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_243);
			resetMatchError();
	}
	returnAST = assignment_expression_AST;
}

	protected final void while_statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST while_statement_AST = null;
		
		loop201:  while (true) {
			AST tmp695_AST = null;
			tmp695_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp695_AST);
			match(LITERAL_while);
			if (matchError) {break loop201;}
			match(LPAREN);
			if (matchError) {break loop201;}
			condition();
			if (matchError) {break loop201;}
			astFactory.addASTChild(currentAST, returnAST);
			match(RPAREN);
			if (matchError) {break loop201;}
			single_statement();
			if (matchError) {break loop201;}
			astFactory.addASTChild(currentAST, returnAST);
			while_statement_AST = (AST)currentAST.root;
			while_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_WHILE_STATEMENT,"CSM_WHILE_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(while_statement_AST));
			currentAST.root = while_statement_AST;
			currentAST.child = while_statement_AST!=null &&while_statement_AST.getFirstChild()!=null ?
				while_statement_AST.getFirstChild() : while_statement_AST;
			currentAST.advanceChildToEnd();
			while_statement_AST = (AST)currentAST.root;
		break;} // loop201
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((while_statement_AST == null) && (currentAST.root != null)) {
			while_statement_AST = (AST)currentAST.root;
			while_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_WHILE_STATEMENT,"CSM_WHILE_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(while_statement_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_366);
			resetMatchError();
	}
	returnAST = while_statement_AST;
}

	protected final void do_while_statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST do_while_statement_AST = null;
		
		loop202:  while (true) {
			AST tmp698_AST = null;
			tmp698_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp698_AST);
			match(LITERAL_do);
			if (matchError) {break loop202;}
			single_statement();
			if (matchError) {break loop202;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp699_AST = null;
			tmp699_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp699_AST);
			match(LITERAL_while);
			if (matchError) {break loop202;}
			match(LPAREN);
			if (matchError) {break loop202;}
			expression();
			if (matchError) {break loop202;}
			astFactory.addASTChild(currentAST, returnAST);
			match(RPAREN);
			if (matchError) {break loop202;}
			{
			switch ( LA(1)) {
			case EOF:
			{
				consume();
				reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
				break;
			}
			case SEMICOLON:
			{
				AST tmp703_AST = null;
				tmp703_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp703_AST);
				consume();
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop202;}
			}
			}
			}
			do_while_statement_AST = (AST)currentAST.root;
			do_while_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_DO_WHILE_STATEMENT,"CSM_DO_WHILE_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(do_while_statement_AST));
			currentAST.root = do_while_statement_AST;
			currentAST.child = do_while_statement_AST!=null &&do_while_statement_AST.getFirstChild()!=null ?
				do_while_statement_AST.getFirstChild() : do_while_statement_AST;
			currentAST.advanceChildToEnd();
			do_while_statement_AST = (AST)currentAST.root;
		break;} // loop202
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((do_while_statement_AST == null) && (currentAST.root != null)) {
			do_while_statement_AST = (AST)currentAST.root;
			do_while_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_DO_WHILE_STATEMENT,"CSM_DO_WHILE_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(do_while_statement_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_366);
			resetMatchError();
	}
	returnAST = do_while_statement_AST;
}

	protected final void for_statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST for_statement_AST = null;
		
		loop203:  while (true) {
			AST tmp704_AST = null;
			tmp704_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp704_AST);
			match(LITERAL_for);
			if (matchError) {break loop203;}
			match(LPAREN);
			if (matchError) {break loop203;}
			{
			int LA1_169 = LA(1);
			int LA2_169 = LA(2);
			
			boolean synPredMatched1090 = false;
			if (((_tokenSet_22.member(LA1_169)) && (_tokenSet_172.member(LA2_169)))) {
				int _m1090 = mark();
				guessing++;
				guess1090:  while (true) {
					{
					for_range_init_statement_g();
					if (matchError) {break guess1090;}
					match(COLON);
					if (matchError) {break guess1090;}
					}
				synPredMatched1090 = true;
				break;} // guess1090
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1090);
				guessing--;
			}
			if ( synPredMatched1090 ) {
				for_range_init_statement();
				if (matchError) {break loop203;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp706_AST = null;
				tmp706_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp706_AST);
				match(COLON);
				if (matchError) {break loop203;}
				{
				if ((_tokenSet_189.member(LA(1)))) {
					expression();
					if (matchError) {break loop203;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else if ((LA(1)==LCURLY)) {
					array_initializer();
					if (matchError) {break loop203;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_284, tokenNames);if (matchError) {break loop203;}
				}
				
				}
			}
			else if ((_tokenSet_375.member(LA1_169)) && (_tokenSet_1.member(LA2_169))) {
				for_init_statement();
				if (matchError) {break loop203;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				if ((_tokenSet_376.member(LA(1)))) {
					{
					if ((_tokenSet_191.member(LA(1)))) {
						condition();
						if (matchError) {break loop203;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((LA(1)==EOF||LA(1)==SEMICOLON)) {
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_376, tokenNames);if (matchError) {break loop203;}
					}
					
					}
					{
					switch ( LA(1)) {
					case EOF:
					{
						consume();
						reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
						break;
					}
					case SEMICOLON:
					{
						AST tmp708_AST = null;
						tmp708_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp708_AST);
						consume();
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop203;}
					}
					}
					}
					{
					if ((_tokenSet_189.member(LA(1)))) {
						expression();
						if (matchError) {break loop203;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((LA(1)==RPAREN)) {
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_377, tokenNames);if (matchError) {break loop203;}
					}
					
					}
				}
				else if ((LA(1)==RPAREN)) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_378, tokenNames);if (matchError) {break loop203;}
				}
				
				}
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_375, tokenNames);if (matchError) {break loop203;}
			}
			
			}
			match(RPAREN);
			if (matchError) {break loop203;}
			single_statement();
			if (matchError) {break loop203;}
			astFactory.addASTChild(currentAST, returnAST);
			for_statement_AST = (AST)currentAST.root;
			for_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FOR_STATEMENT,"CSM_FOR_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(for_statement_AST));
			currentAST.root = for_statement_AST;
			currentAST.child = for_statement_AST!=null &&for_statement_AST.getFirstChild()!=null ?
				for_statement_AST.getFirstChild() : for_statement_AST;
			currentAST.advanceChildToEnd();
			for_statement_AST = (AST)currentAST.root;
		break;} // loop203
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((for_statement_AST == null) && (currentAST.root != null)) {
			for_statement_AST = (AST)currentAST.root;
			for_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FOR_STATEMENT,"CSM_FOR_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(for_statement_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_366);
			resetMatchError();
	}
	returnAST = for_statement_AST;
}

	protected final void for_range_init_statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST for_range_init_statement_AST = null;
		
		loop204:  while (true) {
			declaration_specifiers(true, false);
			if (matchError) {break loop204;}
			astFactory.addASTChild(currentAST, returnAST);
			init_declarator(declStatement);
			if (matchError) {break loop204;}
			astFactory.addASTChild(currentAST, returnAST);
			for_range_init_statement_AST = (AST)currentAST.root;
			for_range_init_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FOR_INIT_STATEMENT,"CSM_FOR_INIT_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(for_range_init_statement_AST));
			currentAST.root = for_range_init_statement_AST;
			currentAST.child = for_range_init_statement_AST!=null &&for_range_init_statement_AST.getFirstChild()!=null ?
				for_range_init_statement_AST.getFirstChild() : for_range_init_statement_AST;
			currentAST.advanceChildToEnd();
			for_range_init_statement_AST = (AST)currentAST.root;
		break;} // loop204
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((for_range_init_statement_AST == null) && (currentAST.root != null)) {
			for_range_init_statement_AST = (AST)currentAST.root;
			for_range_init_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FOR_INIT_STATEMENT,"CSM_FOR_INIT_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(for_range_init_statement_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_373);
			resetMatchError();
	}
	returnAST = for_range_init_statement_AST;
}

	protected final void for_init_statement() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST for_init_statement_AST = null;
		
		loop205:  while (true) {
			{
			int LA1_170 = LA(1);
			int LA2_170 = LA(2);
			
			boolean synPredMatched1099 = false;
			if (((_tokenSet_26.member(LA1_170)) && (_tokenSet_27.member(LA2_170)))) {
				int _m1099 = mark();
				guessing++;
				guess1099:  while (true) {
					{
					declaration_g(declStatement);
					if (matchError) {break guess1099;}
					}
				synPredMatched1099 = true;
				break;} // guess1099
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1099);
				guessing--;
			}
			if ( synPredMatched1099 ) {
				declaration(declStatement);
				if (matchError) {break loop205;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_189.member(LA1_170)) && (_tokenSet_1.member(LA2_170))) {
				expression();
				if (matchError) {break loop205;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
					break;
				}
				case SEMICOLON:
				{
					AST tmp711_AST = null;
					tmp711_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp711_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop205;}
				}
				}
				}
			}
			else if ((LA1_170==EOF||LA1_170==SEMICOLON)) {
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					reportError(new NoViableAltException(org.netbeans.modules.cnd.apt.utils.APTUtils.EOF_TOKEN, getFilename()));
					break;
				}
				case SEMICOLON:
				{
					AST tmp713_AST = null;
					tmp713_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp713_AST);
					consume();
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_6, tokenNames);if (matchError) {break loop205;}
				}
				}
				}
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_375, tokenNames);if (matchError) {break loop205;}
			}
			
			}
			for_init_statement_AST = (AST)currentAST.root;
			for_init_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FOR_INIT_STATEMENT,"CSM_FOR_INIT_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(for_init_statement_AST));
			currentAST.root = for_init_statement_AST;
			currentAST.child = for_init_statement_AST!=null &&for_init_statement_AST.getFirstChild()!=null ?
				for_init_statement_AST.getFirstChild() : for_init_statement_AST;
			currentAST.advanceChildToEnd();
			for_init_statement_AST = (AST)currentAST.root;
		break;} // loop205
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((for_init_statement_AST == null) && (currentAST.root != null)) {
			for_init_statement_AST = (AST)currentAST.root;
			for_init_statement_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FOR_INIT_STATEMENT,"CSM_FOR_INIT_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(for_init_statement_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_378);
			resetMatchError();
	}
	returnAST = for_init_statement_AST;
}

	public final void handler() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST handler_AST = null;
		
		loop206:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_catch:
			{
				AST tmp714_AST = null;
				tmp714_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp714_AST);
				consume();
				AST tmp715_AST = null;
				tmp715_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp715_AST);
				match(LPAREN);
				if (matchError) {break loop206;}
				exception_declaration();
				if (matchError) {break loop206;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp716_AST = null;
				tmp716_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp716_AST);
				match(RPAREN);
				if (matchError) {break loop206;}
				break;
			}
			case LITERAL___finally:
			{
				literal_finally();
				if (matchError) {break loop206;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_171, tokenNames);if (matchError) {break loop206;}
			}
			}
			}
			compound_statement();
			if (matchError) {break loop206;}
			astFactory.addASTChild(currentAST, returnAST);
			handler_AST = (AST)currentAST.root;
			/*exceptionEndHandler();*/{handler_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CATCH_CLAUSE,"CSM_CATCH_CLAUSE", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(handler_AST));}
			currentAST.root = handler_AST;
			currentAST.child = handler_AST!=null &&handler_AST.getFirstChild()!=null ?
				handler_AST.getFirstChild() : handler_AST;
			currentAST.advanceChildToEnd();
			handler_AST = (AST)currentAST.root;
		break;} // loop206
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((handler_AST == null) && (currentAST.root != null)) {
			handler_AST = (AST)currentAST.root;
			/*exceptionEndHandler();*/{handler_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CATCH_CLAUSE,"CSM_CATCH_CLAUSE", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(handler_AST));}
			}
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = handler_AST;
}

	public final void throw_expression() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST throw_expression_AST = null;
		
		loop207:  while (true) {
			AST tmp717_AST = null;
			tmp717_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp717_AST);
			match(LITERAL_throw);
			if (matchError) {break loop207;}
			{
			int LA1_171 = LA(1);
			int LA2_171 = LA(2);
			
			if ((_tokenSet_189.member(LA1_171)) && (_tokenSet_1.member(LA2_171))) {
				assignment_expression();
				if (matchError) {break loop207;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_243.member(LA1_171)) && (_tokenSet_1.member(LA2_171))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_379, tokenNames);if (matchError) {break loop207;}
			}
			
			}
			throw_expression_AST = (AST)currentAST.root;
		break;} // loop207
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_243);
			resetMatchError();
	}
	returnAST = throw_expression_AST;
}

	public final void alias_declaration_type() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST alias_declaration_type_AST = null;
		
		loop208:  while (true) {
			{
			int LA1_172 = LA(1);
			int LA2_172 = LA(2);
			
			boolean synPredMatched1137 = false;
			if (((_tokenSet_22.member(LA1_172)) && (_tokenSet_380.member(LA2_172)))) {
				int _m1137 = mark();
				guessing++;
				guess1137:  while (true) {
					{
					class_head_g();
					if (matchError) {break guess1137;}
					}
				synPredMatched1137 = true;
				break;} // guess1137
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1137);
				guessing--;
			}
			if ( synPredMatched1137 ) {
				type_name();
				if (matchError) {break loop208;}
				astFactory.addASTChild(currentAST, returnAST);
				alias_declaration_type_AST = (AST)currentAST.root;
				alias_declaration_type_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_CLASS_DECLARATION,"CSM_CLASS_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(alias_declaration_type_AST));
				currentAST.root = alias_declaration_type_AST;
				currentAST.child = alias_declaration_type_AST!=null &&alias_declaration_type_AST.getFirstChild()!=null ?
					alias_declaration_type_AST.getFirstChild() : alias_declaration_type_AST;
				currentAST.advanceChildToEnd();
			}
			else {
				boolean synPredMatched1139 = false;
				if (((LA1_172==LITERAL_enum) && (_tokenSet_79.member(LA2_172)))) {
					int _m1139 = mark();
					guessing++;
					guess1139:  while (true) {
						{
						enum_def_head_g();
						if (matchError) {break guess1139;}
						}
					synPredMatched1139 = true;
					break;} // guess1139
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m1139);
					guessing--;
				}
				if ( synPredMatched1139 ) {
					if(statementTrace>=1) printf("typedef_enum [%d]\n",LT(1).getLine());
					enum_specifier();
					if (matchError) {break loop208;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					switch ( LA(1)) {
					case ELLIPSIS:
					case LPAREN:
					case LSQUARE:
					case STAR:
					case AND:
					case AMPERSAND:
					case TILDE:
					case SCOPE:
					case IDENT:
					case LITERAL_OPERATOR:
					case LITERAL__stdcall:
					case LITERAL___stdcall:
					case LITERAL_this:
					case LITERAL_true:
					case LITERAL_false:
					case LITERAL__cdecl:
					case LITERAL___cdecl:
					case LITERAL__near:
					case LITERAL___near:
					case LITERAL__far:
					case LITERAL___far:
					case LITERAL___interrupt:
					case LITERAL_pascal:
					case LITERAL__pascal:
					case LITERAL___pascal:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_decltype:
					case LITERAL___decltype:
					case LITERAL___clrcall:
					{
						init_declarator_list(declOther);
						if (matchError) {break loop208;}
						astFactory.addASTChild(currentAST, returnAST);
						break;
					}
					case SEMICOLON:
					{
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_41, tokenNames);if (matchError) {break loop208;}
					}
					}
					}
					alias_declaration_type_AST = (AST)currentAST.root;
					alias_declaration_type_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_ENUM_DECLARATION,"CSM_ENUM_DECLARATION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(alias_declaration_type_AST));
					currentAST.root = alias_declaration_type_AST;
					currentAST.child = alias_declaration_type_AST!=null &&alias_declaration_type_AST.getFirstChild()!=null ?
						alias_declaration_type_AST.getFirstChild() : alias_declaration_type_AST;
					currentAST.advanceChildToEnd();
				}
				else if ((_tokenSet_22.member(LA1_172)) && (_tokenSet_381.member(LA2_172))) {
					alias_type_name();
					if (matchError) {break loop208;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_22, tokenNames);if (matchError) {break loop208;}
				}
				}
				}
				alias_declaration_type_AST = (AST)currentAST.root;
			break;} // loop208
			if (matchError) {
				reportError(matchException);
				recover(matchException,_tokenSet_229);
				resetMatchError();
		}
		returnAST = alias_declaration_type_AST;
	}
	
	public final void alias_type_name() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST alias_type_name_AST = null;
		
		loop209:  while (true) {
			type_name();
			if (matchError) {break loop209;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			switch ( LA(1)) {
			case POINTERTO:
			{
				trailing_type();
				if (matchError) {break loop209;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case SEMICOLON:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_382, tokenNames);if (matchError) {break loop209;}
			}
			}
			}
			alias_type_name_AST = (AST)currentAST.root;
		break;} // loop209
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_229);
			resetMatchError();
	}
	returnAST = alias_type_name_AST;
}

	protected final void literal_asm() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_asm_AST = null;
		
		loop210:  while (true) {
			switch ( LA(1)) {
			case LITERAL_asm:
			{
				AST tmp718_AST = null;
				tmp718_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp718_AST);
				consume();
				literal_asm_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__asm:
			{
				AST tmp719_AST = null;
				tmp719_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp719_AST);
				consume();
				literal_asm_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___asm:
			{
				AST tmp720_AST = null;
				tmp720_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp720_AST);
				consume();
				literal_asm_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___asm__:
			{
				AST tmp721_AST = null;
				tmp721_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp721_AST);
				consume();
				literal_asm_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_140, tokenNames);if (matchError) {break loop210;}
			}
			}
		break;} // loop210
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_367);
			resetMatchError();
	}
	returnAST = literal_asm_AST;
}

	protected final void balanceSquaresInExpression() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST balanceSquaresInExpression_AST = null;
		/*TypeSpecifier*/int ts=0; String s;
		
		loop211:  while (true) {
			AST tmp722_AST = null;
			tmp722_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp722_AST);
			match(LSQUARE);
			if (matchError) {break loop211;}
			{
			_loop1272:
			do {
				// nongreedy exit test
				if ((LA(1)==RSQUARE) && (_tokenSet_1.member(LA(2)))) break _loop1272;
				int LA1_173 = LA(1);
				int LA2_173 = LA(2);
				
				switch ( LA1_173) {
				case LCURLY:
				{
					balanceCurlies();
					if (matchError) {break loop211;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case LSQUARE:
				{
					balanceSquaresInExpression();
					if (matchError) {break loop211;}
					astFactory.addASTChild(currentAST, returnAST);
					{
					int LA1_174 = LA(1);
					int LA2_174 = LA(2);
					
					boolean synPredMatched1269 = false;
					if (((_tokenSet_245.member(LA1_174)) && (_tokenSet_1.member(LA2_174)))) {
						int _m1269 = mark();
						guessing++;
						guess1269:  while (true) {
							{
							lambda_expression_post_capture_predicate_g();
							if (matchError) {break guess1269;}
							}
						synPredMatched1269 = true;
						break;} // guess1269
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1269);
						guessing--;
					}
					if ( synPredMatched1269 ) {
						lambda_expression_post_capture();
						if (matchError) {break loop211;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((_tokenSet_190.member(LA1_174)) && (_tokenSet_1.member(LA2_174))) {
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_190, tokenNames);if (matchError) {break loop211;}
					}
					
					}
					break;
				}
				case LPAREN:
				{
					balanceParensInExpression();
					if (matchError) {break loop211;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case RPAREN:
				case RCURLY:
				{
					{
					switch ( LA(1)) {
					case RCURLY:
					{
						AST tmp723_AST = null;
						tmp723_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp723_AST);
						consume();
						break;
					}
					case RPAREN:
					{
						AST tmp724_AST = null;
						tmp724_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp724_AST);
						consume();
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_4, tokenNames);if (matchError) {break loop211;}
					}
					}
					}
					reportError(new NoViableAltException(LT(0), getFilename()));
					break;
				}
				default:
					boolean synPredMatched1260 = false;
					if (((_tokenSet_0.member(LA1_173)) && (_tokenSet_190.member(LA2_173)))) {
						int _m1260 = mark();
						guessing++;
						guess1260:  while (true) {
							{
							literal_ident_g();
							if (matchError) {break guess1260;}
							}
						synPredMatched1260 = true;
						break;} // guess1260
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1260);
						guessing--;
					}
					if ( synPredMatched1260 ) {
						s=literal_ident();
						if (matchError) {break loop211;}
						astFactory.addASTChild(currentAST, returnAST);
						{
						_loop1262:
						do {
							int LA1_175 = LA(1);
							int LA2_175 = LA(2);
							
							if ((LA1_175==LSQUARE) && (_tokenSet_190.member(LA2_175))) {
								balanceSquaresInExpression();
								if (matchError) {break loop211;}
								astFactory.addASTChild(currentAST, returnAST);
							}
							else {
								break _loop1262;
							}
							
						} while (true);
						}
					}
					else {
						boolean synPredMatched1264 = false;
						if (((_tokenSet_200.member(LA1_173)) && (_tokenSet_190.member(LA2_173)))) {
							int _m1264 = mark();
							guessing++;
							guess1264:  while (true) {
								{
								builtin_type_g(0);
								if (matchError) {break guess1264;}
								}
							synPredMatched1264 = true;
							break;} // guess1264
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m1264);
							guessing--;
						}
						if ( synPredMatched1264 ) {
							ts=builtin_type(0);
							if (matchError) {break loop211;}
							astFactory.addASTChild(currentAST, returnAST);
							{
							_loop1266:
							do {
								int LA1_176 = LA(1);
								int LA2_176 = LA(2);
								
								if ((LA1_176==LSQUARE) && (_tokenSet_190.member(LA2_176))) {
									balanceSquaresInExpression();
									if (matchError) {break loop211;}
									astFactory.addASTChild(currentAST, returnAST);
								}
								else {
									break _loop1266;
								}
								
							} while (true);
							}
						}
						else if ((_tokenSet_5.member(LA1_173)) && (_tokenSet_190.member(LA2_173))) {
							{
							AST tmp725_AST = null;
							tmp725_AST = astFactory.create(LT(1));
							astFactory.addASTChild(currentAST, tmp725_AST);
							match(_tokenSet_5);
							if (matchError) {break loop211;}
							}
						}
					else {
						break _loop1272;
					}
					}}
				} while (true);
				}
				AST tmp726_AST = null;
				tmp726_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp726_AST);
				match(RSQUARE);
				if (matchError) {break loop211;}
				balanceSquaresInExpression_AST = (AST)currentAST.root;
			break;} // loop211
			if (matchError) {
				reportError(matchException);
				recover(matchException,_tokenSet_1);
				resetMatchError();
		}
		returnAST = balanceSquaresInExpression_AST;
	}
	
	public final void expression_list() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST expression_list_AST = null;
		
		loop212:  while (true) {
			assignment_expression();
			if (matchError) {break loop212;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			_loop1163:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp727_AST = null;
					tmp727_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp727_AST);
					consume();
					assignment_expression();
					if (matchError) {break loop212;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop1163;
				}
				
			} while (true);
			}
			expression_list_AST = (AST)currentAST.root;
		break;} // loop212
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_192);
			resetMatchError();
	}
	returnAST = expression_list_AST;
}

	public final void cast_expression() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cast_expression_AST = null;
		
		loop213:  while (true) {
			lazy_expression(false, false, 0);
			if (matchError) {break loop213;}
			astFactory.addASTChild(currentAST, returnAST);
			cast_expression_AST = (AST)currentAST.root;
		break;} // loop213
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = cast_expression_AST;
}

	public final void lambda_expression_post_capture_predicate() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lambda_expression_post_capture_predicate_AST = null;
		
		loop214:  while (true) {
			{
			switch ( LA(1)) {
			case LPAREN:
			{
				balanceParensInExpression();
				if (matchError) {break loop214;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case POINTERTO:
			case LSQUARE:
			case LCURLY:
			case LITERAL_mutable:
			case LITERAL_throw:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_noexcept:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_245, tokenNames);if (matchError) {break loop214;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_mutable:
			{
				AST tmp728_AST = null;
				tmp728_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp728_AST);
				consume();
				break;
			}
			case POINTERTO:
			case LSQUARE:
			case LCURLY:
			case LITERAL_throw:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_noexcept:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_383, tokenNames);if (matchError) {break loop214;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification();
				if (matchError) {break loop214;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case POINTERTO:
			case LSQUARE:
			case LCURLY:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_384, tokenNames);if (matchError) {break loop214;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification();
				if (matchError) {break loop214;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case POINTERTO:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_385, tokenNames);if (matchError) {break loop214;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case POINTERTO:
			{
				trailing_type();
				if (matchError) {break loop214;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_386, tokenNames);if (matchError) {break loop214;}
			}
			}
			}
			AST tmp729_AST = null;
			tmp729_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp729_AST);
			match(LCURLY);
			if (matchError) {break loop214;}
			lambda_expression_post_capture_predicate_AST = (AST)currentAST.root;
		break;} // loop214
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = lambda_expression_post_capture_predicate_AST;
}

	public final void lambda_expression_post_capture() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lambda_expression_post_capture_AST = null;
		
		loop215:  while (true) {
			{
			{
			switch ( LA(1)) {
			case LPAREN:
			{
				AST tmp730_AST = null;
				tmp730_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp730_AST);
				consume();
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				case LPAREN:
				case LSQUARE:
				case STAR:
				case AND:
				case AMPERSAND:
				case TILDE:
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					parameter_list(false);
					if (matchError) {break loop215;}
					astFactory.addASTChild(currentAST, returnAST);
					break;
				}
				case RPAREN:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_165, tokenNames);if (matchError) {break loop215;}
				}
				}
				}
				AST tmp731_AST = null;
				tmp731_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp731_AST);
				match(RPAREN);
				if (matchError) {break loop215;}
				break;
			}
			case POINTERTO:
			case LSQUARE:
			case LCURLY:
			case LITERAL_mutable:
			case LITERAL_throw:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_noexcept:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_245, tokenNames);if (matchError) {break loop215;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_mutable:
			{
				AST tmp732_AST = null;
				tmp732_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp732_AST);
				consume();
				break;
			}
			case POINTERTO:
			case LSQUARE:
			case LCURLY:
			case LITERAL_throw:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_noexcept:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_383, tokenNames);if (matchError) {break loop215;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification();
				if (matchError) {break loop215;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case POINTERTO:
			case LSQUARE:
			case LCURLY:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_384, tokenNames);if (matchError) {break loop215;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification();
				if (matchError) {break loop215;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case POINTERTO:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_385, tokenNames);if (matchError) {break loop215;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case POINTERTO:
			{
				trailing_type();
				if (matchError) {break loop215;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_386, tokenNames);if (matchError) {break loop215;}
			}
			}
			}
			compound_statement();
			if (matchError) {break loop215;}
			astFactory.addASTChild(currentAST, returnAST);
			lambda_expression_post_capture_AST = (AST)currentAST.root;
			lambda_expression_post_capture_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_DEFINITION,"CSM_FUNCTION_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(lambda_expression_post_capture_AST));
			currentAST.root = lambda_expression_post_capture_AST;
			currentAST.child = lambda_expression_post_capture_AST!=null &&lambda_expression_post_capture_AST.getFirstChild()!=null ?
				lambda_expression_post_capture_AST.getFirstChild() : lambda_expression_post_capture_AST;
			currentAST.advanceChildToEnd();
			}
			lambda_expression_post_capture_AST = (AST)currentAST.root;
			lambda_expression_post_capture_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_DECLARATION_STATEMENT,"CSM_DECLARATION_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(lambda_expression_post_capture_AST));
			currentAST.root = lambda_expression_post_capture_AST;
			currentAST.child = lambda_expression_post_capture_AST!=null &&lambda_expression_post_capture_AST.getFirstChild()!=null ?
				lambda_expression_post_capture_AST.getFirstChild() : lambda_expression_post_capture_AST;
			currentAST.advanceChildToEnd();
			lambda_expression_post_capture_AST = (AST)currentAST.root;
		break;} // loop215
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((lambda_expression_post_capture_AST == null) && (currentAST.root != null)) {
			lambda_expression_post_capture_AST = (AST)currentAST.root;
			lambda_expression_post_capture_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_FUNCTION_DEFINITION,"CSM_FUNCTION_DEFINITION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(lambda_expression_post_capture_AST));
			}
			// when recover we'd like to perform any "build AST" actions
			if ((lambda_expression_post_capture_AST == null) && (currentAST.root != null)) {
			lambda_expression_post_capture_AST = (AST)currentAST.root;
			lambda_expression_post_capture_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_DECLARATION_STATEMENT,"CSM_DECLARATION_STATEMENT", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(lambda_expression_post_capture_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_1);
			resetMatchError();
	}
	returnAST = lambda_expression_post_capture_AST;
}

	public final void constant() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST constant_AST = null;
		
		loop216:  while (true) {
			switch ( LA(1)) {
			case OCTALINT:
			{
				AST tmp733_AST = null;
				tmp733_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp733_AST);
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case DECIMALINT:
			{
				AST tmp734_AST = null;
				tmp734_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp734_AST);
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case HEXADECIMALINT:
			{
				AST tmp735_AST = null;
				tmp735_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp735_AST);
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case BINARYINT:
			{
				AST tmp736_AST = null;
				tmp736_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp736_AST);
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case CHAR_LITERAL:
			{
				AST tmp737_AST = null;
				tmp737_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp737_AST);
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case STRING_LITERAL:
			{
				{
				int _cnt1341=0;
				_loop1341:
				do {
					int LA1_177 = LA(1);
					int LA2_177 = LA(2);
					
					if ((LA1_177==STRING_LITERAL) && (_tokenSet_243.member(LA2_177))) {
						AST tmp738_AST = null;
						tmp738_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp738_AST);
						consume();
					}
					else {
						if ( _cnt1341>=1 ) { break _loop1341; } else {matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_163, tokenNames);if (matchError) {break loop216;}}
					}
					
					_cnt1341++;
				} while (true);
				}
				constant_AST = (AST)currentAST.root;
				break;
			}
			case FLOATONE:
			{
				AST tmp739_AST = null;
				tmp739_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp739_AST);
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case FLOATTWO:
			{
				AST tmp740_AST = null;
				tmp740_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp740_AST);
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_true:
			{
				AST tmp741_AST = null;
				tmp741_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp741_AST);
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_false:
			{
				AST tmp742_AST = null;
				tmp742_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp742_AST);
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_nullptr:
			{
				AST tmp743_AST = null;
				tmp743_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp743_AST);
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___null:
			{
				AST tmp744_AST = null;
				tmp744_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp744_AST);
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_387, tokenNames);if (matchError) {break loop216;}
			}
			}
		break;} // loop216
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_243);
			resetMatchError();
	}
	returnAST = constant_AST;
}

	protected final void literal_near() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_near_AST = null;
		
		loop217:  while (true) {
			switch ( LA(1)) {
			case LITERAL__near:
			{
				AST tmp745_AST = null;
				tmp745_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp745_AST);
				consume();
				literal_near_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___near:
			{
				AST tmp746_AST = null;
				tmp746_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp746_AST);
				consume();
				literal_near_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_388, tokenNames);if (matchError) {break loop217;}
			}
			}
		break;} // loop217
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_186);
			resetMatchError();
	}
	returnAST = literal_near_AST;
}

	protected final void literal_far() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_far_AST = null;
		
		loop218:  while (true) {
			switch ( LA(1)) {
			case LITERAL__far:
			{
				AST tmp747_AST = null;
				tmp747_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp747_AST);
				consume();
				literal_far_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___far:
			{
				AST tmp748_AST = null;
				tmp748_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp748_AST);
				consume();
				literal_far_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_389, tokenNames);if (matchError) {break loop218;}
			}
			}
		break;} // loop218
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_186);
			resetMatchError();
	}
	returnAST = literal_far_AST;
}

	protected final void literal_pascal() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_pascal_AST = null;
		
		loop219:  while (true) {
			switch ( LA(1)) {
			case LITERAL_pascal:
			{
				AST tmp749_AST = null;
				tmp749_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp749_AST);
				consume();
				literal_pascal_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__pascal:
			{
				AST tmp750_AST = null;
				tmp750_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp750_AST);
				consume();
				literal_pascal_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___pascal:
			{
				AST tmp751_AST = null;
				tmp751_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp751_AST);
				consume();
				literal_pascal_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_390, tokenNames);if (matchError) {break loop219;}
			}
			}
		break;} // loop219
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_186);
			resetMatchError();
	}
	returnAST = literal_pascal_AST;
}

	public final void lazy_type_decltype(
		int templateLevel
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_type_decltype_AST = null;
		
		loop220:  while (true) {
			literal_decltype();
			if (matchError) {break loop220;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp752_AST = null;
			tmp752_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp752_AST);
			match(LPAREN);
			if (matchError) {break loop220;}
			lazy_assignment_expression(false, false, templateLevel);
			if (matchError) {break loop220;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp753_AST = null;
			tmp753_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp753_AST);
			match(RPAREN);
			if (matchError) {break loop220;}
			lazy_type_decltype_AST = (AST)currentAST.root;
		break;} // loop220
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_243);
			resetMatchError();
	}
	returnAST = lazy_type_decltype_AST;
}

	protected final void trait_type_literals() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST trait_type_literals_AST = null;
		
		loop221:  while (true) {
			switch ( LA(1)) {
			case LITERAL___is_pod:
			{
				AST tmp754_AST = null;
				tmp754_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp754_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_nothrow_assign:
			{
				AST tmp755_AST = null;
				tmp755_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp755_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_nothrow_copy:
			{
				AST tmp756_AST = null;
				tmp756_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp756_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_nothrow_constructor:
			{
				AST tmp757_AST = null;
				tmp757_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp757_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_trivial_assign:
			{
				AST tmp758_AST = null;
				tmp758_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp758_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_trivial_copy:
			{
				AST tmp759_AST = null;
				tmp759_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp759_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_trivial_destructor:
			{
				AST tmp760_AST = null;
				tmp760_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp760_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_virtual_destructor:
			{
				AST tmp761_AST = null;
				tmp761_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp761_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_abstract:
			{
				AST tmp762_AST = null;
				tmp762_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp762_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_empty:
			{
				AST tmp763_AST = null;
				tmp763_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp763_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_literal_type:
			{
				AST tmp764_AST = null;
				tmp764_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp764_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_polymorphic:
			{
				AST tmp765_AST = null;
				tmp765_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp765_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_standard_layout:
			{
				AST tmp766_AST = null;
				tmp766_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp766_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_trivial:
			{
				AST tmp767_AST = null;
				tmp767_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp767_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_union:
			{
				AST tmp768_AST = null;
				tmp768_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp768_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___underlying_type:
			{
				AST tmp769_AST = null;
				tmp769_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp769_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_class:
			{
				AST tmp770_AST = null;
				tmp770_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp770_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_enum:
			{
				AST tmp771_AST = null;
				tmp771_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp771_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_base_of:
			{
				AST tmp772_AST = null;
				tmp772_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp772_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_trivial_constructor:
			{
				AST tmp773_AST = null;
				tmp773_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp773_AST);
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_391, tokenNames);if (matchError) {break loop221;}
			}
			}
		break;} // loop221
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_243);
			resetMatchError();
	}
	returnAST = trait_type_literals_AST;
}

	public final void optor_simple_tokclass() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST optor_simple_tokclass_AST = null;
		
		loop222:  while (true) {
			{
			switch ( LA(1)) {
			case PLUS:
			{
				AST tmp774_AST = null;
				tmp774_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp774_AST);
				consume();
				break;
			}
			case MINUS:
			{
				AST tmp775_AST = null;
				tmp775_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp775_AST);
				consume();
				break;
			}
			case STAR:
			{
				AST tmp776_AST = null;
				tmp776_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp776_AST);
				consume();
				break;
			}
			case DIVIDE:
			{
				AST tmp777_AST = null;
				tmp777_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp777_AST);
				consume();
				break;
			}
			case MOD:
			{
				AST tmp778_AST = null;
				tmp778_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp778_AST);
				consume();
				break;
			}
			case BITWISEXOR:
			{
				AST tmp779_AST = null;
				tmp779_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp779_AST);
				consume();
				break;
			}
			case AMPERSAND:
			{
				AST tmp780_AST = null;
				tmp780_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp780_AST);
				consume();
				break;
			}
			case BITWISEOR:
			{
				AST tmp781_AST = null;
				tmp781_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp781_AST);
				consume();
				break;
			}
			case TILDE:
			{
				AST tmp782_AST = null;
				tmp782_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp782_AST);
				consume();
				break;
			}
			case NOT:
			{
				AST tmp783_AST = null;
				tmp783_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp783_AST);
				consume();
				break;
			}
			case SHIFTLEFT:
			{
				AST tmp784_AST = null;
				tmp784_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp784_AST);
				consume();
				break;
			}
			case SHIFTRIGHT:
			{
				AST tmp785_AST = null;
				tmp785_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp785_AST);
				consume();
				break;
			}
			case ASSIGNEQUAL:
			{
				AST tmp786_AST = null;
				tmp786_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp786_AST);
				consume();
				break;
			}
			case TIMESEQUAL:
			{
				AST tmp787_AST = null;
				tmp787_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp787_AST);
				consume();
				break;
			}
			case DIVIDEEQUAL:
			{
				AST tmp788_AST = null;
				tmp788_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp788_AST);
				consume();
				break;
			}
			case MODEQUAL:
			{
				AST tmp789_AST = null;
				tmp789_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp789_AST);
				consume();
				break;
			}
			case PLUSEQUAL:
			{
				AST tmp790_AST = null;
				tmp790_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp790_AST);
				consume();
				break;
			}
			case MINUSEQUAL:
			{
				AST tmp791_AST = null;
				tmp791_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp791_AST);
				consume();
				break;
			}
			case SHIFTLEFTEQUAL:
			{
				AST tmp792_AST = null;
				tmp792_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp792_AST);
				consume();
				break;
			}
			case SHIFTRIGHTEQUAL:
			{
				AST tmp793_AST = null;
				tmp793_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp793_AST);
				consume();
				break;
			}
			case BITWISEANDEQUAL:
			{
				AST tmp794_AST = null;
				tmp794_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp794_AST);
				consume();
				break;
			}
			case BITWISEXOREQUAL:
			{
				AST tmp795_AST = null;
				tmp795_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp795_AST);
				consume();
				break;
			}
			case BITWISEOREQUAL:
			{
				AST tmp796_AST = null;
				tmp796_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp796_AST);
				consume();
				break;
			}
			case EQUAL:
			{
				AST tmp797_AST = null;
				tmp797_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp797_AST);
				consume();
				break;
			}
			case NOTEQUAL:
			{
				AST tmp798_AST = null;
				tmp798_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp798_AST);
				consume();
				break;
			}
			case LESSTHAN:
			{
				AST tmp799_AST = null;
				tmp799_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp799_AST);
				consume();
				break;
			}
			case GREATERTHAN:
			{
				AST tmp800_AST = null;
				tmp800_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp800_AST);
				consume();
				{
				int LA1_178 = LA(1);
				int LA2_178 = LA(2);
				
				if ((LA1_178==GREATERTHAN) && (_tokenSet_392.member(LA2_178))) {
					AST tmp801_AST = null;
					tmp801_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp801_AST);
					consume();
				}
				else if ((_tokenSet_392.member(LA1_178)) && (_tokenSet_1.member(LA2_178))) {
				}
				else {
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_392, tokenNames);if (matchError) {break loop222;}
				}
				
				}
				break;
			}
			case LESSTHANOREQUALTO:
			{
				AST tmp802_AST = null;
				tmp802_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp802_AST);
				consume();
				break;
			}
			case GREATERTHANOREQUALTO:
			{
				AST tmp803_AST = null;
				tmp803_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp803_AST);
				consume();
				break;
			}
			case OR:
			{
				AST tmp804_AST = null;
				tmp804_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp804_AST);
				consume();
				break;
			}
			case AND:
			{
				AST tmp805_AST = null;
				tmp805_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp805_AST);
				consume();
				break;
			}
			case PLUSPLUS:
			{
				AST tmp806_AST = null;
				tmp806_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp806_AST);
				consume();
				break;
			}
			case MINUSMINUS:
			{
				AST tmp807_AST = null;
				tmp807_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp807_AST);
				consume();
				break;
			}
			case COMMA:
			{
				AST tmp808_AST = null;
				tmp808_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp808_AST);
				consume();
				break;
			}
			case POINTERTO:
			{
				AST tmp809_AST = null;
				tmp809_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp809_AST);
				consume();
				break;
			}
			case POINTERTOMBR:
			{
				AST tmp810_AST = null;
				tmp810_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp810_AST);
				consume();
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_247, tokenNames);if (matchError) {break loop222;}
			}
			}
			}
			optor_simple_tokclass_AST = (AST)currentAST.root;
		break;} // loop222
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_392);
			resetMatchError();
	}
	returnAST = optor_simple_tokclass_AST;
}

	protected final void balanceLessthanGreaterthanInExpression(
		int templateLevel
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST balanceLessthanGreaterthanInExpression_AST = null;
		
		loop223:  while (true) {
			int LA1_179 = LA(1);
			int LA2_179 = LA(2);
			
			if (((LA1_179==LESSTHAN) && (_tokenSet_91.member(LA2_179)))&&((isTemplateTooDeep(templateLevel, 10)))) {
				lazy_template();
				if (matchError) {break loop223;}
				astFactory.addASTChild(currentAST, returnAST);
				balanceLessthanGreaterthanInExpression_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched1275 = false;
				if (((LA1_179==LESSTHAN) && (_tokenSet_91.member(LA2_179)))) {
					int _m1275 = mark();
					guessing++;
					guess1275:  while (true) {
						{
						templateDepthChecker_g(20);
						if (matchError) {break guess1275;}
						}
					synPredMatched1275 = true;
					break;} // guess1275
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m1275);
					guessing--;
				}
				if ( synPredMatched1275 ) {
					templateDepthChecker(20);
					if (matchError) {break loop223;}
					astFactory.addASTChild(currentAST, returnAST);
					balanceLessthanGreaterthanInExpression_AST = (AST)currentAST.root;
				}
				else {
					boolean synPredMatched1277 = false;
					if (((LA1_179==LESSTHAN) && (_tokenSet_361.member(LA2_179)))) {
						int _m1277 = mark();
						guessing++;
						guess1277:  while (true) {
							{
							simpleBalanceLessthanGreaterthanInExpression_g();
							if (matchError) {break guess1277;}
							}
						synPredMatched1277 = true;
						break;} // guess1277
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1277);
						guessing--;
					}
					if ( synPredMatched1277 ) {
						simpleBalanceLessthanGreaterthanInExpression();
						if (matchError) {break loop223;}
						astFactory.addASTChild(currentAST, returnAST);
						balanceLessthanGreaterthanInExpression_AST = (AST)currentAST.root;
					}
					else if ((LA1_179==LESSTHAN) && (_tokenSet_393.member(LA2_179))) {
						AST tmp811_AST = null;
						tmp811_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp811_AST);
						consume();
						{
						if ((_tokenSet_169.member(LA(1)))) {
							lazy_expression(true, false, templateLevel + 1);
							if (matchError) {break loop223;}
							astFactory.addASTChild(currentAST, returnAST);
						}
						else if ((LA(1)==COMMA||LA(1)==GREATERTHAN)) {
						}
						else {
							matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_393, tokenNames);if (matchError) {break loop223;}
						}
						
						}
						{
						_loop1280:
						do {
							if ((LA(1)==COMMA)) {
								AST tmp812_AST = null;
								tmp812_AST = astFactory.create(LT(1));
								astFactory.addASTChild(currentAST, tmp812_AST);
								consume();
								lazy_expression(true, false, templateLevel + 1);
								if (matchError) {break loop223;}
								astFactory.addASTChild(currentAST, returnAST);
							}
							else {
								break _loop1280;
							}
							
						} while (true);
						}
						AST tmp813_AST = null;
						tmp813_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp813_AST);
						match(GREATERTHAN);
						if (matchError) {break loop223;}
						balanceLessthanGreaterthanInExpression_AST = (AST)currentAST.root;
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_355, tokenNames);if (matchError) {break loop223;}
					}
					}}
				break;} // loop223
				if (matchError) {
					reportError(matchException);
					recover(matchException,_tokenSet_241);
					resetMatchError();
			}
			returnAST = balanceLessthanGreaterthanInExpression_AST;
		}
		
	public final void lazy_base_close() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_base_close_AST = null;
		
		loop224:  while (true) {
			{
			AST tmp814_AST = null;
			tmp814_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp814_AST);
			match(COLON);
			if (matchError) {break loop224;}
			}
			{
			_loop1300:
			do {
				// nongreedy exit test
				if ((LA(1)==LCURLY) && (_tokenSet_1.member(LA(2)))) break _loop1300;
				int LA1_180 = LA(1);
				int LA2_180 = LA(2);
				
				if (((LA1_180 >= ELLIPSIS && LA1_180 <= CSM_END)) && ((LA2_180 >= ELLIPSIS && LA2_180 <= CSM_END))) {
					AST tmp815_AST = null;
					tmp815_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp815_AST);
					matchNot(EOF);
					if (matchError) {break loop224;}
				}
				else {
					break _loop1300;
				}
				
			} while (true);
			}
			balanceCurlies();
			if (matchError) {break loop224;}
			astFactory.addASTChild(currentAST, returnAST);
			lazy_base_close_AST = (AST)currentAST.root;
		break;} // loop224
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_243);
			resetMatchError();
	}
	returnAST = lazy_base_close_AST;
}

	protected final void isGreaterthanInTheRestOfExpression(
		int templateLevel
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST isGreaterthanInTheRestOfExpression_AST = null;
		
		loop225:  while (true) {
			{
			if ((_tokenSet_169.member(LA(1)))) {
				lazy_assignment_expression(true, true, templateLevel);
				if (matchError) {break loop225;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((LA(1)==COMMA||LA(1)==GREATERTHAN)) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_393, tokenNames);if (matchError) {break loop225;}
			}
			
			}
			{
			_loop1240:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp816_AST = null;
					tmp816_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp816_AST);
					consume();
					lazy_assignment_expression(true, true, templateLevel);
					if (matchError) {break loop225;}
					astFactory.addASTChild(currentAST, returnAST);
				}
				else {
					break _loop1240;
				}
				
			} while (true);
			}
			AST tmp817_AST = null;
			tmp817_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp817_AST);
			match(GREATERTHAN);
			if (matchError) {break loop225;}
			isGreaterthanInTheRestOfExpression_AST = (AST)currentAST.root;
		break;} // loop225
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = isGreaterthanInTheRestOfExpression_AST;
}

	public final void lazy_expression_predicate() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_expression_predicate_AST = null;
		int ts = 0; String s;
		
		loop226:  while (true) {
			switch ( LA(1)) {
			case OR:
			{
				AST tmp818_AST = null;
				tmp818_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp818_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case AND:
			{
				AST tmp819_AST = null;
				tmp819_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp819_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case BITWISEOR:
			{
				AST tmp820_AST = null;
				tmp820_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp820_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case BITWISEXOR:
			{
				AST tmp821_AST = null;
				tmp821_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp821_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case AMPERSAND:
			{
				AST tmp822_AST = null;
				tmp822_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp822_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case NOTEQUAL:
			{
				AST tmp823_AST = null;
				tmp823_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp823_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case EQUAL:
			{
				AST tmp824_AST = null;
				tmp824_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp824_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LESSTHAN:
			{
				AST tmp825_AST = null;
				tmp825_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp825_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LESSTHANOREQUALTO:
			{
				AST tmp826_AST = null;
				tmp826_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp826_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case GREATERTHANOREQUALTO:
			{
				AST tmp827_AST = null;
				tmp827_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp827_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case QUESTIONMARK:
			{
				AST tmp828_AST = null;
				tmp828_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp828_AST);
				consume();
				{
				expression();
				if (matchError) {break loop226;}
				astFactory.addASTChild(currentAST, returnAST);
				}
				AST tmp829_AST = null;
				tmp829_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp829_AST);
				match(COLON);
				if (matchError) {break loop226;}
				{
				assignment_expression();
				if (matchError) {break loop226;}
				astFactory.addASTChild(currentAST, returnAST);
				}
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case SHIFTLEFT:
			{
				AST tmp830_AST = null;
				tmp830_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp830_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case SHIFTRIGHT:
			{
				AST tmp831_AST = null;
				tmp831_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp831_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case PLUS:
			{
				AST tmp832_AST = null;
				tmp832_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp832_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case MINUS:
			{
				AST tmp833_AST = null;
				tmp833_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp833_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case STAR:
			{
				AST tmp834_AST = null;
				tmp834_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp834_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case DIVIDE:
			{
				AST tmp835_AST = null;
				tmp835_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp835_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case MOD:
			{
				AST tmp836_AST = null;
				tmp836_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp836_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case DOTMBR:
			{
				AST tmp837_AST = null;
				tmp837_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp837_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case POINTERTOMBR:
			{
				AST tmp838_AST = null;
				tmp838_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp838_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case SCOPE:
			{
				AST tmp839_AST = null;
				tmp839_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp839_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case PLUSPLUS:
			{
				AST tmp840_AST = null;
				tmp840_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp840_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case MINUSMINUS:
			{
				AST tmp841_AST = null;
				tmp841_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp841_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case DOT:
			{
				AST tmp842_AST = null;
				tmp842_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp842_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case POINTERTO:
			{
				AST tmp843_AST = null;
				tmp843_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp843_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case NOT:
			{
				AST tmp844_AST = null;
				tmp844_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp844_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case TILDE:
			{
				AST tmp845_AST = null;
				tmp845_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp845_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LPAREN:
			{
				AST tmp846_AST = null;
				tmp846_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp846_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LSQUARE:
			{
				AST tmp847_AST = null;
				tmp847_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp847_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				s=literal_ident();
				if (matchError) {break loop226;}
				astFactory.addASTChild(currentAST, returnAST);
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case FLOATONE:
			case FLOATTWO:
			case HEXADECIMALINT:
			case OCTALINT:
			case DECIMALINT:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case BINARYINT:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_nullptr:
			case LITERAL___null:
			{
				constant();
				if (matchError) {break loop226;}
				astFactory.addASTChild(currentAST, returnAST);
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___interrupt:
			{
				AST tmp848_AST = null;
				tmp848_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp848_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___extension__:
			{
				AST tmp849_AST = null;
				tmp849_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp849_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_template:
			{
				AST tmp850_AST = null;
				tmp850_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp850_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_new:
			{
				AST tmp851_AST = null;
				tmp851_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp851_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_delete:
			{
				AST tmp852_AST = null;
				tmp852_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp852_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_this:
			{
				AST tmp853_AST = null;
				tmp853_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp853_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			{
				literal_volatile();
				if (matchError) {break loop226;}
				astFactory.addASTChild(currentAST, returnAST);
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			{
				literal_const();
				if (matchError) {break loop226;}
				astFactory.addASTChild(currentAST, returnAST);
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__TYPE_QUALIFIER__:
			{
				AST tmp854_AST = null;
				tmp854_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp854_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			{
				literal_cdecl();
				if (matchError) {break loop226;}
				astFactory.addASTChild(currentAST, returnAST);
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__near:
			case LITERAL___near:
			{
				literal_near();
				if (matchError) {break loop226;}
				astFactory.addASTChild(currentAST, returnAST);
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__far:
			case LITERAL___far:
			{
				literal_far();
				if (matchError) {break loop226;}
				astFactory.addASTChild(currentAST, returnAST);
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			{
				literal_pascal();
				if (matchError) {break loop226;}
				astFactory.addASTChild(currentAST, returnAST);
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			{
				literal_stdcall();
				if (matchError) {break loop226;}
				astFactory.addASTChild(currentAST, returnAST);
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___clrcall:
			{
				literal_clrcall();
				if (matchError) {break loop226;}
				astFactory.addASTChild(currentAST, returnAST);
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___complex__:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___complex:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			{
				ts=builtin_type(0);
				if (matchError) {break loop226;}
				astFactory.addASTChild(currentAST, returnAST);
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_OPERATOR:
			{
				AST tmp855_AST = null;
				tmp855_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp855_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_dynamic_cast:
			{
				AST tmp856_AST = null;
				tmp856_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp856_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_static_cast:
			{
				AST tmp857_AST = null;
				tmp857_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp857_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_reinterpret_cast:
			{
				AST tmp858_AST = null;
				tmp858_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp858_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_const_cast:
			{
				AST tmp859_AST = null;
				tmp859_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp859_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_sizeof:
			{
				AST tmp860_AST = null;
				tmp860_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp860_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___real:
			{
				AST tmp861_AST = null;
				tmp861_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp861_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___imag:
			{
				AST tmp862_AST = null;
				tmp862_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp862_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_alignof:
			{
				AST tmp863_AST = null;
				tmp863_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp863_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___alignof:
			{
				AST tmp864_AST = null;
				tmp864_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp864_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___alignof__:
			{
				AST tmp865_AST = null;
				tmp865_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp865_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_class:
			case LITERAL___is_enum:
			case LITERAL___is_pod:
			case LITERAL___is_base_of:
			case LITERAL___has_trivial_constructor:
			case LITERAL___has_nothrow_assign:
			case LITERAL___has_nothrow_copy:
			case LITERAL___has_nothrow_constructor:
			case LITERAL___has_trivial_assign:
			case LITERAL___has_trivial_copy:
			case LITERAL___has_trivial_destructor:
			case LITERAL___has_virtual_destructor:
			case LITERAL___is_abstract:
			case LITERAL___is_empty:
			case LITERAL___is_literal_type:
			case LITERAL___is_polymorphic:
			case LITERAL___is_standard_layout:
			case LITERAL___is_trivial:
			case LITERAL___is_union:
			case LITERAL___underlying_type:
			{
				trait_type_literals();
				if (matchError) {break loop226;}
				astFactory.addASTChild(currentAST, returnAST);
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_auto:
			{
				AST tmp866_AST = null;
				tmp866_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp866_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_constexpr:
			{
				AST tmp867_AST = null;
				tmp867_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp867_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_thread_local:
			{
				AST tmp868_AST = null;
				tmp868_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp868_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_static_assert:
			{
				AST tmp869_AST = null;
				tmp869_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp869_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_alignas:
			{
				AST tmp870_AST = null;
				tmp870_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp870_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_noexcept:
			{
				AST tmp871_AST = null;
				tmp871_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp871_AST);
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case GREATERTHAN:
			{
				AST tmp872_AST = null;
				tmp872_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp872_AST);
				consume();
				lazy_expression_predicate();
				if (matchError) {break loop226;}
				astFactory.addASTChild(currentAST, returnAST);
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_394, tokenNames);if (matchError) {break loop226;}
			}
			}
		break;} // loop226
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_3);
			resetMatchError();
	}
	returnAST = lazy_expression_predicate_AST;
}

	protected final void lazy_assignment_expression(
		boolean inTemplateParams, boolean searchingGreaterthen, int templateLevel
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_assignment_expression_AST = null;
		
		loop227:  while (true) {
			lazy_expression(inTemplateParams, searchingGreaterthen, templateLevel);
			if (matchError) {break loop227;}
			astFactory.addASTChild(currentAST, returnAST);
			{
			_loop1236:
			do {
				if ((_tokenSet_239.member(LA(1)))) {
					{
					switch ( LA(1)) {
					case ASSIGNEQUAL:
					{
						AST tmp873_AST = null;
						tmp873_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp873_AST);
						consume();
						break;
					}
					case TIMESEQUAL:
					{
						AST tmp874_AST = null;
						tmp874_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp874_AST);
						consume();
						break;
					}
					case DIVIDEEQUAL:
					{
						AST tmp875_AST = null;
						tmp875_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp875_AST);
						consume();
						break;
					}
					case MINUSEQUAL:
					{
						AST tmp876_AST = null;
						tmp876_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp876_AST);
						consume();
						break;
					}
					case PLUSEQUAL:
					{
						AST tmp877_AST = null;
						tmp877_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp877_AST);
						consume();
						break;
					}
					case MODEQUAL:
					{
						AST tmp878_AST = null;
						tmp878_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp878_AST);
						consume();
						break;
					}
					case SHIFTLEFTEQUAL:
					{
						AST tmp879_AST = null;
						tmp879_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp879_AST);
						consume();
						break;
					}
					case SHIFTRIGHTEQUAL:
					{
						AST tmp880_AST = null;
						tmp880_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp880_AST);
						consume();
						break;
					}
					case BITWISEANDEQUAL:
					{
						AST tmp881_AST = null;
						tmp881_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp881_AST);
						consume();
						break;
					}
					case BITWISEXOREQUAL:
					{
						AST tmp882_AST = null;
						tmp882_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp882_AST);
						consume();
						break;
					}
					case BITWISEOREQUAL:
					{
						AST tmp883_AST = null;
						tmp883_AST = astFactory.create(LT(1));
						astFactory.addASTChild(currentAST, tmp883_AST);
						consume();
						break;
					}
					default:
					{
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_239, tokenNames);if (matchError) {break loop227;}
					}
					}
					}
					{
					if ((_tokenSet_169.member(LA(1)))) {
						lazy_expression(inTemplateParams, searchingGreaterthen, templateLevel);
						if (matchError) {break loop227;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else if ((LA(1)==LCURLY)) {
						array_initializer();
						if (matchError) {break loop227;}
						astFactory.addASTChild(currentAST, returnAST);
					}
					else {
						matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_233, tokenNames);if (matchError) {break loop227;}
					}
					
					}
				}
				else {
					break _loop1236;
				}
				
			} while (true);
			}
			lazy_assignment_expression_AST = (AST)currentAST.root;
		break;} // loop227
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_395);
			resetMatchError();
	}
	returnAST = lazy_assignment_expression_AST;
}

	protected final void unnamed_ptr_operator() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unnamed_ptr_operator_AST = null;
		
		loop228:  while (true) {
			{
			switch ( LA(1)) {
			case AMPERSAND:
			{
				AST tmp884_AST = null;
				tmp884_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp884_AST);
				consume();
				is_address = true;
				break;
			}
			case AND:
			{
				AST tmp885_AST = null;
				tmp885_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp885_AST);
				consume();
				is_address = true;
				break;
			}
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			{
				literal_cdecl();
				if (matchError) {break loop228;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL__near:
			case LITERAL___near:
			{
				literal_near();
				if (matchError) {break loop228;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL__far:
			case LITERAL___far:
			{
				literal_far();
				if (matchError) {break loop228;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL___interrupt:
			{
				AST tmp886_AST = null;
				tmp886_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp886_AST);
				consume();
				break;
			}
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			{
				literal_pascal();
				if (matchError) {break loop228;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			{
				literal_stdcall();
				if (matchError) {break loop228;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case LITERAL___clrcall:
			{
				literal_clrcall();
				if (matchError) {break loop228;}
				astFactory.addASTChild(currentAST, returnAST);
				break;
			}
			case STAR:
			{
				AST tmp887_AST = null;
				tmp887_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp887_AST);
				consume();
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_182, tokenNames);if (matchError) {break loop228;}
			}
			}
			}
			unnamed_ptr_operator_AST = (AST)currentAST.root;
		break;} // loop228
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_183);
			resetMatchError();
	}
	returnAST = unnamed_ptr_operator_AST;
}

	public final void ptr_to_member() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ptr_to_member_AST = null;
		String s;
		
		loop229:  while (true) {
			s=scope_override();
			if (matchError) {break loop229;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp888_AST = null;
			tmp888_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp888_AST);
			match(STAR);
			if (matchError) {break loop229;}
			is_pointer = true;
			cv_qualifier_seq();
			if (matchError) {break loop229;}
			astFactory.addASTChild(currentAST, returnAST);
			ptr_to_member_AST = (AST)currentAST.root;
		break;} // loop229
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_164);
			resetMatchError();
	}
	returnAST = ptr_to_member_AST;
}

	public final String  scope_override_part(
		int level
	) {
		String s = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST scope_override_part_AST = null;
		
		StringBuilder sitem = new StringBuilder(); 
		String sp = "";
		String id;
		
		
		loop230:  while (true) {
			{
			switch ( LA(1)) {
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				{
				id=literal_ident();
				if (matchError) {break loop230;}
				astFactory.addASTChild(currentAST, returnAST);
				{
				switch ( LA(1)) {
				case LESSTHAN:
				{
					AST tmp889_AST = null;
					tmp889_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp889_AST);
					consume();
					template_argument_list();
					if (matchError) {break loop230;}
					astFactory.addASTChild(currentAST, returnAST);
					AST tmp890_AST = null;
					tmp890_AST = astFactory.create(LT(1));
					astFactory.addASTChild(currentAST, tmp890_AST);
					match(GREATERTHAN);
					if (matchError) {break loop230;}
					break;
				}
				case SCOPE:
				{
					break;
				}
				default:
				{
					matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_396, tokenNames);if (matchError) {break loop230;}
				}
				}
				}
				AST tmp891_AST = null;
				tmp891_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp891_AST);
				match(SCOPE);
				if (matchError) {break loop230;}
				
				sitem.append(id);
				sitem.append("::");
				
				}
				break;
			}
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				{
				type_decltype();
				if (matchError) {break loop230;}
				astFactory.addASTChild(currentAST, returnAST);
				AST tmp892_AST = null;
				tmp892_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp892_AST);
				match(SCOPE);
				if (matchError) {break loop230;}
				
				sitem.append("decltype");
				sitem.append("::");
				
				}
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_100, tokenNames);if (matchError) {break loop230;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_template:
			{
				AST tmp893_AST = null;
				tmp893_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp893_AST);
				consume();
				break;
			}
			case STAR:
			case TILDE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_98, tokenNames);if (matchError) {break loop230;}
			}
			}
			}
			{
			int LA1_181 = LA(1);
			int LA2_181 = LA(2);
			
			boolean synPredMatched1335 = false;
			if (((_tokenSet_100.member(LA1_181)) && (_tokenSet_101.member(LA2_181)))) {
				int _m1335 = mark();
				guessing++;
				guess1335:  while (true) {
					{
					{
					switch ( LA(1)) {
					case IDENT:
					case LITERAL_final:
					case LITERAL_override:
					{
						{
						literal_ident_g();
						if (matchError) {break guess1335;}
						{
						switch ( LA(1)) {
						case LESSTHAN:
						{
							consume();
							{
							if ((_tokenSet_102.member(LA(1)))) {
								lazy_template_argument_list_g();
								if (matchError) {break guess1335;}
							}
							else if ((LA(1)==GREATERTHAN)) {
							}
							else {
								matchError=true;if (matchError) {break guess1335;}
							}
							
							}
							match(GREATERTHAN);
							if (matchError) {break guess1335;}
							break;
						}
						case SCOPE:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess1335;}
						}
						}
						}
						}
						break;
					}
					case LITERAL_decltype:
					case LITERAL___decltype:
					{
						lazy_type_decltype_g(0);
						if (matchError) {break guess1335;}
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess1335;}
					}
					}
					}
					match(SCOPE);
					if (matchError) {break guess1335;}
					}
				synPredMatched1335 = true;
				break;} // guess1335
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1335);
				guessing--;
			}
			if ( synPredMatched1335 ) {
				sp=scope_override_part(level + 1);
				if (matchError) {break loop230;}
				astFactory.addASTChild(currentAST, returnAST);
			}
			else if ((_tokenSet_103.member(LA1_181)) && (_tokenSet_104.member(LA2_181))) {
			}
			else {
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_103, tokenNames);if (matchError) {break loop230;}
			}
			
			}
			
			sitem.append(sp);
			s = sitem.toString();
			
			scope_override_part_AST = (AST)currentAST.root;
		break;} // loop230
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_103);
			resetMatchError();
	}
	returnAST = scope_override_part_AST;
	return s;
}

	protected final void literal_decltype() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_decltype_AST = null;
		
		loop231:  while (true) {
			switch ( LA(1)) {
			case LITERAL_decltype:
			{
				AST tmp894_AST = null;
				tmp894_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp894_AST);
				consume();
				literal_decltype_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___decltype:
			{
				AST tmp895_AST = null;
				tmp895_AST = astFactory.create(LT(1));
				astFactory.addASTChild(currentAST, tmp895_AST);
				consume();
				literal_decltype_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;matchException= new NoViableAltException(LT(1), getFilename(), _tokenSet_397, tokenNames);if (matchError) {break loop231;}
			}
			}
		break;} // loop231
		if (matchError) {
			reportError(matchException);
			recover(matchException,_tokenSet_139);
			resetMatchError();
	}
	returnAST = literal_decltype_AST;
}

	public final void decltype_expression() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST decltype_expression_AST = null;
		
		loop232:  while (true) {
			AST tmp896_AST = null;
			tmp896_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp896_AST);
			match(LPAREN);
			if (matchError) {break loop232;}
			expression_list();
			if (matchError) {break loop232;}
			astFactory.addASTChild(currentAST, returnAST);
			AST tmp897_AST = null;
			tmp897_AST = astFactory.create(LT(1));
			astFactory.addASTChild(currentAST, tmp897_AST);
			match(RPAREN);
			if (matchError) {break loop232;}
			decltype_expression_AST = (AST)currentAST.root;
			decltype_expression_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_EXPRESSION,"CSM_EXPRESSION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(decltype_expression_AST));
			currentAST.root = decltype_expression_AST;
			currentAST.child = decltype_expression_AST!=null &&decltype_expression_AST.getFirstChild()!=null ?
				decltype_expression_AST.getFirstChild() : decltype_expression_AST;
			currentAST.advanceChildToEnd();
			decltype_expression_AST = (AST)currentAST.root;
		break;} // loop232
		if (matchError) {
			// when recover we'd like to perform any "build AST" actions
			if ((decltype_expression_AST == null) && (currentAST.root != null)) {
			decltype_expression_AST = (AST)currentAST.root;
			decltype_expression_AST = (AST)astFactory.make( (new ASTArray(2)).add(astFactory.create(CSM_EXPRESSION,"CSM_EXPRESSION", new org.netbeans.modules.cnd.modelimpl.parser.FakeAST())).add(decltype_expression_AST));
			}
			reportError(matchException);
			recover(matchException,_tokenSet_92);
			resetMatchError();
	}
	returnAST = decltype_expression_AST;
}

	protected final String  literal_ident_g() {
		String s = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_ident_AST = null;
		Token  id = null;
		AST id_AST = null;
		Token  kwd_final = null;
		AST kwd_final_AST = null;
		Token  kwd_override = null;
		AST kwd_override_AST = null;
		
		loop233:  while (true) {
			switch ( LA(1)) {
			case IDENT:
			{
				id = LT(1);
				consume();
				literal_ident_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_final:
			{
				kwd_final = LT(1);
				consume();
				literal_ident_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_override:
			{
				kwd_override = LT(1);
				consume();
				literal_ident_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop233;}
			}
			}
		break;} // loop233
		if (matchError) {
	}
	returnAST = literal_ident_AST;
	return s;
}

	public final void decl_specifiers_before_type_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST decl_specifiers_before_type_AST = null;
		StorageClass sc; TypeQualifier tq;
		
		loop234:  while (true) {
			{
			int _cnt469=0;
			_loop469:
			do {
				switch ( LA(1)) {
				case LITERAL_extern:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL___global:
				case LITERAL___thread:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_thread_local:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					sc=storage_class_specifier_g();
					if (matchError) {break loop234;}
					break;
				}
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL__TYPE_QUALIFIER__:
				{
					tq=cv_qualifier_g();
					if (matchError) {break loop234;}
					break;
				}
				case LITERAL_friend:
				{
					AST tmp898_AST = null;
					consume();
					break;
				}
				case LITERAL_constexpr:
				{
					AST tmp899_AST = null;
					consume();
					break;
				}
				case LITERAL_typedef:
				{
					AST tmp900_AST = null;
					consume();
					break;
				}
				default:
				{
					if ( _cnt469>=1 ) { break _loop469; } else {matchError=true;if (matchError) {break loop234;}}
				}
				}
				_cnt469++;
			} while (true);
			}
			decl_specifiers_before_type_AST = (AST)currentAST.root;
		break;} // loop234
		if (matchError) {
	}
	returnAST = decl_specifiers_before_type_AST;
}

	public final void class_head_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST class_head_AST = null;
		String s; StorageClass sc = scInvalid;
		
		loop235:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_struct:
			{
				AST tmp901_AST = null;
				consume();
				break;
			}
			case LITERAL_union:
			{
				AST tmp902_AST = null;
				consume();
				break;
			}
			case LITERAL_class:
			{
				AST tmp903_AST = null;
				consume();
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop235;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_alignas:
			{
				type_attribute_specification_g();
				if (matchError) {break loop235;}
				break;
			}
			case LCURLY:
			case SCOPE:
			case IDENT:
			case LITERAL_extern:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL___global:
			case LITERAL___thread:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL___decltype:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop235;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_extern:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL___global:
			case LITERAL___thread:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_thread_local:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				sc=storage_class_specifier_g();
				if (matchError) {break loop235;}
				break;
			}
			case LCURLY:
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop235;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				s=scope_override_g();
				if (matchError) {break loop235;}
				s=literal_ident_g();
				if (matchError) {break loop235;}
				{
				switch ( LA(1)) {
				case LESSTHAN:
				{
					AST tmp904_AST = null;
					consume();
					template_argument_list_g();
					if (matchError) {break loop235;}
					AST tmp905_AST = null;
					match(GREATERTHAN);
					if (matchError) {break loop235;}
					break;
				}
				case COLON:
				case LCURLY:
				case LITERAL_explicit:
				case LITERAL_final:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop235;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case LITERAL_final:
				{
					AST tmp906_AST = null;
					consume();
					break;
				}
				case LITERAL_explicit:
				{
					AST tmp907_AST = null;
					consume();
					break;
				}
				case COLON:
				case LCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop235;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case COLON:
				{
					base_clause_g();
					if (matchError) {break loop235;}
					break;
				}
				case LCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop235;}
				}
				}
				}
				break;
			}
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop235;}
			}
			}
			}
			AST tmp908_AST = null;
			match(LCURLY);
			if (matchError) {break loop235;}
			class_head_AST = (AST)currentAST.root;
		break;} // loop235
		if (matchError) {
	}
	returnAST = class_head_AST;
}

	public final void enum_def_head_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST enum_def_head_AST = null;
		
		loop236:  while (true) {
			enum_head_g();
			if (matchError) {break loop236;}
			AST tmp909_AST = null;
			match(LCURLY);
			if (matchError) {break loop236;}
			enum_def_head_AST = (AST)currentAST.root;
		break;} // loop236
		if (matchError) {
	}
	returnAST = enum_def_head_AST;
}

	public final void enum_fwd_head_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST enum_fwd_head_AST = null;
		
		loop237:  while (true) {
			enum_head_g();
			if (matchError) {break loop237;}
			AST tmp910_AST = null;
			match(SEMICOLON);
			if (matchError) {break loop237;}
			enum_fwd_head_AST = (AST)currentAST.root;
		break;} // loop237
		if (matchError) {
	}
	returnAST = enum_fwd_head_AST;
}

	public final void template_head_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_head_AST = null;
		AST tpl_AST = null;
		
		loop238:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_export:
			{
				consume();
				break;
			}
			case LITERAL_template:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop238;}
			}
			}
			}
			AST tmp912_AST = null;
			match(LITERAL_template);
			if (matchError) {break loop238;}
			match(LESSTHAN);
			if (matchError) {break loop238;}
			template_parameter_list_g();
			if (matchError) {break loop238;}
			tpl_AST = (AST)returnAST;
			match(GREATERTHAN);
			if (matchError) {break loop238;}
			template_head_AST = (AST)currentAST.root;
		break;} // loop238
		if (matchError) {
	}
	returnAST = template_head_AST;
}

	public final void dtor_head_g(
		boolean definition
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dtor_head_AST = null;
		boolean friend;
		
		loop239:  while (true) {
			friend=dtor_decl_spec_g();
			if (matchError) {break loop239;}
			dtor_declarator_g(definition);
			if (matchError) {break loop239;}
			dtor_head_AST = (AST)currentAST.root;
		break;} // loop239
		if (matchError) {
	}
	returnAST = dtor_head_AST;
}

	public final boolean  ctor_decl_spec_g() {
		boolean friend = false;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ctor_decl_spec_AST = null;
		
		loop240:  while (true) {
			{
			_loop793:
			do {
				switch ( LA(1)) {
				case LSQUARE:
				case LITERAL___attribute__:
				case LITERAL___attribute:
				{
					{
					function_attribute_specification_g();
					if (matchError) {break loop240;}
					}
					break;
				}
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL___forceinline:
				{
					literal_inline_g();
					if (matchError) {break loop240;}
					break;
				}
				case LITERAL_explicit:
				{
					AST tmp915_AST = null;
					consume();
					break;
				}
				case LITERAL_friend:
				{
					AST tmp916_AST = null;
					consume();
					break;
				}
				case LITERAL_constexpr:
				{
					AST tmp917_AST = null;
					consume();
					break;
				}
				default:
				{
					break _loop793;
				}
				}
			} while (true);
			}
			ctor_decl_spec_AST = (AST)currentAST.root;
		break;} // loop240
		if (matchError) {
	}
	returnAST = ctor_decl_spec_AST;
	return friend;
}

	protected final void literal_inline_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_inline_AST = null;
		
		loop241:  while (true) {
			switch ( LA(1)) {
			case LITERAL_inline:
			{
				AST tmp918_AST = null;
				consume();
				literal_inline_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__inline:
			{
				AST tmp919_AST = null;
				consume();
				literal_inline_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___inline:
			{
				AST tmp920_AST = null;
				consume();
				literal_inline_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___inline__:
			{
				AST tmp921_AST = null;
				consume();
				literal_inline_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___forceinline:
			{
				AST tmp922_AST = null;
				consume();
				literal_inline_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop241;}
			}
			}
		break;} // loop241
		if (matchError) {
	}
	returnAST = literal_inline_AST;
}

	public final String  scope_override_g() {
		String s = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST scope_override_AST = null;
		
		StringBuilder sitem = new StringBuilder(); 
		String sp = "";
		
		
		loop242:  while (true) {
			{
			switch ( LA(1)) {
			case SCOPE:
			{
				AST tmp923_AST = null;
				consume();
				{
				switch ( LA(1)) {
				case LITERAL_template:
				{
					AST tmp924_AST = null;
					consume();
					break;
				}
				case STAR:
				case TILDE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_decltype:
				case LITERAL___decltype:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop242;}
				}
				}
				}
				break;
			}
			case STAR:
			case TILDE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop242;}
			}
			}
			}
			{
			int LA1_182 = LA(1);
			int LA2_182 = LA(2);
			
			boolean synPredMatched1322 = false;
			if (((_tokenSet_100.member(LA1_182)) && (_tokenSet_101.member(LA2_182)))) {
				int _m1322 = mark();
				guessing++;
				guess1322:  while (true) {
					{
					{
					switch ( LA(1)) {
					case IDENT:
					case LITERAL_final:
					case LITERAL_override:
					{
						{
						literal_ident_g();
						if (matchError) {break guess1322;}
						{
						switch ( LA(1)) {
						case LESSTHAN:
						{
							consume();
							{
							if ((_tokenSet_102.member(LA(1)))) {
								lazy_template_argument_list_g();
								if (matchError) {break guess1322;}
							}
							else if ((LA(1)==GREATERTHAN)) {
							}
							else {
								matchError=true;if (matchError) {break guess1322;}
							}
							
							}
							match(GREATERTHAN);
							if (matchError) {break guess1322;}
							break;
						}
						case SCOPE:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess1322;}
						}
						}
						}
						}
						break;
					}
					case LITERAL_decltype:
					case LITERAL___decltype:
					{
						lazy_type_decltype_g(0);
						if (matchError) {break guess1322;}
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess1322;}
					}
					}
					}
					match(SCOPE);
					if (matchError) {break guess1322;}
					}
				synPredMatched1322 = true;
				break;} // guess1322
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1322);
				guessing--;
			}
			if ( synPredMatched1322 ) {
				sp=scope_override_part_g(0);
				if (matchError) {break loop242;}
			}
			else if ((_tokenSet_103.member(LA1_182)) && (_tokenSet_104.member(LA2_182))) {
			}
			else {
				matchError=true;if (matchError) {break loop242;}
			}
			
			}
			scope_override_AST = (AST)currentAST.root;
		break;} // loop242
		if (matchError) {
	}
	returnAST = scope_override_AST;
	return s;
}

	public final boolean  conversion_function_decl_or_def_g() {
		boolean definition = false;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST conversion_function_decl_or_def_AST = null;
		
		loop243:  while (true) {
			conversion_function_head_g();
			if (matchError) {break loop243;}
			{
			switch ( LA(1)) {
			case LCURLY:
			{
				compound_statement_g();
				if (matchError) {break loop243;}
				break;
			}
			case ASSIGNEQUAL:
			case SEMICOLON:
			{
				{
				switch ( LA(1)) {
				case ASSIGNEQUAL:
				{
					definition=conversion_function_special_definition_g();
					if (matchError) {break loop243;}
					break;
				}
				case SEMICOLON:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop243;}
				}
				}
				}
				match(SEMICOLON);
				if (matchError) {break loop243;}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop243;}
			}
			}
			}
			conversion_function_decl_or_def_AST = (AST)currentAST.root;
		break;} // loop243
		if (matchError) {
	}
	returnAST = conversion_function_decl_or_def_AST;
	return definition;
}

	protected final void function_attribute_specification_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_attribute_specification_AST = null;
		
		loop244:  while (true) {
			attribute_specification_list_g();
			if (matchError) {break loop244;}
		break;} // loop244
		if (matchError) {
	}
	returnAST = function_attribute_specification_AST;
}

	public final void declaration_specifiers_g(
		boolean allowTypedef, boolean noTypeId
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declaration_specifiers_AST = null;
		
		// Global flags to allow for nested declarations
		_td = false;        // For typedef
		_fd = false;        // For friend
		_sc = scInvalid;    // For StorageClass
		_tq = tqInvalid;    // For TypeQualifier
		_ts = tsInvalid;    // For TypeSpecifier
		_ds = dsInvalid;    // For DeclSpecifier
		
		
		// Locals
		boolean td = false; // For typedef
		boolean fd = false; // For friend
		StorageClass sc = scInvalid;        // auto,register,static,extern,mutable
		TypeQualifier tq = tqInvalid;       // const,const_cast,volatile,cdecl
		/*TypeSpecifier*/int ts = tsInvalid;// char,int,double, etc., class,struct,union
		DeclSpecifier ds = dsInvalid;       // inline,virtual,explicit
		
		
		loop245:  while (true) {
			{
			unknown_pretype_declaration_specifiers_g();
			if (matchError) {break loop245;}
			{
			int LA1_183 = LA(1);
			int LA2_183 = LA(2);
			
			boolean synPredMatched427 = false;
			if (((_tokenSet_46.member(LA1_183)) && (_tokenSet_47.member(LA2_183)))) {
				int _m427 = mark();
				guessing++;
				guess427:  while (true) {
					{
					match(LITERAL_static);
					if (matchError) {break guess427;}
					literal_ident_g();
					if (matchError) {break guess427;}
					{
					switch ( LA(1)) {
					case SEMICOLON:
					{
						consume();
						break;
					}
					case ASSIGNEQUAL:
					{
						consume();
						break;
					}
					case COMMA:
					{
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess427;}
					}
					}
					}
					}
				synPredMatched427 = true;
				break;} // guess427
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m427);
				guessing--;
			}
			if ( synPredMatched427 ) {
				sc=storage_class_specifier_g();
				if (matchError) {break loop245;}
			}
			else if ((_tokenSet_22.member(LA1_183)) && (_tokenSet_48.member(LA2_183))) {
				{
				int LA1_184 = LA(1);
				int LA2_184 = LA(2);
				
				boolean synPredMatched435 = false;
				if (((_tokenSet_49.member(LA1_184)) && (_tokenSet_50.member(LA2_184)))) {
					int _m435 = mark();
					guessing++;
					guess435:  while (true) {
						{
						{
						_loop431:
						do {
							switch ( LA(1)) {
							case LITERAL_constexpr:
							{
								consume();
								break;
							}
							case LITERAL_const:
							case LITERAL___const__:
							case LITERAL___const:
							case LITERAL_const_cast:
							case LITERAL_volatile:
							case LITERAL___volatile__:
							case LITERAL___volatile:
							case LITERAL__TYPE_QUALIFIER__:
							{
								cv_qualifier_g();
								if (matchError) {break guess435;}
								break;
							}
							case LITERAL_static:
							{
								consume();
								break;
							}
							case LITERAL_inline:
							case LITERAL__inline:
							case LITERAL___inline__:
							case LITERAL___inline:
							case LITERAL___forceinline:
							{
								literal_inline_g();
								if (matchError) {break guess435;}
								break;
							}
							case LITERAL_friend:
							{
								consume();
								break;
							}
							default:
							{
								break _loop431;
							}
							}
						} while (true);
						}
						match(LITERAL_auto);
						if (matchError) {break guess435;}
						{
						switch ( LA(1)) {
						case LITERAL_const:
						case LITERAL___const__:
						case LITERAL___const:
						case LITERAL_volatile:
						case LITERAL___volatile__:
						case LITERAL___volatile:
						case LITERAL__TYPE_QUALIFIER__:
						{
							postfix_cv_qualifier_g();
							if (matchError) {break guess435;}
							break;
						}
						case LITERAL_constexpr:
						{
							consume();
							break;
						}
						case ELLIPSIS:
						case LPAREN:
						case LSQUARE:
						case STAR:
						case AND:
						case AMPERSAND:
						case TILDE:
						case SCOPE:
						case IDENT:
						case LITERAL_OPERATOR:
						case LITERAL_extern:
						case LITERAL_inline:
						case LITERAL__inline:
						case LITERAL___inline__:
						case LITERAL___inline:
						case LITERAL_virtual:
						case LITERAL__stdcall:
						case LITERAL___stdcall:
						case LITERAL_auto:
						case LITERAL_register:
						case LITERAL_static:
						case LITERAL_mutable:
						case LITERAL_this:
						case LITERAL_true:
						case LITERAL_false:
						case LITERAL__cdecl:
						case LITERAL___cdecl:
						case LITERAL__near:
						case LITERAL___near:
						case LITERAL__far:
						case LITERAL___far:
						case LITERAL___interrupt:
						case LITERAL_pascal:
						case LITERAL__pascal:
						case LITERAL___pascal:
						case LITERAL___attribute__:
						case LITERAL___global:
						case LITERAL___thread:
						case LITERAL___attribute:
						case LITERAL___symbolic:
						case LITERAL___hidden:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_decltype:
						case LITERAL_thread_local:
						case LITERAL___decltype:
						case LITERAL___forceinline:
						case LITERAL___clrcall:
						case LITERAL__STORAGE_CLASS_SPECIFIER__:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess435;}
						}
						}
						}
						{
						_loop434:
						do {
							switch ( LA(1)) {
							case LITERAL_inline:
							case LITERAL__inline:
							case LITERAL___inline__:
							case LITERAL___inline:
							case LITERAL___forceinline:
							{
								literal_inline_g();
								if (matchError) {break guess435;}
								break;
							}
							case LITERAL_extern:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL___global:
							case LITERAL___thread:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_thread_local:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								storage_class_specifier_g();
								if (matchError) {break guess435;}
								break;
							}
							case LITERAL_virtual:
							{
								consume();
								break;
							}
							default:
							{
								break _loop434;
							}
							}
						} while (true);
						}
						declarator_g(declOther, 0);
						if (matchError) {break guess435;}
						}
					synPredMatched435 = true;
					break;} // guess435
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m435);
					guessing--;
				}
				if ( synPredMatched435 ) {
					{
					_loop437:
					do {
						switch ( LA(1)) {
						case LITERAL_constexpr:
						{
							AST tmp926_AST = null;
							consume();
							break;
						}
						case LITERAL_const:
						case LITERAL___const__:
						case LITERAL___const:
						case LITERAL_const_cast:
						case LITERAL_volatile:
						case LITERAL___volatile__:
						case LITERAL___volatile:
						case LITERAL__TYPE_QUALIFIER__:
						{
							tq=cv_qualifier_g();
							if (matchError) {break loop245;}
							break;
						}
						case LITERAL_static:
						{
							AST tmp927_AST = null;
							consume();
							break;
						}
						case LITERAL_inline:
						case LITERAL__inline:
						case LITERAL___inline__:
						case LITERAL___inline:
						case LITERAL___forceinline:
						{
							literal_inline_g();
							if (matchError) {break loop245;}
							break;
						}
						case LITERAL_friend:
						{
							AST tmp928_AST = null;
							consume();
							break;
						}
						default:
						{
							break _loop437;
						}
						}
					} while (true);
					}
				}
				else if ((_tokenSet_22.member(LA1_184)) && (_tokenSet_48.member(LA2_184))) {
					{
					_loop441:
					do {
						int LA1_185 = LA(1);
						int LA2_185 = LA(2);
						
						switch ( LA1_185) {
						case LITERAL_const:
						case LITERAL___const__:
						case LITERAL___const:
						case LITERAL_const_cast:
						case LITERAL_volatile:
						case LITERAL___volatile__:
						case LITERAL___volatile:
						case LITERAL__TYPE_QUALIFIER__:
						{
							tq=cv_qualifier_g();
							if (matchError) {break loop245;}
							break;
						}
						case LITERAL_inline:
						case LITERAL__inline:
						case LITERAL___inline__:
						case LITERAL___inline:
						case LITERAL___forceinline:
						{
							literal_inline_g();
							if (matchError) {break loop245;}
							break;
						}
						case LITERAL__Noreturn:
						{
							AST tmp929_AST = null;
							consume();
							break;
						}
						case LITERAL_virtual:
						{
							AST tmp930_AST = null;
							consume();
							break;
						}
						case LITERAL_explicit:
						{
							AST tmp931_AST = null;
							consume();
							break;
						}
						case LITERAL_typedef:
						{
							if (!(allowTypedef))
							{matchError=true;
							if (matchError) {break loop245;}}
							AST tmp932_AST = null;
							match(LITERAL_typedef);
							if (matchError) {break loop245;}
							{
							int LA1_186 = LA(1);
							int LA2_186 = LA(2);
							
							if ((LA1_186==LITERAL_typename) && (_tokenSet_22.member(LA2_186))) {
								AST tmp933_AST = null;
								consume();
							}
							else if ((_tokenSet_22.member(LA1_186)) && (_tokenSet_48.member(LA2_186))) {
							}
							else {
								matchError=true;if (matchError) {break loop245;}
							}
							
							}
							break;
						}
						case LITERAL_typename:
						{
							AST tmp934_AST = null;
							consume();
							break;
						}
						case LITERAL_friend:
						{
							AST tmp935_AST = null;
							consume();
							break;
						}
						case LITERAL_constexpr:
						{
							AST tmp936_AST = null;
							consume();
							break;
						}
						case LITERAL__stdcall:
						case LITERAL___stdcall:
						{
							literal_stdcall_g();
							if (matchError) {break loop245;}
							break;
						}
						case LITERAL___clrcall:
						{
							literal_clrcall_g();
							if (matchError) {break loop245;}
							break;
						}
						default:
							if (((_tokenSet_51.member(LA1_185)) && (_tokenSet_22.member(LA2_185)))&&(isCPlusPlus11())) {
								sc=cpp11_storage_class_specifier_g();
								if (matchError) {break loop245;}
							}
							else if (((_tokenSet_46.member(LA1_185)) && (_tokenSet_22.member(LA2_185)))&&(!isCPlusPlus11())) {
								sc=storage_class_specifier_g();
								if (matchError) {break loop245;}
							}
							else if ((LA1_185==LITERAL_final) && (_tokenSet_22.member(LA2_185))) {
								AST tmp937_AST = null;
								consume();
							}
							else if ((_tokenSet_52.member(LA1_185)) && (LA2_185==LPAREN||LA2_185==LSQUARE)) {
								{
								type_attribute_specification_g();
								if (matchError) {break loop245;}
								}
							}
						else {
							break _loop441;
						}
						}
					} while (true);
					}
				}
				else {
					matchError=true;if (matchError) {break loop245;}
				}
				
				}
				{
				switch ( LA(1)) {
				case LSQUARE:
				case SCOPE:
				case IDENT:
				case LITERAL_enum:
				case LITERAL_auto:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_decltype:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				{
					{
					switch ( LA(1)) {
					case LSQUARE:
					case LITERAL__declspec:
					case LITERAL___declspec:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					case LITERAL_alignas:
					{
						type_attribute_specification_g();
						if (matchError) {break loop245;}
						break;
					}
					case SCOPE:
					case IDENT:
					case LITERAL_enum:
					case LITERAL_auto:
					case LITERAL_char:
					case LITERAL_wchar_t:
					case LITERAL_bool:
					case LITERAL_short:
					case LITERAL_int:
					case LITERAL_long:
					case LITERAL_signed:
					case LITERAL___signed__:
					case LITERAL___signed:
					case LITERAL_unsigned:
					case LITERAL___unsigned__:
					case LITERAL_float:
					case LITERAL_double:
					case LITERAL_void:
					case LITERAL_class:
					case LITERAL_struct:
					case LITERAL_union:
					case LITERAL__int64:
					case LITERAL___int64:
					case LITERAL___w64:
					case LITERAL___complex__:
					case LITERAL__Bool:
					case LITERAL__Complex:
					case LITERAL__Imaginary:
					case LITERAL_bit:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_decltype:
					case LITERAL_char16_t:
					case LITERAL_char32_t:
					case LITERAL___decltype:
					case LITERAL___complex:
					case LITERAL___builtin_va_list:
					case LITERAL__BUILT_IN_TYPE__:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop245;}
					}
					}
					}
					ts=type_specifier_g(ds, noTypeId);
					if (matchError) {break loop245;}
					{
					_loop447:
					do {
						int LA1_187 = LA(1);
						int LA2_187 = LA(2);
						
						switch ( LA1_187) {
						case LITERAL_inline:
						case LITERAL__inline:
						case LITERAL___inline__:
						case LITERAL___inline:
						case LITERAL___forceinline:
						{
							{
							literal_inline_g();
							if (matchError) {break loop245;}
							}
							break;
						}
						case LITERAL_extern:
						case LITERAL_auto:
						case LITERAL_register:
						case LITERAL_static:
						case LITERAL_mutable:
						case LITERAL___global:
						case LITERAL___thread:
						case LITERAL___symbolic:
						case LITERAL___hidden:
						case LITERAL_thread_local:
						case LITERAL__STORAGE_CLASS_SPECIFIER__:
						{
							{
							sc=storage_class_specifier_g();
							if (matchError) {break loop245;}
							}
							break;
						}
						case LITERAL_virtual:
						{
							AST tmp938_AST = null;
							consume();
							break;
						}
						case LITERAL_friend:
						{
							AST tmp939_AST = null;
							consume();
							break;
						}
						case LITERAL_constexpr:
						{
							AST tmp940_AST = null;
							consume();
							break;
						}
						case LITERAL_const:
						case LITERAL___const__:
						case LITERAL___const:
						case LITERAL_const_cast:
						case LITERAL_volatile:
						case LITERAL___volatile__:
						case LITERAL___volatile:
						case LITERAL__TYPE_QUALIFIER__:
						{
							tq=cv_qualifier_g();
							if (matchError) {break loop245;}
							break;
						}
						default:
							if ((_tokenSet_52.member(LA1_187)) && (LA2_187==LPAREN||LA2_187==LSQUARE)) {
								type_attribute_specification_g();
								if (matchError) {break loop245;}
							}
						else {
							break _loop447;
						}
						}
					} while (true);
					}
					unknown_posttype_declaration_specifiers_g();
					if (matchError) {break loop245;}
					break;
				}
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				{
					literal_typeof_g();
					if (matchError) {break loop245;}
					AST tmp941_AST = null;
					match(LPAREN);
					if (matchError) {break loop245;}
					typeof_param_g();
					if (matchError) {break loop245;}
					AST tmp942_AST = null;
					match(RPAREN);
					if (matchError) {break loop245;}
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop245;}
				}
				}
				}
			}
			else {
				matchError=true;if (matchError) {break loop245;}
			}
			
			}
			{
			if (((LA(1)==LITERAL_typedef))&&(allowTypedef)) {
				AST tmp943_AST = null;
				consume();
			}
			else if ((_tokenSet_56.member(LA(1)))) {
			}
			else {
				matchError=true;if (matchError) {break loop245;}
			}
			
			}
			}
			declaration_specifiers_AST = (AST)currentAST.root;
		break;} // loop245
		if (matchError) {
	}
	returnAST = declaration_specifiers_AST;
}

	public final void function_declarator_g(
		boolean definition, boolean allowParens, boolean symTabCheck
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_declarator_AST = null;
		
		loop246:  while (true) {
			int LA1_188 = LA(1);
			int LA2_188 = LA(2);
			
			boolean synPredMatched753 = false;
			if (((_tokenSet_57.member(LA1_188)) && (_tokenSet_58.member(LA2_188)))) {
				int _m753 = mark();
				guessing++;
				guess753:  while (true) {
					{
					ptr_operator_g();
					if (matchError) {break guess753;}
					}
				synPredMatched753 = true;
				break;} // guess753
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m753);
				guessing--;
			}
			if ( synPredMatched753 ) {
				ptr_operator_g();
				if (matchError) {break loop246;}
				function_declarator_g(definition, allowParens, symTabCheck);
				if (matchError) {break loop246;}
				function_declarator_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched755 = false;
				if ((((LA1_188==LPAREN) && (_tokenSet_24.member(LA2_188)))&&(_td || (_ts != tsInvalid) || allowParens))) {
					int _m755 = mark();
					guessing++;
					guess755:  while (true) {
						{
						match(LPAREN);
						if (matchError) {break guess755;}
						function_declarator_g(definition, allowParens, symTabCheck);
						if (matchError) {break guess755;}
						match(RPAREN);
						if (matchError) {break guess755;}
						is_post_declarator_token_g();
						if (matchError) {break guess755;}
						}
					synPredMatched755 = true;
					break;} // guess755
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m755);
					guessing--;
				}
				if ( synPredMatched755 ) {
					AST tmp944_AST = null;
					consume();
					function_declarator_g(definition, allowParens, symTabCheck);
					if (matchError) {break loop246;}
					AST tmp945_AST = null;
					match(RPAREN);
					if (matchError) {break loop246;}
					function_declarator_AST = (AST)currentAST.root;
				}
				else if ((_tokenSet_59.member(LA1_188)) && (_tokenSet_60.member(LA2_188))) {
					function_direct_declarator_g(definition, symTabCheck);
					if (matchError) {break loop246;}
					function_declarator_AST = (AST)currentAST.root;
				}
				else {
					matchError=true;if (matchError) {break loop246;}
				}
				}
			break;} // loop246
			if (matchError) {
		}
		returnAST = function_declarator_AST;
	}
	
	public final void simple_parameter_list_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST simple_parameter_list_AST = null;
		
		loop247:  while (true) {
			simple_parameter_declaration_g();
			if (matchError) {break loop247;}
			{
			_loop863:
			do {
				if ((LA(1)==COMMA)) {
					consume();
					simple_parameter_declaration_g();
					if (matchError) {break loop247;}
				}
				else {
					break _loop863;
				}
				
			} while (true);
			}
			simple_parameter_list_AST = (AST)currentAST.root;
		break;} // loop247
		if (matchError) {
	}
	returnAST = simple_parameter_list_AST;
}

	protected final void literal_try_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_try_AST = null;
		
		loop248:  while (true) {
			switch ( LA(1)) {
			case LITERAL_try:
			{
				AST tmp947_AST = null;
				consume();
				literal_try_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___try:
			{
				AST tmp948_AST = null;
				consume();
				literal_try_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop248;}
			}
			}
		break;} // loop248
		if (matchError) {
	}
	returnAST = literal_try_AST;
}

	protected final void function_K_R_parameter_list_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_K_R_parameter_list_AST = null;
		
		loop249:  while (true) {
			{
			int _cnt392=0;
			_loop392:
			do {
				if ((_tokenSet_26.member(LA(1)))) {
					function_K_R_parameter_g();
					if (matchError) {break loop249;}
				}
				else {
					if ( _cnt392>=1 ) { break _loop392; } else {matchError=true;if (matchError) {break loop249;}}
				}
				
				_cnt392++;
			} while (true);
			}
			function_K_R_parameter_list_AST = (AST)currentAST.root;
		break;} // loop249
		if (matchError) {
	}
	returnAST = function_K_R_parameter_list_AST;
}

	public final void declaration_g(
		int kind
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declaration_AST = null;
		
		loop250:  while (true) {
			int LA1_189 = LA(1);
			int LA2_189 = LA(2);
			
			switch ( LA1_189) {
			case LITERAL_namespace:
			{
				namespace_alias_definition_g();
				if (matchError) {break loop250;}
				declaration_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_static_assert:
			{
				static_assert_declaration_g();
				if (matchError) {break loop250;}
				declaration_AST = (AST)currentAST.root;
				break;
			}
			default:
				boolean synPredMatched404 = false;
				if (((LA1_189==LITERAL_extern) && (LA2_189==STRING_LITERAL))) {
					int _m404 = mark();
					guessing++;
					guess404:  while (true) {
						{
						match(LITERAL_extern);
						if (matchError) {break guess404;}
						match(STRING_LITERAL);
						if (matchError) {break guess404;}
						}
					synPredMatched404 = true;
					break;} // guess404
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m404);
					guessing--;
				}
				if ( synPredMatched404 ) {
					linkage_specification_g();
					if (matchError) {break loop250;}
					declaration_AST = (AST)currentAST.root;
				}
				else {
					boolean synPredMatched406 = false;
					if ((((LA1_189==LITERAL_extern) && (_tokenSet_107.member(LA2_189)))&&(kind == declExternFunction))) {
						int _m406 = mark();
						guessing++;
						guess406:  while (true) {
							{
							match(LITERAL_extern);
							if (matchError) {break guess406;}
							}
						synPredMatched406 = true;
						break;} // guess406
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m406);
						guessing--;
					}
					if ( synPredMatched406 ) {
						AST tmp949_AST = null;
						match(LITERAL_extern);
						if (matchError) {break loop250;}
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						case COMMA:
						case LPAREN:
						case LSQUARE:
						case STAR:
						case AND:
						case AMPERSAND:
						case TILDE:
						case SCOPE:
						case IDENT:
						case LITERAL_OPERATOR:
						case LITERAL__stdcall:
						case LITERAL___stdcall:
						case LITERAL_this:
						case LITERAL_true:
						case LITERAL_false:
						case LITERAL__cdecl:
						case LITERAL___cdecl:
						case LITERAL__near:
						case LITERAL___near:
						case LITERAL__far:
						case LITERAL___far:
						case LITERAL___interrupt:
						case LITERAL_pascal:
						case LITERAL__pascal:
						case LITERAL___pascal:
						case LITERAL___attribute__:
						case LITERAL___attribute:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_decltype:
						case LITERAL___decltype:
						case LITERAL___clrcall:
						{
							{
							switch ( LA(1)) {
							case COMMA:
							{
								consume();
								break;
							}
							case ELLIPSIS:
							case LPAREN:
							case LSQUARE:
							case STAR:
							case AND:
							case AMPERSAND:
							case TILDE:
							case SCOPE:
							case IDENT:
							case LITERAL_OPERATOR:
							case LITERAL__stdcall:
							case LITERAL___stdcall:
							case LITERAL_this:
							case LITERAL_true:
							case LITERAL_false:
							case LITERAL__cdecl:
							case LITERAL___cdecl:
							case LITERAL__near:
							case LITERAL___near:
							case LITERAL__far:
							case LITERAL___far:
							case LITERAL___interrupt:
							case LITERAL_pascal:
							case LITERAL__pascal:
							case LITERAL___pascal:
							case LITERAL___attribute__:
							case LITERAL___attribute:
							case LITERAL_final:
							case LITERAL_override:
							case LITERAL_decltype:
							case LITERAL___decltype:
							case LITERAL___clrcall:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break loop250;}
							}
							}
							}
							init_declarator_list_g(kind);
							if (matchError) {break loop250;}
							break;
						}
						case EOF:
						case SEMICOLON:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break loop250;}
						}
						}
						}
						{
						switch ( LA(1)) {
						case EOF:
						{
							consume();
							break;
						}
						case SEMICOLON:
						{
							AST tmp952_AST = null;
							consume();
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break loop250;}
						}
						}
						}
						declaration_AST = (AST)currentAST.root;
					}
					else {
						boolean synPredMatched411 = false;
						if ((((_tokenSet_109.member(LA1_189)) && (_tokenSet_110.member(LA2_189)))&&(kind == declSimpleFunction))) {
							int _m411 = mark();
							guessing++;
							guess411:  while (true) {
								{
								literal_ident_g();
								if (matchError) {break guess411;}
								match(LPAREN);
								if (matchError) {break guess411;}
								}
							synPredMatched411 = true;
							break;} // guess411
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m411);
							guessing--;
						}
						if ( synPredMatched411 ) {
							init_declarator_list_g(kind);
							if (matchError) {break loop250;}
							{
							switch ( LA(1)) {
							case EOF:
							{
								consume();
								break;
							}
							case SEMICOLON:
							{
								AST tmp954_AST = null;
								consume();
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break loop250;}
							}
							}
							}
							declaration_AST = (AST)currentAST.root;
						}
						else if ((_tokenSet_22.member(LA1_189)) && (_tokenSet_111.member(LA2_189))) {
							declaration_specifiers_g(true, false);
							if (matchError) {break loop250;}
							{
							switch ( LA(1)) {
							case ELLIPSIS:
							case COMMA:
							case LPAREN:
							case LSQUARE:
							case STAR:
							case AND:
							case AMPERSAND:
							case TILDE:
							case SCOPE:
							case IDENT:
							case LITERAL_OPERATOR:
							case LITERAL__stdcall:
							case LITERAL___stdcall:
							case LITERAL_this:
							case LITERAL_true:
							case LITERAL_false:
							case LITERAL__cdecl:
							case LITERAL___cdecl:
							case LITERAL__near:
							case LITERAL___near:
							case LITERAL__far:
							case LITERAL___far:
							case LITERAL___interrupt:
							case LITERAL_pascal:
							case LITERAL__pascal:
							case LITERAL___pascal:
							case LITERAL___attribute__:
							case LITERAL___attribute:
							case LITERAL_final:
							case LITERAL_override:
							case LITERAL_decltype:
							case LITERAL___decltype:
							case LITERAL___clrcall:
							{
								{
								switch ( LA(1)) {
								case COMMA:
								{
									consume();
									break;
								}
								case ELLIPSIS:
								case LPAREN:
								case LSQUARE:
								case STAR:
								case AND:
								case AMPERSAND:
								case TILDE:
								case SCOPE:
								case IDENT:
								case LITERAL_OPERATOR:
								case LITERAL__stdcall:
								case LITERAL___stdcall:
								case LITERAL_this:
								case LITERAL_true:
								case LITERAL_false:
								case LITERAL__cdecl:
								case LITERAL___cdecl:
								case LITERAL__near:
								case LITERAL___near:
								case LITERAL__far:
								case LITERAL___far:
								case LITERAL___interrupt:
								case LITERAL_pascal:
								case LITERAL__pascal:
								case LITERAL___pascal:
								case LITERAL___attribute__:
								case LITERAL___attribute:
								case LITERAL_final:
								case LITERAL_override:
								case LITERAL_decltype:
								case LITERAL___decltype:
								case LITERAL___clrcall:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break loop250;}
								}
								}
								}
								init_declarator_list_g(kind);
								if (matchError) {break loop250;}
								break;
							}
							case EOF:
							case SEMICOLON:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break loop250;}
							}
							}
							}
							{
							switch ( LA(1)) {
							case EOF:
							{
								consume();
								break;
							}
							case SEMICOLON:
							{
								AST tmp957_AST = null;
								consume();
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break loop250;}
							}
							}
							}
							declaration_AST = (AST)currentAST.root;
						}
						else {
							boolean synPredMatched417 = false;
							if (((LA1_189==LITERAL_using) && (_tokenSet_0.member(LA2_189)))) {
								int _m417 = mark();
								guessing++;
								guess417:  while (true) {
									{
									match(LITERAL_using);
									if (matchError) {break guess417;}
									literal_ident_g();
									if (matchError) {break guess417;}
									match(ASSIGNEQUAL);
									if (matchError) {break guess417;}
									}
								synPredMatched417 = true;
								break;} // guess417
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m417);
								guessing--;
							}
							if ( synPredMatched417 ) {
								alias_declaration_g();
								if (matchError) {break loop250;}
								declaration_AST = (AST)currentAST.root;
							}
							else if ((LA1_189==LITERAL_using) && (_tokenSet_112.member(LA2_189))) {
								using_declaration_g();
								if (matchError) {break loop250;}
								declaration_AST = (AST)currentAST.root;
							}
						else {
							matchError=true;if (matchError) {break loop250;}
						}
						}}}}
					break;} // loop250
					if (matchError) {
				}
				returnAST = declaration_AST;
			}
			
	public final void function_declarator_with_fun_as_ret_type_g(
		boolean definition
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_declarator_with_fun_as_ret_type_AST = null;
		
		loop251:  while (true) {
			switch ( LA(1)) {
			case STAR:
			case AND:
			case AMPERSAND:
			case SCOPE:
			case IDENT:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			case LITERAL___clrcall:
			{
				ptr_operator_g();
				if (matchError) {break loop251;}
				function_declarator_with_fun_as_ret_type_g(definition);
				if (matchError) {break loop251;}
				function_declarator_with_fun_as_ret_type_AST = (AST)currentAST.root;
				break;
			}
			case LPAREN:
			{
				AST tmp958_AST = null;
				consume();
				function_declarator_g(definition, false, false);
				if (matchError) {break loop251;}
				AST tmp959_AST = null;
				match(RPAREN);
				if (matchError) {break loop251;}
				function_params_g();
				if (matchError) {break loop251;}
				{
				int LA1_190 = LA(1);
				int LA2_190 = LA(2);
				
				if ((_tokenSet_134.member(LA1_190)) && (_tokenSet_1.member(LA2_190))) {
					fun_cv_qualifier_seq_g();
					if (matchError) {break loop251;}
				}
				else if ((_tokenSet_134.member(LA1_190)) && (_tokenSet_1.member(LA2_190))) {
				}
				else {
					matchError=true;if (matchError) {break loop251;}
				}
				
				}
				{
				int LA1_191 = LA(1);
				int LA2_191 = LA(2);
				
				if ((LA1_191==AND||LA1_191==AMPERSAND) && (_tokenSet_134.member(LA2_191))) {
					ref_qualifier_g();
					if (matchError) {break loop251;}
				}
				else if ((_tokenSet_134.member(LA1_191)) && (_tokenSet_1.member(LA2_191))) {
				}
				else {
					matchError=true;if (matchError) {break loop251;}
				}
				
				}
				{
				switch ( LA(1)) {
				case LITERAL_throw:
				case LITERAL_noexcept:
				{
					exception_specification_g();
					if (matchError) {break loop251;}
					break;
				}
				case EOF:
				case ELLIPSIS:
				case SEMICOLON:
				case LPAREN:
				case LSQUARE:
				case LCURLY:
				case STAR:
				case AND:
				case AMPERSAND:
				case TILDE:
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_namespace:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL_using:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_static_assert:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop251;}
				}
				}
				}
				function_declarator_with_fun_as_ret_type_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop251;}
			}
			}
		break;} // loop251
		if (matchError) {
	}
	returnAST = function_declarator_with_fun_as_ret_type_AST;
}

	public final boolean  ctor_declarator_g(
		boolean definition
	) {
		boolean isCtor = false;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ctor_declarator_AST = null;
		
		loop252:  while (true) {
			int LA1_192 = LA(1);
			int LA2_192 = LA(2);
			
			boolean synPredMatched796 = false;
			if (((LA1_192==LPAREN) && (_tokenSet_33.member(LA2_192)))) {
				int _m796 = mark();
				guessing++;
				guess796:  while (true) {
					{
					match(LPAREN);
					if (matchError) {break guess796;}
					ctor_declarator_g(definition);
					if (matchError) {break guess796;}
					match(RPAREN);
					if (matchError) {break guess796;}
					is_post_declarator_token_g();
					if (matchError) {break guess796;}
					}
				synPredMatched796 = true;
				break;} // guess796
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m796);
				guessing--;
			}
			if ( synPredMatched796 ) {
				AST tmp960_AST = null;
				consume();
				isCtor=ctor_declarator_g(definition);
				if (matchError) {break loop252;}
				AST tmp961_AST = null;
				match(RPAREN);
				if (matchError) {break loop252;}
				ctor_declarator_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_33.member(LA1_192)) && (_tokenSet_34.member(LA2_192))) {
				isCtor=ctor_direct_declarator_g(definition);
				if (matchError) {break loop252;}
				ctor_declarator_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;if (matchError) {break loop252;}
			}
			
		break;} // loop252
		if (matchError) {
	}
	returnAST = ctor_declarator_AST;
	return isCtor;
}

	public final void dtor_declarator_g(
		boolean definition
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dtor_declarator_AST = null;
		
		loop253:  while (true) {
			int LA1_193 = LA(1);
			int LA2_193 = LA(2);
			
			boolean synPredMatched829 = false;
			if (((LA1_193==LPAREN) && (_tokenSet_35.member(LA2_193)))) {
				int _m829 = mark();
				guessing++;
				guess829:  while (true) {
					{
					match(LPAREN);
					if (matchError) {break guess829;}
					dtor_declarator_g(definition);
					if (matchError) {break guess829;}
					match(RPAREN);
					if (matchError) {break guess829;}
					is_post_declarator_token_g();
					if (matchError) {break guess829;}
					}
				synPredMatched829 = true;
				break;} // guess829
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m829);
				guessing--;
			}
			if ( synPredMatched829 ) {
				AST tmp962_AST = null;
				consume();
				dtor_declarator_g(definition);
				if (matchError) {break loop253;}
				AST tmp963_AST = null;
				match(RPAREN);
				if (matchError) {break loop253;}
				dtor_declarator_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_35.member(LA1_193)) && (_tokenSet_36.member(LA2_193))) {
				dtor_direct_declarator_g(definition);
				if (matchError) {break loop253;}
				dtor_declarator_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;if (matchError) {break loop253;}
			}
			
		break;} // loop253
		if (matchError) {
	}
	returnAST = dtor_declarator_AST;
}

	public final void class_forward_declaration_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST class_forward_declaration_AST = null;
		String s;
		
		loop254:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_struct:
			{
				AST tmp964_AST = null;
				consume();
				break;
			}
			case LITERAL_union:
			{
				AST tmp965_AST = null;
				consume();
				break;
			}
			case LITERAL_class:
			{
				AST tmp966_AST = null;
				consume();
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop254;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_alignas:
			{
				type_attribute_specification_g();
				if (matchError) {break loop254;}
				break;
			}
			case SEMICOLON:
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop254;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				s=scope_override_g();
				if (matchError) {break loop254;}
				s=literal_ident_g();
				if (matchError) {break loop254;}
				{
				switch ( LA(1)) {
				case LESSTHAN:
				{
					AST tmp967_AST = null;
					consume();
					template_argument_list_g();
					if (matchError) {break loop254;}
					AST tmp968_AST = null;
					match(GREATERTHAN);
					if (matchError) {break loop254;}
					break;
				}
				case COLON:
				case SEMICOLON:
				case LITERAL_explicit:
				case LITERAL_final:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop254;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case LITERAL_final:
				{
					AST tmp969_AST = null;
					consume();
					break;
				}
				case LITERAL_explicit:
				{
					AST tmp970_AST = null;
					consume();
					break;
				}
				case COLON:
				case SEMICOLON:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop254;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case COLON:
				{
					base_clause_g();
					if (matchError) {break loop254;}
					break;
				}
				case SEMICOLON:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop254;}
				}
				}
				}
				break;
			}
			case SEMICOLON:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop254;}
			}
			}
			}
			AST tmp971_AST = null;
			match(SEMICOLON);
			if (matchError) {break loop254;}
			class_forward_declaration_AST = (AST)currentAST.root;
		break;} // loop254
		if (matchError) {
	}
	returnAST = class_forward_declaration_AST;
}

	public final CPPParser.StorageClass  storage_class_specifier_g() {
		CPPParser.StorageClass sc = scInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST storage_class_specifier_AST = null;
		
		loop255:  while (true) {
			switch ( LA(1)) {
			case LITERAL_auto:
			{
				AST tmp972_AST = null;
				consume();
				storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_extern:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL___global:
			case LITERAL___thread:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_thread_local:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				sc=common_storage_class_specifier_g();
				if (matchError) {break loop255;}
				storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop255;}
			}
			}
		break;} // loop255
		if (matchError) {
	}
	returnAST = storage_class_specifier_AST;
	return sc;
}

	public final CPPParser.TypeQualifier  cv_qualifier_g() {
		CPPParser.TypeQualifier tq = tqInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cv_qualifier_AST = null;
		
		loop256:  while (true) {
			switch ( LA(1)) {
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			{
				{
				switch ( LA(1)) {
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				{
					literal_const_g();
					if (matchError) {break loop256;}
					break;
				}
				case LITERAL_const_cast:
				{
					AST tmp973_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop256;}
				}
				}
				}
				cv_qualifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			{
				literal_volatile_g();
				if (matchError) {break loop256;}
				cv_qualifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__TYPE_QUALIFIER__:
			{
				AST tmp974_AST = null;
				consume();
				cv_qualifier_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop256;}
			}
			}
		break;} // loop256
		if (matchError) {
	}
	returnAST = cv_qualifier_AST;
	return tq;
}

	public final String  qualified_id_g() {
		String q = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qualified_id_AST = null;
		
			    String so, id;
			    StringBuilder qitem = new StringBuilder();
			
		
		loop257:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			{
				literal_cdecl_g();
				if (matchError) {break loop257;}
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop257;}
			}
			}
			}
			so=scope_override_g();
			if (matchError) {break loop257;}
			{
			int LA1_194 = LA(1);
			int LA2_194 = LA(2);
			
			switch ( LA1_194) {
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				id=literal_ident_g();
				if (matchError) {break loop257;}
				{
				int LA1_195 = LA(1);
				int LA2_195 = LA(2);
				
				if ((LA1_195==LESSTHAN) && (_tokenSet_91.member(LA2_195))) {
					AST tmp975_AST = null;
					consume();
					template_argument_list_g();
					if (matchError) {break loop257;}
					AST tmp976_AST = null;
					match(GREATERTHAN);
					if (matchError) {break loop257;}
				}
				else if ((_tokenSet_92.member(LA1_195)) && (_tokenSet_1.member(LA2_195))) {
				}
				else {
					matchError=true;if (matchError) {break loop257;}
				}
				
				}
				break;
			}
			case LITERAL_this:
			{
				AST tmp977_AST = null;
				consume();
				break;
			}
			case LITERAL_true:
			case LITERAL_false:
			{
				{
				switch ( LA(1)) {
				case LITERAL_true:
				{
					AST tmp978_AST = null;
					consume();
					break;
				}
				case LITERAL_false:
				{
					AST tmp979_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop257;}
				}
				}
				}
				break;
			}
			default:
				if ((LA1_194==LITERAL_OPERATOR) && (_tokenSet_94.member(LA2_194))) {
					AST tmp980_AST = null;
					consume();
					optor_g();
					if (matchError) {break loop257;}
					{
					int LA1_196 = LA(1);
					int LA2_196 = LA(2);
					
					if ((LA1_196==LESSTHAN) && (_tokenSet_91.member(LA2_196))) {
						AST tmp981_AST = null;
						consume();
						template_argument_list_g();
						if (matchError) {break loop257;}
						AST tmp982_AST = null;
						match(GREATERTHAN);
						if (matchError) {break loop257;}
					}
					else if ((_tokenSet_92.member(LA1_196)) && (_tokenSet_1.member(LA2_196))) {
					}
					else {
						matchError=true;if (matchError) {break loop257;}
					}
					
					}
				}
				else if ((LA1_194==LITERAL_OPERATOR) && (LA2_194==STRING_LITERAL)) {
					AST tmp983_AST = null;
					consume();
					AST tmp984_AST = null;
					consume();
					id=literal_ident_g();
					if (matchError) {break loop257;}
					{
					int LA1_197 = LA(1);
					int LA2_197 = LA(2);
					
					if ((LA1_197==LESSTHAN) && (_tokenSet_91.member(LA2_197))) {
						AST tmp985_AST = null;
						consume();
						template_argument_list_g();
						if (matchError) {break loop257;}
						AST tmp986_AST = null;
						match(GREATERTHAN);
						if (matchError) {break loop257;}
					}
					else if ((_tokenSet_92.member(LA1_197)) && (_tokenSet_1.member(LA2_197))) {
					}
					else {
						matchError=true;if (matchError) {break loop257;}
					}
					
					}
				}
			else {
				matchError=true;if (matchError) {break loop257;}
			}
			}
			}
			qualified_id_AST = (AST)currentAST.root;
		break;} // loop257
		if (matchError) {
	}
	returnAST = qualified_id_AST;
	return q;
}

	public final /*TypeSpecifier*/int  type_specifier_g(
		DeclSpecifier ds, boolean noTypeId
	) {
		/*TypeSpecifier*/int ts = tsInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST type_specifier_AST = null;
		
		loop258:  while (true) {
			switch ( LA(1)) {
			case SCOPE:
			case IDENT:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___complex__:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			{
				ts=simple_type_specifier_g(noTypeId);
				if (matchError) {break loop258;}
				type_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			{
				ts=class_specifier_g(ds);
				if (matchError) {break loop258;}
				type_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_enum:
			{
				enum_specifier_g();
				if (matchError) {break loop258;}
				type_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_auto:
			{
				AST tmp987_AST = null;
				consume();
				type_specifier_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop258;}
			}
			}
		break;} // loop258
		if (matchError) {
	}
	returnAST = type_specifier_AST;
	return ts;
}

	protected final void postfix_cv_qualifier_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST postfix_cv_qualifier_AST = null;
		
		loop259:  while (true) {
			{
			int _cnt1307=0;
			_loop1307:
			do {
				if ((_tokenSet_181.member(LA(1)))) {
					{
					switch ( LA(1)) {
					case LITERAL_volatile:
					case LITERAL___volatile__:
					case LITERAL___volatile:
					{
						literal_volatile_g();
						if (matchError) {break loop259;}
						break;
					}
					case LITERAL_const:
					case LITERAL___const__:
					case LITERAL___const:
					{
						literal_const_g();
						if (matchError) {break loop259;}
						break;
					}
					case LITERAL__TYPE_QUALIFIER__:
					{
						AST tmp988_AST = null;
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop259;}
					}
					}
					}
					{
					_loop1306:
					do {
						int LA1_198 = LA(1);
						int LA2_198 = LA(2);
						
						if ((_tokenSet_182.member(LA1_198)) && (_tokenSet_183.member(LA2_198))) {
							unnamed_ptr_operator_g();
							if (matchError) {break loop259;}
						}
						else {
							break _loop1306;
						}
						
					} while (true);
					}
				}
				else {
					if ( _cnt1307>=1 ) { break _loop1307; } else {matchError=true;if (matchError) {break loop259;}}
				}
				
				_cnt1307++;
			} while (true);
			}
			postfix_cv_qualifier_AST = (AST)currentAST.root;
		break;} // loop259
		if (matchError) {
	}
	returnAST = postfix_cv_qualifier_AST;
}

	public final void declarator_g(
		int kind, int level
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declarator_AST = null;
		
		loop260:  while (true) {
			int LA1_199 = LA(1);
			int LA2_199 = LA(2);
			
			boolean synPredMatched686 = false;
			if ((((_tokenSet_21.member(LA1_199)) && (LA2_199==LPAREN||LA2_199==LSQUARE))&&(level < 5))) {
				int _m686 = mark();
				guessing++;
				guess686:  while (true) {
					{
					attribute_specification_g();
					if (matchError) {break guess686;}
					}
				synPredMatched686 = true;
				break;} // guess686
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m686);
				guessing--;
			}
			if ( synPredMatched686 ) {
				attribute_specification_g();
				if (matchError) {break loop260;}
				declarator_g(kind, level + 1);
				if (matchError) {break loop260;}
				declarator_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched688 = false;
				if ((((_tokenSet_57.member(LA1_199)) && (_tokenSet_174.member(LA2_199)))&&(level < 5))) {
					int _m688 = mark();
					guessing++;
					guess688:  while (true) {
						{
						ptr_operator_g();
						if (matchError) {break guess688;}
						}
					synPredMatched688 = true;
					break;} // guess688
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m688);
					guessing--;
				}
				if ( synPredMatched688 ) {
					ptr_operator_g();
					if (matchError) {break loop260;}
					restrict_declarator_g(kind, level + 1);
					if (matchError) {break loop260;}
					declarator_AST = (AST)currentAST.root;
				}
				else {
					boolean synPredMatched690 = false;
					if ((((LA1_199==LPAREN) && (_tokenSet_109.member(LA2_199)))&&(level < 5 && (_td || (_ts != tsInvalid))))) {
						int _m690 = mark();
						guessing++;
						guess690:  while (true) {
							{
							match(LPAREN);
							if (matchError) {break guess690;}
							declarator_g(kind, level + 1);
							if (matchError) {break guess690;}
							match(RPAREN);
							if (matchError) {break guess690;}
							is_post_declarator_token_g();
							if (matchError) {break guess690;}
							}
						synPredMatched690 = true;
						break;} // guess690
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m690);
						guessing--;
					}
					if ( synPredMatched690 ) {
						AST tmp989_AST = null;
						consume();
						declarator_g(kind, level + 1);
						if (matchError) {break loop260;}
						AST tmp990_AST = null;
						match(RPAREN);
						if (matchError) {break loop260;}
						declarator_AST = (AST)currentAST.root;
					}
					else {
						boolean synPredMatched692 = false;
						if ((((LA1_199==LPAREN) && (_tokenSet_109.member(LA2_199)))&&(level < 5))) {
							int _m692 = mark();
							guessing++;
							guess692:  while (true) {
								{
								match(LPAREN);
								if (matchError) {break guess692;}
								declarator_g(kind, level + 1);
								if (matchError) {break guess692;}
								match(RPAREN);
								if (matchError) {break guess692;}
								match(ASSIGNEQUAL);
								if (matchError) {break guess692;}
								match(LCURLY);
								if (matchError) {break guess692;}
								}
							synPredMatched692 = true;
							break;} // guess692
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m692);
							guessing--;
						}
						if ( synPredMatched692 ) {
							AST tmp991_AST = null;
							consume();
							declarator_g(kind, level + 1);
							if (matchError) {break loop260;}
							AST tmp992_AST = null;
							match(RPAREN);
							if (matchError) {break loop260;}
							declarator_AST = (AST)currentAST.root;
						}
						else if (((_tokenSet_175.member(LA1_199)) && (_tokenSet_176.member(LA2_199)))&&(level < 5)) {
							direct_declarator_g(kind, level + 1);
							if (matchError) {break loop260;}
							declarator_AST = (AST)currentAST.root;
						}
						else {
							matchError=true;if (matchError) {break loop260;}
						}
						}}}
					break;} // loop260
					if (matchError) {
				}
				returnAST = declarator_AST;
			}
			
	public final void ptr_operator_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ptr_operator_AST = null;
		
		loop261:  while (true) {
			{
			switch ( LA(1)) {
			case AMPERSAND:
			{
				AST tmp993_AST = null;
				consume();
				break;
			}
			case AND:
			{
				AST tmp994_AST = null;
				consume();
				break;
			}
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			{
				literal_cdecl_g();
				if (matchError) {break loop261;}
				break;
			}
			case LITERAL__near:
			case LITERAL___near:
			{
				literal_near_g();
				if (matchError) {break loop261;}
				break;
			}
			case LITERAL__far:
			case LITERAL___far:
			{
				literal_far_g();
				if (matchError) {break loop261;}
				break;
			}
			case LITERAL___interrupt:
			{
				AST tmp995_AST = null;
				consume();
				break;
			}
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			{
				literal_pascal_g();
				if (matchError) {break loop261;}
				break;
			}
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			{
				literal_stdcall_g();
				if (matchError) {break loop261;}
				break;
			}
			case LITERAL___clrcall:
			{
				literal_clrcall_g();
				if (matchError) {break loop261;}
				break;
			}
			case STAR:
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				ptr_to_member_g();
				if (matchError) {break loop261;}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop261;}
			}
			}
			}
			ptr_operator_AST = (AST)currentAST.root;
		break;} // loop261
		if (matchError) {
	}
	returnAST = ptr_operator_AST;
}

	protected final void is_post_declarator_token_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST is_post_declarator_token_AST = null;
		
		loop262:  while (true) {
			switch ( LA(1)) {
			case SEMICOLON:
			{
				AST tmp996_AST = null;
				consume();
				is_post_declarator_token_AST = (AST)currentAST.root;
				break;
			}
			case ASSIGNEQUAL:
			{
				AST tmp997_AST = null;
				consume();
				is_post_declarator_token_AST = (AST)currentAST.root;
				break;
			}
			case LCURLY:
			{
				AST tmp998_AST = null;
				consume();
				is_post_declarator_token_AST = (AST)currentAST.root;
				break;
			}
			case EOF:
			{
				AST tmp999_AST = null;
				consume();
				is_post_declarator_token_AST = (AST)currentAST.root;
				break;
			}
			case RPAREN:
			{
				AST tmp1000_AST = null;
				consume();
				is_post_declarator_token_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_try:
			case LITERAL___try:
			{
				literal_try_g();
				if (matchError) {break loop262;}
				is_post_declarator_token_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop262;}
			}
			}
		break;} // loop262
		if (matchError) {
	}
	returnAST = is_post_declarator_token_AST;
}

	public final void lazy_template_argument_list_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_template_argument_list_AST = null;
		
		loop263:  while (true) {
			lazy_template_argument_g();
			if (matchError) {break loop263;}
			{
			_loop961:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp1001_AST = null;
					consume();
					lazy_template_argument_g();
					if (matchError) {break loop263;}
				}
				else {
					break _loop961;
				}
				
			} while (true);
			}
			lazy_template_argument_list_AST = (AST)currentAST.root;
		break;} // loop263
		if (matchError) {
	}
	returnAST = lazy_template_argument_list_AST;
}

	public final void lazy_type_decltype_g(
		int templateLevel
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_type_decltype_AST = null;
		
		loop264:  while (true) {
			literal_decltype_g();
			if (matchError) {break loop264;}
			AST tmp1002_AST = null;
			match(LPAREN);
			if (matchError) {break loop264;}
			lazy_assignment_expression_g(false, false, templateLevel);
			if (matchError) {break loop264;}
			AST tmp1003_AST = null;
			match(RPAREN);
			if (matchError) {break loop264;}
			lazy_type_decltype_AST = (AST)currentAST.root;
		break;} // loop264
		if (matchError) {
	}
	returnAST = lazy_type_decltype_AST;
}

	public final void init_declarator_list_g(
		int kind
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST init_declarator_list_AST = null;
		
		loop265:  while (true) {
			init_declarator_g(kind);
			if (matchError) {break loop265;}
			{
			_loop578:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp1004_AST = null;
					consume();
					init_declarator_g(declNotFirst);
					if (matchError) {break loop265;}
				}
				else {
					break _loop578;
				}
				
			} while (true);
			}
			init_declarator_list_AST = (AST)currentAST.root;
		break;} // loop265
		if (matchError) {
	}
	returnAST = init_declarator_list_AST;
}

	protected final void literal_attribute_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_attribute_AST = null;
		
		loop266:  while (true) {
			switch ( LA(1)) {
			case LITERAL___attribute:
			{
				AST tmp1005_AST = null;
				consume();
				literal_attribute_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___attribute__:
			{
				AST tmp1006_AST = null;
				consume();
				literal_attribute_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop266;}
			}
			}
		break;} // loop266
		if (matchError) {
	}
	returnAST = literal_attribute_AST;
}

	public final void attribute_specification_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST attribute_specification_AST = null;
		
		loop267:  while (true) {
			switch ( LA(1)) {
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				literal_attribute_g();
				if (matchError) {break loop267;}
				AST tmp1007_AST = null;
				match(LPAREN);
				if (matchError) {break loop267;}
				balanceParens_g();
				if (matchError) {break loop267;}
				AST tmp1008_AST = null;
				match(RPAREN);
				if (matchError) {break loop267;}
				attribute_specification_AST = (AST)currentAST.root;
				break;
			}
			case LSQUARE:
			{
				{
				if (!(isCPlusPlus11()))
				{matchError=true;
				if (matchError) {break loop267;}}
				AST tmp1009_AST = null;
				match(LSQUARE);
				if (matchError) {break loop267;}
				balanceSquares_g();
				if (matchError) {break loop267;}
				AST tmp1010_AST = null;
				match(RSQUARE);
				if (matchError) {break loop267;}
				}
				attribute_specification_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop267;}
			}
			}
		break;} // loop267
		if (matchError) {
	}
	returnAST = attribute_specification_AST;
}

	protected final void literal_stdcall_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_stdcall_AST = null;
		
		loop268:  while (true) {
			switch ( LA(1)) {
			case LITERAL__stdcall:
			{
				AST tmp1011_AST = null;
				consume();
				literal_stdcall_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___stdcall:
			{
				AST tmp1012_AST = null;
				consume();
				literal_stdcall_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop268;}
			}
			}
		break;} // loop268
		if (matchError) {
	}
	returnAST = literal_stdcall_AST;
}

	protected final void literal_clrcall_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_clrcall_AST = null;
		
		loop269:  while (true) {
			AST tmp1013_AST = null;
			match(LITERAL___clrcall);
			if (matchError) {break loop269;}
			literal_clrcall_AST = (AST)currentAST.root;
		break;} // loop269
		if (matchError) {
	}
	returnAST = literal_clrcall_AST;
}

	public final void type_name_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST type_name_AST = null;
		
		loop270:  while (true) {
			declaration_specifiers_g(true, false);
			if (matchError) {break loop270;}
			abstract_declarator_g();
			if (matchError) {break loop270;}
			type_name_AST = (AST)currentAST.root;
		break;} // loop270
		if (matchError) {
	}
	returnAST = type_name_AST;
}

	public final void qualified_type_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qualified_type_AST = null;
		String s;
		
		loop271:  while (true) {
			s=scope_override_g();
			if (matchError) {break loop271;}
			{
			switch ( LA(1)) {
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				s=literal_ident_g();
				if (matchError) {break loop271;}
				break;
			}
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				type_decltype_g();
				if (matchError) {break loop271;}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop271;}
			}
			}
			}
			{
			int LA1_200 = LA(1);
			int LA2_200 = LA(2);
			
			if ((LA1_200==LESSTHAN) && (_tokenSet_91.member(LA2_200))) {
				AST tmp1014_AST = null;
				consume();
				template_argument_list_g();
				if (matchError) {break loop271;}
				AST tmp1015_AST = null;
				match(GREATERTHAN);
				if (matchError) {break loop271;}
			}
			else if ((_tokenSet_92.member(LA1_200)) && (_tokenSet_1.member(LA2_200))) {
			}
			else {
				matchError=true;if (matchError) {break loop271;}
			}
			
			}
			qualified_type_AST = (AST)currentAST.root;
		break;} // loop271
		if (matchError) {
	}
	returnAST = qualified_type_AST;
}

	public final /*TypeSpecifier*/int  builtin_type_g(
		/*TypeSpecifier*/int old_ts
	) {
		/*TypeSpecifier*/int ts = old_ts;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST builtin_type_AST = null;
		
		loop272:  while (true) {
			switch ( LA(1)) {
			case LITERAL_char:
			{
				AST tmp1016_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_wchar_t:
			{
				AST tmp1017_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_char16_t:
			{
				AST tmp1018_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_char32_t:
			{
				AST tmp1019_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_bool:
			{
				AST tmp1020_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__Bool:
			{
				AST tmp1021_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_short:
			{
				AST tmp1022_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_int:
			{
				AST tmp1023_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__int64:
			case LITERAL___int64:
			{
				literal_int64_g();
				if (matchError) {break loop272;}
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___w64:
			{
				AST tmp1024_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_long:
			{
				AST tmp1025_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			{
				literal_signed_g();
				if (matchError) {break loop272;}
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			{
				literal_unsigned_g();
				if (matchError) {break loop272;}
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_float:
			{
				AST tmp1026_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_double:
			{
				AST tmp1027_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_void:
			{
				AST tmp1028_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___complex__:
			case LITERAL__Complex:
			case LITERAL___complex:
			{
				literal_complex_g();
				if (matchError) {break loop272;}
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__Imaginary:
			{
				AST tmp1029_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_bit:
			{
				AST tmp1030_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__BUILT_IN_TYPE__:
			{
				AST tmp1031_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___builtin_va_list:
			{
				AST tmp1032_AST = null;
				consume();
				builtin_type_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop272;}
			}
			}
		break;} // loop272
		if (matchError) {
	}
	returnAST = builtin_type_AST;
	return ts;
}

	public final void optor_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST optor_AST = null;
		
		loop273:  while (true) {
			switch ( LA(1)) {
			case LITERAL_new:
			{
				AST tmp1033_AST = null;
				consume();
				{
				int LA1_201 = LA(1);
				int LA2_201 = LA(2);
				
				if ((LA1_201==LSQUARE) && (LA2_201==RSQUARE)) {
					AST tmp1034_AST = null;
					consume();
					AST tmp1035_AST = null;
					consume();
				}
				else if ((_tokenSet_92.member(LA1_201)) && (_tokenSet_1.member(LA2_201))) {
				}
				else {
					matchError=true;if (matchError) {break loop273;}
				}
				
				}
				optor_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_delete:
			{
				AST tmp1036_AST = null;
				consume();
				{
				int LA1_202 = LA(1);
				int LA2_202 = LA(2);
				
				if ((LA1_202==LSQUARE) && (LA2_202==RSQUARE)) {
					AST tmp1037_AST = null;
					consume();
					AST tmp1038_AST = null;
					consume();
				}
				else if ((_tokenSet_92.member(LA1_202)) && (_tokenSet_1.member(LA2_202))) {
				}
				else {
					matchError=true;if (matchError) {break loop273;}
				}
				
				}
				optor_AST = (AST)currentAST.root;
				break;
			}
			case LPAREN:
			{
				AST tmp1039_AST = null;
				consume();
				AST tmp1040_AST = null;
				match(RPAREN);
				if (matchError) {break loop273;}
				optor_AST = (AST)currentAST.root;
				break;
			}
			case LSQUARE:
			{
				AST tmp1041_AST = null;
				consume();
				AST tmp1042_AST = null;
				match(RSQUARE);
				if (matchError) {break loop273;}
				optor_AST = (AST)currentAST.root;
				break;
			}
			case ASSIGNEQUAL:
			case COMMA:
			case POINTERTO:
			case EQUAL:
			case NOTEQUAL:
			case LESSTHANOREQUALTO:
			case LESSTHAN:
			case GREATERTHANOREQUALTO:
			case GREATERTHAN:
			case DIVIDE:
			case DIVIDEEQUAL:
			case PLUS:
			case PLUSEQUAL:
			case PLUSPLUS:
			case MINUS:
			case MINUSEQUAL:
			case MINUSMINUS:
			case STAR:
			case TIMESEQUAL:
			case MOD:
			case MODEQUAL:
			case SHIFTRIGHT:
			case SHIFTRIGHTEQUAL:
			case SHIFTLEFT:
			case SHIFTLEFTEQUAL:
			case AND:
			case NOT:
			case OR:
			case AMPERSAND:
			case BITWISEANDEQUAL:
			case TILDE:
			case BITWISEOR:
			case BITWISEOREQUAL:
			case BITWISEXOR:
			case BITWISEXOREQUAL:
			case POINTERTOMBR:
			{
				optor_simple_tokclass_g();
				if (matchError) {break loop273;}
				optor_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop273;}
			}
			}
		break;} // loop273
		if (matchError) {
	}
	returnAST = optor_AST;
}

	public final void cast_array_initializer_head_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cast_array_initializer_head_AST = null;
		
		loop274:  while (true) {
			{
			switch ( LA(1)) {
			case AMPERSAND:
			{
				AST tmp1043_AST = null;
				consume();
				break;
			}
			case LPAREN:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop274;}
			}
			}
			}
			{
			_loop611:
			do {
				if ((LA(1)==LPAREN)) {
					balanceParensInExpression_g();
					if (matchError) {break loop274;}
				}
				else {
					break _loop611;
				}
				
			} while (true);
			}
			AST tmp1044_AST = null;
			match(LCURLY);
			if (matchError) {break loop274;}
			cast_array_initializer_head_AST = (AST)currentAST.root;
		break;} // loop274
		if (matchError) {
	}
	returnAST = cast_array_initializer_head_AST;
}

	public final void lambda_expression_post_capture_predicate_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lambda_expression_post_capture_predicate_AST = null;
		
		loop275:  while (true) {
			{
			switch ( LA(1)) {
			case LPAREN:
			{
				balanceParensInExpression_g();
				if (matchError) {break loop275;}
				break;
			}
			case POINTERTO:
			case LSQUARE:
			case LCURLY:
			case LITERAL_mutable:
			case LITERAL_throw:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_noexcept:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop275;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_mutable:
			{
				AST tmp1045_AST = null;
				consume();
				break;
			}
			case POINTERTO:
			case LSQUARE:
			case LCURLY:
			case LITERAL_throw:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_noexcept:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop275;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification_g();
				if (matchError) {break loop275;}
				break;
			}
			case POINTERTO:
			case LSQUARE:
			case LCURLY:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop275;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification_g();
				if (matchError) {break loop275;}
				break;
			}
			case POINTERTO:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop275;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case POINTERTO:
			{
				trailing_type_g();
				if (matchError) {break loop275;}
				break;
			}
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop275;}
			}
			}
			}
			AST tmp1046_AST = null;
			match(LCURLY);
			if (matchError) {break loop275;}
			lambda_expression_post_capture_predicate_AST = (AST)currentAST.root;
		break;} // loop275
		if (matchError) {
	}
	returnAST = lambda_expression_post_capture_predicate_AST;
}

	protected final void balanceLessthanGreaterthanInExpression_g(
		int templateLevel
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST balanceLessthanGreaterthanInExpression_AST = null;
		
		loop276:  while (true) {
			int LA1_203 = LA(1);
			int LA2_203 = LA(2);
			
			if (((LA1_203==LESSTHAN) && (_tokenSet_91.member(LA2_203)))&&((isTemplateTooDeep(templateLevel, 10)))) {
				lazy_template_g();
				if (matchError) {break loop276;}
				balanceLessthanGreaterthanInExpression_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched1275 = false;
				if (((LA1_203==LESSTHAN) && (_tokenSet_91.member(LA2_203)))) {
					int _m1275 = mark();
					guessing++;
					guess1275:  while (true) {
						{
						templateDepthChecker_g(20);
						if (matchError) {break guess1275;}
						}
					synPredMatched1275 = true;
					break;} // guess1275
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m1275);
					guessing--;
				}
				if ( synPredMatched1275 ) {
					templateDepthChecker_g(20);
					if (matchError) {break loop276;}
					balanceLessthanGreaterthanInExpression_AST = (AST)currentAST.root;
				}
				else {
					boolean synPredMatched1277 = false;
					if (((LA1_203==LESSTHAN) && (_tokenSet_361.member(LA2_203)))) {
						int _m1277 = mark();
						guessing++;
						guess1277:  while (true) {
							{
							simpleBalanceLessthanGreaterthanInExpression_g();
							if (matchError) {break guess1277;}
							}
						synPredMatched1277 = true;
						break;} // guess1277
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1277);
						guessing--;
					}
					if ( synPredMatched1277 ) {
						simpleBalanceLessthanGreaterthanInExpression_g();
						if (matchError) {break loop276;}
						balanceLessthanGreaterthanInExpression_AST = (AST)currentAST.root;
					}
					else if ((LA1_203==LESSTHAN) && (_tokenSet_393.member(LA2_203))) {
						AST tmp1047_AST = null;
						consume();
						{
						if ((_tokenSet_169.member(LA(1)))) {
							lazy_expression_g(true, false, templateLevel + 1);
							if (matchError) {break loop276;}
						}
						else if ((LA(1)==COMMA||LA(1)==GREATERTHAN)) {
						}
						else {
							matchError=true;if (matchError) {break loop276;}
						}
						
						}
						{
						_loop1280:
						do {
							if ((LA(1)==COMMA)) {
								AST tmp1048_AST = null;
								consume();
								lazy_expression_g(true, false, templateLevel + 1);
								if (matchError) {break loop276;}
							}
							else {
								break _loop1280;
							}
							
						} while (true);
						}
						AST tmp1049_AST = null;
						match(GREATERTHAN);
						if (matchError) {break loop276;}
						balanceLessthanGreaterthanInExpression_AST = (AST)currentAST.root;
					}
					else {
						matchError=true;if (matchError) {break loop276;}
					}
					}}
				break;} // loop276
				if (matchError) {
			}
			returnAST = balanceLessthanGreaterthanInExpression_AST;
		}
		
	protected final void isGreaterthanInTheRestOfExpression_g(
		int templateLevel
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST isGreaterthanInTheRestOfExpression_AST = null;
		
		loop277:  while (true) {
			{
			if ((_tokenSet_169.member(LA(1)))) {
				lazy_assignment_expression_g(true, true, templateLevel);
				if (matchError) {break loop277;}
			}
			else if ((LA(1)==COMMA||LA(1)==GREATERTHAN)) {
			}
			else {
				matchError=true;if (matchError) {break loop277;}
			}
			
			}
			{
			_loop1240:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp1050_AST = null;
					consume();
					lazy_assignment_expression_g(true, true, templateLevel);
					if (matchError) {break loop277;}
				}
				else {
					break _loop1240;
				}
				
			} while (true);
			}
			AST tmp1051_AST = null;
			match(GREATERTHAN);
			if (matchError) {break loop277;}
			isGreaterthanInTheRestOfExpression_AST = (AST)currentAST.root;
		break;} // loop277
		if (matchError) {
	}
	returnAST = isGreaterthanInTheRestOfExpression_AST;
}

	public final void lazy_expression_predicate_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_expression_predicate_AST = null;
		int ts = 0; String s;
		
		loop278:  while (true) {
			switch ( LA(1)) {
			case OR:
			{
				AST tmp1052_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case AND:
			{
				AST tmp1053_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case BITWISEOR:
			{
				AST tmp1054_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case BITWISEXOR:
			{
				AST tmp1055_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case AMPERSAND:
			{
				AST tmp1056_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case NOTEQUAL:
			{
				AST tmp1057_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case EQUAL:
			{
				AST tmp1058_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LESSTHAN:
			{
				AST tmp1059_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LESSTHANOREQUALTO:
			{
				AST tmp1060_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case GREATERTHANOREQUALTO:
			{
				AST tmp1061_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case QUESTIONMARK:
			{
				AST tmp1062_AST = null;
				consume();
				{
				expression_g();
				if (matchError) {break loop278;}
				}
				AST tmp1063_AST = null;
				match(COLON);
				if (matchError) {break loop278;}
				{
				assignment_expression_g();
				if (matchError) {break loop278;}
				}
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case SHIFTLEFT:
			{
				AST tmp1064_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case SHIFTRIGHT:
			{
				AST tmp1065_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case PLUS:
			{
				AST tmp1066_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case MINUS:
			{
				AST tmp1067_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case STAR:
			{
				AST tmp1068_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case DIVIDE:
			{
				AST tmp1069_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case MOD:
			{
				AST tmp1070_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case DOTMBR:
			{
				AST tmp1071_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case POINTERTOMBR:
			{
				AST tmp1072_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case SCOPE:
			{
				AST tmp1073_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case PLUSPLUS:
			{
				AST tmp1074_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case MINUSMINUS:
			{
				AST tmp1075_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case DOT:
			{
				AST tmp1076_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case POINTERTO:
			{
				AST tmp1077_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case NOT:
			{
				AST tmp1078_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case TILDE:
			{
				AST tmp1079_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LPAREN:
			{
				AST tmp1080_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LSQUARE:
			{
				AST tmp1081_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				s=literal_ident_g();
				if (matchError) {break loop278;}
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case FLOATONE:
			case FLOATTWO:
			case HEXADECIMALINT:
			case OCTALINT:
			case DECIMALINT:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case BINARYINT:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_nullptr:
			case LITERAL___null:
			{
				constant_g();
				if (matchError) {break loop278;}
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___interrupt:
			{
				AST tmp1082_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___extension__:
			{
				AST tmp1083_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_template:
			{
				AST tmp1084_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_new:
			{
				AST tmp1085_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_delete:
			{
				AST tmp1086_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_this:
			{
				AST tmp1087_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			{
				literal_volatile_g();
				if (matchError) {break loop278;}
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			{
				literal_const_g();
				if (matchError) {break loop278;}
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__TYPE_QUALIFIER__:
			{
				AST tmp1088_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			{
				literal_cdecl_g();
				if (matchError) {break loop278;}
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__near:
			case LITERAL___near:
			{
				literal_near_g();
				if (matchError) {break loop278;}
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__far:
			case LITERAL___far:
			{
				literal_far_g();
				if (matchError) {break loop278;}
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			{
				literal_pascal_g();
				if (matchError) {break loop278;}
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			{
				literal_stdcall_g();
				if (matchError) {break loop278;}
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___clrcall:
			{
				literal_clrcall_g();
				if (matchError) {break loop278;}
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___complex__:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___complex:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			{
				ts=builtin_type_g(0);
				if (matchError) {break loop278;}
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_OPERATOR:
			{
				AST tmp1089_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_dynamic_cast:
			{
				AST tmp1090_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_static_cast:
			{
				AST tmp1091_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_reinterpret_cast:
			{
				AST tmp1092_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_const_cast:
			{
				AST tmp1093_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_sizeof:
			{
				AST tmp1094_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___real:
			{
				AST tmp1095_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___imag:
			{
				AST tmp1096_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_alignof:
			{
				AST tmp1097_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___alignof:
			{
				AST tmp1098_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___alignof__:
			{
				AST tmp1099_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_class:
			case LITERAL___is_enum:
			case LITERAL___is_pod:
			case LITERAL___is_base_of:
			case LITERAL___has_trivial_constructor:
			case LITERAL___has_nothrow_assign:
			case LITERAL___has_nothrow_copy:
			case LITERAL___has_nothrow_constructor:
			case LITERAL___has_trivial_assign:
			case LITERAL___has_trivial_copy:
			case LITERAL___has_trivial_destructor:
			case LITERAL___has_virtual_destructor:
			case LITERAL___is_abstract:
			case LITERAL___is_empty:
			case LITERAL___is_literal_type:
			case LITERAL___is_polymorphic:
			case LITERAL___is_standard_layout:
			case LITERAL___is_trivial:
			case LITERAL___is_union:
			case LITERAL___underlying_type:
			{
				trait_type_literals_g();
				if (matchError) {break loop278;}
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_auto:
			{
				AST tmp1100_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_constexpr:
			{
				AST tmp1101_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_thread_local:
			{
				AST tmp1102_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_static_assert:
			{
				AST tmp1103_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_alignas:
			{
				AST tmp1104_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_noexcept:
			{
				AST tmp1105_AST = null;
				consume();
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			case GREATERTHAN:
			{
				AST tmp1106_AST = null;
				consume();
				lazy_expression_predicate_g();
				if (matchError) {break loop278;}
				lazy_expression_predicate_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop278;}
			}
			}
		break;} // loop278
		if (matchError) {
	}
	returnAST = lazy_expression_predicate_AST;
}

	public final void constant_expression_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST constant_expression_AST = null;
		
		loop279:  while (true) {
			lazy_expression_g(false, false, 0);
			if (matchError) {break loop279;}
			constant_expression_AST = (AST)currentAST.root;
		break;} // loop279
		if (matchError) {
	}
	returnAST = constant_expression_AST;
}

	public final void function_like_var_declarator_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_like_var_declarator_AST = null;
		String id; TypeQualifier tq;
		
		loop280:  while (true) {
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification_g();
				if (matchError) {break loop280;}
				break;
			}
			case LPAREN:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop280;}
			}
			}
			}
			id=idInBalanceParensHard_g();
			if (matchError) {break loop280;}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				variable_attribute_specification_g();
				if (matchError) {break loop280;}
				break;
			}
			case LPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop280;}
			}
			}
			}
			AST tmp1107_AST = null;
			match(LPAREN);
			if (matchError) {break loop280;}
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			case LPAREN:
			case LSQUARE:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				parameter_list_g(false);
				if (matchError) {break loop280;}
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop280;}
			}
			}
			}
			AST tmp1108_AST = null;
			match(RPAREN);
			if (matchError) {break loop280;}
			{
			int LA1_204 = LA(1);
			int LA2_204 = LA(2);
			
			if ((_tokenSet_294.member(LA1_204)) && (_tokenSet_1.member(LA2_204))) {
				cv_qualifier_seq_g();
				if (matchError) {break loop280;}
			}
			else if ((_tokenSet_295.member(LA1_204)) && (_tokenSet_1.member(LA2_204))) {
			}
			else {
				matchError=true;if (matchError) {break loop280;}
			}
			
			}
			{
			switch ( LA(1)) {
			case AND:
			case AMPERSAND:
			{
				ref_qualifier_g();
				if (matchError) {break loop280;}
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case COLON:
			case COMMA:
			case SEMICOLON:
			case POINTERTO:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case GREATERTHAN:
			case LITERAL_throw:
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			case LITERAL_new:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_noexcept:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop280;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification_g();
				if (matchError) {break loop280;}
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case COLON:
			case COMMA:
			case SEMICOLON:
			case POINTERTO:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case GREATERTHAN:
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			case LITERAL_new:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop280;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case POINTERTO:
			{
				trailing_type_g();
				if (matchError) {break loop280;}
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case COLON:
			case COMMA:
			case SEMICOLON:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case GREATERTHAN:
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			case LITERAL_new:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop280;}
			}
			}
			}
			{
			int LA1_205 = LA(1);
			int LA2_205 = LA(2);
			
			if ((LA1_205==LITERAL_final||LA1_205==LITERAL_override) && (_tokenSet_298.member(LA2_205))) {
				virt_specifiers_g();
				if (matchError) {break loop280;}
			}
			else if ((_tokenSet_298.member(LA1_205)) && (_tokenSet_1.member(LA2_205))) {
			}
			else {
				matchError=true;if (matchError) {break loop280;}
			}
			
			}
			{
			int LA1_206 = LA(1);
			int LA2_206 = LA(2);
			
			if ((_tokenSet_21.member(LA1_206)) && (LA2_206==LPAREN||LA2_206==LSQUARE)) {
				function_attribute_specification_g();
				if (matchError) {break loop280;}
			}
			else if ((_tokenSet_298.member(LA1_206)) && (_tokenSet_1.member(LA2_206))) {
			}
			else {
				matchError=true;if (matchError) {break loop280;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			{
				asm_block_g();
				if (matchError) {break loop280;}
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case COLON:
			case COMMA:
			case SEMICOLON:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case GREATERTHAN:
			case LITERAL_new:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop280;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification_g();
				if (matchError) {break loop280;}
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case COLON:
			case COMMA:
			case SEMICOLON:
			case LPAREN:
			case RPAREN:
			case LCURLY:
			case GREATERTHAN:
			case LITERAL_new:
			case LITERAL_final:
			case LITERAL_override:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop280;}
			}
			}
			}
			{
			_loop743:
			do {
				switch ( LA(1)) {
				case LITERAL_override:
				{
					AST tmp1109_AST = null;
					consume();
					break;
				}
				case LITERAL_final:
				{
					AST tmp1110_AST = null;
					consume();
					break;
				}
				case LITERAL_new:
				{
					AST tmp1111_AST = null;
					consume();
					break;
				}
				default:
				{
					break _loop743;
				}
				}
			} while (true);
			}
			function_like_var_declarator_AST = (AST)currentAST.root;
		break;} // loop280
		if (matchError) {
	}
	returnAST = function_like_var_declarator_AST;
}

	public final void is_abstract_declarator_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST is_abstract_declarator_AST = null;
		
		loop281:  while (true) {
			switch ( LA(1)) {
			case STAR:
			case AND:
			case AMPERSAND:
			case SCOPE:
			case IDENT:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			case LITERAL___clrcall:
			{
				ptr_operator_g();
				if (matchError) {break loop281;}
				is_abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			case LPAREN:
			{
				AST tmp1112_AST = null;
				consume();
				is_abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			case LSQUARE:
			{
				AST tmp1113_AST = null;
				consume();
				is_abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			case ELLIPSIS:
			{
				AST tmp1114_AST = null;
				consume();
				is_abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop281;}
			}
			}
		break;} // loop281
		if (matchError) {
	}
	returnAST = is_abstract_declarator_AST;
}

	public final void abstract_declarator_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST abstract_declarator_AST = null;
		
		loop282:  while (true) {
			int LA1_207 = LA(1);
			int LA2_207 = LA(2);
			
			switch ( LA1_207) {
			case STAR:
			case AND:
			case AMPERSAND:
			case SCOPE:
			case IDENT:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			case LITERAL___clrcall:
			{
				ptr_operator_g();
				if (matchError) {break loop282;}
				{
				switch ( LA(1)) {
				case LITERAL_restrict:
				case LITERAL___restrict:
				case LITERAL___restrict__:
				{
					literal_restrict_g();
					if (matchError) {break loop282;}
					break;
				}
				case ELLIPSIS:
				case ASSIGNEQUAL:
				case COMMA:
				case SEMICOLON:
				case POINTERTO:
				case LPAREN:
				case RPAREN:
				case LSQUARE:
				case GREATERTHAN:
				case STAR:
				case AND:
				case AMPERSAND:
				case SCOPE:
				case IDENT:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_decltype:
				case LITERAL___decltype:
				case LITERAL___clrcall:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop282;}
				}
				}
				}
				abstract_declarator_g();
				if (matchError) {break loop282;}
				abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			case LPAREN:
			case LSQUARE:
			{
				{
				int _cnt872=0;
				_loop872:
				do {
					if ((LA(1)==LPAREN||LA(1)==LSQUARE)) {
						abstract_declarator_suffix_g();
						if (matchError) {break loop282;}
					}
					else {
						if ( _cnt872>=1 ) { break _loop872; } else {matchError=true;if (matchError) {break loop282;}}
					}
					
					_cnt872++;
				} while (true);
				}
				abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			default:
				boolean synPredMatched874 = false;
				if (((LA1_207==ELLIPSIS) && (_tokenSet_337.member(LA2_207)))) {
					int _m874 = mark();
					guessing++;
					guess874:  while (true) {
						{
						match(ELLIPSIS);
						if (matchError) {break guess874;}
						}
					synPredMatched874 = true;
					break;} // guess874
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m874);
					guessing--;
				}
				if ( synPredMatched874 ) {
					AST tmp1115_AST = null;
					consume();
					abstract_declarator_AST = (AST)currentAST.root;
				}
				else if ((_tokenSet_337.member(LA1_207)) && (_tokenSet_1.member(LA2_207))) {
					abstract_declarator_AST = (AST)currentAST.root;
				}
			else {
				matchError=true;if (matchError) {break loop282;}
			}
			}
		break;} // loop282
		if (matchError) {
	}
	returnAST = abstract_declarator_AST;
}

	public final void templateDepthChecker_g(
		int i
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST templateDepthChecker_AST = null;
		
		loop283:  while (true) {
			AST tmp1116_AST = null;
			match(LESSTHAN);
			if (matchError) {break loop283;}
			{
			{
			int LA1_208 = LA(1);
			int LA2_208 = LA(2);
			
			if (((_tokenSet_102.member(LA1_208)) && (_tokenSet_91.member(LA2_208)))&&((i > 0))) {
				{
				_loop1007:
				do {
					if ((_tokenSet_353.member(LA(1)))) {
						{
						AST tmp1117_AST = null;
						match(_tokenSet_353);
						if (matchError) {break loop283;}
						}
					}
					else {
						break _loop1007;
					}
					
				} while (true);
				}
				templateDepthChecker_g(i - 1);
				if (matchError) {break loop283;}
				{
				_loop1010:
				do {
					if ((_tokenSet_102.member(LA(1)))) {
						{
						AST tmp1118_AST = null;
						match(_tokenSet_102);
						if (matchError) {break loop283;}
						}
					}
					else {
						break _loop1010;
					}
					
				} while (true);
				}
			}
			else if (((_tokenSet_91.member(LA1_208)) && (_tokenSet_1.member(LA2_208)))&&((i <= 0))) {
				{
				_loop1013:
				do {
					if ((_tokenSet_353.member(LA(1)))) {
						{
						AST tmp1119_AST = null;
						match(_tokenSet_353);
						if (matchError) {break loop283;}
						}
					}
					else if ((LA(1)==LESSTHAN)) {
						templateDepthChecker_g(i - 1);
						if (matchError) {break loop283;}
					}
					else {
						break _loop1013;
					}
					
				} while (true);
				}
			}
			else {
				matchError=true;if (matchError) {break loop283;}
			}
			
			}
			}
			AST tmp1120_AST = null;
			match(GREATERTHAN);
			if (matchError) {break loop283;}
			templateDepthChecker_AST = (AST)currentAST.root;
		break;} // loop283
		if (matchError) {
	}
	returnAST = templateDepthChecker_AST;
}

	public final void simpleBalanceLessthanGreaterthanInExpression_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST simpleBalanceLessthanGreaterthanInExpression_AST = null;
		String s;
		
		loop284:  while (true) {
			AST tmp1121_AST = null;
			match(LESSTHAN);
			if (matchError) {break loop284;}
			{
			switch ( LA(1)) {
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				{
				switch ( LA(1)) {
				case SCOPE:
				{
					AST tmp1122_AST = null;
					consume();
					break;
				}
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop284;}
				}
				}
				}
				{
				_loop1285:
				do {
					int LA1_209 = LA(1);
					int LA2_209 = LA(2);
					
					if ((_tokenSet_0.member(LA1_209)) && (LA2_209==SCOPE)) {
						s=literal_ident_g();
						if (matchError) {break loop284;}
						AST tmp1123_AST = null;
						match(SCOPE);
						if (matchError) {break loop284;}
					}
					else {
						break _loop1285;
					}
					
				} while (true);
				}
				s=literal_ident_g();
				if (matchError) {break loop284;}
				{
				switch ( LA(1)) {
				case LESSTHAN:
				{
					simpleBalanceLessthanGreaterthanInExpression_g();
					if (matchError) {break loop284;}
					break;
				}
				case COMMA:
				case GREATERTHAN:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop284;}
				}
				}
				}
				break;
			}
			case FLOATONE:
			case FLOATTWO:
			case HEXADECIMALINT:
			case OCTALINT:
			case DECIMALINT:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case BINARYINT:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_nullptr:
			case LITERAL___null:
			{
				constant_g();
				if (matchError) {break loop284;}
				break;
			}
			case COMMA:
			case GREATERTHAN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop284;}
			}
			}
			}
			{
			_loop1293:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp1124_AST = null;
					consume();
					{
					switch ( LA(1)) {
					case SCOPE:
					case IDENT:
					case LITERAL_final:
					case LITERAL_override:
					{
						{
						switch ( LA(1)) {
						case SCOPE:
						{
							AST tmp1125_AST = null;
							consume();
							break;
						}
						case IDENT:
						case LITERAL_final:
						case LITERAL_override:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break loop284;}
						}
						}
						}
						{
						_loop1291:
						do {
							int LA1_210 = LA(1);
							int LA2_210 = LA(2);
							
							if ((_tokenSet_0.member(LA1_210)) && (LA2_210==SCOPE)) {
								s=literal_ident_g();
								if (matchError) {break loop284;}
								AST tmp1126_AST = null;
								match(SCOPE);
								if (matchError) {break loop284;}
							}
							else {
								break _loop1291;
							}
							
						} while (true);
						}
						s=literal_ident_g();
						if (matchError) {break loop284;}
						{
						switch ( LA(1)) {
						case LESSTHAN:
						{
							simpleBalanceLessthanGreaterthanInExpression_g();
							if (matchError) {break loop284;}
							break;
						}
						case COMMA:
						case GREATERTHAN:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break loop284;}
						}
						}
						}
						break;
					}
					case FLOATONE:
					case FLOATTWO:
					case HEXADECIMALINT:
					case OCTALINT:
					case DECIMALINT:
					case CHAR_LITERAL:
					case STRING_LITERAL:
					case BINARYINT:
					case LITERAL_true:
					case LITERAL_false:
					case LITERAL_nullptr:
					case LITERAL___null:
					{
						constant_g();
						if (matchError) {break loop284;}
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop284;}
					}
					}
					}
				}
				else {
					break _loop1293;
				}
				
			} while (true);
			}
			AST tmp1127_AST = null;
			match(GREATERTHAN);
			if (matchError) {break loop284;}
			simpleBalanceLessthanGreaterthanInExpression_AST = (AST)currentAST.root;
		break;} // loop284
		if (matchError) {
	}
	returnAST = simpleBalanceLessthanGreaterthanInExpression_AST;
}

	public final /*TypeSpecifier*/int  builtin_cv_type_specifier_g(
		/*TypeSpecifier*/int old_ts
	) {
		/*TypeSpecifier*/int ts = old_ts;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST builtin_cv_type_specifier_AST = null;
		TypeQualifier tq;StorageClass sc;
		
		loop285:  while (true) {
			{
			int _cnt486=0;
			_loop486:
			do {
				int LA1_211 = LA(1);
				int LA2_211 = LA(2);
				
				if ((_tokenSet_200.member(LA1_211)) && (_tokenSet_92.member(LA2_211))) {
					ts=builtin_type_g(ts);
					if (matchError) {break loop285;}
				}
				else {
					if ( _cnt486>=1 ) { break _loop486; } else {matchError=true;if (matchError) {break loop285;}}
				}
				
				_cnt486++;
			} while (true);
			}
			{
			int LA1_212 = LA(1);
			int LA2_212 = LA(2);
			
			boolean synPredMatched489 = false;
			if (((_tokenSet_77.member(LA1_212)) && (_tokenSet_200.member(LA2_212)))) {
				int _m489 = mark();
				guessing++;
				guess489:  while (true) {
					{
					cv_qualifier_g();
					if (matchError) {break guess489;}
					builtin_type_g(ts);
					if (matchError) {break guess489;}
					}
				synPredMatched489 = true;
				break;} // guess489
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m489);
				guessing--;
			}
			if ( synPredMatched489 ) {
				tq=cv_qualifier_g();
				if (matchError) {break loop285;}
				ts=builtin_cv_type_specifier_g(ts);
				if (matchError) {break loop285;}
			}
			else if ((_tokenSet_92.member(LA1_212)) && (_tokenSet_1.member(LA2_212))) {
			}
			else {
				matchError=true;if (matchError) {break loop285;}
			}
			
			}
			{
			int LA1_213 = LA(1);
			int LA2_213 = LA(2);
			
			boolean synPredMatched492 = false;
			if (((_tokenSet_46.member(LA1_213)) && (_tokenSet_200.member(LA2_213)))) {
				int _m492 = mark();
				guessing++;
				guess492:  while (true) {
					{
					storage_class_specifier_g();
					if (matchError) {break guess492;}
					builtin_type_g(ts);
					if (matchError) {break guess492;}
					}
				synPredMatched492 = true;
				break;} // guess492
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m492);
				guessing--;
			}
			if ( synPredMatched492 ) {
				sc=storage_class_specifier_g();
				if (matchError) {break loop285;}
				ts=builtin_cv_type_specifier_g(ts);
				if (matchError) {break loop285;}
			}
			else if ((_tokenSet_92.member(LA1_213)) && (_tokenSet_1.member(LA2_213))) {
			}
			else {
				matchError=true;if (matchError) {break loop285;}
			}
			
			}
			{
			int LA1_214 = LA(1);
			int LA2_214 = LA(2);
			
			boolean synPredMatched495 = false;
			if (((LA1_214==LITERAL_virtual) && (_tokenSet_200.member(LA2_214)))) {
				int _m495 = mark();
				guessing++;
				guess495:  while (true) {
					{
					match(LITERAL_virtual);
					if (matchError) {break guess495;}
					builtin_type_g(ts);
					if (matchError) {break guess495;}
					}
				synPredMatched495 = true;
				break;} // guess495
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m495);
				guessing--;
			}
			if ( synPredMatched495 ) {
				AST tmp1128_AST = null;
				consume();
				ts=builtin_cv_type_specifier_g(ts);
				if (matchError) {break loop285;}
			}
			else if ((_tokenSet_92.member(LA1_214)) && (_tokenSet_1.member(LA2_214))) {
			}
			else {
				matchError=true;if (matchError) {break loop285;}
			}
			
			}
			builtin_cv_type_specifier_AST = (AST)currentAST.root;
		break;} // loop285
		if (matchError) {
	}
	returnAST = builtin_cv_type_specifier_AST;
	return ts;
}

	protected final void is_known_typename_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST is_known_typename_AST = null;
		/*TypeSpecifier*/int ts=0;
		
		loop286:  while (true) {
			switch ( LA(1)) {
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___complex__:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___complex:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			{
				ts=builtin_type_g(0);
				if (matchError) {break loop286;}
				is_known_typename_AST = (AST)currentAST.root;
				break;
			}
			case IDENT:
			{
				is_va_list_type_g();
				if (matchError) {break loop286;}
				is_known_typename_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop286;}
			}
			}
		break;} // loop286
		if (matchError) {
	}
	returnAST = is_known_typename_AST;
}

	protected final void is_declaration_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST is_declaration_AST = null;
		
		loop287:  while (true) {
			int LA1_215 = LA(1);
			int LA2_215 = LA(2);
			
			if ((LA1_215==LITERAL_extern) && (LA2_215==EOF)) {
				AST tmp1129_AST = null;
				consume();
				is_declaration_AST = (AST)currentAST.root;
			}
			else if ((LA1_215==LITERAL_using)) {
				AST tmp1130_AST = null;
				consume();
				is_declaration_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_22.member(LA1_215)) && (_tokenSet_172.member(LA2_215))) {
				{
				declaration_specifiers_g(true, false);
				if (matchError) {break loop287;}
				declarator_g(declOther, 0);
				if (matchError) {break loop287;}
				}
				is_declaration_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;if (matchError) {break loop287;}
			}
			
		break;} // loop287
		if (matchError) {
	}
	returnAST = is_declaration_AST;
}

	protected final void condition_declaration_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST condition_declaration_AST = null;
		int ts = tsInvalid;
		
		loop288:  while (true) {
			declaration_specifiers_g(true, false);
			if (matchError) {break loop288;}
			declarator_g(declStatement, 0);
			if (matchError) {break loop288;}
			{
			switch ( LA(1)) {
			case ASSIGNEQUAL:
			{
				AST tmp1131_AST = null;
				consume();
				assignment_expression_g();
				if (matchError) {break loop288;}
				break;
			}
			case LCURLY:
			{
				array_initializer_g();
				if (matchError) {break loop288;}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop288;}
			}
			}
			}
			condition_declaration_AST = (AST)currentAST.root;
		break;} // loop288
		if (matchError) {
	}
	returnAST = condition_declaration_AST;
}

	protected final void for_range_init_statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST for_range_init_statement_AST = null;
		
		loop289:  while (true) {
			declaration_specifiers_g(true, false);
			if (matchError) {break loop289;}
			init_declarator_g(declStatement);
			if (matchError) {break loop289;}
			for_range_init_statement_AST = (AST)currentAST.root;
		break;} // loop289
		if (matchError) {
	}
	returnAST = for_range_init_statement_AST;
}

	protected final void type_attribute_specification_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST type_attribute_specification_AST = null;
		
		loop290:  while (true) {
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				attribute_specification_list_g();
				if (matchError) {break loop290;}
				break;
			}
			case LITERAL__declspec:
			case LITERAL___declspec:
			{
				declspec_g();
				if (matchError) {break loop290;}
				break;
			}
			case LITERAL_alignas:
			{
				AST tmp1132_AST = null;
				consume();
				balanceParens_g();
				if (matchError) {break loop290;}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop290;}
			}
			}
		break;} // loop290
		if (matchError) {
	}
	returnAST = type_attribute_specification_AST;
}

	public final void template_argument_list_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_argument_list_AST = null;
		
		loop291:  while (true) {
			if ((_tokenSet_102.member(LA(1)))) {
				template_argument_g();
				if (matchError) {break loop291;}
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				{
					AST tmp1133_AST = null;
					consume();
					break;
				}
				case COMMA:
				case GREATERTHAN:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop291;}
				}
				}
				}
				{
				_loop958:
				do {
					if ((LA(1)==COMMA)) {
						AST tmp1134_AST = null;
						consume();
						template_argument_g();
						if (matchError) {break loop291;}
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						{
							AST tmp1135_AST = null;
							consume();
							break;
						}
						case COMMA:
						case GREATERTHAN:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break loop291;}
						}
						}
						}
					}
					else {
						break _loop958;
					}
					
				} while (true);
				}
				template_argument_list_AST = (AST)currentAST.root;
			}
			else if ((LA(1)==GREATERTHAN)) {
				template_argument_list_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;if (matchError) {break loop291;}
			}
			
		break;} // loop291
		if (matchError) {
	}
	returnAST = template_argument_list_AST;
}

	public final void base_clause_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST base_clause_AST = null;
		
		loop292:  while (true) {
			AST tmp1136_AST = null;
			match(COLON);
			if (matchError) {break loop292;}
			base_specifier_g();
			if (matchError) {break loop292;}
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			{
				AST tmp1137_AST = null;
				consume();
				break;
			}
			case COMMA:
			case SEMICOLON:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop292;}
			}
			}
			}
			{
			_loop640:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp1138_AST = null;
					consume();
					base_specifier_g();
					if (matchError) {break loop292;}
					{
					switch ( LA(1)) {
					case ELLIPSIS:
					{
						AST tmp1139_AST = null;
						consume();
						break;
					}
					case COMMA:
					case SEMICOLON:
					case LCURLY:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop292;}
					}
					}
					}
				}
				else {
					break _loop640;
				}
				
			} while (true);
			}
			base_clause_AST = (AST)currentAST.root;
		break;} // loop292
		if (matchError) {
	}
	returnAST = base_clause_AST;
}

	public final void enum_head_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST enum_head_AST = null;
		String s;
		
		loop293:  while (true) {
			AST tmp1140_AST = null;
			match(LITERAL_enum);
			if (matchError) {break loop293;}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_alignas:
			{
				type_attribute_specification_g();
				if (matchError) {break loop293;}
				break;
			}
			case COLON:
			case SEMICOLON:
			case LCURLY:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop293;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_class:
			{
				AST tmp1141_AST = null;
				consume();
				break;
			}
			case LITERAL_struct:
			{
				AST tmp1142_AST = null;
				consume();
				break;
			}
			case COLON:
			case SEMICOLON:
			case LCURLY:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop293;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				s=enum_qualified_id_g();
				if (matchError) {break loop293;}
				break;
			}
			case COLON:
			case SEMICOLON:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop293;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case COLON:
			{
				strongly_typed_enum_type_specifier_g();
				if (matchError) {break loop293;}
				break;
			}
			case SEMICOLON:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop293;}
			}
			}
			}
			enum_head_AST = (AST)currentAST.root;
		break;} // loop293
		if (matchError) {
	}
	returnAST = enum_head_AST;
}

	public final void template_parameter_list_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_parameter_list_AST = null;
		
		loop294:  while (true) {
			template_parameter_g();
			if (matchError) {break loop294;}
			{
			_loop930:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp1143_AST = null;
					consume();
					template_parameter_g();
					if (matchError) {break loop294;}
				}
				else {
					break _loop930;
				}
				
			} while (true);
			}
			template_parameter_list_AST = (AST)currentAST.root;
		break;} // loop294
		if (matchError) {
	}
	returnAST = template_parameter_list_AST;
}

	public final boolean  dtor_decl_spec_g() {
		boolean friend = false;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dtor_decl_spec_AST = null;
		
		loop295:  while (true) {
			{
			_loop826:
			do {
				switch ( LA(1)) {
				case LSQUARE:
				case LITERAL___attribute__:
				case LITERAL___attribute:
				{
					{
					function_attribute_specification_g();
					if (matchError) {break loop295;}
					}
					break;
				}
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL___forceinline:
				{
					literal_inline_g();
					if (matchError) {break loop295;}
					break;
				}
				case LITERAL_friend:
				{
					AST tmp1144_AST = null;
					consume();
					break;
				}
				case LITERAL_virtual:
				{
					AST tmp1145_AST = null;
					consume();
					break;
				}
				default:
				{
					break _loop826;
				}
				}
			} while (true);
			}
			dtor_decl_spec_AST = (AST)currentAST.root;
		break;} // loop295
		if (matchError) {
	}
	returnAST = dtor_decl_spec_AST;
	return friend;
}

	public final String  scope_override_part_g(
		int level
	) {
		String s = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST scope_override_part_AST = null;
		
		StringBuilder sitem = new StringBuilder(); 
		String sp = "";
		String id;
		
		
		loop296:  while (true) {
			{
			switch ( LA(1)) {
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				{
				id=literal_ident_g();
				if (matchError) {break loop296;}
				{
				switch ( LA(1)) {
				case LESSTHAN:
				{
					AST tmp1146_AST = null;
					consume();
					template_argument_list_g();
					if (matchError) {break loop296;}
					AST tmp1147_AST = null;
					match(GREATERTHAN);
					if (matchError) {break loop296;}
					break;
				}
				case SCOPE:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop296;}
				}
				}
				}
				AST tmp1148_AST = null;
				match(SCOPE);
				if (matchError) {break loop296;}
				}
				break;
			}
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				{
				type_decltype_g();
				if (matchError) {break loop296;}
				AST tmp1149_AST = null;
				match(SCOPE);
				if (matchError) {break loop296;}
				}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop296;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_template:
			{
				AST tmp1150_AST = null;
				consume();
				break;
			}
			case STAR:
			case TILDE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop296;}
			}
			}
			}
			{
			int LA1_216 = LA(1);
			int LA2_216 = LA(2);
			
			boolean synPredMatched1335 = false;
			if (((_tokenSet_100.member(LA1_216)) && (_tokenSet_101.member(LA2_216)))) {
				int _m1335 = mark();
				guessing++;
				guess1335:  while (true) {
					{
					{
					switch ( LA(1)) {
					case IDENT:
					case LITERAL_final:
					case LITERAL_override:
					{
						{
						literal_ident_g();
						if (matchError) {break guess1335;}
						{
						switch ( LA(1)) {
						case LESSTHAN:
						{
							consume();
							{
							if ((_tokenSet_102.member(LA(1)))) {
								lazy_template_argument_list_g();
								if (matchError) {break guess1335;}
							}
							else if ((LA(1)==GREATERTHAN)) {
							}
							else {
								matchError=true;if (matchError) {break guess1335;}
							}
							
							}
							match(GREATERTHAN);
							if (matchError) {break guess1335;}
							break;
						}
						case SCOPE:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess1335;}
						}
						}
						}
						}
						break;
					}
					case LITERAL_decltype:
					case LITERAL___decltype:
					{
						lazy_type_decltype_g(0);
						if (matchError) {break guess1335;}
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess1335;}
					}
					}
					}
					match(SCOPE);
					if (matchError) {break guess1335;}
					}
				synPredMatched1335 = true;
				break;} // guess1335
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1335);
				guessing--;
			}
			if ( synPredMatched1335 ) {
				sp=scope_override_part_g(level + 1);
				if (matchError) {break loop296;}
			}
			else if ((_tokenSet_103.member(LA1_216)) && (_tokenSet_104.member(LA2_216))) {
			}
			else {
				matchError=true;if (matchError) {break loop296;}
			}
			
			}
			scope_override_part_AST = (AST)currentAST.root;
		break;} // loop296
		if (matchError) {
	}
	returnAST = scope_override_part_AST;
	return s;
}

	public final void conversion_function_head_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST conversion_function_head_AST = null;
		CPPParser.TypeQualifier tq;
		
		loop297:  while (true) {
			AST tmp1151_AST = null;
			match(LITERAL_OPERATOR);
			if (matchError) {break loop297;}
			declaration_specifiers_g(true, false);
			if (matchError) {break loop297;}
			{
			_loop656:
			do {
				if ((_tokenSet_57.member(LA(1)))) {
					ptr_operator_g();
					if (matchError) {break loop297;}
				}
				else {
					break _loop656;
				}
				
			} while (true);
			}
			{
			switch ( LA(1)) {
			case LESSTHAN:
			{
				AST tmp1152_AST = null;
				consume();
				template_parameter_list_g();
				if (matchError) {break loop297;}
				AST tmp1153_AST = null;
				match(GREATERTHAN);
				if (matchError) {break loop297;}
				break;
			}
			case LPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop297;}
			}
			}
			}
			AST tmp1154_AST = null;
			match(LPAREN);
			if (matchError) {break loop297;}
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			case LPAREN:
			case LSQUARE:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				parameter_list_g(false);
				if (matchError) {break loop297;}
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop297;}
			}
			}
			}
			AST tmp1155_AST = null;
			match(RPAREN);
			if (matchError) {break loop297;}
			{
			_loop660:
			do {
				if ((_tokenSet_77.member(LA(1)))) {
					tq=cv_qualifier_g();
					if (matchError) {break loop297;}
				}
				else {
					break _loop660;
				}
				
			} while (true);
			}
			{
			switch ( LA(1)) {
			case AND:
			case AMPERSAND:
			{
				ref_qualifier_g();
				if (matchError) {break loop297;}
				break;
			}
			case ASSIGNEQUAL:
			case SEMICOLON:
			case LCURLY:
			case LITERAL_throw:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_noexcept:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop297;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification_g();
				if (matchError) {break loop297;}
				break;
			}
			case ASSIGNEQUAL:
			case SEMICOLON:
			case LCURLY:
			case LITERAL_final:
			case LITERAL_override:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop297;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_final:
			case LITERAL_override:
			{
				virt_specifiers_g();
				if (matchError) {break loop297;}
				break;
			}
			case ASSIGNEQUAL:
			case SEMICOLON:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop297;}
			}
			}
			}
			conversion_function_head_AST = (AST)currentAST.root;
		break;} // loop297
		if (matchError) {
	}
	returnAST = conversion_function_head_AST;
}

	public final void compound_statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST compound_statement_AST = null;
		
		loop298:  while (true) {
			int LA1_217 = LA(1);
			int LA2_217 = LA(2);
			
			if (((LA1_217==LCURLY) && (_tokenSet_1.member(LA2_217)))&&(isLazyCompound())) {
				balanceCurlies_g();
				if (matchError) {break loop298;}
				compound_statement_AST = (AST)currentAST.root;
			}
			else if (((LA1_217==LCURLY) && (_tokenSet_158.member(LA2_217)))&&(!isLazyCompound())) {
				{
				AST tmp1156_AST = null;
				match(LCURLY);
				if (matchError) {break loop298;}
				{
				if ((_tokenSet_159.member(LA(1)))) {
					statement_list_g();
					if (matchError) {break loop298;}
				}
				else if ((LA(1)==EOF||LA(1)==RCURLY)) {
				}
				else {
					matchError=true;if (matchError) {break loop298;}
				}
				
				}
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					break;
				}
				case RCURLY:
				{
					AST tmp1158_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop298;}
				}
				}
				}
				}
				compound_statement_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;if (matchError) {break loop298;}
			}
			
		break;} // loop298
		if (matchError) {
	}
	returnAST = compound_statement_AST;
}

	protected final boolean  conversion_function_special_definition_g() {
		boolean definition = false;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST conversion_function_special_definition_AST = null;
		
		loop299:  while (true) {
			AST tmp1159_AST = null;
			match(ASSIGNEQUAL);
			if (matchError) {break loop299;}
			{
			switch ( LA(1)) {
			case OCTALINT:
			{
				AST tmp1160_AST = null;
				consume();
				break;
			}
			case LITERAL_delete:
			{
				AST tmp1161_AST = null;
				consume();
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop299;}
			}
			}
			}
			conversion_function_special_definition_AST = (AST)currentAST.root;
		break;} // loop299
		if (matchError) {
	}
	returnAST = conversion_function_special_definition_AST;
	return definition;
}

	protected final void attribute_specification_list_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST attribute_specification_list_AST = null;
		
		loop300:  while (true) {
			attribute_specification_g();
			if (matchError) {break loop300;}
			{
			int LA1_218 = LA(1);
			int LA2_218 = LA(2);
			
			if ((_tokenSet_21.member(LA1_218)) && (LA2_218==LPAREN||LA2_218==LSQUARE)) {
				attribute_specification_list_g();
				if (matchError) {break loop300;}
			}
			else if ((_tokenSet_92.member(LA1_218)) && (_tokenSet_1.member(LA2_218))) {
			}
			else {
				matchError=true;if (matchError) {break loop300;}
			}
			
			}
			attribute_specification_list_AST = (AST)currentAST.root;
		break;} // loop300
		if (matchError) {
	}
	returnAST = attribute_specification_list_AST;
}

	public final void unknown_pretype_declaration_specifiers_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unknown_pretype_declaration_specifiers_AST = null;
		String s;
		
		loop301:  while (true) {
			unknown_pretype_declaration_specifiers_list_g();
			if (matchError) {break loop301;}
			{
			int LA1_219 = LA(1);
			int LA2_219 = LA(2);
			
			boolean synPredMatched457 = false;
			if (((_tokenSet_0.member(LA1_219)) && (_tokenSet_22.member(LA2_219)))) {
				int _m457 = mark();
				guessing++;
				guess457:  while (true) {
					{
					literal_ident_g();
					if (matchError) {break guess457;}
					{
					int LA1_220 = LA(1);
					int LA2_220 = LA(2);
					
					switch ( LA1_220) {
					case LITERAL_typedef:
					{
						consume();
						break;
					}
					case LITERAL_explicit:
					{
						consume();
						break;
					}
					case LITERAL_enum:
					{
						consume();
						break;
					}
					case LITERAL_typename:
					{
						consume();
						break;
					}
					case LITERAL__stdcall:
					case LITERAL___stdcall:
					{
						literal_stdcall_g();
						if (matchError) {break guess457;}
						break;
					}
					case LITERAL___clrcall:
					{
						literal_clrcall_g();
						if (matchError) {break guess457;}
						break;
					}
					default:
						if ((LA1_220==LITERAL_final) && (true)) {
							consume();
						}
						else if ((_tokenSet_179.member(LA1_220)) && (_tokenSet_180.member(LA2_220))) {
							{
							_loop454:
							do {
								switch ( LA(1)) {
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL__TYPE_QUALIFIER__:
								{
									postfix_cv_qualifier_g();
									if (matchError) {break guess457;}
									break;
								}
								case LITERAL_constexpr:
								{
									consume();
									break;
								}
								case LITERAL_inline:
								case LITERAL__inline:
								case LITERAL___inline__:
								case LITERAL___inline:
								case LITERAL___forceinline:
								{
									literal_inline_g();
									if (matchError) {break guess457;}
									break;
								}
								case LITERAL_extern:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_thread_local:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									storage_class_specifier_g();
									if (matchError) {break guess457;}
									break;
								}
								default:
								{
									break _loop454;
								}
								}
							} while (true);
							}
							literal_ident_g();
							if (matchError) {break guess457;}
							{
							_loop456:
							do {
								switch ( LA(1)) {
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL__TYPE_QUALIFIER__:
								{
									postfix_cv_qualifier_g();
									if (matchError) {break guess457;}
									break;
								}
								case LITERAL_constexpr:
								{
									consume();
									break;
								}
								case LITERAL_inline:
								case LITERAL__inline:
								case LITERAL___inline__:
								case LITERAL___inline:
								case LITERAL___forceinline:
								{
									literal_inline_g();
									if (matchError) {break guess457;}
									break;
								}
								case LITERAL_extern:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_thread_local:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									storage_class_specifier_g();
									if (matchError) {break guess457;}
									break;
								}
								default:
								{
									break _loop456;
								}
								}
							} while (true);
							}
							literal_ident_g();
							if (matchError) {break guess457;}
						}
					else {
						matchError=true;if (matchError) {break guess457;}
					}
					}
					}
					}
				synPredMatched457 = true;
				break;} // guess457
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m457);
				guessing--;
			}
			if ( synPredMatched457 ) {
				s=literal_ident_g();
				if (matchError) {break loop301;}
			}
			else if ((_tokenSet_22.member(LA1_219)) && (_tokenSet_48.member(LA2_219))) {
			}
			else {
				matchError=true;if (matchError) {break loop301;}
			}
			
			}
			unknown_pretype_declaration_specifiers_AST = (AST)currentAST.root;
		break;} // loop301
		if (matchError) {
	}
	returnAST = unknown_pretype_declaration_specifiers_AST;
}

	public final CPPParser.StorageClass  cpp11_storage_class_specifier_g() {
		CPPParser.StorageClass sc = scInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cpp11_storage_class_specifier_AST = null;
		
		loop302:  while (true) {
			sc=common_storage_class_specifier_g();
			if (matchError) {break loop302;}
			cpp11_storage_class_specifier_AST = (AST)currentAST.root;
		break;} // loop302
		if (matchError) {
	}
	returnAST = cpp11_storage_class_specifier_AST;
	return sc;
}

	public final void unknown_posttype_declaration_specifiers_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unknown_posttype_declaration_specifiers_AST = null;
		
		loop303:  while (true) {
			unknown_posttype_declaration_specifiers_list_g();
			if (matchError) {break loop303;}
			unknown_posttype_declaration_specifiers_AST = (AST)currentAST.root;
		break;} // loop303
		if (matchError) {
	}
	returnAST = unknown_posttype_declaration_specifiers_AST;
}

	protected final void literal_typeof_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_typeof_AST = null;
		
		loop304:  while (true) {
			switch ( LA(1)) {
			case LITERAL_typeof:
			{
				AST tmp1162_AST = null;
				consume();
				literal_typeof_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___typeof:
			{
				AST tmp1163_AST = null;
				consume();
				literal_typeof_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___typeof__:
			{
				AST tmp1164_AST = null;
				consume();
				literal_typeof_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop304;}
			}
			}
		break;} // loop304
		if (matchError) {
	}
	returnAST = literal_typeof_AST;
}

	protected final void typeof_param_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST typeof_param_AST = null;
		
		loop305:  while (true) {
			int LA1_221 = LA(1);
			int LA2_221 = LA(2);
			
			boolean synPredMatched472 = false;
			if (((_tokenSet_22.member(LA1_221)) && (_tokenSet_188.member(LA2_221)))) {
				int _m472 = mark();
				guessing++;
				guess472:  while (true) {
					{
					type_name_g();
					if (matchError) {break guess472;}
					if (!(LA(1) != PLUS))
					{matchError=true;
					if (matchError) {break guess472;}}
					}
				synPredMatched472 = true;
				break;} // guess472
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m472);
				guessing--;
			}
			if ( synPredMatched472 ) {
				type_name_g();
				if (matchError) {break loop305;}
				typeof_param_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_189.member(LA1_221)) && (_tokenSet_190.member(LA2_221))) {
				expression_g();
				if (matchError) {break loop305;}
				typeof_param_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;if (matchError) {break loop305;}
			}
			
		break;} // loop305
		if (matchError) {
	}
	returnAST = typeof_param_AST;
}

	public final void function_direct_declarator_g(
		boolean definition, boolean symTabCheck
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_direct_declarator_AST = null;
		String q;
		
		loop306:  while (true) {
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification_g();
				if (matchError) {break loop306;}
				break;
			}
			case LPAREN:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop306;}
			}
			}
			}
			{
			function_direct_declarator_2_g(definition, symTabCheck);
			if (matchError) {break loop306;}
			}
			fun_cv_qualifier_seq_g();
			if (matchError) {break loop306;}
			{
			int LA1_222 = LA(1);
			int LA2_222 = LA(2);
			
			if ((LA1_222==AND||LA1_222==AMPERSAND) && (_tokenSet_166.member(LA2_222))) {
				ref_qualifier_g();
				if (matchError) {break loop306;}
			}
			else if ((_tokenSet_166.member(LA1_222)) && (_tokenSet_1.member(LA2_222))) {
			}
			else {
				matchError=true;if (matchError) {break loop306;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification_g();
				if (matchError) {break loop306;}
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case SEMICOLON:
			case POINTERTO:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_namespace:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_try:
			case LITERAL_using:
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_static_assert:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL___try:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop306;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case POINTERTO:
			{
				trailing_type_g();
				if (matchError) {break loop306;}
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case SEMICOLON:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_namespace:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_try:
			case LITERAL_using:
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_static_assert:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL___try:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop306;}
			}
			}
			}
			{
			int LA1_223 = LA(1);
			int LA2_223 = LA(2);
			
			if ((LA1_223==LITERAL_final||LA1_223==LITERAL_override) && (_tokenSet_308.member(LA2_223))) {
				virt_specifiers_g();
				if (matchError) {break loop306;}
			}
			else if ((_tokenSet_308.member(LA1_223)) && (_tokenSet_1.member(LA2_223))) {
			}
			else {
				matchError=true;if (matchError) {break loop306;}
			}
			
			}
			{
			int LA1_224 = LA(1);
			int LA2_224 = LA(2);
			
			boolean synPredMatched766 = false;
			if (((LA1_224==ASSIGNEQUAL) && (LA2_224==OCTALINT))) {
				int _m766 = mark();
				guessing++;
				guess766:  while (true) {
					{
					match(ASSIGNEQUAL);
					if (matchError) {break guess766;}
					{
					match(_tokenSet_309);
					if (matchError) {break guess766;}
					}
					}
				synPredMatched766 = true;
				break;} // guess766
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m766);
				guessing--;
			}
			if ( synPredMatched766 ) {
				AST tmp1165_AST = null;
				consume();
				AST tmp1166_AST = null;
				consume();
			}
			else if ((_tokenSet_308.member(LA1_224)) && (_tokenSet_1.member(LA2_224))) {
			}
			else {
				matchError=true;if (matchError) {break loop306;}
			}
			
			}
			{
			int LA1_225 = LA(1);
			int LA2_225 = LA(2);
			
			if ((_tokenSet_21.member(LA1_225)) && (LA2_225==LPAREN||LA2_225==LSQUARE)) {
				function_attribute_specification_g();
				if (matchError) {break loop306;}
			}
			else if ((_tokenSet_308.member(LA1_225)) && (_tokenSet_1.member(LA2_225))) {
			}
			else {
				matchError=true;if (matchError) {break loop306;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			{
				asm_block_g();
				if (matchError) {break loop306;}
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case SEMICOLON:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_namespace:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_try:
			case LITERAL_using:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_static_assert:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL___try:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop306;}
			}
			}
			}
			{
			int LA1_226 = LA(1);
			int LA2_226 = LA(2);
			
			if ((_tokenSet_21.member(LA1_226)) && (LA2_226==LPAREN||LA2_226==LSQUARE)) {
				function_attribute_specification_g();
				if (matchError) {break loop306;}
			}
			else if ((_tokenSet_61.member(LA1_226)) && (_tokenSet_1.member(LA2_226))) {
			}
			else {
				matchError=true;if (matchError) {break loop306;}
			}
			
			}
			function_direct_declarator_AST = (AST)currentAST.root;
		break;} // loop306
		if (matchError) {
	}
	returnAST = function_direct_declarator_AST;
}

	public final void simple_parameter_declaration_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST simple_parameter_declaration_AST = null;
		String s;
		
		loop307:  while (true) {
			declaration_specifiers_g(false, true);
			if (matchError) {break loop307;}
			{
			_loop866:
			do {
				if ((_tokenSet_0.member(LA(1)))) {
					s=literal_ident_g();
					if (matchError) {break loop307;}
				}
				else {
					break _loop866;
				}
				
			} while (true);
			}
			simple_parameter_declaration_AST = (AST)currentAST.root;
		break;} // loop307
		if (matchError) {
	}
	returnAST = simple_parameter_declaration_AST;
}

	protected final void function_K_R_parameter_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_K_R_parameter_AST = null;
		
		loop308:  while (true) {
			declaration_g(declFunctionParam);
			if (matchError) {break loop308;}
			function_K_R_parameter_AST = (AST)currentAST.root;
		break;} // loop308
		if (matchError) {
	}
	returnAST = function_K_R_parameter_AST;
}

	public final void namespace_alias_definition_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST namespace_alias_definition_AST = null;
		Token  lns = null;
		AST lns_AST = null;
		Token  lae = null;
		AST lae_AST = null;
		String qid; String name = "";
		
		loop309:  while (true) {
			lns = LT(1);
			match(LITERAL_namespace);
			if (matchError) {break loop309;}
			name=literal_ident_g();
			if (matchError) {break loop309;}
			lae = LT(1);
			match(ASSIGNEQUAL);
			if (matchError) {break loop309;}
			qid=qualified_id_g();
			if (matchError) {break loop309;}
			match(SEMICOLON);
			if (matchError) {break loop309;}
			namespace_alias_definition_AST = (AST)currentAST.root;
		break;} // loop309
		if (matchError) {
	}
	returnAST = namespace_alias_definition_AST;
}

	public final void static_assert_declaration_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST static_assert_declaration_AST = null;
		
		loop310:  while (true) {
			AST tmp1168_AST = null;
			match(LITERAL_static_assert);
			if (matchError) {break loop310;}
			AST tmp1169_AST = null;
			match(LPAREN);
			if (matchError) {break loop310;}
			constant_expression_g();
			if (matchError) {break loop310;}
			AST tmp1170_AST = null;
			match(COMMA);
			if (matchError) {break loop310;}
			{
			int _cnt1154=0;
			_loop1154:
			do {
				if ((LA(1)==STRING_LITERAL)) {
					AST tmp1171_AST = null;
					consume();
				}
				else {
					if ( _cnt1154>=1 ) { break _loop1154; } else {matchError=true;if (matchError) {break loop310;}}
				}
				
				_cnt1154++;
			} while (true);
			}
			AST tmp1172_AST = null;
			match(RPAREN);
			if (matchError) {break loop310;}
			AST tmp1173_AST = null;
			match(SEMICOLON);
			if (matchError) {break loop310;}
			static_assert_declaration_AST = (AST)currentAST.root;
		break;} // loop310
		if (matchError) {
	}
	returnAST = static_assert_declaration_AST;
}

	public final void linkage_specification_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST linkage_specification_AST = null;
		
		loop311:  while (true) {
			AST tmp1174_AST = null;
			match(LITERAL_extern);
			if (matchError) {break loop311;}
			AST tmp1175_AST = null;
			match(STRING_LITERAL);
			if (matchError) {break loop311;}
			{
			switch ( LA(1)) {
			case LCURLY:
			{
				AST tmp1176_AST = null;
				consume();
				{
				_loop421:
				do {
					if ((_tokenSet_2.member(LA(1)))) {
						external_declaration_g();
						if (matchError) {break loop311;}
					}
					else {
						break _loop421;
					}
					
				} while (true);
				}
				AST tmp1177_AST = null;
				match(RCURLY);
				if (matchError) {break loop311;}
				break;
			}
			case ELLIPSIS:
			case SEMICOLON:
			case LPAREN:
			case LSQUARE:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_template:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_namespace:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_using:
			case LITERAL_export:
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___extension__:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_static_assert:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				external_declaration_g();
				if (matchError) {break loop311;}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop311;}
			}
			}
			}
			linkage_specification_AST = (AST)currentAST.root;
		break;} // loop311
		if (matchError) {
	}
	returnAST = linkage_specification_AST;
}

	public final void alias_declaration_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST alias_declaration_AST = null;
		String s="";
		
		loop312:  while (true) {
			AST tmp1178_AST = null;
			match(LITERAL_using);
			if (matchError) {break loop312;}
			s=literal_ident_g();
			if (matchError) {break loop312;}
			AST tmp1179_AST = null;
			match(ASSIGNEQUAL);
			if (matchError) {break loop312;}
			alias_declaration_type_g();
			if (matchError) {break loop312;}
			AST tmp1180_AST = null;
			match(SEMICOLON);
			if (matchError) {break loop312;}
			alias_declaration_AST = (AST)currentAST.root;
		break;} // loop312
		if (matchError) {
	}
	returnAST = alias_declaration_AST;
}

	public final void using_declaration_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST using_declaration_AST = null;
		Token  u = null;
		AST u_AST = null;
		Token  ns = null;
		AST ns_AST = null;
		String qid="";
		
		loop313:  while (true) {
			u = LT(1);
			match(LITERAL_using);
			if (matchError) {break loop313;}
			{
			switch ( LA(1)) {
			case LITERAL_namespace:
			{
				ns = LT(1);
				consume();
				qid=qualified_id_g();
				if (matchError) {break loop313;}
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typename:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				{
				switch ( LA(1)) {
				case LITERAL_typename:
				{
					AST tmp1181_AST = null;
					consume();
					break;
				}
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_decltype:
				case LITERAL___decltype:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop313;}
				}
				}
				}
				qid=unqualified_id_g();
				if (matchError) {break loop313;}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop313;}
			}
			}
			}
			match(SEMICOLON);
			if (matchError) {break loop313;}
			using_declaration_AST = (AST)currentAST.root;
		break;} // loop313
		if (matchError) {
	}
	returnAST = using_declaration_AST;
}

	protected final void function_params_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_params_AST = null;
		
		loop314:  while (true) {
			AST tmp1183_AST = null;
			match(LPAREN);
			if (matchError) {break loop314;}
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			case LPAREN:
			case LSQUARE:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				parameter_list_g(false);
				if (matchError) {break loop314;}
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop314;}
			}
			}
			}
			AST tmp1184_AST = null;
			match(RPAREN);
			if (matchError) {break loop314;}
			function_params_AST = (AST)currentAST.root;
		break;} // loop314
		if (matchError) {
	}
	returnAST = function_params_AST;
}

	public final void fun_cv_qualifier_seq_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST fun_cv_qualifier_seq_AST = null;
		CPPParser.TypeQualifier tq;
		
		loop315:  while (true) {
			{
			int LA1_227 = LA(1);
			int LA2_227 = LA(2);
			
			boolean synPredMatched678 = false;
			if (((_tokenSet_166.member(LA1_227)) && (_tokenSet_1.member(LA2_227)))) {
				int _m678 = mark();
				guessing++;
				guess678:  while (true) {
					{
					{
					_loop676:
					do {
						if ((_tokenSet_77.member(LA(1)))) {
							cv_qualifier_g();
							if (matchError) {break guess678;}
						}
						else {
							break _loop676;
						}
						
					} while (true);
					}
					{
					switch ( LA(1)) {
					case EOF:
					case ASSIGNEQUAL:
					case SEMICOLON:
					case RPAREN:
					case LCURLY:
					case LITERAL_try:
					case LITERAL___try:
					{
						is_post_declarator_token_g();
						if (matchError) {break guess678;}
						break;
					}
					case LITERAL_throw:
					{
						consume();
						break;
					}
					case LITERAL_noexcept:
					{
						consume();
						break;
					}
					case LITERAL___attribute__:
					case LITERAL___attribute:
					{
						literal_attribute_g();
						if (matchError) {break guess678;}
						break;
					}
					case POINTERTO:
					{
						consume();
						break;
					}
					case LITERAL_override:
					{
						consume();
						break;
					}
					case LITERAL_final:
					{
						consume();
						break;
					}
					case LITERAL_new:
					{
						consume();
						break;
					}
					case AMPERSAND:
					{
						consume();
						break;
					}
					case AND:
					{
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess678;}
					}
					}
					}
					}
				synPredMatched678 = true;
				break;} // guess678
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m678);
				guessing--;
			}
			if ( synPredMatched678 ) {
				{
				_loop680:
				do {
					int LA1_228 = LA(1);
					int LA2_228 = LA(2);
					
					if ((_tokenSet_77.member(LA1_228)) && (_tokenSet_166.member(LA2_228))) {
						tq=cv_qualifier_g();
						if (matchError) {break loop315;}
					}
					else {
						break _loop680;
					}
					
				} while (true);
				}
			}
			else if ((_tokenSet_166.member(LA1_227)) && (_tokenSet_1.member(LA2_227))) {
			}
			else {
				matchError=true;if (matchError) {break loop315;}
			}
			
			}
			fun_cv_qualifier_seq_AST = (AST)currentAST.root;
		break;} // loop315
		if (matchError) {
	}
	returnAST = fun_cv_qualifier_seq_AST;
}

	public final void ref_qualifier_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ref_qualifier_AST = null;
		
		loop316:  while (true) {
			switch ( LA(1)) {
			case AMPERSAND:
			{
				AST tmp1185_AST = null;
				consume();
				ref_qualifier_AST = (AST)currentAST.root;
				break;
			}
			case AND:
			{
				AST tmp1186_AST = null;
				consume();
				ref_qualifier_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop316;}
			}
			}
		break;} // loop316
		if (matchError) {
	}
	returnAST = ref_qualifier_AST;
}

	public final void exception_specification_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST exception_specification_AST = null;
		String so;
		
		loop317:  while (true) {
			switch ( LA(1)) {
			case LITERAL_throw:
			{
				AST tmp1187_AST = null;
				consume();
				AST tmp1188_AST = null;
				match(LPAREN);
				if (matchError) {break loop317;}
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				case LPAREN:
				case LSQUARE:
				case STAR:
				case AND:
				case AMPERSAND:
				case TILDE:
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					exception_type_id_g();
					if (matchError) {break loop317;}
					{
					_loop896:
					do {
						if ((LA(1)==COMMA)) {
							AST tmp1189_AST = null;
							consume();
							exception_type_id_g();
							if (matchError) {break loop317;}
						}
						else {
							break _loop896;
						}
						
					} while (true);
					}
					break;
				}
				case RPAREN:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop317;}
				}
				}
				}
				AST tmp1190_AST = null;
				match(RPAREN);
				if (matchError) {break loop317;}
				exception_specification_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_noexcept:
			{
				AST tmp1191_AST = null;
				consume();
				{
				int LA1_229 = LA(1);
				int LA2_229 = LA(2);
				
				if ((LA1_229==LPAREN) && (_tokenSet_169.member(LA2_229))) {
					AST tmp1192_AST = null;
					consume();
					constant_expression_g();
					if (matchError) {break loop317;}
					AST tmp1193_AST = null;
					match(RPAREN);
					if (matchError) {break loop317;}
				}
				else if ((_tokenSet_132.member(LA1_229)) && (_tokenSet_1.member(LA2_229))) {
				}
				else {
					matchError=true;if (matchError) {break loop317;}
				}
				
				}
				exception_specification_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop317;}
			}
			}
		break;} // loop317
		if (matchError) {
	}
	returnAST = exception_specification_AST;
}

	public final boolean  ctor_direct_declarator_g(
		boolean definition
	) {
		boolean isCtor = false;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ctor_direct_declarator_AST = null;
		String q;
		
		loop318:  while (true) {
			q=qualified_ctor_id_g();
			if (matchError) {break loop318;}
			{
			switch ( LA(1)) {
			case LESSTHAN:
			{
				AST tmp1194_AST = null;
				consume();
				template_argument_list_g();
				if (matchError) {break loop318;}
				AST tmp1195_AST = null;
				match(GREATERTHAN);
				if (matchError) {break loop318;}
				break;
			}
			case LPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop318;}
			}
			}
			}
			AST tmp1196_AST = null;
			match(LPAREN);
			if (matchError) {break loop318;}
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			case LPAREN:
			case LSQUARE:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				parameter_list_g(false);
				if (matchError) {break loop318;}
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop318;}
			}
			}
			}
			AST tmp1197_AST = null;
			match(RPAREN);
			if (matchError) {break loop318;}
			{
			int LA1_230 = LA(1);
			int LA2_230 = LA(2);
			
			if ((_tokenSet_314.member(LA1_230)) && (_tokenSet_1.member(LA2_230))) {
				cv_qualifier_seq_g();
				if (matchError) {break loop318;}
			}
			else if ((_tokenSet_315.member(LA1_230)) && (_tokenSet_1.member(LA2_230))) {
			}
			else {
				matchError=true;if (matchError) {break loop318;}
			}
			
			}
			{
			switch ( LA(1)) {
			case AND:
			case AMPERSAND:
			{
				ref_qualifier_g();
				if (matchError) {break loop318;}
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case COLON:
			case SEMICOLON:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case LITERAL_throw:
			case LITERAL_try:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_noexcept:
			case LITERAL___try:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop318;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification_g();
				if (matchError) {break loop318;}
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case COLON:
			case SEMICOLON:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case LITERAL_try:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL___try:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop318;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_final:
			case LITERAL_override:
			{
				virt_specifiers_g();
				if (matchError) {break loop318;}
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case COLON:
			case SEMICOLON:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case LITERAL_try:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL___try:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop318;}
			}
			}
			}
			{
			int LA1_231 = LA(1);
			int LA2_231 = LA(2);
			
			boolean synPredMatched806 = false;
			if (((LA1_231==ASSIGNEQUAL) && (LA2_231==OCTALINT))) {
				int _m806 = mark();
				guessing++;
				guess806:  while (true) {
					{
					match(ASSIGNEQUAL);
					if (matchError) {break guess806;}
					match(OCTALINT);
					if (matchError) {break guess806;}
					}
				synPredMatched806 = true;
				break;} // guess806
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m806);
				guessing--;
			}
			if ( synPredMatched806 ) {
				AST tmp1198_AST = null;
				consume();
				AST tmp1199_AST = null;
				consume();
			}
			else if ((_tokenSet_318.member(LA1_231)) && (_tokenSet_1.member(LA2_231))) {
			}
			else {
				matchError=true;if (matchError) {break loop318;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification_g();
				if (matchError) {break loop318;}
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case COLON:
			case SEMICOLON:
			case RPAREN:
			case LCURLY:
			case LITERAL_try:
			case LITERAL___try:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop318;}
			}
			}
			}
			ctor_direct_declarator_AST = (AST)currentAST.root;
		break;} // loop318
		if (matchError) {
	}
	returnAST = ctor_direct_declarator_AST;
	return isCtor;
}

	public final void dtor_direct_declarator_g(
		boolean definition
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dtor_direct_declarator_AST = null;
		String q;
		
		loop319:  while (true) {
			q=qualified_dtor_id_g();
			if (matchError) {break loop319;}
			{
			switch ( LA(1)) {
			case LESSTHAN:
			{
				AST tmp1200_AST = null;
				consume();
				template_argument_list_g();
				if (matchError) {break loop319;}
				AST tmp1201_AST = null;
				match(GREATERTHAN);
				if (matchError) {break loop319;}
				break;
			}
			case LPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop319;}
			}
			}
			}
			AST tmp1202_AST = null;
			match(LPAREN);
			if (matchError) {break loop319;}
			{
			switch ( LA(1)) {
			case LITERAL_void:
			{
				AST tmp1203_AST = null;
				consume();
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop319;}
			}
			}
			}
			AST tmp1204_AST = null;
			match(RPAREN);
			if (matchError) {break loop319;}
			{
			int LA1_232 = LA(1);
			int LA2_232 = LA(2);
			
			if ((_tokenSet_323.member(LA1_232)) && (_tokenSet_1.member(LA2_232))) {
				cv_qualifier_seq_g();
				if (matchError) {break loop319;}
			}
			else if ((_tokenSet_324.member(LA1_232)) && (_tokenSet_1.member(LA2_232))) {
			}
			else {
				matchError=true;if (matchError) {break loop319;}
			}
			
			}
			{
			switch ( LA(1)) {
			case AND:
			case AMPERSAND:
			{
				ref_qualifier_g();
				if (matchError) {break loop319;}
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case SEMICOLON:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case LITERAL_throw:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_noexcept:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop319;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification_g();
				if (matchError) {break loop319;}
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case SEMICOLON:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop319;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_final:
			case LITERAL_override:
			{
				virt_specifiers_g();
				if (matchError) {break loop319;}
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case SEMICOLON:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop319;}
			}
			}
			}
			{
			int LA1_233 = LA(1);
			int LA2_233 = LA(2);
			
			boolean synPredMatched839 = false;
			if (((LA1_233==ASSIGNEQUAL) && (LA2_233==OCTALINT))) {
				int _m839 = mark();
				guessing++;
				guess839:  while (true) {
					{
					match(ASSIGNEQUAL);
					if (matchError) {break guess839;}
					match(OCTALINT);
					if (matchError) {break guess839;}
					}
				synPredMatched839 = true;
				break;} // guess839
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m839);
				guessing--;
			}
			if ( synPredMatched839 ) {
				AST tmp1205_AST = null;
				consume();
				AST tmp1206_AST = null;
				consume();
			}
			else if ((_tokenSet_327.member(LA1_233)) && (_tokenSet_1.member(LA2_233))) {
			}
			else {
				matchError=true;if (matchError) {break loop319;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification_g();
				if (matchError) {break loop319;}
				break;
			}
			case EOF:
			case ASSIGNEQUAL:
			case SEMICOLON:
			case RPAREN:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop319;}
			}
			}
			}
			dtor_direct_declarator_AST = (AST)currentAST.root;
		break;} // loop319
		if (matchError) {
	}
	returnAST = dtor_direct_declarator_AST;
}

	public final CPPParser.StorageClass  common_storage_class_specifier_g() {
		CPPParser.StorageClass sc = scInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST common_storage_class_specifier_AST = null;
		
		loop320:  while (true) {
			switch ( LA(1)) {
			case LITERAL_register:
			{
				AST tmp1207_AST = null;
				consume();
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_static:
			{
				AST tmp1208_AST = null;
				consume();
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_extern:
			{
				AST tmp1209_AST = null;
				consume();
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_mutable:
			{
				AST tmp1210_AST = null;
				consume();
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___thread:
			{
				AST tmp1211_AST = null;
				consume();
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				AST tmp1212_AST = null;
				consume();
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___symbolic:
			{
				AST tmp1213_AST = null;
				consume();
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___global:
			{
				AST tmp1214_AST = null;
				consume();
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___hidden:
			{
				AST tmp1215_AST = null;
				consume();
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_thread_local:
			{
				AST tmp1216_AST = null;
				consume();
				common_storage_class_specifier_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop320;}
			}
			}
		break;} // loop320
		if (matchError) {
	}
	returnAST = common_storage_class_specifier_AST;
	return sc;
}

	protected final void literal_const_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_const_AST = null;
		
		loop321:  while (true) {
			switch ( LA(1)) {
			case LITERAL_const:
			{
				AST tmp1217_AST = null;
				consume();
				literal_const_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___const:
			{
				AST tmp1218_AST = null;
				consume();
				literal_const_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___const__:
			{
				AST tmp1219_AST = null;
				consume();
				literal_const_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop321;}
			}
			}
		break;} // loop321
		if (matchError) {
	}
	returnAST = literal_const_AST;
}

	protected final void literal_volatile_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_volatile_AST = null;
		
		loop322:  while (true) {
			switch ( LA(1)) {
			case LITERAL_volatile:
			{
				AST tmp1220_AST = null;
				consume();
				literal_volatile_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___volatile:
			{
				AST tmp1221_AST = null;
				consume();
				literal_volatile_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___volatile__:
			{
				AST tmp1222_AST = null;
				consume();
				literal_volatile_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop322;}
			}
			}
		break;} // loop322
		if (matchError) {
	}
	returnAST = literal_volatile_AST;
}

	protected final void literal_cdecl_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_cdecl_AST = null;
		
		loop323:  while (true) {
			switch ( LA(1)) {
			case LITERAL__cdecl:
			{
				AST tmp1223_AST = null;
				consume();
				literal_cdecl_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___cdecl:
			{
				AST tmp1224_AST = null;
				consume();
				literal_cdecl_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop323;}
			}
			}
		break;} // loop323
		if (matchError) {
	}
	returnAST = literal_cdecl_AST;
}

	public final /*TypeSpecifier*/int  simple_type_specifier_g(
		boolean noTypeId
	) {
		/*TypeSpecifier*/int ts = tsInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST simple_type_specifier_AST = null;
		
		loop324:  while (true) {
			{
			int LA1_234 = LA(1);
			int LA2_234 = LA(2);
			
			if (((_tokenSet_198.member(LA1_234)) && (_tokenSet_199.member(LA2_234)))&&(!noTypeId && qualifiedItemIsOneOf(qiType|qiCtor))) {
				qualified_type_g();
				if (matchError) {break loop324;}
			}
			else if ((_tokenSet_200.member(LA1_234))) {
				ts=builtin_cv_type_specifier_g(ts);
				if (matchError) {break loop324;}
			}
			else {
				boolean synPredMatched483 = false;
				if ((((_tokenSet_198.member(LA1_234)) && (_tokenSet_199.member(LA2_234)))&&(!noTypeId))) {
					int _m483 = mark();
					guessing++;
					guess483:  while (true) {
						{
						qualified_type_g();
						if (matchError) {break guess483;}
						}
					synPredMatched483 = true;
					break;} // guess483
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m483);
					guessing--;
				}
				if ( synPredMatched483 ) {
					qualified_type_g();
					if (matchError) {break loop324;}
				}
				else {
					matchError=true;if (matchError) {break loop324;}
				}
				}
				}
				simple_type_specifier_AST = (AST)currentAST.root;
			break;} // loop324
			if (matchError) {
		}
		returnAST = simple_type_specifier_AST;
		return ts;
	}
	
	public final /*TypeSpecifier*/int  class_specifier_g(
		DeclSpecifier ds
	) {
		/*TypeSpecifier*/int ts = tsInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST class_specifier_AST = null;
		String saveClass = ""; String id = ""; StorageClass sc = scInvalid;
		
		loop325:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_class:
			{
				AST tmp1225_AST = null;
				consume();
				break;
			}
			case LITERAL_struct:
			{
				AST tmp1226_AST = null;
				consume();
				break;
			}
			case LITERAL_union:
			{
				AST tmp1227_AST = null;
				consume();
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop325;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_alignas:
			{
				type_attribute_specification_g();
				if (matchError) {break loop325;}
				break;
			}
			case LCURLY:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_extern:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL___global:
			case LITERAL___thread:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL___decltype:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop325;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_extern:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL___global:
			case LITERAL___thread:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_thread_local:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				sc=storage_class_specifier_g();
				if (matchError) {break loop325;}
				break;
			}
			case LCURLY:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop325;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				id=class_qualified_id_g();
				if (matchError) {break loop325;}
				{
				int LA1_235 = LA(1);
				int LA2_235 = LA(2);
				
				if ((_tokenSet_126.member(LA1_235)) && (_tokenSet_1.member(LA2_235))) {
					{
					switch ( LA(1)) {
					case LITERAL_final:
					{
						AST tmp1228_AST = null;
						consume();
						break;
					}
					case LITERAL_explicit:
					{
						AST tmp1229_AST = null;
						consume();
						break;
					}
					case COLON:
					case LCURLY:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop325;}
					}
					}
					}
					{
					switch ( LA(1)) {
					case COLON:
					{
						base_clause_g();
						if (matchError) {break loop325;}
						break;
					}
					case LCURLY:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop325;}
					}
					}
					}
					{
					int LA1_236 = LA(1);
					int LA2_236 = LA(2);
					
					if (((LA1_236==LCURLY) && (_tokenSet_1.member(LA2_236)))&&(checkClassDefinitionDepth(NESTED_CLASSES_LIMIT))) {
						AST tmp1230_AST = null;
						match(LCURLY);
						if (matchError) {break loop325;}
						class_members_g();
						if (matchError) {break loop325;}
						{
						switch ( LA(1)) {
						case EOF:
						{
							consume();
							break;
						}
						case RCURLY:
						{
							AST tmp1232_AST = null;
							consume();
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break loop325;}
						}
						}
						}
					}
					else if ((LA1_236==LCURLY) && (_tokenSet_1.member(LA2_236))) {
						balanceCurlies_g();
						if (matchError) {break loop325;}
					}
					else {
						matchError=true;if (matchError) {break loop325;}
					}
					
					}
				}
				else if ((_tokenSet_88.member(LA1_235)) && (_tokenSet_1.member(LA2_235))) {
				}
				else {
					matchError=true;if (matchError) {break loop325;}
				}
				
				}
				break;
			}
			case LCURLY:
			{
				{
				int LA1_237 = LA(1);
				int LA2_237 = LA(2);
				
				if (((LA1_237==LCURLY) && (_tokenSet_205.member(LA2_237)))&&(checkClassDefinitionDepth(NESTED_CLASSES_LIMIT))) {
					AST tmp1233_AST = null;
					match(LCURLY);
					if (matchError) {break loop325;}
					{
					_loop512:
					do {
						if ((_tokenSet_157.member(LA(1)))) {
							member_declaration_g();
							if (matchError) {break loop325;}
						}
						else {
							break _loop512;
						}
						
					} while (true);
					}
					{
					switch ( LA(1)) {
					case EOF:
					{
						consume();
						break;
					}
					case RCURLY:
					{
						AST tmp1235_AST = null;
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop325;}
					}
					}
					}
				}
				else if ((LA1_237==LCURLY) && (_tokenSet_1.member(LA2_237))) {
					balanceCurlies_g();
					if (matchError) {break loop325;}
				}
				else {
					matchError=true;if (matchError) {break loop325;}
				}
				
				}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop325;}
			}
			}
			}
			class_specifier_AST = (AST)currentAST.root;
		break;} // loop325
		if (matchError) {
	}
	returnAST = class_specifier_AST;
	return ts;
}

	public final void enum_specifier_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST enum_specifier_AST = null;
		String qid;
		
		loop326:  while (true) {
			AST tmp1236_AST = null;
			match(LITERAL_enum);
			if (matchError) {break loop326;}
			{
			int LA1_238 = LA(1);
			int LA2_238 = LA(2);
			
			if ((_tokenSet_52.member(LA1_238)) && (LA2_238==LPAREN||LA2_238==LSQUARE)) {
				type_attribute_specification_g();
				if (matchError) {break loop326;}
			}
			else if ((_tokenSet_79.member(LA1_238)) && (_tokenSet_80.member(LA2_238))) {
			}
			else {
				matchError=true;if (matchError) {break loop326;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LITERAL_class:
			case LITERAL_struct:
			{
				{
				switch ( LA(1)) {
				case LITERAL_class:
				{
					AST tmp1237_AST = null;
					consume();
					break;
				}
				case LITERAL_struct:
				{
					AST tmp1238_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop326;}
				}
				}
				}
				break;
			}
			case COLON:
			case LSQUARE:
			case LCURLY:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_alignas:
			case LITERAL___decltype:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop326;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case COLON:
			case LSQUARE:
			case LCURLY:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_alignas:
			{
				{
				switch ( LA(1)) {
				case COLON:
				{
					strongly_typed_enum_type_specifier_g();
					if (matchError) {break loop326;}
					break;
				}
				case LSQUARE:
				case LCURLY:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL___attribute__:
				case LITERAL___attribute:
				case LITERAL_alignas:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop326;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case LSQUARE:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL___attribute__:
				case LITERAL___attribute:
				case LITERAL_alignas:
				{
					type_attribute_specification_g();
					if (matchError) {break loop326;}
					break;
				}
				case LCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop326;}
				}
				}
				}
				AST tmp1239_AST = null;
				match(LCURLY);
				if (matchError) {break loop326;}
				enumerator_list_g();
				if (matchError) {break loop326;}
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					break;
				}
				case RCURLY:
				{
					AST tmp1241_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop326;}
				}
				}
				}
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				qid=enum_qualified_id_g();
				if (matchError) {break loop326;}
				{
				{
				int LA1_239 = LA(1);
				int LA2_239 = LA(2);
				
				if ((LA1_239==COLON) && (_tokenSet_85.member(LA2_239))) {
					strongly_typed_enum_type_specifier_g();
					if (matchError) {break loop326;}
				}
				else if ((_tokenSet_86.member(LA1_239)) && (_tokenSet_1.member(LA2_239))) {
				}
				else {
					matchError=true;if (matchError) {break loop326;}
				}
				
				}
				{
				int LA1_240 = LA(1);
				int LA2_240 = LA(2);
				
				if ((_tokenSet_83.member(LA1_240)) && (_tokenSet_87.member(LA2_240))) {
					{
					switch ( LA(1)) {
					case LSQUARE:
					case LITERAL__declspec:
					case LITERAL___declspec:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					case LITERAL_alignas:
					{
						type_attribute_specification_g();
						if (matchError) {break loop326;}
						break;
					}
					case LCURLY:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop326;}
					}
					}
					}
					AST tmp1242_AST = null;
					match(LCURLY);
					if (matchError) {break loop326;}
					enumerator_list_g();
					if (matchError) {break loop326;}
					{
					switch ( LA(1)) {
					case EOF:
					{
						consume();
						break;
					}
					case RCURLY:
					{
						AST tmp1244_AST = null;
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop326;}
					}
					}
					}
				}
				else if ((_tokenSet_88.member(LA1_240)) && (_tokenSet_1.member(LA2_240))) {
				}
				else {
					matchError=true;if (matchError) {break loop326;}
				}
				
				}
				}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop326;}
			}
			}
			}
			enum_specifier_AST = (AST)currentAST.root;
		break;} // loop326
		if (matchError) {
	}
	returnAST = enum_specifier_AST;
}

	protected final void unnamed_ptr_operator_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unnamed_ptr_operator_AST = null;
		
		loop327:  while (true) {
			{
			switch ( LA(1)) {
			case AMPERSAND:
			{
				AST tmp1245_AST = null;
				consume();
				break;
			}
			case AND:
			{
				AST tmp1246_AST = null;
				consume();
				break;
			}
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			{
				literal_cdecl_g();
				if (matchError) {break loop327;}
				break;
			}
			case LITERAL__near:
			case LITERAL___near:
			{
				literal_near_g();
				if (matchError) {break loop327;}
				break;
			}
			case LITERAL__far:
			case LITERAL___far:
			{
				literal_far_g();
				if (matchError) {break loop327;}
				break;
			}
			case LITERAL___interrupt:
			{
				AST tmp1247_AST = null;
				consume();
				break;
			}
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			{
				literal_pascal_g();
				if (matchError) {break loop327;}
				break;
			}
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			{
				literal_stdcall_g();
				if (matchError) {break loop327;}
				break;
			}
			case LITERAL___clrcall:
			{
				literal_clrcall_g();
				if (matchError) {break loop327;}
				break;
			}
			case STAR:
			{
				AST tmp1248_AST = null;
				consume();
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop327;}
			}
			}
			}
			unnamed_ptr_operator_AST = (AST)currentAST.root;
		break;} // loop327
		if (matchError) {
	}
	returnAST = unnamed_ptr_operator_AST;
}

	public final void restrict_declarator_g(
		int kind, int level
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST restrict_declarator_AST = null;
		CPPParser.TypeQualifier tq;
		
		loop328:  while (true) {
			int LA1_241 = LA(1);
			int LA2_241 = LA(2);
			
			boolean synPredMatched695 = false;
			if (((LA1_241==LPAREN) && (_tokenSet_109.member(LA2_241)))) {
				int _m695 = mark();
				guessing++;
				guess695:  while (true) {
					{
					match(LPAREN);
					if (matchError) {break guess695;}
					declarator_g(kind, level);
					if (matchError) {break guess695;}
					match(RPAREN);
					if (matchError) {break guess695;}
					is_post_declarator_token_g();
					if (matchError) {break guess695;}
					}
				synPredMatched695 = true;
				break;} // guess695
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m695);
				guessing--;
			}
			if ( synPredMatched695 ) {
				AST tmp1249_AST = null;
				consume();
				declarator_g(kind, level);
				if (matchError) {break loop328;}
				AST tmp1250_AST = null;
				match(RPAREN);
				if (matchError) {break loop328;}
				restrict_declarator_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched697 = false;
				if (((_tokenSet_21.member(LA1_241)) && (LA2_241==LPAREN||LA2_241==LSQUARE))) {
					int _m697 = mark();
					guessing++;
					guess697:  while (true) {
						{
						attribute_specification_g();
						if (matchError) {break guess697;}
						}
					synPredMatched697 = true;
					break;} // guess697
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m697);
					guessing--;
				}
				if ( synPredMatched697 ) {
					attribute_specification_g();
					if (matchError) {break loop328;}
					restrict_declarator_g(kind, level);
					if (matchError) {break loop328;}
					restrict_declarator_AST = (AST)currentAST.root;
				}
				else {
					boolean synPredMatched699 = false;
					if (((_tokenSet_57.member(LA1_241)) && (_tokenSet_174.member(LA2_241)))) {
						int _m699 = mark();
						guessing++;
						guess699:  while (true) {
							{
							ptr_operator_g();
							if (matchError) {break guess699;}
							}
						synPredMatched699 = true;
						break;} // guess699
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m699);
						guessing--;
					}
					if ( synPredMatched699 ) {
						ptr_operator_g();
						if (matchError) {break loop328;}
						restrict_declarator_g(kind, level);
						if (matchError) {break loop328;}
						restrict_declarator_AST = (AST)currentAST.root;
					}
					else if ((_tokenSet_279.member(LA1_241)) && (_tokenSet_280.member(LA2_241))) {
						{
						switch ( LA(1)) {
						case LITERAL_restrict:
						case LITERAL___restrict:
						case LITERAL___restrict__:
						{
							literal_restrict_g();
							if (matchError) {break loop328;}
							{
							_loop702:
							do {
								if ((_tokenSet_77.member(LA(1)))) {
									tq=cv_qualifier_g();
									if (matchError) {break loop328;}
								}
								else {
									break _loop702;
								}
								
							} while (true);
							}
							break;
						}
						case ELLIPSIS:
						case LPAREN:
						case LSQUARE:
						case TILDE:
						case SCOPE:
						case IDENT:
						case LITERAL_OPERATOR:
						case LITERAL_this:
						case LITERAL_true:
						case LITERAL_false:
						case LITERAL__cdecl:
						case LITERAL___cdecl:
						case LITERAL___attribute__:
						case LITERAL___attribute:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_decltype:
						case LITERAL___decltype:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break loop328;}
						}
						}
						}
						direct_declarator_g(kind, level);
						if (matchError) {break loop328;}
						restrict_declarator_AST = (AST)currentAST.root;
					}
					else {
						matchError=true;if (matchError) {break loop328;}
					}
					}}
				break;} // loop328
				if (matchError) {
			}
			returnAST = restrict_declarator_AST;
		}
		
	public final void direct_declarator_g(
		int kind, int level
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST direct_declarator_AST = null;
		String id; TypeQualifier tq;
		
		loop329:  while (true) {
			int LA1_242 = LA(1);
			int LA2_242 = LA(2);
			
			boolean synPredMatched705 = false;
			if (((_tokenSet_59.member(LA1_242)) && (_tokenSet_60.member(LA2_242)))) {
				int _m705 = mark();
				guessing++;
				guess705:  while (true) {
					{
					function_like_var_declarator_g();
					if (matchError) {break guess705;}
					}
				synPredMatched705 = true;
				break;} // guess705
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m705);
				guessing--;
			}
			if ( synPredMatched705 ) {
				function_like_var_declarator_g();
				if (matchError) {break loop329;}
				direct_declarator_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched708 = false;
				if (((_tokenSet_282.member(LA1_242)) && (_tokenSet_60.member(LA2_242)))) {
					int _m708 = mark();
					guessing++;
					guess708:  while (true) {
						{
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						{
							consume();
							break;
						}
						case SCOPE:
						case IDENT:
						case LITERAL_OPERATOR:
						case LITERAL_this:
						case LITERAL_true:
						case LITERAL_false:
						case LITERAL__cdecl:
						case LITERAL___cdecl:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_decltype:
						case LITERAL___decltype:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess708;}
						}
						}
						}
						qualified_id_g();
						if (matchError) {break guess708;}
						match(LPAREN);
						if (matchError) {break guess708;}
						matchNot(LCURLY);
						if (matchError) {break guess708;}
						}
					synPredMatched708 = true;
					break;} // guess708
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m708);
					guessing--;
				}
				if ( synPredMatched708 ) {
					{
					switch ( LA(1)) {
					case ELLIPSIS:
					{
						AST tmp1251_AST = null;
						consume();
						break;
					}
					case SCOPE:
					case IDENT:
					case LITERAL_OPERATOR:
					case LITERAL_this:
					case LITERAL_true:
					case LITERAL_false:
					case LITERAL__cdecl:
					case LITERAL___cdecl:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_decltype:
					case LITERAL___decltype:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop329;}
					}
					}
					}
					id=qualified_id_g();
					if (matchError) {break loop329;}
					{
					switch ( LA(1)) {
					case LSQUARE:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					{
						variable_attribute_specification_g();
						if (matchError) {break loop329;}
						break;
					}
					case LPAREN:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop329;}
					}
					}
					}
					AST tmp1252_AST = null;
					match(LPAREN);
					if (matchError) {break loop329;}
					{
					if ((_tokenSet_284.member(LA(1)))) {
						cpp11_expression_list_g();
						if (matchError) {break loop329;}
					}
					else if ((LA(1)==RPAREN)) {
					}
					else {
						matchError=true;if (matchError) {break loop329;}
					}
					
					}
					AST tmp1253_AST = null;
					match(RPAREN);
					if (matchError) {break loop329;}
					direct_declarator_AST = (AST)currentAST.root;
				}
				else if ((_tokenSet_286.member(LA1_242)) && (_tokenSet_287.member(LA2_242))) {
					{
					switch ( LA(1)) {
					case LSQUARE:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					{
						variable_attribute_specification_g();
						if (matchError) {break loop329;}
						break;
					}
					case ELLIPSIS:
					case SCOPE:
					case IDENT:
					case LITERAL_OPERATOR:
					case LITERAL_this:
					case LITERAL_true:
					case LITERAL_false:
					case LITERAL__cdecl:
					case LITERAL___cdecl:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_decltype:
					case LITERAL___decltype:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop329;}
					}
					}
					}
					{
					int LA1_243 = LA(1);
					int LA2_243 = LA(2);
					
					boolean synPredMatched716 = false;
					if (((_tokenSet_282.member(LA1_243)) && (_tokenSet_288.member(LA2_243)))) {
						int _m716 = mark();
						guessing++;
						guess716:  while (true) {
							{
							{
							switch ( LA(1)) {
							case ELLIPSIS:
							{
								consume();
								break;
							}
							case SCOPE:
							case IDENT:
							case LITERAL_OPERATOR:
							case LITERAL_this:
							case LITERAL_true:
							case LITERAL_false:
							case LITERAL__cdecl:
							case LITERAL___cdecl:
							case LITERAL_final:
							case LITERAL_override:
							case LITERAL_decltype:
							case LITERAL___decltype:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess716;}
							}
							}
							}
							qualified_id_g();
							if (matchError) {break guess716;}
							match(LSQUARE);
							if (matchError) {break guess716;}
							}
						synPredMatched716 = true;
						break;} // guess716
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m716);
						guessing--;
					}
					if ( synPredMatched716 ) {
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						{
							AST tmp1254_AST = null;
							consume();
							break;
						}
						case SCOPE:
						case IDENT:
						case LITERAL_OPERATOR:
						case LITERAL_this:
						case LITERAL_true:
						case LITERAL_false:
						case LITERAL__cdecl:
						case LITERAL___cdecl:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_decltype:
						case LITERAL___decltype:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break loop329;}
						}
						}
						}
						id=qualified_id_g();
						if (matchError) {break loop329;}
						{
						int _cnt720=0;
						_loop720:
						do {
							int LA1_244 = LA(1);
							int LA2_244 = LA(2);
							
							if ((LA1_244==LSQUARE) && (_tokenSet_289.member(LA2_244))) {
								AST tmp1255_AST = null;
								consume();
								{
								if ((_tokenSet_169.member(LA(1)))) {
									constant_expression_g();
									if (matchError) {break loop329;}
								}
								else if ((LA(1)==RSQUARE)) {
								}
								else {
									matchError=true;if (matchError) {break loop329;}
								}
								
								}
								AST tmp1256_AST = null;
								match(RSQUARE);
								if (matchError) {break loop329;}
							}
							else {
								if ( _cnt720>=1 ) { break _loop720; } else {matchError=true;if (matchError) {break loop329;}}
							}
							
							_cnt720++;
						} while (true);
						}
					}
					else if ((_tokenSet_282.member(LA1_243)) && (_tokenSet_287.member(LA2_243))) {
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						{
							AST tmp1257_AST = null;
							consume();
							break;
						}
						case SCOPE:
						case IDENT:
						case LITERAL_OPERATOR:
						case LITERAL_this:
						case LITERAL_true:
						case LITERAL_false:
						case LITERAL__cdecl:
						case LITERAL___cdecl:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_decltype:
						case LITERAL___decltype:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break loop329;}
						}
						}
						}
						id=qualified_id_g();
						if (matchError) {break loop329;}
					}
					else {
						matchError=true;if (matchError) {break loop329;}
					}
					
					}
					{
					int LA1_245 = LA(1);
					int LA2_245 = LA(2);
					
					if ((_tokenSet_21.member(LA1_245)) && (LA2_245==LPAREN||LA2_245==LSQUARE)) {
						variable_attribute_specification_g();
						if (matchError) {break loop329;}
					}
					else if ((_tokenSet_290.member(LA1_245)) && (_tokenSet_1.member(LA2_245))) {
					}
					else {
						matchError=true;if (matchError) {break loop329;}
					}
					
					}
					{
					switch ( LA(1)) {
					case LITERAL_asm:
					case LITERAL__asm:
					case LITERAL___asm__:
					case LITERAL___asm:
					{
						asm_block_g();
						if (matchError) {break loop329;}
						break;
					}
					case EOF:
					case ELLIPSIS:
					case ASSIGNEQUAL:
					case COLON:
					case COMMA:
					case SEMICOLON:
					case LPAREN:
					case RPAREN:
					case LSQUARE:
					case LCURLY:
					case GREATERTHAN:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop329;}
					}
					}
					}
					{
					switch ( LA(1)) {
					case LSQUARE:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					{
						variable_attribute_specification_g();
						if (matchError) {break loop329;}
						break;
					}
					case EOF:
					case ELLIPSIS:
					case ASSIGNEQUAL:
					case COLON:
					case COMMA:
					case SEMICOLON:
					case LPAREN:
					case RPAREN:
					case LCURLY:
					case GREATERTHAN:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop329;}
					}
					}
					}
					direct_declarator_AST = (AST)currentAST.root;
				}
				else if ((LA1_242==TILDE)) {
					AST tmp1258_AST = null;
					consume();
					id=literal_ident_g();
					if (matchError) {break loop329;}
					AST tmp1259_AST = null;
					match(LPAREN);
					if (matchError) {break loop329;}
					{
					switch ( LA(1)) {
					case ELLIPSIS:
					case LPAREN:
					case LSQUARE:
					case STAR:
					case AND:
					case AMPERSAND:
					case TILDE:
					case SCOPE:
					case IDENT:
					case LITERAL_OPERATOR:
					case LITERAL_typeof:
					case LITERAL___typeof__:
					case LITERAL___typeof:
					case LITERAL_typedef:
					case LITERAL_enum:
					case LITERAL_extern:
					case LITERAL_inline:
					case LITERAL__inline:
					case LITERAL___inline__:
					case LITERAL___inline:
					case LITERAL_virtual:
					case LITERAL_explicit:
					case LITERAL_friend:
					case LITERAL__stdcall:
					case LITERAL___stdcall:
					case LITERAL_typename:
					case LITERAL_auto:
					case LITERAL_register:
					case LITERAL_static:
					case LITERAL_mutable:
					case LITERAL_const:
					case LITERAL___const__:
					case LITERAL___const:
					case LITERAL_const_cast:
					case LITERAL_volatile:
					case LITERAL___volatile__:
					case LITERAL___volatile:
					case LITERAL_char:
					case LITERAL_wchar_t:
					case LITERAL_bool:
					case LITERAL_short:
					case LITERAL_int:
					case LITERAL_long:
					case LITERAL_signed:
					case LITERAL___signed__:
					case LITERAL___signed:
					case LITERAL_unsigned:
					case LITERAL___unsigned__:
					case LITERAL_float:
					case LITERAL_double:
					case LITERAL_void:
					case LITERAL__declspec:
					case LITERAL___declspec:
					case LITERAL_class:
					case LITERAL_struct:
					case LITERAL_union:
					case LITERAL_this:
					case LITERAL_true:
					case LITERAL_false:
					case LITERAL__cdecl:
					case LITERAL___cdecl:
					case LITERAL__near:
					case LITERAL___near:
					case LITERAL__far:
					case LITERAL___far:
					case LITERAL___interrupt:
					case LITERAL_pascal:
					case LITERAL__pascal:
					case LITERAL___pascal:
					case LITERAL__int64:
					case LITERAL___int64:
					case LITERAL___w64:
					case LITERAL___attribute__:
					case LITERAL___complex__:
					case LITERAL___global:
					case LITERAL__Bool:
					case LITERAL__Complex:
					case LITERAL___thread:
					case LITERAL___attribute:
					case LITERAL__Imaginary:
					case LITERAL_bit:
					case LITERAL___symbolic:
					case LITERAL___hidden:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_constexpr:
					case LITERAL_decltype:
					case LITERAL_thread_local:
					case LITERAL_alignas:
					case LITERAL_char16_t:
					case LITERAL_char32_t:
					case LITERAL___decltype:
					case LITERAL___complex:
					case LITERAL___forceinline:
					case LITERAL___clrcall:
					case LITERAL__Noreturn:
					case LITERAL___builtin_va_list:
					case LITERAL__BUILT_IN_TYPE__:
					case LITERAL__TYPE_QUALIFIER__:
					case LITERAL__STORAGE_CLASS_SPECIFIER__:
					{
						parameter_list_g(false);
						if (matchError) {break loop329;}
						break;
					}
					case RPAREN:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop329;}
					}
					}
					}
					AST tmp1260_AST = null;
					match(RPAREN);
					if (matchError) {break loop329;}
					direct_declarator_AST = (AST)currentAST.root;
				}
				else if ((LA1_242==LPAREN) && (_tokenSet_109.member(LA2_242))) {
					AST tmp1261_AST = null;
					consume();
					declarator_g(kind, level+1);
					if (matchError) {break loop329;}
					AST tmp1262_AST = null;
					match(RPAREN);
					if (matchError) {break loop329;}
					{
					int LA1_246 = LA(1);
					int LA2_246 = LA(2);
					
					if ((_tokenSet_21.member(LA1_246)) && (LA2_246==LPAREN||LA2_246==LSQUARE)) {
						variable_attribute_specification_g();
						if (matchError) {break loop329;}
					}
					else if ((_tokenSet_291.member(LA1_246)) && (_tokenSet_1.member(LA2_246))) {
					}
					else {
						matchError=true;if (matchError) {break loop329;}
					}
					
					}
					{
					int LA1_247 = LA(1);
					int LA2_247 = LA(2);
					
					if (((_tokenSet_291.member(LA1_247)) && (_tokenSet_1.member(LA2_247)))&&(_ts != tsInvalid)) {
						{
						int LA1_248 = LA(1);
						int LA2_248 = LA(2);
						
						if ((LA1_248==LPAREN||LA1_248==LSQUARE) && (_tokenSet_292.member(LA2_248))) {
							declarator_suffixes_g();
							if (matchError) {break loop329;}
						}
						else if ((_tokenSet_291.member(LA1_248)) && (_tokenSet_1.member(LA2_248))) {
						}
						else {
							matchError=true;if (matchError) {break loop329;}
						}
						
						}
					}
					else if ((LA1_247==LPAREN||LA1_247==LSQUARE) && (_tokenSet_292.member(LA2_247))) {
						declarator_suffixes_g();
						if (matchError) {break loop329;}
					}
					else {
						matchError=true;if (matchError) {break loop329;}
					}
					
					}
					{
					switch ( LA(1)) {
					case LSQUARE:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					{
						variable_attribute_specification_g();
						if (matchError) {break loop329;}
						break;
					}
					case EOF:
					case ELLIPSIS:
					case ASSIGNEQUAL:
					case COLON:
					case COMMA:
					case SEMICOLON:
					case LPAREN:
					case RPAREN:
					case LCURLY:
					case GREATERTHAN:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop329;}
					}
					}
					}
					direct_declarator_AST = (AST)currentAST.root;
				}
				else {
					matchError=true;if (matchError) {break loop329;}
				}
				}
			break;} // loop329
			if (matchError) {
		}
		returnAST = direct_declarator_AST;
	}
	
	protected final void literal_near_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_near_AST = null;
		
		loop330:  while (true) {
			switch ( LA(1)) {
			case LITERAL__near:
			{
				AST tmp1263_AST = null;
				consume();
				literal_near_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___near:
			{
				AST tmp1264_AST = null;
				consume();
				literal_near_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop330;}
			}
			}
		break;} // loop330
		if (matchError) {
	}
	returnAST = literal_near_AST;
}

	protected final void literal_far_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_far_AST = null;
		
		loop331:  while (true) {
			switch ( LA(1)) {
			case LITERAL__far:
			{
				AST tmp1265_AST = null;
				consume();
				literal_far_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___far:
			{
				AST tmp1266_AST = null;
				consume();
				literal_far_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop331;}
			}
			}
		break;} // loop331
		if (matchError) {
	}
	returnAST = literal_far_AST;
}

	protected final void literal_pascal_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_pascal_AST = null;
		
		loop332:  while (true) {
			switch ( LA(1)) {
			case LITERAL_pascal:
			{
				AST tmp1267_AST = null;
				consume();
				literal_pascal_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__pascal:
			{
				AST tmp1268_AST = null;
				consume();
				literal_pascal_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___pascal:
			{
				AST tmp1269_AST = null;
				consume();
				literal_pascal_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop332;}
			}
			}
		break;} // loop332
		if (matchError) {
	}
	returnAST = literal_pascal_AST;
}

	public final void ptr_to_member_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ptr_to_member_AST = null;
		String s;
		
		loop333:  while (true) {
			s=scope_override_g();
			if (matchError) {break loop333;}
			AST tmp1270_AST = null;
			match(STAR);
			if (matchError) {break loop333;}
			cv_qualifier_seq_g();
			if (matchError) {break loop333;}
			ptr_to_member_AST = (AST)currentAST.root;
		break;} // loop333
		if (matchError) {
	}
	returnAST = ptr_to_member_AST;
}

	public final void lazy_template_argument_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_template_argument_AST = null;
		
		loop334:  while (true) {
			int LA1_249 = LA(1);
			int LA2_249 = LA(2);
			
			if (((_tokenSet_102.member(LA1_249)) && (_tokenSet_91.member(LA2_249)))&&((isTemplateTooDeep(1, 10)))) {
				{
				_loop965:
				do {
					if ((_tokenSet_353.member(LA(1)))) {
						{
						AST tmp1271_AST = null;
						match(_tokenSet_353);
						if (matchError) {break loop334;}
						}
					}
					else {
						break _loop965;
					}
					
				} while (true);
				}
				{
				int _cnt970=0;
				_loop970:
				do {
					if ((LA(1)==LESSTHAN)) {
						lazy_template_g();
						if (matchError) {break loop334;}
						{
						_loop969:
						do {
							if ((_tokenSet_354.member(LA(1)))) {
								{
								AST tmp1272_AST = null;
								match(_tokenSet_354);
								if (matchError) {break loop334;}
								}
							}
							else {
								break _loop969;
							}
							
						} while (true);
						}
					}
					else {
						if ( _cnt970>=1 ) { break _loop970; } else {matchError=true;if (matchError) {break loop334;}}
					}
					
					_cnt970++;
				} while (true);
				}
				lazy_template_argument_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_169.member(LA1_249)) && (_tokenSet_359.member(LA2_249))) {
				template_param_expression_g();
				if (matchError) {break loop334;}
				lazy_template_argument_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;if (matchError) {break loop334;}
			}
			
		break;} // loop334
		if (matchError) {
	}
	returnAST = lazy_template_argument_AST;
}

	protected final void literal_decltype_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_decltype_AST = null;
		
		loop335:  while (true) {
			switch ( LA(1)) {
			case LITERAL_decltype:
			{
				AST tmp1273_AST = null;
				consume();
				literal_decltype_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___decltype:
			{
				AST tmp1274_AST = null;
				consume();
				literal_decltype_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop335;}
			}
			}
		break;} // loop335
		if (matchError) {
	}
	returnAST = literal_decltype_AST;
}

	protected final void lazy_assignment_expression_g(
		boolean inTemplateParams, boolean searchingGreaterthen, int templateLevel
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_assignment_expression_AST = null;
		
		loop336:  while (true) {
			lazy_expression_g(inTemplateParams, searchingGreaterthen, templateLevel);
			if (matchError) {break loop336;}
			{
			_loop1236:
			do {
				if ((_tokenSet_239.member(LA(1)))) {
					{
					switch ( LA(1)) {
					case ASSIGNEQUAL:
					{
						AST tmp1275_AST = null;
						consume();
						break;
					}
					case TIMESEQUAL:
					{
						AST tmp1276_AST = null;
						consume();
						break;
					}
					case DIVIDEEQUAL:
					{
						AST tmp1277_AST = null;
						consume();
						break;
					}
					case MINUSEQUAL:
					{
						AST tmp1278_AST = null;
						consume();
						break;
					}
					case PLUSEQUAL:
					{
						AST tmp1279_AST = null;
						consume();
						break;
					}
					case MODEQUAL:
					{
						AST tmp1280_AST = null;
						consume();
						break;
					}
					case SHIFTLEFTEQUAL:
					{
						AST tmp1281_AST = null;
						consume();
						break;
					}
					case SHIFTRIGHTEQUAL:
					{
						AST tmp1282_AST = null;
						consume();
						break;
					}
					case BITWISEANDEQUAL:
					{
						AST tmp1283_AST = null;
						consume();
						break;
					}
					case BITWISEXOREQUAL:
					{
						AST tmp1284_AST = null;
						consume();
						break;
					}
					case BITWISEOREQUAL:
					{
						AST tmp1285_AST = null;
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop336;}
					}
					}
					}
					{
					if ((_tokenSet_169.member(LA(1)))) {
						lazy_expression_g(inTemplateParams, searchingGreaterthen, templateLevel);
						if (matchError) {break loop336;}
					}
					else if ((LA(1)==LCURLY)) {
						array_initializer_g();
						if (matchError) {break loop336;}
					}
					else {
						matchError=true;if (matchError) {break loop336;}
					}
					
					}
				}
				else {
					break _loop1236;
				}
				
			} while (true);
			}
			lazy_assignment_expression_AST = (AST)currentAST.root;
		break;} // loop336
		if (matchError) {
	}
	returnAST = lazy_assignment_expression_AST;
}

	public final void init_declarator_g(
		int kind
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST init_declarator_AST = null;
		
		loop337:  while (true) {
			declarator_g(kind, 0);
			if (matchError) {break loop337;}
			{
			switch ( LA(1)) {
			case ASSIGNEQUAL:
			{
				AST tmp1286_AST = null;
				consume();
				initializer_g();
				if (matchError) {break loop337;}
				break;
			}
			case LPAREN:
			{
				AST tmp1287_AST = null;
				consume();
				cpp11_expression_list_g();
				if (matchError) {break loop337;}
				AST tmp1288_AST = null;
				match(RPAREN);
				if (matchError) {break loop337;}
				break;
			}
			case LCURLY:
			{
				array_initializer_g();
				if (matchError) {break loop337;}
				break;
			}
			case EOF:
			case COLON:
			case COMMA:
			case SEMICOLON:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop337;}
			}
			}
			}
			init_declarator_AST = (AST)currentAST.root;
		break;} // loop337
		if (matchError) {
	}
	returnAST = init_declarator_AST;
}

	protected final void balanceParens_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST balanceParens_AST = null;
		
		loop338:  while (true) {
			AST tmp1289_AST = null;
			match(LPAREN);
			if (matchError) {break loop338;}
			{
			_loop914:
			do {
				// nongreedy exit test
				if ((LA(1)==RPAREN) && (_tokenSet_1.member(LA(2)))) break _loop914;
				int LA1_250 = LA(1);
				int LA2_250 = LA(2);
				
				if ((LA1_250==LPAREN) && ((LA2_250 >= ELLIPSIS && LA2_250 <= CSM_END))) {
					balanceParens_g();
					if (matchError) {break loop338;}
				}
				else if (((LA1_250 >= ELLIPSIS && LA1_250 <= CSM_END)) && ((LA2_250 >= ELLIPSIS && LA2_250 <= CSM_END))) {
					AST tmp1290_AST = null;
					matchNot(EOF);
					if (matchError) {break loop338;}
				}
				else {
					break _loop914;
				}
				
			} while (true);
			}
			AST tmp1291_AST = null;
			match(RPAREN);
			if (matchError) {break loop338;}
			balanceParens_AST = (AST)currentAST.root;
		break;} // loop338
		if (matchError) {
	}
	returnAST = balanceParens_AST;
}

	protected final void balanceSquares_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST balanceSquares_AST = null;
		
		loop339:  while (true) {
			AST tmp1292_AST = null;
			match(LSQUARE);
			if (matchError) {break loop339;}
			{
			_loop920:
			do {
				// nongreedy exit test
				if ((LA(1)==RSQUARE) && ((LA(2) >= ELLIPSIS && LA(2) <= CSM_END))) break _loop920;
				int LA1_251 = LA(1);
				int LA2_251 = LA(2);
				
				if ((LA1_251==LSQUARE) && ((LA2_251 >= ELLIPSIS && LA2_251 <= CSM_END))) {
					balanceSquares_g();
					if (matchError) {break loop339;}
				}
				else if (((LA1_251 >= ELLIPSIS && LA1_251 <= CSM_END)) && ((LA2_251 >= ELLIPSIS && LA2_251 <= CSM_END))) {
					AST tmp1293_AST = null;
					matchNot(EOF);
					if (matchError) {break loop339;}
				}
				else {
					break _loop920;
				}
				
			} while (true);
			}
			AST tmp1294_AST = null;
			match(RSQUARE);
			if (matchError) {break loop339;}
			balanceSquares_AST = (AST)currentAST.root;
		break;} // loop339
		if (matchError) {
	}
	returnAST = balanceSquares_AST;
}

	public final void type_decltype_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST type_decltype_AST = null;
		
		loop340:  while (true) {
			literal_decltype_g();
			if (matchError) {break loop340;}
			decltype_expression_g();
			if (matchError) {break loop340;}
			type_decltype_AST = (AST)currentAST.root;
		break;} // loop340
		if (matchError) {
	}
	returnAST = type_decltype_AST;
}

	protected final void literal_int64_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_int64_AST = null;
		
		loop341:  while (true) {
			switch ( LA(1)) {
			case LITERAL__int64:
			{
				AST tmp1295_AST = null;
				consume();
				literal_int64_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___int64:
			{
				AST tmp1296_AST = null;
				consume();
				literal_int64_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop341;}
			}
			}
		break;} // loop341
		if (matchError) {
	}
	returnAST = literal_int64_AST;
}

	protected final void literal_signed_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_signed_AST = null;
		
		loop342:  while (true) {
			switch ( LA(1)) {
			case LITERAL_signed:
			{
				AST tmp1297_AST = null;
				consume();
				literal_signed_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___signed:
			{
				AST tmp1298_AST = null;
				consume();
				literal_signed_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___signed__:
			{
				AST tmp1299_AST = null;
				consume();
				literal_signed_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop342;}
			}
			}
		break;} // loop342
		if (matchError) {
	}
	returnAST = literal_signed_AST;
}

	protected final void literal_unsigned_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_unsigned_AST = null;
		
		loop343:  while (true) {
			switch ( LA(1)) {
			case LITERAL_unsigned:
			{
				AST tmp1300_AST = null;
				consume();
				literal_unsigned_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___unsigned__:
			{
				AST tmp1301_AST = null;
				consume();
				literal_unsigned_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop343;}
			}
			}
		break;} // loop343
		if (matchError) {
	}
	returnAST = literal_unsigned_AST;
}

	protected final void literal_complex_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_complex_AST = null;
		
		loop344:  while (true) {
			switch ( LA(1)) {
			case LITERAL__Complex:
			{
				AST tmp1302_AST = null;
				consume();
				literal_complex_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___complex__:
			{
				AST tmp1303_AST = null;
				consume();
				literal_complex_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___complex:
			{
				AST tmp1304_AST = null;
				consume();
				literal_complex_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop344;}
			}
			}
		break;} // loop344
		if (matchError) {
	}
	returnAST = literal_complex_AST;
}

	public final void optor_simple_tokclass_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST optor_simple_tokclass_AST = null;
		
		loop345:  while (true) {
			{
			switch ( LA(1)) {
			case PLUS:
			{
				AST tmp1305_AST = null;
				consume();
				break;
			}
			case MINUS:
			{
				AST tmp1306_AST = null;
				consume();
				break;
			}
			case STAR:
			{
				AST tmp1307_AST = null;
				consume();
				break;
			}
			case DIVIDE:
			{
				AST tmp1308_AST = null;
				consume();
				break;
			}
			case MOD:
			{
				AST tmp1309_AST = null;
				consume();
				break;
			}
			case BITWISEXOR:
			{
				AST tmp1310_AST = null;
				consume();
				break;
			}
			case AMPERSAND:
			{
				AST tmp1311_AST = null;
				consume();
				break;
			}
			case BITWISEOR:
			{
				AST tmp1312_AST = null;
				consume();
				break;
			}
			case TILDE:
			{
				AST tmp1313_AST = null;
				consume();
				break;
			}
			case NOT:
			{
				AST tmp1314_AST = null;
				consume();
				break;
			}
			case SHIFTLEFT:
			{
				AST tmp1315_AST = null;
				consume();
				break;
			}
			case SHIFTRIGHT:
			{
				AST tmp1316_AST = null;
				consume();
				break;
			}
			case ASSIGNEQUAL:
			{
				AST tmp1317_AST = null;
				consume();
				break;
			}
			case TIMESEQUAL:
			{
				AST tmp1318_AST = null;
				consume();
				break;
			}
			case DIVIDEEQUAL:
			{
				AST tmp1319_AST = null;
				consume();
				break;
			}
			case MODEQUAL:
			{
				AST tmp1320_AST = null;
				consume();
				break;
			}
			case PLUSEQUAL:
			{
				AST tmp1321_AST = null;
				consume();
				break;
			}
			case MINUSEQUAL:
			{
				AST tmp1322_AST = null;
				consume();
				break;
			}
			case SHIFTLEFTEQUAL:
			{
				AST tmp1323_AST = null;
				consume();
				break;
			}
			case SHIFTRIGHTEQUAL:
			{
				AST tmp1324_AST = null;
				consume();
				break;
			}
			case BITWISEANDEQUAL:
			{
				AST tmp1325_AST = null;
				consume();
				break;
			}
			case BITWISEXOREQUAL:
			{
				AST tmp1326_AST = null;
				consume();
				break;
			}
			case BITWISEOREQUAL:
			{
				AST tmp1327_AST = null;
				consume();
				break;
			}
			case EQUAL:
			{
				AST tmp1328_AST = null;
				consume();
				break;
			}
			case NOTEQUAL:
			{
				AST tmp1329_AST = null;
				consume();
				break;
			}
			case LESSTHAN:
			{
				AST tmp1330_AST = null;
				consume();
				break;
			}
			case GREATERTHAN:
			{
				AST tmp1331_AST = null;
				consume();
				{
				int LA1_252 = LA(1);
				int LA2_252 = LA(2);
				
				if ((LA1_252==GREATERTHAN) && (_tokenSet_392.member(LA2_252))) {
					AST tmp1332_AST = null;
					consume();
				}
				else if ((_tokenSet_392.member(LA1_252)) && (_tokenSet_1.member(LA2_252))) {
				}
				else {
					matchError=true;if (matchError) {break loop345;}
				}
				
				}
				break;
			}
			case LESSTHANOREQUALTO:
			{
				AST tmp1333_AST = null;
				consume();
				break;
			}
			case GREATERTHANOREQUALTO:
			{
				AST tmp1334_AST = null;
				consume();
				break;
			}
			case OR:
			{
				AST tmp1335_AST = null;
				consume();
				break;
			}
			case AND:
			{
				AST tmp1336_AST = null;
				consume();
				break;
			}
			case PLUSPLUS:
			{
				AST tmp1337_AST = null;
				consume();
				break;
			}
			case MINUSMINUS:
			{
				AST tmp1338_AST = null;
				consume();
				break;
			}
			case COMMA:
			{
				AST tmp1339_AST = null;
				consume();
				break;
			}
			case POINTERTO:
			{
				AST tmp1340_AST = null;
				consume();
				break;
			}
			case POINTERTOMBR:
			{
				AST tmp1341_AST = null;
				consume();
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop345;}
			}
			}
			}
			optor_simple_tokclass_AST = (AST)currentAST.root;
		break;} // loop345
		if (matchError) {
	}
	returnAST = optor_simple_tokclass_AST;
}

	protected final void balanceParensInExpression_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST balanceParensInExpression_AST = null;
		/*TypeSpecifier*/int ts=0; String s;
		
		loop346:  while (true) {
			AST tmp1342_AST = null;
			match(LPAREN);
			if (matchError) {break loop346;}
			{
			_loop1256:
			do {
				// nongreedy exit test
				if ((LA(1)==RPAREN) && (_tokenSet_1.member(LA(2)))) break _loop1256;
				int LA1_253 = LA(1);
				int LA2_253 = LA(2);
				
				switch ( LA1_253) {
				case LCURLY:
				{
					balanceCurlies_g();
					if (matchError) {break loop346;}
					break;
				}
				case LPAREN:
				{
					balanceParensInExpression_g();
					if (matchError) {break loop346;}
					break;
				}
				case LSQUARE:
				{
					balanceSquaresInExpression_g();
					if (matchError) {break loop346;}
					{
					int LA1_254 = LA(1);
					int LA2_254 = LA(2);
					
					boolean synPredMatched1253 = false;
					if (((_tokenSet_245.member(LA1_254)) && (_tokenSet_1.member(LA2_254)))) {
						int _m1253 = mark();
						guessing++;
						guess1253:  while (true) {
							{
							lambda_expression_post_capture_predicate_g();
							if (matchError) {break guess1253;}
							}
						synPredMatched1253 = true;
						break;} // guess1253
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1253);
						guessing--;
					}
					if ( synPredMatched1253 ) {
						lambda_expression_post_capture_g();
						if (matchError) {break loop346;}
					}
					else if ((_tokenSet_190.member(LA1_254)) && (_tokenSet_1.member(LA2_254))) {
					}
					else {
						matchError=true;if (matchError) {break loop346;}
					}
					
					}
					break;
				}
				case RSQUARE:
				case RCURLY:
				{
					{
					switch ( LA(1)) {
					case RCURLY:
					{
						AST tmp1343_AST = null;
						consume();
						break;
					}
					case RSQUARE:
					{
						AST tmp1344_AST = null;
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop346;}
					}
					}
					}
					break;
				}
				default:
					boolean synPredMatched1244 = false;
					if (((_tokenSet_0.member(LA1_253)) && (_tokenSet_190.member(LA2_253)))) {
						int _m1244 = mark();
						guessing++;
						guess1244:  while (true) {
							{
							literal_ident_g();
							if (matchError) {break guess1244;}
							}
						synPredMatched1244 = true;
						break;} // guess1244
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1244);
						guessing--;
					}
					if ( synPredMatched1244 ) {
						s=literal_ident_g();
						if (matchError) {break loop346;}
						{
						_loop1246:
						do {
							int LA1_255 = LA(1);
							int LA2_255 = LA(2);
							
							if ((LA1_255==LSQUARE) && (_tokenSet_190.member(LA2_255))) {
								balanceSquaresInExpression_g();
								if (matchError) {break loop346;}
							}
							else {
								break _loop1246;
							}
							
						} while (true);
						}
					}
					else {
						boolean synPredMatched1248 = false;
						if (((_tokenSet_200.member(LA1_253)) && (_tokenSet_190.member(LA2_253)))) {
							int _m1248 = mark();
							guessing++;
							guess1248:  while (true) {
								{
								builtin_type_g(0);
								if (matchError) {break guess1248;}
								}
							synPredMatched1248 = true;
							break;} // guess1248
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m1248);
							guessing--;
						}
						if ( synPredMatched1248 ) {
							ts=builtin_type_g(0);
							if (matchError) {break loop346;}
							{
							_loop1250:
							do {
								int LA1_256 = LA(1);
								int LA2_256 = LA(2);
								
								if ((LA1_256==LSQUARE) && (_tokenSet_190.member(LA2_256))) {
									balanceSquaresInExpression_g();
									if (matchError) {break loop346;}
								}
								else {
									break _loop1250;
								}
								
							} while (true);
							}
						}
						else if ((_tokenSet_255.member(LA1_253)) && (_tokenSet_190.member(LA2_253))) {
							{
							AST tmp1345_AST = null;
							match(_tokenSet_255);
							if (matchError) {break loop346;}
							}
						}
					else {
						break _loop1256;
					}
					}}
				} while (true);
				}
				AST tmp1346_AST = null;
				match(RPAREN);
				if (matchError) {break loop346;}
				balanceParensInExpression_AST = (AST)currentAST.root;
			break;} // loop346
			if (matchError) {
		}
		returnAST = balanceParensInExpression_AST;
	}
	
	public final void trailing_type_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST trailing_type_AST = null;
		int ts = tsInvalid; TypeQualifier tq;
		
		loop347:  while (true) {
			AST tmp1347_AST = null;
			match(POINTERTO);
			if (matchError) {break loop347;}
			cv_qualifier_seq_g();
			if (matchError) {break loop347;}
			ts=trailing_type_specifier_g();
			if (matchError) {break loop347;}
			cv_qualifier_seq_g();
			if (matchError) {break loop347;}
			{
			int LA1_257 = LA(1);
			int LA2_257 = LA(2);
			
			boolean synPredMatched774 = false;
			if (((_tokenSet_304.member(LA1_257)) && (_tokenSet_305.member(LA2_257)))) {
				int _m774 = mark();
				guessing++;
				guess774:  while (true) {
					{
					is_abstract_declarator_g();
					if (matchError) {break guess774;}
					}
				synPredMatched774 = true;
				break;} // guess774
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m774);
				guessing--;
			}
			if ( synPredMatched774 ) {
				greedy_abstract_declarator_g();
				if (matchError) {break loop347;}
			}
			else if ((_tokenSet_132.member(LA1_257)) && (_tokenSet_1.member(LA2_257))) {
			}
			else {
				matchError=true;if (matchError) {break loop347;}
			}
			
			}
			trailing_type_AST = (AST)currentAST.root;
		break;} // loop347
		if (matchError) {
	}
	returnAST = trailing_type_AST;
}

	public final void lazy_template_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_template_AST = null;
		
		loop348:  while (true) {
			AST tmp1348_AST = null;
			match(LESSTHAN);
			if (matchError) {break loop348;}
			{
			{
			_loop1001:
			do {
				if ((_tokenSet_353.member(LA(1)))) {
					{
					AST tmp1349_AST = null;
					match(_tokenSet_353);
					if (matchError) {break loop348;}
					}
				}
				else if ((LA(1)==LESSTHAN)) {
					lazy_template_g();
					if (matchError) {break loop348;}
				}
				else {
					break _loop1001;
				}
				
			} while (true);
			}
			}
			AST tmp1350_AST = null;
			match(GREATERTHAN);
			if (matchError) {break loop348;}
			lazy_template_AST = (AST)currentAST.root;
		break;} // loop348
		if (matchError) {
	}
	returnAST = lazy_template_AST;
}

	public final void lazy_expression_g(
		boolean inTemplateParams, boolean searchingGreaterthen, int templateLevel
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_expression_AST = null;
		/*TypeSpecifier*/int ts=0; String s;
		
		loop349:  while (true) {
			{
			int _cnt1211=0;
			_loop1211:
			do {
				int LA1_258 = LA(1);
				int LA2_258 = LA(2);
				
				if ((_tokenSet_169.member(LA1_258)) && (_tokenSet_1.member(LA2_258))) {
					{
					int LA1_259 = LA(1);
					int LA2_259 = LA(2);
					
					switch ( LA1_259) {
					case OR:
					{
						AST tmp1351_AST = null;
						consume();
						break;
					}
					case AND:
					{
						AST tmp1352_AST = null;
						consume();
						break;
					}
					case BITWISEOR:
					{
						AST tmp1353_AST = null;
						consume();
						break;
					}
					case BITWISEXOR:
					{
						AST tmp1354_AST = null;
						consume();
						break;
					}
					case AMPERSAND:
					{
						AST tmp1355_AST = null;
						consume();
						break;
					}
					case NOTEQUAL:
					{
						AST tmp1356_AST = null;
						consume();
						break;
					}
					case EQUAL:
					{
						AST tmp1357_AST = null;
						consume();
						break;
					}
					case LESSTHAN:
					{
						AST tmp1358_AST = null;
						consume();
						break;
					}
					case LESSTHANOREQUALTO:
					{
						AST tmp1359_AST = null;
						consume();
						break;
					}
					case GREATERTHANOREQUALTO:
					{
						AST tmp1360_AST = null;
						consume();
						break;
					}
					case QUESTIONMARK:
					{
						AST tmp1361_AST = null;
						consume();
						{
						if ((_tokenSet_189.member(LA(1)))) {
							expression_g();
							if (matchError) {break loop349;}
						}
						else if ((LA(1)==COLON)) {
						}
						else {
							matchError=true;if (matchError) {break loop349;}
						}
						
						}
						AST tmp1362_AST = null;
						match(COLON);
						if (matchError) {break loop349;}
						{
						assignment_expression_g();
						if (matchError) {break loop349;}
						}
						break;
					}
					case SHIFTLEFT:
					{
						AST tmp1363_AST = null;
						consume();
						break;
					}
					case SHIFTRIGHT:
					{
						AST tmp1364_AST = null;
						consume();
						break;
					}
					case PLUS:
					{
						AST tmp1365_AST = null;
						consume();
						break;
					}
					case MINUS:
					{
						AST tmp1366_AST = null;
						consume();
						break;
					}
					case STAR:
					{
						AST tmp1367_AST = null;
						consume();
						break;
					}
					case DIVIDE:
					{
						AST tmp1368_AST = null;
						consume();
						break;
					}
					case MOD:
					{
						AST tmp1369_AST = null;
						consume();
						break;
					}
					case DOTMBR:
					{
						AST tmp1370_AST = null;
						consume();
						break;
					}
					case POINTERTOMBR:
					{
						AST tmp1371_AST = null;
						consume();
						break;
					}
					case PLUSPLUS:
					{
						AST tmp1372_AST = null;
						consume();
						break;
					}
					case MINUSMINUS:
					{
						AST tmp1373_AST = null;
						consume();
						break;
					}
					case DOT:
					{
						AST tmp1374_AST = null;
						consume();
						break;
					}
					case POINTERTO:
					{
						AST tmp1375_AST = null;
						consume();
						break;
					}
					case NOT:
					{
						AST tmp1376_AST = null;
						consume();
						break;
					}
					case TILDE:
					{
						AST tmp1377_AST = null;
						consume();
						break;
					}
					case ELLIPSIS:
					{
						AST tmp1378_AST = null;
						consume();
						break;
					}
					case LPAREN:
					{
						balanceParensInExpression_g();
						if (matchError) {break loop349;}
						{
						if ((LA(1)==LCURLY)) {
							balanceCurlies_g();
							if (matchError) {break loop349;}
						}
						else if ((_tokenSet_243.member(LA(1)))) {
						}
						else {
							matchError=true;if (matchError) {break loop349;}
						}
						
						}
						break;
					}
					case LSQUARE:
					{
						balanceSquaresInExpression_g();
						if (matchError) {break loop349;}
						{
						int LA1_260 = LA(1);
						int LA2_260 = LA(2);
						
						boolean synPredMatched1190 = false;
						if (((_tokenSet_245.member(LA1_260)) && (_tokenSet_1.member(LA2_260)))) {
							int _m1190 = mark();
							guessing++;
							guess1190:  while (true) {
								{
								lambda_expression_post_capture_predicate_g();
								if (matchError) {break guess1190;}
								}
							synPredMatched1190 = true;
							break;} // guess1190
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m1190);
							guessing--;
						}
						if ( synPredMatched1190 ) {
							lambda_expression_post_capture_g();
							if (matchError) {break loop349;}
						}
						else if ((_tokenSet_243.member(LA1_260)) && (_tokenSet_1.member(LA2_260))) {
						}
						else {
							matchError=true;if (matchError) {break loop349;}
						}
						
						}
						break;
					}
					case FLOATONE:
					case FLOATTWO:
					case HEXADECIMALINT:
					case OCTALINT:
					case DECIMALINT:
					case CHAR_LITERAL:
					case STRING_LITERAL:
					case BINARYINT:
					case LITERAL_true:
					case LITERAL_false:
					case LITERAL_nullptr:
					case LITERAL___null:
					{
						constant_g();
						if (matchError) {break loop349;}
						break;
					}
					case LITERAL_typename:
					{
						AST tmp1379_AST = null;
						consume();
						break;
					}
					case LITERAL___interrupt:
					{
						AST tmp1380_AST = null;
						consume();
						break;
					}
					case LITERAL___extension__:
					{
						AST tmp1381_AST = null;
						consume();
						break;
					}
					case LITERAL_template:
					{
						AST tmp1382_AST = null;
						consume();
						break;
					}
					case LITERAL_new:
					{
						AST tmp1383_AST = null;
						consume();
						break;
					}
					case LITERAL_delete:
					{
						AST tmp1384_AST = null;
						consume();
						break;
					}
					case LITERAL_this:
					{
						AST tmp1385_AST = null;
						consume();
						break;
					}
					case LITERAL_volatile:
					case LITERAL___volatile__:
					case LITERAL___volatile:
					{
						literal_volatile_g();
						if (matchError) {break loop349;}
						break;
					}
					case LITERAL_const:
					case LITERAL___const__:
					case LITERAL___const:
					{
						literal_const_g();
						if (matchError) {break loop349;}
						break;
					}
					case LITERAL__TYPE_QUALIFIER__:
					{
						AST tmp1386_AST = null;
						consume();
						break;
					}
					case LITERAL__cdecl:
					case LITERAL___cdecl:
					{
						literal_cdecl_g();
						if (matchError) {break loop349;}
						break;
					}
					case LITERAL__near:
					case LITERAL___near:
					{
						literal_near_g();
						if (matchError) {break loop349;}
						break;
					}
					case LITERAL__far:
					case LITERAL___far:
					{
						literal_far_g();
						if (matchError) {break loop349;}
						break;
					}
					case LITERAL_pascal:
					case LITERAL__pascal:
					case LITERAL___pascal:
					{
						literal_pascal_g();
						if (matchError) {break loop349;}
						break;
					}
					case LITERAL__stdcall:
					case LITERAL___stdcall:
					{
						literal_stdcall_g();
						if (matchError) {break loop349;}
						break;
					}
					case LITERAL___clrcall:
					{
						literal_clrcall_g();
						if (matchError) {break loop349;}
						break;
					}
					case LITERAL_char:
					case LITERAL_wchar_t:
					case LITERAL_bool:
					case LITERAL_short:
					case LITERAL_int:
					case LITERAL_long:
					case LITERAL_signed:
					case LITERAL___signed__:
					case LITERAL___signed:
					case LITERAL_unsigned:
					case LITERAL___unsigned__:
					case LITERAL_float:
					case LITERAL_double:
					case LITERAL_void:
					case LITERAL__int64:
					case LITERAL___int64:
					case LITERAL___w64:
					case LITERAL___complex__:
					case LITERAL__Bool:
					case LITERAL__Complex:
					case LITERAL__Imaginary:
					case LITERAL_bit:
					case LITERAL_char16_t:
					case LITERAL_char32_t:
					case LITERAL___complex:
					case LITERAL___builtin_va_list:
					case LITERAL__BUILT_IN_TYPE__:
					{
						ts=builtin_type_g(0);
						if (matchError) {break loop349;}
						{
						_loop1192:
						do {
							int LA1_261 = LA(1);
							int LA2_261 = LA(2);
							
							if ((LA1_261==LSQUARE) && (_tokenSet_190.member(LA2_261))) {
								balanceSquaresInExpression_g();
								if (matchError) {break loop349;}
							}
							else {
								break _loop1192;
							}
							
						} while (true);
						}
						{
						if ((LA(1)==LCURLY)) {
							balanceCurlies_g();
							if (matchError) {break loop349;}
						}
						else if ((_tokenSet_243.member(LA(1)))) {
						}
						else {
							matchError=true;if (matchError) {break loop349;}
						}
						
						}
						break;
					}
					case LITERAL_decltype:
					case LITERAL___decltype:
					{
						lazy_type_decltype_g(templateLevel);
						if (matchError) {break loop349;}
						break;
					}
					case LITERAL_struct:
					{
						AST tmp1387_AST = null;
						consume();
						break;
					}
					case LITERAL_union:
					{
						AST tmp1388_AST = null;
						consume();
						break;
					}
					case LITERAL_class:
					{
						AST tmp1389_AST = null;
						consume();
						break;
					}
					case LITERAL_enum:
					{
						AST tmp1390_AST = null;
						consume();
						break;
					}
					case LITERAL_sizeof:
					{
						AST tmp1391_AST = null;
						consume();
						break;
					}
					case LITERAL___real:
					{
						AST tmp1392_AST = null;
						consume();
						break;
					}
					case LITERAL___imag:
					{
						AST tmp1393_AST = null;
						consume();
						break;
					}
					case LITERAL_alignof:
					{
						AST tmp1394_AST = null;
						consume();
						break;
					}
					case LITERAL___alignof:
					{
						AST tmp1395_AST = null;
						consume();
						break;
					}
					case LITERAL___alignof__:
					{
						AST tmp1396_AST = null;
						consume();
						break;
					}
					case LITERAL___is_class:
					case LITERAL___is_enum:
					case LITERAL___is_pod:
					case LITERAL___is_base_of:
					case LITERAL___has_trivial_constructor:
					case LITERAL___has_nothrow_assign:
					case LITERAL___has_nothrow_copy:
					case LITERAL___has_nothrow_constructor:
					case LITERAL___has_trivial_assign:
					case LITERAL___has_trivial_copy:
					case LITERAL___has_trivial_destructor:
					case LITERAL___has_virtual_destructor:
					case LITERAL___is_abstract:
					case LITERAL___is_empty:
					case LITERAL___is_literal_type:
					case LITERAL___is_polymorphic:
					case LITERAL___is_standard_layout:
					case LITERAL___is_trivial:
					case LITERAL___is_union:
					case LITERAL___underlying_type:
					{
						trait_type_literals_g();
						if (matchError) {break loop349;}
						break;
					}
					case LITERAL_auto:
					{
						AST tmp1397_AST = null;
						consume();
						break;
					}
					case LITERAL_constexpr:
					{
						AST tmp1398_AST = null;
						consume();
						break;
					}
					case LITERAL_thread_local:
					{
						AST tmp1399_AST = null;
						consume();
						break;
					}
					case LITERAL_static_assert:
					{
						AST tmp1400_AST = null;
						consume();
						break;
					}
					case LITERAL_alignas:
					{
						AST tmp1401_AST = null;
						consume();
						break;
					}
					case LITERAL_noexcept:
					{
						AST tmp1402_AST = null;
						consume();
						break;
					}
					case LITERAL_OPERATOR:
					{
						AST tmp1403_AST = null;
						consume();
						{
						int LA1_262 = LA(1);
						int LA2_262 = LA(2);
						
						if ((_tokenSet_247.member(LA1_262)) && (_tokenSet_243.member(LA2_262))) {
							optor_simple_tokclass_g();
							if (matchError) {break loop349;}
						}
						else if ((_tokenSet_248.member(LA1_262)) && (_tokenSet_249.member(LA2_262))) {
							{
							_loop1196:
							do {
								switch ( LA(1)) {
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								{
									literal_volatile_g();
									if (matchError) {break loop349;}
									break;
								}
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								{
									literal_const_g();
									if (matchError) {break loop349;}
									break;
								}
								case LITERAL__TYPE_QUALIFIER__:
								{
									AST tmp1404_AST = null;
									consume();
									break;
								}
								default:
								{
									break _loop1196;
								}
								}
							} while (true);
							}
							{
							switch ( LA(1)) {
							case LITERAL_struct:
							{
								AST tmp1405_AST = null;
								consume();
								break;
							}
							case LITERAL_union:
							{
								AST tmp1406_AST = null;
								consume();
								break;
							}
							case LITERAL_class:
							{
								AST tmp1407_AST = null;
								consume();
								break;
							}
							case LITERAL_enum:
							{
								AST tmp1408_AST = null;
								consume();
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break loop349;}
							}
							}
							}
							{
							int _cnt1199=0;
							_loop1199:
							do {
								int LA1_263 = LA(1);
								int LA2_263 = LA(2);
								
								if ((LA1_263==LITERAL_template) && (_tokenSet_243.member(LA2_263))) {
									AST tmp1409_AST = null;
									consume();
								}
								else if ((_tokenSet_0.member(LA1_263)) && (_tokenSet_243.member(LA2_263))) {
									s=literal_ident_g();
									if (matchError) {break loop349;}
								}
								else if ((LA1_263==LESSTHAN) && (_tokenSet_91.member(LA2_263))) {
									balanceLessthanGreaterthanInExpression_g(templateLevel);
									if (matchError) {break loop349;}
								}
								else if ((LA1_263==SCOPE) && (_tokenSet_243.member(LA2_263))) {
									AST tmp1410_AST = null;
									consume();
								}
								else {
									if ( _cnt1199>=1 ) { break _loop1199; } else {matchError=true;if (matchError) {break loop349;}}
								}
								
								_cnt1199++;
							} while (true);
							}
							{
							int LA1_264 = LA(1);
							int LA2_264 = LA(2);
							
							if ((LA1_264==COLON) && ((LA2_264 >= ELLIPSIS && LA2_264 <= CSM_END))) {
								lazy_base_close_g();
								if (matchError) {break loop349;}
							}
							else if ((_tokenSet_243.member(LA1_264)) && (_tokenSet_1.member(LA2_264))) {
							}
							else {
								matchError=true;if (matchError) {break loop349;}
							}
							
							}
						}
						else if ((_tokenSet_243.member(LA1_262)) && (_tokenSet_1.member(LA2_262))) {
						}
						else {
							matchError=true;if (matchError) {break loop349;}
						}
						
						}
						break;
					}
					case LITERAL_const_cast:
					case LITERAL_dynamic_cast:
					case LITERAL_static_cast:
					case LITERAL_reinterpret_cast:
					{
						{
						switch ( LA(1)) {
						case LITERAL_dynamic_cast:
						{
							AST tmp1411_AST = null;
							consume();
							break;
						}
						case LITERAL_static_cast:
						{
							AST tmp1412_AST = null;
							consume();
							break;
						}
						case LITERAL_reinterpret_cast:
						{
							AST tmp1413_AST = null;
							consume();
							break;
						}
						case LITERAL_const_cast:
						{
							AST tmp1414_AST = null;
							consume();
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break loop349;}
						}
						}
						}
						balanceLessthanGreaterthanInExpression_g(templateLevel);
						if (matchError) {break loop349;}
						break;
					}
					case SCOPE:
					{
						AST tmp1415_AST = null;
						consume();
						break;
					}
					default:
						boolean synPredMatched1203 = false;
						if ((((_tokenSet_0.member(LA1_259)) && (LA2_259==LESSTHAN))&&((!inTemplateParams && !searchingGreaterthen)))) {
							int _m1203 = mark();
							guessing++;
							guess1203:  while (true) {
								{
								literal_ident_g();
								if (matchError) {break guess1203;}
								balanceLessthanGreaterthanInExpression_g(templateLevel);
								if (matchError) {break guess1203;}
								}
							synPredMatched1203 = true;
							break;} // guess1203
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m1203);
							guessing--;
						}
						if ( synPredMatched1203 ) {
							s=literal_ident_g();
							if (matchError) {break loop349;}
							balanceLessthanGreaterthanInExpression_g(templateLevel);
							if (matchError) {break loop349;}
							{
							if ((LA(1)==LCURLY)) {
								balanceCurlies_g();
								if (matchError) {break loop349;}
							}
							else if ((_tokenSet_243.member(LA(1)))) {
							}
							else {
								matchError=true;if (matchError) {break loop349;}
							}
							
							}
						}
						else {
							boolean synPredMatched1206 = false;
							if ((((_tokenSet_0.member(LA1_259)) && (LA2_259==LESSTHAN))&&((inTemplateParams && !searchingGreaterthen)))) {
								int _m1206 = mark();
								guessing++;
								guess1206:  while (true) {
									{
									literal_ident_g();
									if (matchError) {break guess1206;}
									balanceLessthanGreaterthanInExpression_g(templateLevel);
									if (matchError) {break guess1206;}
									isGreaterthanInTheRestOfExpression_g(templateLevel);
									if (matchError) {break guess1206;}
									}
								synPredMatched1206 = true;
								break;} // guess1206
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m1206);
								guessing--;
							}
							if ( synPredMatched1206 ) {
								s=literal_ident_g();
								if (matchError) {break loop349;}
								balanceLessthanGreaterthanInExpression_g(templateLevel);
								if (matchError) {break loop349;}
								{
								if ((LA(1)==LCURLY)) {
									balanceCurlies_g();
									if (matchError) {break loop349;}
								}
								else if ((_tokenSet_243.member(LA(1)))) {
								}
								else {
									matchError=true;if (matchError) {break loop349;}
								}
								
								}
							}
							else if ((_tokenSet_0.member(LA1_259)) && (_tokenSet_241.member(LA2_259))) {
								s=literal_ident_g();
								if (matchError) {break loop349;}
								{
								_loop1209:
								do {
									int LA1_265 = LA(1);
									int LA2_265 = LA(2);
									
									if ((LA1_265==LSQUARE) && (_tokenSet_190.member(LA2_265))) {
										balanceSquaresInExpression_g();
										if (matchError) {break loop349;}
									}
									else {
										break _loop1209;
									}
									
								} while (true);
								}
								{
								if ((LA(1)==LCURLY)) {
									balanceCurlies_g();
									if (matchError) {break loop349;}
								}
								else if ((_tokenSet_243.member(LA(1)))) {
								}
								else {
									matchError=true;if (matchError) {break loop349;}
								}
								
								}
							}
						else {
							matchError=true;if (matchError) {break loop349;}
						}
						}}
						}
					}
					else {
						if ( _cnt1211>=1 ) { break _loop1211; } else {matchError=true;if (matchError) {break loop349;}}
					}
					
					_cnt1211++;
				} while (true);
				}
				{
				int LA1_266 = LA(1);
				int LA2_266 = LA(2);
				
				if (((_tokenSet_243.member(LA1_266)) && (_tokenSet_1.member(LA2_266)))&&((!inTemplateParams))) {
					{
					int LA1_267 = LA(1);
					int LA2_267 = LA(2);
					
					boolean synPredMatched1215 = false;
					if (((LA1_267==GREATERTHAN) && (_tokenSet_253.member(LA2_267)))) {
						int _m1215 = mark();
						guessing++;
						guess1215:  while (true) {
							{
							match(GREATERTHAN);
							if (matchError) {break guess1215;}
							lazy_expression_predicate_g();
							if (matchError) {break guess1215;}
							}
						synPredMatched1215 = true;
						break;} // guess1215
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1215);
						guessing--;
					}
					if ( synPredMatched1215 ) {
						{
						int _cnt1217=0;
						_loop1217:
						do {
							if ((LA(1)==GREATERTHAN)) {
								AST tmp1416_AST = null;
								consume();
							}
							else {
								if ( _cnt1217>=1 ) { break _loop1217; } else {matchError=true;if (matchError) {break loop349;}}
							}
							
							_cnt1217++;
						} while (true);
						}
						lazy_expression_g(false, false, templateLevel);
						if (matchError) {break loop349;}
					}
					else if ((_tokenSet_243.member(LA1_267)) && (_tokenSet_1.member(LA2_267))) {
					}
					else {
						matchError=true;if (matchError) {break loop349;}
					}
					
					}
				}
				else if ((_tokenSet_243.member(LA1_266)) && (_tokenSet_1.member(LA2_266))) {
				}
				else {
					matchError=true;if (matchError) {break loop349;}
				}
				
				}
				lazy_expression_AST = (AST)currentAST.root;
			break;} // loop349
			if (matchError) {
		}
		returnAST = lazy_expression_AST;
	}
	
	public final void expression_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST expression_AST = null;
		
		loop350:  while (true) {
			assignment_expression_g();
			if (matchError) {break loop350;}
			{
			_loop1166:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp1417_AST = null;
					consume();
					assignment_expression_g();
					if (matchError) {break loop350;}
				}
				else {
					break _loop1166;
				}
				
			} while (true);
			}
			expression_AST = (AST)currentAST.root;
		break;} // loop350
		if (matchError) {
	}
	returnAST = expression_AST;
}

	public final void assignment_expression_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST assignment_expression_AST = null;
		
		loop351:  while (true) {
			{
			int LA1_268 = LA(1);
			int LA2_268 = LA(2);
			
			boolean synPredMatched1174 = false;
			if (((LA1_268==LPAREN||LA1_268==AMPERSAND) && (_tokenSet_190.member(LA2_268)))) {
				int _m1174 = mark();
				guessing++;
				guess1174:  while (true) {
					{
					cast_array_initializer_head_g();
					if (matchError) {break guess1174;}
					}
				synPredMatched1174 = true;
				break;} // guess1174
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1174);
				guessing--;
			}
			if ( synPredMatched1174 ) {
				cast_array_initializer_g();
				if (matchError) {break loop351;}
			}
			else if ((_tokenSet_169.member(LA1_268)) && (_tokenSet_1.member(LA2_268))) {
				lazy_expression_g(false, false, 0);
				if (matchError) {break loop351;}
			}
			else if ((LA1_268==LITERAL_throw)) {
				throw_expression_g();
				if (matchError) {break loop351;}
			}
			else {
				matchError=true;if (matchError) {break loop351;}
			}
			
			}
			{
			int LA1_269 = LA(1);
			int LA2_269 = LA(2);
			
			if ((_tokenSet_239.member(LA1_269)) && (_tokenSet_284.member(LA2_269))) {
				{
				switch ( LA(1)) {
				case ASSIGNEQUAL:
				{
					AST tmp1418_AST = null;
					consume();
					break;
				}
				case TIMESEQUAL:
				{
					AST tmp1419_AST = null;
					consume();
					break;
				}
				case DIVIDEEQUAL:
				{
					AST tmp1420_AST = null;
					consume();
					break;
				}
				case MINUSEQUAL:
				{
					AST tmp1421_AST = null;
					consume();
					break;
				}
				case PLUSEQUAL:
				{
					AST tmp1422_AST = null;
					consume();
					break;
				}
				case MODEQUAL:
				{
					AST tmp1423_AST = null;
					consume();
					break;
				}
				case SHIFTLEFTEQUAL:
				{
					AST tmp1424_AST = null;
					consume();
					break;
				}
				case SHIFTRIGHTEQUAL:
				{
					AST tmp1425_AST = null;
					consume();
					break;
				}
				case BITWISEANDEQUAL:
				{
					AST tmp1426_AST = null;
					consume();
					break;
				}
				case BITWISEXOREQUAL:
				{
					AST tmp1427_AST = null;
					consume();
					break;
				}
				case BITWISEOREQUAL:
				{
					AST tmp1428_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop351;}
				}
				}
				}
				{
				if ((_tokenSet_189.member(LA(1)))) {
					assignment_expression_g();
					if (matchError) {break loop351;}
				}
				else if ((LA(1)==LCURLY)) {
					array_initializer_g();
					if (matchError) {break loop351;}
				}
				else {
					matchError=true;if (matchError) {break loop351;}
				}
				
				}
			}
			else if ((_tokenSet_243.member(LA1_269)) && (_tokenSet_1.member(LA2_269))) {
			}
			else {
				matchError=true;if (matchError) {break loop351;}
			}
			
			}
			assignment_expression_AST = (AST)currentAST.root;
		break;} // loop351
		if (matchError) {
	}
	returnAST = assignment_expression_AST;
}

	public final void constant_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST constant_AST = null;
		
		loop352:  while (true) {
			switch ( LA(1)) {
			case OCTALINT:
			{
				AST tmp1429_AST = null;
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case DECIMALINT:
			{
				AST tmp1430_AST = null;
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case HEXADECIMALINT:
			{
				AST tmp1431_AST = null;
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case BINARYINT:
			{
				AST tmp1432_AST = null;
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case CHAR_LITERAL:
			{
				AST tmp1433_AST = null;
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case STRING_LITERAL:
			{
				{
				int _cnt1341=0;
				_loop1341:
				do {
					int LA1_270 = LA(1);
					int LA2_270 = LA(2);
					
					if ((LA1_270==STRING_LITERAL) && (_tokenSet_243.member(LA2_270))) {
						AST tmp1434_AST = null;
						consume();
					}
					else {
						if ( _cnt1341>=1 ) { break _loop1341; } else {matchError=true;if (matchError) {break loop352;}}
					}
					
					_cnt1341++;
				} while (true);
				}
				constant_AST = (AST)currentAST.root;
				break;
			}
			case FLOATONE:
			{
				AST tmp1435_AST = null;
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case FLOATTWO:
			{
				AST tmp1436_AST = null;
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_true:
			{
				AST tmp1437_AST = null;
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_false:
			{
				AST tmp1438_AST = null;
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_nullptr:
			{
				AST tmp1439_AST = null;
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___null:
			{
				AST tmp1440_AST = null;
				consume();
				constant_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop352;}
			}
			}
		break;} // loop352
		if (matchError) {
	}
	returnAST = constant_AST;
}

	protected final void trait_type_literals_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST trait_type_literals_AST = null;
		
		loop353:  while (true) {
			switch ( LA(1)) {
			case LITERAL___is_pod:
			{
				AST tmp1441_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_nothrow_assign:
			{
				AST tmp1442_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_nothrow_copy:
			{
				AST tmp1443_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_nothrow_constructor:
			{
				AST tmp1444_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_trivial_assign:
			{
				AST tmp1445_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_trivial_copy:
			{
				AST tmp1446_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_trivial_destructor:
			{
				AST tmp1447_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_virtual_destructor:
			{
				AST tmp1448_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_abstract:
			{
				AST tmp1449_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_empty:
			{
				AST tmp1450_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_literal_type:
			{
				AST tmp1451_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_polymorphic:
			{
				AST tmp1452_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_standard_layout:
			{
				AST tmp1453_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_trivial:
			{
				AST tmp1454_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_union:
			{
				AST tmp1455_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___underlying_type:
			{
				AST tmp1456_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_class:
			{
				AST tmp1457_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_enum:
			{
				AST tmp1458_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___is_base_of:
			{
				AST tmp1459_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___has_trivial_constructor:
			{
				AST tmp1460_AST = null;
				consume();
				trait_type_literals_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop353;}
			}
			}
		break;} // loop353
		if (matchError) {
	}
	returnAST = trait_type_literals_AST;
}

	protected final String  idInBalanceParensHard_g() {
		String id = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST idInBalanceParensHard_AST = null;
		
		loop354:  while (true) {
			switch ( LA(1)) {
			case LPAREN:
			{
				{
				AST tmp1461_AST = null;
				match(LPAREN);
				if (matchError) {break loop354;}
				id=idInBalanceParensHard_g();
				if (matchError) {break loop354;}
				AST tmp1462_AST = null;
				match(RPAREN);
				if (matchError) {break loop354;}
				}
				idInBalanceParensHard_AST = (AST)currentAST.root;
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				id=qualified_id_g();
				if (matchError) {break loop354;}
				idInBalanceParensHard_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop354;}
			}
			}
		break;} // loop354
		if (matchError) {
	}
	returnAST = idInBalanceParensHard_AST;
	return id;
}

	protected final void variable_attribute_specification_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST variable_attribute_specification_AST = null;
		
		loop355:  while (true) {
			attribute_specification_list_g();
			if (matchError) {break loop355;}
		break;} // loop355
		if (matchError) {
	}
	returnAST = variable_attribute_specification_AST;
}

	public final void parameter_list_g(
		boolean symTabCheck
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST parameter_list_AST = null;
		
		loop356:  while (true) {
			parameter_declaration_list_g(symTabCheck);
			if (matchError) {break loop356;}
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			{
				AST tmp1463_AST = null;
				consume();
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop356;}
			}
			}
			}
			parameter_list_AST = (AST)currentAST.root;
		break;} // loop356
		if (matchError) {
	}
	returnAST = parameter_list_AST;
}

	public final void cv_qualifier_seq_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cv_qualifier_seq_AST = null;
		TypeQualifier tq;
		
		loop357:  while (true) {
			{
			_loop683:
			do {
				int LA1_271 = LA(1);
				int LA2_271 = LA(2);
				
				if ((_tokenSet_77.member(LA1_271)) && (_tokenSet_78.member(LA2_271))) {
					tq=cv_qualifier_g();
					if (matchError) {break loop357;}
				}
				else {
					break _loop683;
				}
				
			} while (true);
			}
			cv_qualifier_seq_AST = (AST)currentAST.root;
		break;} // loop357
		if (matchError) {
	}
	returnAST = cv_qualifier_seq_AST;
}

	protected final void virt_specifiers_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST virt_specifiers_AST = null;
		
		loop358:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_override:
			{
				AST tmp1464_AST = null;
				consume();
				break;
			}
			case LITERAL_final:
			{
				AST tmp1465_AST = null;
				consume();
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop358;}
			}
			}
			}
			{
			_loop901:
			do {
				int LA1_272 = LA(1);
				int LA2_272 = LA(2);
				
				if ((LA1_272==LITERAL_override) && (_tokenSet_273.member(LA2_272))) {
					AST tmp1466_AST = null;
					consume();
				}
				else if ((LA1_272==LITERAL_final) && (_tokenSet_273.member(LA2_272))) {
					AST tmp1467_AST = null;
					consume();
				}
				else {
					break _loop901;
				}
				
			} while (true);
			}
			virt_specifiers_AST = (AST)currentAST.root;
		break;} // loop358
		if (matchError) {
	}
	returnAST = virt_specifiers_AST;
}

	public final void asm_block_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST asm_block_AST = null;
		
		loop359:  while (true) {
			{
			int LA1_273 = LA(1);
			int LA2_273 = LA(2);
			
			if (((LA1_273 >= LITERAL_asm && LA1_273 <= LITERAL___asm)) && (LA2_273==LCURLY)) {
				literal_asm_g();
				if (matchError) {break loop359;}
				AST tmp1468_AST = null;
				match(LCURLY);
				if (matchError) {break loop359;}
				{
				_loop1148:
				do {
					if ((_tokenSet_137.member(LA(1)))) {
						AST tmp1469_AST = null;
						consume();
					}
					else {
						break _loop1148;
					}
					
				} while (true);
				}
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					break;
				}
				case RCURLY:
				{
					AST tmp1471_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop359;}
				}
				}
				}
			}
			else if (((LA1_273 >= LITERAL_asm && LA1_273 <= LITERAL___asm)) && (_tokenSet_138.member(LA2_273))) {
				literal_asm_g();
				if (matchError) {break loop359;}
				{
				switch ( LA(1)) {
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				{
					literal_volatile_g();
					if (matchError) {break loop359;}
					break;
				}
				case LITERAL_goto:
				{
					AST tmp1472_AST = null;
					consume();
					break;
				}
				case LPAREN:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop359;}
				}
				}
				}
				{
				if (!(LA(1)==LPAREN))
				{matchError=true;
				if (matchError) {break loop359;}}
				balanceParens_g();
				if (matchError) {break loop359;}
				}
			}
			else {
				matchError=true;if (matchError) {break loop359;}
			}
			
			}
			asm_block_AST = (AST)currentAST.root;
		break;} // loop359
		if (matchError) {
	}
	returnAST = asm_block_AST;
}

	protected final void literal_restrict_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_restrict_AST = null;
		
		loop360:  while (true) {
			switch ( LA(1)) {
			case LITERAL_restrict:
			{
				AST tmp1473_AST = null;
				consume();
				literal_restrict_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___restrict:
			{
				AST tmp1474_AST = null;
				consume();
				literal_restrict_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___restrict__:
			{
				AST tmp1475_AST = null;
				consume();
				literal_restrict_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop360;}
			}
			}
		break;} // loop360
		if (matchError) {
	}
	returnAST = literal_restrict_AST;
}

	public final void abstract_declarator_suffix_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST abstract_declarator_suffix_AST = null;
		
		loop361:  while (true) {
			int LA1_274 = LA(1);
			int LA2_274 = LA(2);
			
			if ((LA1_274==LSQUARE)) {
				AST tmp1476_AST = null;
				consume();
				{
				if ((_tokenSet_169.member(LA(1)))) {
					constant_expression_g();
					if (matchError) {break loop361;}
				}
				else if ((LA(1)==RSQUARE)) {
				}
				else {
					matchError=true;if (matchError) {break loop361;}
				}
				
				}
				AST tmp1477_AST = null;
				match(RSQUARE);
				if (matchError) {break loop361;}
				abstract_declarator_suffix_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched885 = false;
				if (((LA1_274==LPAREN) && (_tokenSet_165.member(LA2_274)))) {
					int _m885 = mark();
					guessing++;
					guess885:  while (true) {
						{
						match(LPAREN);
						if (matchError) {break guess885;}
						match(RPAREN);
						if (matchError) {break guess885;}
						}
					synPredMatched885 = true;
					break;} // guess885
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m885);
					guessing--;
				}
				if ( synPredMatched885 ) {
					declarator_param_list_g();
					if (matchError) {break loop361;}
					abstract_declarator_suffix_AST = (AST)currentAST.root;
				}
				else {
					boolean synPredMatched887 = false;
					if (((LA1_274==LPAREN) && (_tokenSet_341.member(LA2_274)))) {
						int _m887 = mark();
						guessing++;
						guess887:  while (true) {
							{
							match(LPAREN);
							if (matchError) {break guess887;}
							abstract_declarator_g();
							if (matchError) {break guess887;}
							match(RPAREN);
							if (matchError) {break guess887;}
							}
						synPredMatched887 = true;
						break;} // guess887
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m887);
						guessing--;
					}
					if ( synPredMatched887 ) {
						AST tmp1478_AST = null;
						consume();
						abstract_declarator_g();
						if (matchError) {break loop361;}
						AST tmp1479_AST = null;
						match(RPAREN);
						if (matchError) {break loop361;}
						abstract_declarator_suffix_AST = (AST)currentAST.root;
					}
					else if ((LA1_274==LPAREN) && (_tokenSet_165.member(LA2_274))) {
						declarator_param_list_g();
						if (matchError) {break loop361;}
						abstract_declarator_suffix_AST = (AST)currentAST.root;
					}
					else {
						matchError=true;if (matchError) {break loop361;}
					}
					}}
				break;} // loop361
				if (matchError) {
			}
			returnAST = abstract_declarator_suffix_AST;
		}
		
	protected final void is_va_list_type_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST is_va_list_type_AST = null;
		Token  id = null;
		AST id_AST = null;
		
		loop362:  while (true) {
			id = LT(1);
			match(IDENT);
			if (matchError) {break loop362;}
			if (!("va_list".contentEquals(id.getText())))
			{matchError=true;
			if (matchError) {break loop362;}}
			is_va_list_type_AST = (AST)currentAST.root;
		break;} // loop362
		if (matchError) {
	}
	returnAST = is_va_list_type_AST;
}

	public final void array_initializer_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST array_initializer_AST = null;
		
		loop363:  while (true) {
			int LA1_275 = LA(1);
			int LA2_275 = LA(2);
			
			if ((LA1_275==LCURLY) && (LA2_275==RCURLY)) {
				AST tmp1480_AST = null;
				consume();
				AST tmp1481_AST = null;
				consume();
				array_initializer_AST = (AST)currentAST.root;
			}
			else if ((LA1_275==LCURLY) && (_tokenSet_233.member(LA2_275))) {
				AST tmp1482_AST = null;
				consume();
				initializer_g();
				if (matchError) {break loop363;}
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				{
					AST tmp1483_AST = null;
					consume();
					break;
				}
				case EOF:
				case COMMA:
				case RCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop363;}
				}
				}
				}
				{
				_loop606:
				do {
					int LA1_276 = LA(1);
					int LA2_276 = LA(2);
					
					boolean synPredMatched604 = false;
					if (((LA1_276==COMMA) && (_tokenSet_216.member(LA2_276)))) {
						int _m604 = mark();
						guessing++;
						guess604:  while (true) {
							{
							match(COMMA);
							if (matchError) {break guess604;}
							{
							switch ( LA(1)) {
							case RCURLY:
							{
								consume();
								break;
							}
							case EOF:
							{
								consume();
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess604;}
							}
							}
							}
							}
						synPredMatched604 = true;
						break;} // guess604
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m604);
						guessing--;
					}
					if ( synPredMatched604 ) {
						AST tmp1484_AST = null;
						consume();
					}
					else if ((LA1_276==COMMA) && (_tokenSet_233.member(LA2_276))) {
						AST tmp1485_AST = null;
						consume();
						initializer_g();
						if (matchError) {break loop363;}
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						{
							AST tmp1486_AST = null;
							consume();
							break;
						}
						case EOF:
						case COMMA:
						case RCURLY:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break loop363;}
						}
						}
						}
					}
					else {
						break _loop606;
					}
					
				} while (true);
				}
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					break;
				}
				case RCURLY:
				{
					AST tmp1488_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop363;}
				}
				}
				}
				array_initializer_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;if (matchError) {break loop363;}
			}
			
		break;} // loop363
		if (matchError) {
	}
	returnAST = array_initializer_AST;
}

	protected final void declspec_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declspec_AST = null;
		
		loop364:  while (true) {
			literal_declspec_g();
			if (matchError) {break loop364;}
			balanceParens_g();
			if (matchError) {break loop364;}
		break;} // loop364
		if (matchError) {
	}
	returnAST = declspec_AST;
}

	public final void template_argument_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_argument_AST = null;
		String s;
		
		loop365:  while (true) {
			int LA1_277 = LA(1);
			int LA2_277 = LA(2);
			
			if (((_tokenSet_102.member(LA1_277)) && (_tokenSet_91.member(LA2_277)))&&((isTemplateTooDeep(1, 10)))) {
				{
				_loop974:
				do {
					if ((_tokenSet_353.member(LA(1)))) {
						{
						AST tmp1489_AST = null;
						match(_tokenSet_353);
						if (matchError) {break loop365;}
						}
					}
					else {
						break _loop974;
					}
					
				} while (true);
				}
				{
				int _cnt979=0;
				_loop979:
				do {
					if ((LA(1)==LESSTHAN)) {
						lazy_template_g();
						if (matchError) {break loop365;}
						{
						_loop978:
						do {
							if ((_tokenSet_354.member(LA(1)))) {
								{
								AST tmp1490_AST = null;
								match(_tokenSet_354);
								if (matchError) {break loop365;}
								}
							}
							else {
								break _loop978;
							}
							
						} while (true);
						}
					}
					else {
						if ( _cnt979>=1 ) { break _loop979; } else {matchError=true;if (matchError) {break loop365;}}
					}
					
					_cnt979++;
				} while (true);
				}
				template_argument_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched984 = false;
				if (((_tokenSet_356.member(LA1_277)) && (_tokenSet_357.member(LA2_277)))) {
					int _m984 = mark();
					guessing++;
					guess984:  while (true) {
						{
						{
						switch ( LA(1)) {
						case SCOPE:
						{
							consume();
							break;
						}
						case IDENT:
						case LITERAL_final:
						case LITERAL_override:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess984;}
						}
						}
						}
						{
						_loop983:
						do {
							int LA1_278 = LA(1);
							int LA2_278 = LA(2);
							
							if ((_tokenSet_0.member(LA1_278)) && (LA2_278==SCOPE)) {
								literal_ident_g();
								if (matchError) {break guess984;}
								match(SCOPE);
								if (matchError) {break guess984;}
							}
							else {
								break _loop983;
							}
							
						} while (true);
						}
						literal_ident_g();
						if (matchError) {break guess984;}
						templateDepthChecker_g(20);
						if (matchError) {break guess984;}
						}
					synPredMatched984 = true;
					break;} // guess984
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m984);
					guessing--;
				}
				if ( synPredMatched984 ) {
					{
					switch ( LA(1)) {
					case SCOPE:
					{
						AST tmp1491_AST = null;
						consume();
						break;
					}
					case IDENT:
					case LITERAL_final:
					case LITERAL_override:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop365;}
					}
					}
					}
					{
					_loop987:
					do {
						int LA1_279 = LA(1);
						int LA2_279 = LA(2);
						
						if ((_tokenSet_0.member(LA1_279)) && (LA2_279==SCOPE)) {
							s=literal_ident_g();
							if (matchError) {break loop365;}
							AST tmp1492_AST = null;
							match(SCOPE);
							if (matchError) {break loop365;}
						}
						else {
							break _loop987;
						}
						
					} while (true);
					}
					s=literal_ident_g();
					if (matchError) {break loop365;}
					templateDepthChecker_g(20);
					if (matchError) {break loop365;}
					template_argument_AST = (AST)currentAST.root;
				}
				else {
					boolean synPredMatched993 = false;
					if (((_tokenSet_22.member(LA1_277)) && (_tokenSet_358.member(LA2_277)))) {
						int _m993 = mark();
						guessing++;
						guess993:  while (true) {
							{
							{
							switch ( LA(1)) {
							case SCOPE:
							{
								consume();
								break;
							}
							case IDENT:
							case LITERAL_final:
							case LITERAL_override:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess993;}
							}
							}
							}
							{
							_loop991:
							do {
								int LA1_280 = LA(1);
								int LA2_280 = LA(2);
								
								if ((_tokenSet_0.member(LA1_280)) && (LA2_280==SCOPE)) {
									literal_ident_g();
									if (matchError) {break guess993;}
									match(SCOPE);
									if (matchError) {break guess993;}
								}
								else {
									break _loop991;
								}
								
							} while (true);
							}
							literal_ident_g();
							if (matchError) {break guess993;}
							simpleBalanceLessthanGreaterthanInExpression_g();
							if (matchError) {break guess993;}
							{
							switch ( LA(1)) {
							case COMMA:
							{
								consume();
								break;
							}
							case GREATERTHAN:
							{
								consume();
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess993;}
							}
							}
							}
							}
						synPredMatched993 = true;
						break;} // guess993
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m993);
						guessing--;
					}
					if ( synPredMatched993 ) {
						type_name_g();
						if (matchError) {break loop365;}
						template_argument_AST = (AST)currentAST.root;
					}
					else {
						boolean synPredMatched996 = false;
						if (((_tokenSet_22.member(LA1_277)) && (_tokenSet_358.member(LA2_277)))) {
							int _m996 = mark();
							guessing++;
							guess996:  while (true) {
								{
								type_name_g();
								if (matchError) {break guess996;}
								{
								switch ( LA(1)) {
								case COMMA:
								{
									consume();
									break;
								}
								case GREATERTHAN:
								{
									consume();
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess996;}
								}
								}
								}
								}
							synPredMatched996 = true;
							break;} // guess996
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m996);
							guessing--;
						}
						if ( synPredMatched996 ) {
							type_name_g();
							if (matchError) {break loop365;}
							template_argument_AST = (AST)currentAST.root;
						}
						else if ((_tokenSet_169.member(LA1_277)) && (_tokenSet_190.member(LA2_277))) {
							template_param_expression_g();
							if (matchError) {break loop365;}
							template_argument_AST = (AST)currentAST.root;
						}
						else {
							matchError=true;if (matchError) {break loop365;}
						}
						}}}
					break;} // loop365
					if (matchError) {
				}
				returnAST = template_argument_AST;
			}
			
	public final void base_specifier_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST base_specifier_AST = null;
		
		loop366:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_virtual:
			{
				AST tmp1493_AST = null;
				consume();
				{
				switch ( LA(1)) {
				case LITERAL_public:
				case LITERAL_protected:
				case LITERAL_private:
				{
					access_specifier_g();
					if (matchError) {break loop366;}
					break;
				}
				case SCOPE:
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_decltype:
				case LITERAL___decltype:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop366;}
				}
				}
				}
				qualified_type_g();
				if (matchError) {break loop366;}
				break;
			}
			case LITERAL_public:
			case LITERAL_protected:
			case LITERAL_private:
			{
				access_specifier_g();
				if (matchError) {break loop366;}
				{
				switch ( LA(1)) {
				case LITERAL_virtual:
				{
					AST tmp1494_AST = null;
					consume();
					break;
				}
				case SCOPE:
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_decltype:
				case LITERAL___decltype:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop366;}
				}
				}
				}
				qualified_type_g();
				if (matchError) {break loop366;}
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				qualified_type_g();
				if (matchError) {break loop366;}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop366;}
			}
			}
			}
			base_specifier_AST = (AST)currentAST.root;
		break;} // loop366
		if (matchError) {
	}
	returnAST = base_specifier_AST;
}

	public final String  enum_qualified_id_g() {
		String qid = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST enum_qualified_id_AST = null;
		
		loop367:  while (true) {
			int LA1_281 = LA(1);
			int LA2_281 = LA(2);
			
			boolean synPredMatched540 = false;
			if (((_tokenSet_90.member(LA1_281)) && (_tokenSet_221.member(LA2_281)))) {
				int _m540 = mark();
				guessing++;
				guess540:  while (true) {
					{
					match(SCOPE);
					if (matchError) {break guess540;}
					literal_ident_g();
					if (matchError) {break guess540;}
					}
				synPredMatched540 = true;
				break;} // guess540
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m540);
				guessing--;
			}
			if ( synPredMatched540 ) {
				qid=qualified_id_g();
				if (matchError) {break loop367;}
				enum_qualified_id_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched543 = false;
				if (((_tokenSet_90.member(LA1_281)) && (_tokenSet_221.member(LA2_281)))) {
					int _m543 = mark();
					guessing++;
					guess543:  while (true) {
						{
						literal_ident_g();
						if (matchError) {break guess543;}
						{
						switch ( LA(1)) {
						case SCOPE:
						{
							consume();
							break;
						}
						case LESSTHAN:
						{
							consume();
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess543;}
						}
						}
						}
						}
					synPredMatched543 = true;
					break;} // guess543
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m543);
					guessing--;
				}
				if ( synPredMatched543 ) {
					qid=qualified_id_g();
					if (matchError) {break loop367;}
					enum_qualified_id_AST = (AST)currentAST.root;
				}
				else if ((_tokenSet_0.member(LA1_281)) && (_tokenSet_86.member(LA2_281))) {
					qid=literal_ident_g();
					if (matchError) {break loop367;}
					enum_qualified_id_AST = (AST)currentAST.root;
				}
				else {
					matchError=true;if (matchError) {break loop367;}
				}
				}
			break;} // loop367
			if (matchError) {
		}
		returnAST = enum_qualified_id_AST;
		return qid;
	}
	
	public final void strongly_typed_enum_type_specifier_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST strongly_typed_enum_type_specifier_AST = null;
		int ts = 0;
		
		loop368:  while (true) {
			AST tmp1495_AST = null;
			match(COLON);
			if (matchError) {break loop368;}
			{
			int LA1_282 = LA(1);
			int LA2_282 = LA(2);
			
			if ((_tokenSet_85.member(LA1_282)) && (_tokenSet_218.member(LA2_282))) {
				cv_qualifier_seq_g();
				if (matchError) {break loop368;}
			}
			else if ((_tokenSet_219.member(LA1_282)) && (_tokenSet_220.member(LA2_282))) {
			}
			else {
				matchError=true;if (matchError) {break loop368;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LITERAL_typename:
			{
				AST tmp1496_AST = null;
				consume();
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___complex__:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop368;}
			}
			}
			}
			ts=simple_type_specifier_g(false);
			if (matchError) {break loop368;}
			{
			int LA1_283 = LA(1);
			int LA2_283 = LA(2);
			
			if ((_tokenSet_86.member(LA1_283)) && (_tokenSet_1.member(LA2_283))) {
				cv_qualifier_seq_g();
				if (matchError) {break loop368;}
			}
			else if ((_tokenSet_86.member(LA1_283)) && (_tokenSet_1.member(LA2_283))) {
			}
			else {
				matchError=true;if (matchError) {break loop368;}
			}
			
			}
			strongly_typed_enum_type_specifier_AST = (AST)currentAST.root;
		break;} // loop368
		if (matchError) {
	}
	returnAST = strongly_typed_enum_type_specifier_AST;
}

	public final void template_parameter_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_parameter_AST = null;
		String id = "";
		
		loop369:  while (true) {
			{
			int LA1_284 = LA(1);
			int LA2_284 = LA(2);
			
			boolean synPredMatched939 = false;
			if (((LA1_284==LITERAL_typename||LA1_284==LITERAL_class) && (_tokenSet_345.member(LA2_284)))) {
				int _m939 = mark();
				guessing++;
				guess939:  while (true) {
					{
					{
					switch ( LA(1)) {
					case LITERAL_class:
					{
						consume();
						break;
					}
					case LITERAL_typename:
					{
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess939;}
					}
					}
					}
					{
					switch ( LA(1)) {
					case ELLIPSIS:
					{
						consume();
						break;
					}
					case ASSIGNEQUAL:
					case COMMA:
					case GREATERTHAN:
					case IDENT:
					case LITERAL_final:
					case LITERAL_override:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess939;}
					}
					}
					}
					{
					switch ( LA(1)) {
					case IDENT:
					case LITERAL_final:
					case LITERAL_override:
					{
						literal_ident_g();
						if (matchError) {break guess939;}
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						{
							consume();
							break;
						}
						case ASSIGNEQUAL:
						case COMMA:
						case GREATERTHAN:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess939;}
						}
						}
						}
						break;
					}
					case ASSIGNEQUAL:
					case COMMA:
					case GREATERTHAN:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess939;}
					}
					}
					}
					{
					switch ( LA(1)) {
					case ASSIGNEQUAL:
					{
						consume();
						break;
					}
					case COMMA:
					{
						consume();
						break;
					}
					case GREATERTHAN:
					{
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess939;}
					}
					}
					}
					}
				synPredMatched939 = true;
				break;} // guess939
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m939);
				guessing--;
			}
			if ( synPredMatched939 ) {
				{
				switch ( LA(1)) {
				case LITERAL_class:
				{
					AST tmp1497_AST = null;
					consume();
					break;
				}
				case LITERAL_typename:
				{
					AST tmp1498_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop369;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				{
					AST tmp1499_AST = null;
					consume();
					break;
				}
				case ASSIGNEQUAL:
				case COMMA:
				case GREATERTHAN:
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop369;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				{
					id=literal_ident_g();
					if (matchError) {break loop369;}
					{
					switch ( LA(1)) {
					case ELLIPSIS:
					{
						AST tmp1500_AST = null;
						consume();
						break;
					}
					case ASSIGNEQUAL:
					case COMMA:
					case GREATERTHAN:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop369;}
					}
					}
					}
					break;
				}
				case ASSIGNEQUAL:
				case COMMA:
				case GREATERTHAN:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop369;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case ASSIGNEQUAL:
				{
					AST tmp1501_AST = null;
					consume();
					assigned_type_name_g();
					if (matchError) {break loop369;}
					break;
				}
				case COMMA:
				case GREATERTHAN:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop369;}
				}
				}
				}
			}
			else if ((LA1_284==LITERAL_template||LA1_284==LITERAL_export)) {
				template_template_parameter_g();
				if (matchError) {break loop369;}
			}
			else if ((_tokenSet_328.member(LA1_284)) && (_tokenSet_350.member(LA2_284))) {
				parameter_declaration_g(true);
				if (matchError) {break loop369;}
			}
			else {
				matchError=true;if (matchError) {break loop369;}
			}
			
			}
			template_parameter_AST = (AST)currentAST.root;
		break;} // loop369
		if (matchError) {
	}
	returnAST = template_parameter_AST;
}

	protected final void balanceCurlies_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST balanceCurlies_AST = null;
		
		loop370:  while (true) {
			AST tmp1502_AST = null;
			match(LCURLY);
			if (matchError) {break loop370;}
			{
			if (!(balanceBraces(CPPTokenTypes.LCURLY, CPPTokenTypes.RCURLY)))
			{matchError=true;
			if (matchError) {break loop370;}}
			}
			{
			int LA1_285 = LA(1);
			int LA2_285 = LA(2);
			
			if (((LA1_285 >= ELLIPSIS && LA1_285 <= CSM_END)) && (_tokenSet_1.member(LA2_285))) {
				AST tmp1503_AST = null;
				matchNot(EOF);
				if (matchError) {break loop370;}
			}
			else if ((_tokenSet_1.member(LA1_285)) && (_tokenSet_1.member(LA2_285))) {
			}
			else {
				matchError=true;if (matchError) {break loop370;}
			}
			
			}
			balanceCurlies_AST = (AST)currentAST.root;
		break;} // loop370
		if (matchError) {
	}
	returnAST = balanceCurlies_AST;
}

	public final void statement_list_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST statement_list_AST = null;
		
		loop371:  while (true) {
			{
			int _cnt1016=0;
			_loop1016:
			do {
				if ((_tokenSet_159.member(LA(1)))) {
					statement_g();
					if (matchError) {break loop371;}
				}
				else {
					if ( _cnt1016>=1 ) { break _loop1016; } else {matchError=true;if (matchError) {break loop371;}}
				}
				
				_cnt1016++;
			} while (true);
			}
			statement_list_AST = (AST)currentAST.root;
		break;} // loop371
		if (matchError) {
	}
	returnAST = statement_list_AST;
}

	public final void unknown_pretype_declaration_specifiers_list_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unknown_pretype_declaration_specifiers_list_AST = null;
		String s;
		
		loop372:  while (true) {
			{
			int LA1_286 = LA(1);
			int LA2_286 = LA(2);
			
			boolean synPredMatched461 = false;
			if (((_tokenSet_0.member(LA1_286)) && (_tokenSet_22.member(LA2_286)))) {
				int _m461 = mark();
				guessing++;
				guess461:  while (true) {
					{
					literal_ident_g();
					if (matchError) {break guess461;}
					literal_ident_g();
					if (matchError) {break guess461;}
					literal_ident_g();
					if (matchError) {break guess461;}
					}
				synPredMatched461 = true;
				break;} // guess461
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m461);
				guessing--;
			}
			if ( synPredMatched461 ) {
				s=literal_ident_g();
				if (matchError) {break loop372;}
				unknown_pretype_declaration_specifiers_list_g();
				if (matchError) {break loop372;}
			}
			else if ((_tokenSet_22.member(LA1_286)) && (_tokenSet_48.member(LA2_286))) {
			}
			else {
				matchError=true;if (matchError) {break loop372;}
			}
			
			}
			unknown_pretype_declaration_specifiers_list_AST = (AST)currentAST.root;
		break;} // loop372
		if (matchError) {
	}
	returnAST = unknown_pretype_declaration_specifiers_list_AST;
}

	public final void unknown_posttype_declaration_specifiers_list_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unknown_posttype_declaration_specifiers_list_AST = null;
		String s;
		
		loop373:  while (true) {
			{
			int LA1_287 = LA(1);
			int LA2_287 = LA(2);
			
			boolean synPredMatched466 = false;
			if (((_tokenSet_0.member(LA1_287)) && (_tokenSet_47.member(LA2_287)))) {
				int _m466 = mark();
				guessing++;
				guess466:  while (true) {
					{
					literal_ident_g();
					if (matchError) {break guess466;}
					literal_ident_g();
					if (matchError) {break guess466;}
					}
				synPredMatched466 = true;
				break;} // guess466
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m466);
				guessing--;
			}
			if ( synPredMatched466 ) {
				s=literal_ident_g();
				if (matchError) {break loop373;}
				unknown_posttype_declaration_specifiers_list_g();
				if (matchError) {break loop373;}
			}
			else if ((_tokenSet_47.member(LA1_287)) && (_tokenSet_1.member(LA2_287))) {
			}
			else {
				matchError=true;if (matchError) {break loop373;}
			}
			
			}
			unknown_posttype_declaration_specifiers_list_AST = (AST)currentAST.root;
		break;} // loop373
		if (matchError) {
	}
	returnAST = unknown_posttype_declaration_specifiers_list_AST;
}

	protected final void function_direct_declarator_2_g(
		boolean definition, boolean symTabCheck
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_direct_declarator_2_AST = null;
		String q; CPPParser.TypeQualifier tq;
		
		loop374:  while (true) {
			q=idInBalanceParensHard_g();
			if (matchError) {break loop374;}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification_g();
				if (matchError) {break loop374;}
				break;
			}
			case LPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop374;}
			}
			}
			}
			function_parameters_g(symTabCheck);
			if (matchError) {break loop374;}
			function_direct_declarator_2_AST = (AST)currentAST.root;
		break;} // loop374
		if (matchError) {
	}
	returnAST = function_direct_declarator_2_AST;
}

	public final void external_declaration_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST external_declaration_AST = null;
		String s; K_and_R = false; boolean definition;StorageClass sc;TypeQualifier tq; int ts = 0;
		
		loop375:  while (true) {
			{
			int LA1_288 = LA(1);
			int LA2_288 = LA(2);
			
			switch ( LA1_288) {
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			{
				asm_block_g();
				if (matchError) {break loop375;}
				break;
			}
			case SEMICOLON:
			{
				match(SEMICOLON);
				if (matchError) {break loop375;}
				break;
			}
			default:
				boolean synPredMatched147 = false;
				if ((((LA1_288==LITERAL_extern||LA1_288==LITERAL___extension__) && (LA2_288==LITERAL_template||LA2_288==LITERAL_extern))&&(isCPlusPlus()))) {
					int _m147 = mark();
					guessing++;
					guess147:  while (true) {
						{
						{
						switch ( LA(1)) {
						case LITERAL___extension__:
						{
							consume();
							break;
						}
						case LITERAL_extern:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess147;}
						}
						}
						}
						match(LITERAL_extern);
						if (matchError) {break guess147;}
						match(LITERAL_template);
						if (matchError) {break guess147;}
						}
					synPredMatched147 = true;
					break;} // guess147
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m147);
					guessing--;
				}
				if ( synPredMatched147 ) {
					{
					switch ( LA(1)) {
					case LITERAL___extension__:
					{
						consume();
						break;
					}
					case LITERAL_extern:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop375;}
					}
					}
					}
					AST tmp1506_AST = null;
					match(LITERAL_extern);
					if (matchError) {break loop375;}
					AST tmp1507_AST = null;
					match(LITERAL_template);
					if (matchError) {break loop375;}
					external_declaration_g();
					if (matchError) {break loop375;}
				}
				else {
					boolean synPredMatched152 = false;
					if ((((_tokenSet_8.member(LA1_288)) && (_tokenSet_9.member(LA2_288)))&&(isCPlusPlus()))) {
						int _m152 = mark();
						guessing++;
						guess152:  while (true) {
							{
							{
							switch ( LA(1)) {
							case LITERAL___extension__:
							{
								consume();
								break;
							}
							case LITERAL_template:
							case LITERAL_export:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess152;}
							}
							}
							}
							{
							switch ( LA(1)) {
							case LITERAL_export:
							{
								consume();
								break;
							}
							case LITERAL_template:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess152;}
							}
							}
							}
							match(LITERAL_template);
							if (matchError) {break guess152;}
							}
						synPredMatched152 = true;
						break;} // guess152
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m152);
						guessing--;
					}
					if ( synPredMatched152 ) {
						external_declaration_template_g();
						if (matchError) {break loop375;}
					}
					else {
						boolean synPredMatched156 = false;
						if (((_tokenSet_10.member(LA1_288)) && (_tokenSet_11.member(LA2_288)))) {
							int _m156 = mark();
							guessing++;
							guess156:  while (true) {
								{
								{
								switch ( LA(1)) {
								case LITERAL___extension__:
								{
									consume();
									break;
								}
								case LITERAL_typedef:
								case LITERAL_extern:
								case LITERAL_friend:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_const_cast:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL_class:
								case LITERAL_struct:
								case LITERAL_union:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_constexpr:
								case LITERAL_thread_local:
								case LITERAL__TYPE_QUALIFIER__:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess156;}
								}
								}
								}
								{
								switch ( LA(1)) {
								case LITERAL_typedef:
								case LITERAL_extern:
								case LITERAL_friend:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_const_cast:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_constexpr:
								case LITERAL_thread_local:
								case LITERAL__TYPE_QUALIFIER__:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									decl_specifiers_before_type_g();
									if (matchError) {break guess156;}
									break;
								}
								case LITERAL_class:
								case LITERAL_struct:
								case LITERAL_union:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess156;}
								}
								}
								}
								class_head_g();
								if (matchError) {break guess156;}
								}
							synPredMatched156 = true;
							break;} // guess156
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m156);
							guessing--;
						}
						if ( synPredMatched156 ) {
							{
							switch ( LA(1)) {
							case LITERAL___extension__:
							{
								consume();
								break;
							}
							case ELLIPSIS:
							case LPAREN:
							case LSQUARE:
							case STAR:
							case AND:
							case AMPERSAND:
							case TILDE:
							case SCOPE:
							case IDENT:
							case LITERAL_OPERATOR:
							case LITERAL_typeof:
							case LITERAL___typeof__:
							case LITERAL___typeof:
							case LITERAL_typedef:
							case LITERAL_enum:
							case LITERAL_namespace:
							case LITERAL_extern:
							case LITERAL_inline:
							case LITERAL__inline:
							case LITERAL___inline__:
							case LITERAL___inline:
							case LITERAL_virtual:
							case LITERAL_explicit:
							case LITERAL_friend:
							case LITERAL__stdcall:
							case LITERAL___stdcall:
							case LITERAL_typename:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL_const:
							case LITERAL___const__:
							case LITERAL___const:
							case LITERAL_const_cast:
							case LITERAL_volatile:
							case LITERAL___volatile__:
							case LITERAL___volatile:
							case LITERAL_char:
							case LITERAL_wchar_t:
							case LITERAL_bool:
							case LITERAL_short:
							case LITERAL_int:
							case LITERAL_long:
							case LITERAL_signed:
							case LITERAL___signed__:
							case LITERAL___signed:
							case LITERAL_unsigned:
							case LITERAL___unsigned__:
							case LITERAL_float:
							case LITERAL_double:
							case LITERAL_void:
							case LITERAL__declspec:
							case LITERAL___declspec:
							case LITERAL_class:
							case LITERAL_struct:
							case LITERAL_union:
							case LITERAL_this:
							case LITERAL_true:
							case LITERAL_false:
							case LITERAL_using:
							case LITERAL__cdecl:
							case LITERAL___cdecl:
							case LITERAL__near:
							case LITERAL___near:
							case LITERAL__far:
							case LITERAL___far:
							case LITERAL___interrupt:
							case LITERAL_pascal:
							case LITERAL__pascal:
							case LITERAL___pascal:
							case LITERAL__int64:
							case LITERAL___int64:
							case LITERAL___w64:
							case LITERAL___attribute__:
							case LITERAL___complex__:
							case LITERAL___global:
							case LITERAL__Bool:
							case LITERAL__Complex:
							case LITERAL___thread:
							case LITERAL___attribute:
							case LITERAL__Imaginary:
							case LITERAL_bit:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_final:
							case LITERAL_override:
							case LITERAL_constexpr:
							case LITERAL_decltype:
							case LITERAL_thread_local:
							case LITERAL_static_assert:
							case LITERAL_alignas:
							case LITERAL_char16_t:
							case LITERAL_char32_t:
							case LITERAL___decltype:
							case LITERAL___complex:
							case LITERAL___forceinline:
							case LITERAL___clrcall:
							case LITERAL__Noreturn:
							case LITERAL___builtin_va_list:
							case LITERAL__BUILT_IN_TYPE__:
							case LITERAL__TYPE_QUALIFIER__:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break loop375;}
							}
							}
							}
							declaration_g(declOther);
							if (matchError) {break loop375;}
						}
						else {
							boolean synPredMatched161 = false;
							if (((_tokenSet_10.member(LA1_288)) && (_tokenSet_11.member(LA2_288)))) {
								int _m161 = mark();
								guessing++;
								guess161:  while (true) {
									{
									{
									switch ( LA(1)) {
									case LITERAL___extension__:
									{
										consume();
										break;
									}
									case LITERAL_typedef:
									case LITERAL_enum:
									case LITERAL_extern:
									case LITERAL_friend:
									case LITERAL_auto:
									case LITERAL_register:
									case LITERAL_static:
									case LITERAL_mutable:
									case LITERAL_const:
									case LITERAL___const__:
									case LITERAL___const:
									case LITERAL_const_cast:
									case LITERAL_volatile:
									case LITERAL___volatile__:
									case LITERAL___volatile:
									case LITERAL___global:
									case LITERAL___thread:
									case LITERAL___symbolic:
									case LITERAL___hidden:
									case LITERAL_constexpr:
									case LITERAL_thread_local:
									case LITERAL__TYPE_QUALIFIER__:
									case LITERAL__STORAGE_CLASS_SPECIFIER__:
									{
										break;
									}
									default:
									{
										matchError=true;if (matchError) {break guess161;}
									}
									}
									}
									{
									switch ( LA(1)) {
									case LITERAL_typedef:
									case LITERAL_extern:
									case LITERAL_friend:
									case LITERAL_auto:
									case LITERAL_register:
									case LITERAL_static:
									case LITERAL_mutable:
									case LITERAL_const:
									case LITERAL___const__:
									case LITERAL___const:
									case LITERAL_const_cast:
									case LITERAL_volatile:
									case LITERAL___volatile__:
									case LITERAL___volatile:
									case LITERAL___global:
									case LITERAL___thread:
									case LITERAL___symbolic:
									case LITERAL___hidden:
									case LITERAL_constexpr:
									case LITERAL_thread_local:
									case LITERAL__TYPE_QUALIFIER__:
									case LITERAL__STORAGE_CLASS_SPECIFIER__:
									{
										decl_specifiers_before_type_g();
										if (matchError) {break guess161;}
										break;
									}
									case LITERAL_enum:
									{
										break;
									}
									default:
									{
										matchError=true;if (matchError) {break guess161;}
									}
									}
									}
									enum_def_head_g();
									if (matchError) {break guess161;}
									}
								synPredMatched161 = true;
								break;} // guess161
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m161);
								guessing--;
							}
							if ( synPredMatched161 ) {
								{
								switch ( LA(1)) {
								case LITERAL___extension__:
								{
									consume();
									break;
								}
								case ELLIPSIS:
								case LPAREN:
								case LSQUARE:
								case STAR:
								case AND:
								case AMPERSAND:
								case TILDE:
								case SCOPE:
								case IDENT:
								case LITERAL_OPERATOR:
								case LITERAL_typeof:
								case LITERAL___typeof__:
								case LITERAL___typeof:
								case LITERAL_typedef:
								case LITERAL_enum:
								case LITERAL_namespace:
								case LITERAL_extern:
								case LITERAL_inline:
								case LITERAL__inline:
								case LITERAL___inline__:
								case LITERAL___inline:
								case LITERAL_virtual:
								case LITERAL_explicit:
								case LITERAL_friend:
								case LITERAL__stdcall:
								case LITERAL___stdcall:
								case LITERAL_typename:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_const_cast:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL_char:
								case LITERAL_wchar_t:
								case LITERAL_bool:
								case LITERAL_short:
								case LITERAL_int:
								case LITERAL_long:
								case LITERAL_signed:
								case LITERAL___signed__:
								case LITERAL___signed:
								case LITERAL_unsigned:
								case LITERAL___unsigned__:
								case LITERAL_float:
								case LITERAL_double:
								case LITERAL_void:
								case LITERAL__declspec:
								case LITERAL___declspec:
								case LITERAL_class:
								case LITERAL_struct:
								case LITERAL_union:
								case LITERAL_this:
								case LITERAL_true:
								case LITERAL_false:
								case LITERAL_using:
								case LITERAL__cdecl:
								case LITERAL___cdecl:
								case LITERAL__near:
								case LITERAL___near:
								case LITERAL__far:
								case LITERAL___far:
								case LITERAL___interrupt:
								case LITERAL_pascal:
								case LITERAL__pascal:
								case LITERAL___pascal:
								case LITERAL__int64:
								case LITERAL___int64:
								case LITERAL___w64:
								case LITERAL___attribute__:
								case LITERAL___complex__:
								case LITERAL___global:
								case LITERAL__Bool:
								case LITERAL__Complex:
								case LITERAL___thread:
								case LITERAL___attribute:
								case LITERAL__Imaginary:
								case LITERAL_bit:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_final:
								case LITERAL_override:
								case LITERAL_constexpr:
								case LITERAL_decltype:
								case LITERAL_thread_local:
								case LITERAL_static_assert:
								case LITERAL_alignas:
								case LITERAL_char16_t:
								case LITERAL_char32_t:
								case LITERAL___decltype:
								case LITERAL___complex:
								case LITERAL___forceinline:
								case LITERAL___clrcall:
								case LITERAL__Noreturn:
								case LITERAL___builtin_va_list:
								case LITERAL__BUILT_IN_TYPE__:
								case LITERAL__TYPE_QUALIFIER__:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break loop375;}
								}
								}
								}
								declaration_g(declOther);
								if (matchError) {break loop375;}
							}
							else {
								boolean synPredMatched166 = false;
								if (((_tokenSet_10.member(LA1_288)) && (_tokenSet_11.member(LA2_288)))) {
									int _m166 = mark();
									guessing++;
									guess166:  while (true) {
										{
										{
										switch ( LA(1)) {
										case LITERAL___extension__:
										{
											consume();
											break;
										}
										case LITERAL_typedef:
										case LITERAL_enum:
										case LITERAL_extern:
										case LITERAL_friend:
										case LITERAL_auto:
										case LITERAL_register:
										case LITERAL_static:
										case LITERAL_mutable:
										case LITERAL_const:
										case LITERAL___const__:
										case LITERAL___const:
										case LITERAL_const_cast:
										case LITERAL_volatile:
										case LITERAL___volatile__:
										case LITERAL___volatile:
										case LITERAL___global:
										case LITERAL___thread:
										case LITERAL___symbolic:
										case LITERAL___hidden:
										case LITERAL_constexpr:
										case LITERAL_thread_local:
										case LITERAL__TYPE_QUALIFIER__:
										case LITERAL__STORAGE_CLASS_SPECIFIER__:
										{
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break guess166;}
										}
										}
										}
										{
										switch ( LA(1)) {
										case LITERAL_typedef:
										case LITERAL_extern:
										case LITERAL_friend:
										case LITERAL_auto:
										case LITERAL_register:
										case LITERAL_static:
										case LITERAL_mutable:
										case LITERAL_const:
										case LITERAL___const__:
										case LITERAL___const:
										case LITERAL_const_cast:
										case LITERAL_volatile:
										case LITERAL___volatile__:
										case LITERAL___volatile:
										case LITERAL___global:
										case LITERAL___thread:
										case LITERAL___symbolic:
										case LITERAL___hidden:
										case LITERAL_constexpr:
										case LITERAL_thread_local:
										case LITERAL__TYPE_QUALIFIER__:
										case LITERAL__STORAGE_CLASS_SPECIFIER__:
										{
											decl_specifiers_before_type_g();
											if (matchError) {break guess166;}
											break;
										}
										case LITERAL_enum:
										{
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break guess166;}
										}
										}
										}
										enum_fwd_head_g();
										if (matchError) {break guess166;}
										}
									synPredMatched166 = true;
									break;} // guess166
									if (matchError) {
									   resetMatchError();
									}
									rewind(_m166);
									guessing--;
								}
								if ( synPredMatched166 ) {
									{
									switch ( LA(1)) {
									case LITERAL___extension__:
									{
										consume();
										break;
									}
									case ELLIPSIS:
									case LPAREN:
									case LSQUARE:
									case STAR:
									case AND:
									case AMPERSAND:
									case TILDE:
									case SCOPE:
									case IDENT:
									case LITERAL_OPERATOR:
									case LITERAL_typeof:
									case LITERAL___typeof__:
									case LITERAL___typeof:
									case LITERAL_typedef:
									case LITERAL_enum:
									case LITERAL_namespace:
									case LITERAL_extern:
									case LITERAL_inline:
									case LITERAL__inline:
									case LITERAL___inline__:
									case LITERAL___inline:
									case LITERAL_virtual:
									case LITERAL_explicit:
									case LITERAL_friend:
									case LITERAL__stdcall:
									case LITERAL___stdcall:
									case LITERAL_typename:
									case LITERAL_auto:
									case LITERAL_register:
									case LITERAL_static:
									case LITERAL_mutable:
									case LITERAL_const:
									case LITERAL___const__:
									case LITERAL___const:
									case LITERAL_const_cast:
									case LITERAL_volatile:
									case LITERAL___volatile__:
									case LITERAL___volatile:
									case LITERAL_char:
									case LITERAL_wchar_t:
									case LITERAL_bool:
									case LITERAL_short:
									case LITERAL_int:
									case LITERAL_long:
									case LITERAL_signed:
									case LITERAL___signed__:
									case LITERAL___signed:
									case LITERAL_unsigned:
									case LITERAL___unsigned__:
									case LITERAL_float:
									case LITERAL_double:
									case LITERAL_void:
									case LITERAL__declspec:
									case LITERAL___declspec:
									case LITERAL_class:
									case LITERAL_struct:
									case LITERAL_union:
									case LITERAL_this:
									case LITERAL_true:
									case LITERAL_false:
									case LITERAL_using:
									case LITERAL__cdecl:
									case LITERAL___cdecl:
									case LITERAL__near:
									case LITERAL___near:
									case LITERAL__far:
									case LITERAL___far:
									case LITERAL___interrupt:
									case LITERAL_pascal:
									case LITERAL__pascal:
									case LITERAL___pascal:
									case LITERAL__int64:
									case LITERAL___int64:
									case LITERAL___w64:
									case LITERAL___attribute__:
									case LITERAL___complex__:
									case LITERAL___global:
									case LITERAL__Bool:
									case LITERAL__Complex:
									case LITERAL___thread:
									case LITERAL___attribute:
									case LITERAL__Imaginary:
									case LITERAL_bit:
									case LITERAL___symbolic:
									case LITERAL___hidden:
									case LITERAL_final:
									case LITERAL_override:
									case LITERAL_constexpr:
									case LITERAL_decltype:
									case LITERAL_thread_local:
									case LITERAL_static_assert:
									case LITERAL_alignas:
									case LITERAL_char16_t:
									case LITERAL_char32_t:
									case LITERAL___decltype:
									case LITERAL___complex:
									case LITERAL___forceinline:
									case LITERAL___clrcall:
									case LITERAL__Noreturn:
									case LITERAL___builtin_va_list:
									case LITERAL__BUILT_IN_TYPE__:
									case LITERAL__TYPE_QUALIFIER__:
									case LITERAL__STORAGE_CLASS_SPECIFIER__:
									{
										break;
									}
									default:
									{
										matchError=true;if (matchError) {break loop375;}
									}
									}
									}
									declaration_g(declOther);
									if (matchError) {break loop375;}
								}
								else {
									boolean synPredMatched172 = false;
									if ((((_tokenSet_12.member(LA1_288)) && (_tokenSet_13.member(LA2_288)))&&(isCPlusPlus()))) {
										int _m172 = mark();
										guessing++;
										guess172:  while (true) {
											{
											{
											switch ( LA(1)) {
											case LITERAL_template:
											case LITERAL_export:
											{
												template_head_g();
												if (matchError) {break guess172;}
												break;
											}
											case LPAREN:
											case LSQUARE:
											case TILDE:
											case SCOPE:
											case IDENT:
											case LITERAL_inline:
											case LITERAL__inline:
											case LITERAL___inline__:
											case LITERAL___inline:
											case LITERAL_virtual:
											case LITERAL_friend:
											case LITERAL___attribute__:
											case LITERAL___attribute:
											case LITERAL_final:
											case LITERAL_override:
											case LITERAL_decltype:
											case LITERAL___decltype:
											case LITERAL___forceinline:
											{
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess172;}
											}
											}
											}
											dtor_head_g(true);
											if (matchError) {break guess172;}
											{
											switch ( LA(1)) {
											case LCURLY:
											{
												consume();
												break;
											}
											case ASSIGNEQUAL:
											{
												consume();
												{
												switch ( LA(1)) {
												case LITERAL_default:
												{
													consume();
													break;
												}
												case LITERAL_delete:
												{
													consume();
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess172;}
												}
												}
												}
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess172;}
											}
											}
											}
											}
										synPredMatched172 = true;
										break;} // guess172
										if (matchError) {
										   resetMatchError();
										}
										rewind(_m172);
										guessing--;
									}
									if ( synPredMatched172 ) {
										{
										switch ( LA(1)) {
										case LITERAL_template:
										case LITERAL_export:
										{
											template_head_g();
											if (matchError) {break loop375;}
											break;
										}
										case LPAREN:
										case LSQUARE:
										case TILDE:
										case SCOPE:
										case IDENT:
										case LITERAL_inline:
										case LITERAL__inline:
										case LITERAL___inline__:
										case LITERAL___inline:
										case LITERAL_virtual:
										case LITERAL_friend:
										case LITERAL___attribute__:
										case LITERAL___attribute:
										case LITERAL_final:
										case LITERAL_override:
										case LITERAL_decltype:
										case LITERAL___decltype:
										case LITERAL___forceinline:
										{
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break loop375;}
										}
										}
										}
										dtor_head_g(true);
										if (matchError) {break loop375;}
										{
										switch ( LA(1)) {
										case LCURLY:
										{
											dtor_body_g();
											if (matchError) {break loop375;}
											break;
										}
										case ASSIGNEQUAL:
										{
											AST tmp1511_AST = null;
											consume();
											{
											switch ( LA(1)) {
											case LITERAL_default:
											{
												AST tmp1512_AST = null;
												consume();
												break;
											}
											case LITERAL_delete:
											{
												AST tmp1513_AST = null;
												consume();
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break loop375;}
											}
											}
											}
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break loop375;}
										}
										}
										}
									}
									else {
										boolean synPredMatched178 = false;
										if ((((_tokenSet_16.member(LA1_288)) && (_tokenSet_17.member(LA2_288)))&&(isCPlusPlus()))) {
											int _m178 = mark();
											guessing++;
											guess178:  while (true) {
												{
												{
												int LA1_289 = LA(1);
												int LA2_289 = LA(2);
												
												if ((true) && (true)) {
													ctor_decl_spec_g();
													if (matchError) {break guess178;}
												}
												else {
												}
												
												}
												if (!(qualifiedItemIsOneOf(qiCtor)))
												{matchError=true;
												if (matchError) {break guess178;}}
												}
											synPredMatched178 = true;
											break;} // guess178
											if (matchError) {
											   resetMatchError();
											}
											rewind(_m178);
											guessing--;
										}
										if ( synPredMatched178 ) {
											ctor_definition_g();
											if (matchError) {break loop375;}
										}
										else {
											boolean synPredMatched182 = false;
											if ((((_tokenSet_18.member(LA1_288)) && (_tokenSet_19.member(LA2_288)))&&(isCPlusPlus()))) {
												int _m182 = mark();
												guessing++;
												guess182:  while (true) {
													{
													{
													switch ( LA(1)) {
													case LITERAL_template:
													case LITERAL_export:
													{
														template_head_g();
														if (matchError) {break guess182;}
														break;
													}
													case SCOPE:
													case IDENT:
													case LITERAL_OPERATOR:
													case LITERAL_inline:
													case LITERAL__inline:
													case LITERAL___inline__:
													case LITERAL___inline:
													case LITERAL_final:
													case LITERAL_override:
													case LITERAL_constexpr:
													case LITERAL_decltype:
													case LITERAL___decltype:
													case LITERAL___forceinline:
													{
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess182;}
													}
													}
													}
													{
													switch ( LA(1)) {
													case LITERAL_inline:
													case LITERAL__inline:
													case LITERAL___inline__:
													case LITERAL___inline:
													case LITERAL___forceinline:
													{
														literal_inline_g();
														if (matchError) {break guess182;}
														break;
													}
													case LITERAL_constexpr:
													{
														consume();
														break;
													}
													case SCOPE:
													case IDENT:
													case LITERAL_OPERATOR:
													case LITERAL_final:
													case LITERAL_override:
													case LITERAL_decltype:
													case LITERAL___decltype:
													{
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess182;}
													}
													}
													}
													scope_override_g();
													if (matchError) {break guess182;}
													conversion_function_decl_or_def_g();
													if (matchError) {break guess182;}
													}
												synPredMatched182 = true;
												break;} // guess182
												if (matchError) {
												   resetMatchError();
												}
												rewind(_m182);
												guessing--;
											}
											if ( synPredMatched182 ) {
												{
												switch ( LA(1)) {
												case LITERAL_template:
												case LITERAL_export:
												{
													template_head_g();
													if (matchError) {break loop375;}
													break;
												}
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL_inline:
												case LITERAL__inline:
												case LITERAL___inline__:
												case LITERAL___inline:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_constexpr:
												case LITERAL_decltype:
												case LITERAL___decltype:
												case LITERAL___forceinline:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break loop375;}
												}
												}
												}
												{
												switch ( LA(1)) {
												case LITERAL_inline:
												case LITERAL__inline:
												case LITERAL___inline__:
												case LITERAL___inline:
												case LITERAL___forceinline:
												{
													literal_inline_g();
													if (matchError) {break loop375;}
													break;
												}
												case LITERAL_constexpr:
												{
													AST tmp1514_AST = null;
													consume();
													break;
												}
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_decltype:
												case LITERAL___decltype:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break loop375;}
												}
												}
												}
												s=scope_override_g();
												if (matchError) {break loop375;}
												definition=conversion_function_decl_or_def_g();
												if (matchError) {break loop375;}
											}
											else {
												boolean synPredMatched190 = false;
												if (((_tokenSet_10.member(LA1_288)) && (_tokenSet_11.member(LA2_288)))) {
													int _m190 = mark();
													guessing++;
													guess190:  while (true) {
														{
														{
														switch ( LA(1)) {
														case LITERAL___extension__:
														{
															consume();
															break;
														}
														case LSQUARE:
														case SCOPE:
														case IDENT:
														case LITERAL_typeof:
														case LITERAL___typeof__:
														case LITERAL___typeof:
														case LITERAL_typedef:
														case LITERAL_enum:
														case LITERAL_extern:
														case LITERAL_inline:
														case LITERAL__inline:
														case LITERAL___inline__:
														case LITERAL___inline:
														case LITERAL_virtual:
														case LITERAL_explicit:
														case LITERAL_friend:
														case LITERAL__stdcall:
														case LITERAL___stdcall:
														case LITERAL_typename:
														case LITERAL_auto:
														case LITERAL_register:
														case LITERAL_static:
														case LITERAL_mutable:
														case LITERAL_const:
														case LITERAL___const__:
														case LITERAL___const:
														case LITERAL_const_cast:
														case LITERAL_volatile:
														case LITERAL___volatile__:
														case LITERAL___volatile:
														case LITERAL_char:
														case LITERAL_wchar_t:
														case LITERAL_bool:
														case LITERAL_short:
														case LITERAL_int:
														case LITERAL_long:
														case LITERAL_signed:
														case LITERAL___signed__:
														case LITERAL___signed:
														case LITERAL_unsigned:
														case LITERAL___unsigned__:
														case LITERAL_float:
														case LITERAL_double:
														case LITERAL_void:
														case LITERAL__declspec:
														case LITERAL___declspec:
														case LITERAL_class:
														case LITERAL_struct:
														case LITERAL_union:
														case LITERAL__int64:
														case LITERAL___int64:
														case LITERAL___w64:
														case LITERAL___attribute__:
														case LITERAL___complex__:
														case LITERAL___global:
														case LITERAL__Bool:
														case LITERAL__Complex:
														case LITERAL___thread:
														case LITERAL___attribute:
														case LITERAL__Imaginary:
														case LITERAL_bit:
														case LITERAL___symbolic:
														case LITERAL___hidden:
														case LITERAL_final:
														case LITERAL_override:
														case LITERAL_constexpr:
														case LITERAL_decltype:
														case LITERAL_thread_local:
														case LITERAL_alignas:
														case LITERAL_char16_t:
														case LITERAL_char32_t:
														case LITERAL___decltype:
														case LITERAL___complex:
														case LITERAL___forceinline:
														case LITERAL___clrcall:
														case LITERAL__Noreturn:
														case LITERAL___builtin_va_list:
														case LITERAL__BUILT_IN_TYPE__:
														case LITERAL__TYPE_QUALIFIER__:
														case LITERAL__STORAGE_CLASS_SPECIFIER__:
														{
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess190;}
														}
														}
														}
														{
														int LA1_290 = LA(1);
														int LA2_290 = LA(2);
														
														if ((_tokenSet_21.member(LA1_290)) && (LA2_290==LPAREN||LA2_290==LSQUARE)) {
															function_attribute_specification_g();
															if (matchError) {break guess190;}
														}
														else if ((_tokenSet_22.member(LA1_290)) && (_tokenSet_23.member(LA2_290))) {
														}
														else {
															matchError=true;if (matchError) {break guess190;}
														}
														
														}
														declaration_specifiers_g(false, false);
														if (matchError) {break guess190;}
														{
														int LA1_291 = LA(1);
														int LA2_291 = LA(2);
														
														if ((_tokenSet_21.member(LA1_291)) && (LA2_291==LPAREN||LA2_291==LSQUARE)) {
															function_attribute_specification_g();
															if (matchError) {break guess190;}
														}
														else if ((_tokenSet_24.member(LA1_291)) && (_tokenSet_25.member(LA2_291))) {
														}
														else {
															matchError=true;if (matchError) {break guess190;}
														}
														
														}
														function_declarator_g(false, false, true);
														if (matchError) {break guess190;}
														{
														switch ( LA(1)) {
														case EOF:
														{
															consume();
															break;
														}
														case SEMICOLON:
														{
															consume();
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess190;}
														}
														}
														}
														}
													synPredMatched190 = true;
													break;} // guess190
													if (matchError) {
													   resetMatchError();
													}
													rewind(_m190);
													guessing--;
												}
												if ( synPredMatched190 ) {
													{
													switch ( LA(1)) {
													case LITERAL___extension__:
													{
														consume();
														break;
													}
													case ELLIPSIS:
													case LPAREN:
													case LSQUARE:
													case STAR:
													case AND:
													case AMPERSAND:
													case TILDE:
													case SCOPE:
													case IDENT:
													case LITERAL_OPERATOR:
													case LITERAL_typeof:
													case LITERAL___typeof__:
													case LITERAL___typeof:
													case LITERAL_typedef:
													case LITERAL_enum:
													case LITERAL_namespace:
													case LITERAL_extern:
													case LITERAL_inline:
													case LITERAL__inline:
													case LITERAL___inline__:
													case LITERAL___inline:
													case LITERAL_virtual:
													case LITERAL_explicit:
													case LITERAL_friend:
													case LITERAL__stdcall:
													case LITERAL___stdcall:
													case LITERAL_typename:
													case LITERAL_auto:
													case LITERAL_register:
													case LITERAL_static:
													case LITERAL_mutable:
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL_char:
													case LITERAL_wchar_t:
													case LITERAL_bool:
													case LITERAL_short:
													case LITERAL_int:
													case LITERAL_long:
													case LITERAL_signed:
													case LITERAL___signed__:
													case LITERAL___signed:
													case LITERAL_unsigned:
													case LITERAL___unsigned__:
													case LITERAL_float:
													case LITERAL_double:
													case LITERAL_void:
													case LITERAL__declspec:
													case LITERAL___declspec:
													case LITERAL_class:
													case LITERAL_struct:
													case LITERAL_union:
													case LITERAL_this:
													case LITERAL_true:
													case LITERAL_false:
													case LITERAL_using:
													case LITERAL__cdecl:
													case LITERAL___cdecl:
													case LITERAL__near:
													case LITERAL___near:
													case LITERAL__far:
													case LITERAL___far:
													case LITERAL___interrupt:
													case LITERAL_pascal:
													case LITERAL__pascal:
													case LITERAL___pascal:
													case LITERAL__int64:
													case LITERAL___int64:
													case LITERAL___w64:
													case LITERAL___attribute__:
													case LITERAL___complex__:
													case LITERAL___global:
													case LITERAL__Bool:
													case LITERAL__Complex:
													case LITERAL___thread:
													case LITERAL___attribute:
													case LITERAL__Imaginary:
													case LITERAL_bit:
													case LITERAL___symbolic:
													case LITERAL___hidden:
													case LITERAL_final:
													case LITERAL_override:
													case LITERAL_constexpr:
													case LITERAL_decltype:
													case LITERAL_thread_local:
													case LITERAL_static_assert:
													case LITERAL_alignas:
													case LITERAL_char16_t:
													case LITERAL_char32_t:
													case LITERAL___decltype:
													case LITERAL___complex:
													case LITERAL___forceinline:
													case LITERAL___clrcall:
													case LITERAL__Noreturn:
													case LITERAL___builtin_va_list:
													case LITERAL__BUILT_IN_TYPE__:
													case LITERAL__TYPE_QUALIFIER__:
													case LITERAL__STORAGE_CLASS_SPECIFIER__:
													{
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break loop375;}
													}
													}
													}
													{
													int LA1_292 = LA(1);
													int LA2_292 = LA(2);
													
													if ((_tokenSet_21.member(LA1_292)) && (LA2_292==LPAREN||LA2_292==LSQUARE)) {
														function_attribute_specification_g();
														if (matchError) {break loop375;}
													}
													else if ((_tokenSet_26.member(LA1_292)) && (_tokenSet_27.member(LA2_292))) {
													}
													else {
														matchError=true;if (matchError) {break loop375;}
													}
													
													}
													declaration_g(declOther);
													if (matchError) {break loop375;}
												}
												else {
													boolean synPredMatched198 = false;
													if (((_tokenSet_10.member(LA1_288)) && (_tokenSet_11.member(LA2_288)))) {
														int _m198 = mark();
														guessing++;
														guess198:  while (true) {
															{
															{
															switch ( LA(1)) {
															case LITERAL___extension__:
															{
																consume();
																break;
															}
															case LSQUARE:
															case SCOPE:
															case IDENT:
															case LITERAL_typeof:
															case LITERAL___typeof__:
															case LITERAL___typeof:
															case LITERAL_typedef:
															case LITERAL_enum:
															case LITERAL_extern:
															case LITERAL_inline:
															case LITERAL__inline:
															case LITERAL___inline__:
															case LITERAL___inline:
															case LITERAL_virtual:
															case LITERAL_explicit:
															case LITERAL_friend:
															case LITERAL__stdcall:
															case LITERAL___stdcall:
															case LITERAL_typename:
															case LITERAL_auto:
															case LITERAL_register:
															case LITERAL_static:
															case LITERAL_mutable:
															case LITERAL_const:
															case LITERAL___const__:
															case LITERAL___const:
															case LITERAL_const_cast:
															case LITERAL_volatile:
															case LITERAL___volatile__:
															case LITERAL___volatile:
															case LITERAL_char:
															case LITERAL_wchar_t:
															case LITERAL_bool:
															case LITERAL_short:
															case LITERAL_int:
															case LITERAL_long:
															case LITERAL_signed:
															case LITERAL___signed__:
															case LITERAL___signed:
															case LITERAL_unsigned:
															case LITERAL___unsigned__:
															case LITERAL_float:
															case LITERAL_double:
															case LITERAL_void:
															case LITERAL__declspec:
															case LITERAL___declspec:
															case LITERAL_class:
															case LITERAL_struct:
															case LITERAL_union:
															case LITERAL__int64:
															case LITERAL___int64:
															case LITERAL___w64:
															case LITERAL___attribute__:
															case LITERAL___complex__:
															case LITERAL___global:
															case LITERAL__Bool:
															case LITERAL__Complex:
															case LITERAL___thread:
															case LITERAL___attribute:
															case LITERAL__Imaginary:
															case LITERAL_bit:
															case LITERAL___symbolic:
															case LITERAL___hidden:
															case LITERAL_final:
															case LITERAL_override:
															case LITERAL_constexpr:
															case LITERAL_decltype:
															case LITERAL_thread_local:
															case LITERAL_alignas:
															case LITERAL_char16_t:
															case LITERAL_char32_t:
															case LITERAL___decltype:
															case LITERAL___complex:
															case LITERAL___forceinline:
															case LITERAL___clrcall:
															case LITERAL__Noreturn:
															case LITERAL___builtin_va_list:
															case LITERAL__BUILT_IN_TYPE__:
															case LITERAL__TYPE_QUALIFIER__:
															case LITERAL__STORAGE_CLASS_SPECIFIER__:
															{
																break;
															}
															default:
															{
																matchError=true;if (matchError) {break guess198;}
															}
															}
															}
															{
															int LA1_293 = LA(1);
															int LA2_293 = LA(2);
															
															if ((_tokenSet_21.member(LA1_293)) && (LA2_293==LPAREN||LA2_293==LSQUARE)) {
																function_attribute_specification_g();
																if (matchError) {break guess198;}
															}
															else if ((_tokenSet_22.member(LA1_293)) && (_tokenSet_23.member(LA2_293))) {
															}
															else {
																matchError=true;if (matchError) {break guess198;}
															}
															
															}
															declaration_specifiers_g(false, false);
															if (matchError) {break guess198;}
															{
															int LA1_294 = LA(1);
															int LA2_294 = LA(2);
															
															if ((_tokenSet_21.member(LA1_294)) && (LA2_294==LPAREN||LA2_294==LSQUARE)) {
																function_attribute_specification_g();
																if (matchError) {break guess198;}
															}
															else if ((_tokenSet_24.member(LA1_294)) && (_tokenSet_25.member(LA2_294))) {
															}
															else {
																matchError=true;if (matchError) {break guess198;}
															}
															
															}
															function_declarator_g(false, false, false);
															if (matchError) {break guess198;}
															{
															switch ( LA(1)) {
															case EOF:
															{
																consume();
																break;
															}
															case SEMICOLON:
															{
																consume();
																break;
															}
															default:
															{
																matchError=true;if (matchError) {break guess198;}
															}
															}
															}
															}
														synPredMatched198 = true;
														break;} // guess198
														if (matchError) {
														   resetMatchError();
														}
														rewind(_m198);
														guessing--;
													}
													if ( synPredMatched198 ) {
														{
														switch ( LA(1)) {
														case LITERAL___extension__:
														{
															consume();
															break;
														}
														case ELLIPSIS:
														case LPAREN:
														case LSQUARE:
														case STAR:
														case AND:
														case AMPERSAND:
														case TILDE:
														case SCOPE:
														case IDENT:
														case LITERAL_OPERATOR:
														case LITERAL_typeof:
														case LITERAL___typeof__:
														case LITERAL___typeof:
														case LITERAL_typedef:
														case LITERAL_enum:
														case LITERAL_namespace:
														case LITERAL_extern:
														case LITERAL_inline:
														case LITERAL__inline:
														case LITERAL___inline__:
														case LITERAL___inline:
														case LITERAL_virtual:
														case LITERAL_explicit:
														case LITERAL_friend:
														case LITERAL__stdcall:
														case LITERAL___stdcall:
														case LITERAL_typename:
														case LITERAL_auto:
														case LITERAL_register:
														case LITERAL_static:
														case LITERAL_mutable:
														case LITERAL_const:
														case LITERAL___const__:
														case LITERAL___const:
														case LITERAL_const_cast:
														case LITERAL_volatile:
														case LITERAL___volatile__:
														case LITERAL___volatile:
														case LITERAL_char:
														case LITERAL_wchar_t:
														case LITERAL_bool:
														case LITERAL_short:
														case LITERAL_int:
														case LITERAL_long:
														case LITERAL_signed:
														case LITERAL___signed__:
														case LITERAL___signed:
														case LITERAL_unsigned:
														case LITERAL___unsigned__:
														case LITERAL_float:
														case LITERAL_double:
														case LITERAL_void:
														case LITERAL__declspec:
														case LITERAL___declspec:
														case LITERAL_class:
														case LITERAL_struct:
														case LITERAL_union:
														case LITERAL_this:
														case LITERAL_true:
														case LITERAL_false:
														case LITERAL_using:
														case LITERAL__cdecl:
														case LITERAL___cdecl:
														case LITERAL__near:
														case LITERAL___near:
														case LITERAL__far:
														case LITERAL___far:
														case LITERAL___interrupt:
														case LITERAL_pascal:
														case LITERAL__pascal:
														case LITERAL___pascal:
														case LITERAL__int64:
														case LITERAL___int64:
														case LITERAL___w64:
														case LITERAL___attribute__:
														case LITERAL___complex__:
														case LITERAL___global:
														case LITERAL__Bool:
														case LITERAL__Complex:
														case LITERAL___thread:
														case LITERAL___attribute:
														case LITERAL__Imaginary:
														case LITERAL_bit:
														case LITERAL___symbolic:
														case LITERAL___hidden:
														case LITERAL_final:
														case LITERAL_override:
														case LITERAL_constexpr:
														case LITERAL_decltype:
														case LITERAL_thread_local:
														case LITERAL_static_assert:
														case LITERAL_alignas:
														case LITERAL_char16_t:
														case LITERAL_char32_t:
														case LITERAL___decltype:
														case LITERAL___complex:
														case LITERAL___forceinline:
														case LITERAL___clrcall:
														case LITERAL__Noreturn:
														case LITERAL___builtin_va_list:
														case LITERAL__BUILT_IN_TYPE__:
														case LITERAL__TYPE_QUALIFIER__:
														case LITERAL__STORAGE_CLASS_SPECIFIER__:
														{
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break loop375;}
														}
														}
														}
														{
														int LA1_295 = LA(1);
														int LA2_295 = LA(2);
														
														if ((_tokenSet_21.member(LA1_295)) && (LA2_295==LPAREN||LA2_295==LSQUARE)) {
															function_attribute_specification_g();
															if (matchError) {break loop375;}
														}
														else if ((_tokenSet_26.member(LA1_295)) && (_tokenSet_27.member(LA2_295))) {
														}
														else {
															matchError=true;if (matchError) {break loop375;}
														}
														
														}
														declaration_g(declOther);
														if (matchError) {break loop375;}
													}
													else {
														boolean synPredMatched206 = false;
														if (((_tokenSet_10.member(LA1_288)) && (_tokenSet_11.member(LA2_288)))) {
															int _m206 = mark();
															guessing++;
															guess206:  while (true) {
																{
																{
																switch ( LA(1)) {
																case LITERAL___extension__:
																{
																	consume();
																	break;
																}
																case LSQUARE:
																case SCOPE:
																case IDENT:
																case LITERAL_typeof:
																case LITERAL___typeof__:
																case LITERAL___typeof:
																case LITERAL_typedef:
																case LITERAL_enum:
																case LITERAL_extern:
																case LITERAL_inline:
																case LITERAL__inline:
																case LITERAL___inline__:
																case LITERAL___inline:
																case LITERAL_virtual:
																case LITERAL_explicit:
																case LITERAL_friend:
																case LITERAL__stdcall:
																case LITERAL___stdcall:
																case LITERAL_typename:
																case LITERAL_auto:
																case LITERAL_register:
																case LITERAL_static:
																case LITERAL_mutable:
																case LITERAL_const:
																case LITERAL___const__:
																case LITERAL___const:
																case LITERAL_const_cast:
																case LITERAL_volatile:
																case LITERAL___volatile__:
																case LITERAL___volatile:
																case LITERAL_char:
																case LITERAL_wchar_t:
																case LITERAL_bool:
																case LITERAL_short:
																case LITERAL_int:
																case LITERAL_long:
																case LITERAL_signed:
																case LITERAL___signed__:
																case LITERAL___signed:
																case LITERAL_unsigned:
																case LITERAL___unsigned__:
																case LITERAL_float:
																case LITERAL_double:
																case LITERAL_void:
																case LITERAL__declspec:
																case LITERAL___declspec:
																case LITERAL_class:
																case LITERAL_struct:
																case LITERAL_union:
																case LITERAL__int64:
																case LITERAL___int64:
																case LITERAL___w64:
																case LITERAL___attribute__:
																case LITERAL___complex__:
																case LITERAL___global:
																case LITERAL__Bool:
																case LITERAL__Complex:
																case LITERAL___thread:
																case LITERAL___attribute:
																case LITERAL__Imaginary:
																case LITERAL_bit:
																case LITERAL___symbolic:
																case LITERAL___hidden:
																case LITERAL_final:
																case LITERAL_override:
																case LITERAL_constexpr:
																case LITERAL_decltype:
																case LITERAL_thread_local:
																case LITERAL_alignas:
																case LITERAL_char16_t:
																case LITERAL_char32_t:
																case LITERAL___decltype:
																case LITERAL___complex:
																case LITERAL___forceinline:
																case LITERAL___clrcall:
																case LITERAL__Noreturn:
																case LITERAL___builtin_va_list:
																case LITERAL__BUILT_IN_TYPE__:
																case LITERAL__TYPE_QUALIFIER__:
																case LITERAL__STORAGE_CLASS_SPECIFIER__:
																{
																	break;
																}
																default:
																{
																	matchError=true;if (matchError) {break guess206;}
																}
																}
																}
																{
																int LA1_296 = LA(1);
																int LA2_296 = LA(2);
																
																if ((_tokenSet_21.member(LA1_296)) && (LA2_296==LPAREN||LA2_296==LSQUARE)) {
																	function_attribute_specification_g();
																	if (matchError) {break guess206;}
																}
																else if ((_tokenSet_22.member(LA1_296)) && (_tokenSet_23.member(LA2_296))) {
																}
																else {
																	matchError=true;if (matchError) {break guess206;}
																}
																
																}
																declaration_specifiers_g(false, true);
																if (matchError) {break guess206;}
																{
																int LA1_297 = LA(1);
																int LA2_297 = LA(2);
																
																if ((_tokenSet_21.member(LA1_297)) && (LA2_297==LPAREN||LA2_297==LSQUARE)) {
																	function_attribute_specification_g();
																	if (matchError) {break guess206;}
																}
																else if ((_tokenSet_24.member(LA1_297)) && (_tokenSet_25.member(LA2_297))) {
																}
																else {
																	matchError=true;if (matchError) {break guess206;}
																}
																
																}
																function_declarator_g(false, true, false);
																if (matchError) {break guess206;}
																{
																switch ( LA(1)) {
																case EOF:
																{
																	consume();
																	break;
																}
																case SEMICOLON:
																{
																	consume();
																	break;
																}
																default:
																{
																	matchError=true;if (matchError) {break guess206;}
																}
																}
																}
																}
															synPredMatched206 = true;
															break;} // guess206
															if (matchError) {
															   resetMatchError();
															}
															rewind(_m206);
															guessing--;
														}
														if ( synPredMatched206 ) {
															{
															switch ( LA(1)) {
															case LITERAL___extension__:
															{
																consume();
																break;
															}
															case ELLIPSIS:
															case LPAREN:
															case LSQUARE:
															case STAR:
															case AND:
															case AMPERSAND:
															case TILDE:
															case SCOPE:
															case IDENT:
															case LITERAL_OPERATOR:
															case LITERAL_typeof:
															case LITERAL___typeof__:
															case LITERAL___typeof:
															case LITERAL_typedef:
															case LITERAL_enum:
															case LITERAL_namespace:
															case LITERAL_extern:
															case LITERAL_inline:
															case LITERAL__inline:
															case LITERAL___inline__:
															case LITERAL___inline:
															case LITERAL_virtual:
															case LITERAL_explicit:
															case LITERAL_friend:
															case LITERAL__stdcall:
															case LITERAL___stdcall:
															case LITERAL_typename:
															case LITERAL_auto:
															case LITERAL_register:
															case LITERAL_static:
															case LITERAL_mutable:
															case LITERAL_const:
															case LITERAL___const__:
															case LITERAL___const:
															case LITERAL_const_cast:
															case LITERAL_volatile:
															case LITERAL___volatile__:
															case LITERAL___volatile:
															case LITERAL_char:
															case LITERAL_wchar_t:
															case LITERAL_bool:
															case LITERAL_short:
															case LITERAL_int:
															case LITERAL_long:
															case LITERAL_signed:
															case LITERAL___signed__:
															case LITERAL___signed:
															case LITERAL_unsigned:
															case LITERAL___unsigned__:
															case LITERAL_float:
															case LITERAL_double:
															case LITERAL_void:
															case LITERAL__declspec:
															case LITERAL___declspec:
															case LITERAL_class:
															case LITERAL_struct:
															case LITERAL_union:
															case LITERAL_this:
															case LITERAL_true:
															case LITERAL_false:
															case LITERAL_using:
															case LITERAL__cdecl:
															case LITERAL___cdecl:
															case LITERAL__near:
															case LITERAL___near:
															case LITERAL__far:
															case LITERAL___far:
															case LITERAL___interrupt:
															case LITERAL_pascal:
															case LITERAL__pascal:
															case LITERAL___pascal:
															case LITERAL__int64:
															case LITERAL___int64:
															case LITERAL___w64:
															case LITERAL___attribute__:
															case LITERAL___complex__:
															case LITERAL___global:
															case LITERAL__Bool:
															case LITERAL__Complex:
															case LITERAL___thread:
															case LITERAL___attribute:
															case LITERAL__Imaginary:
															case LITERAL_bit:
															case LITERAL___symbolic:
															case LITERAL___hidden:
															case LITERAL_final:
															case LITERAL_override:
															case LITERAL_constexpr:
															case LITERAL_decltype:
															case LITERAL_thread_local:
															case LITERAL_static_assert:
															case LITERAL_alignas:
															case LITERAL_char16_t:
															case LITERAL_char32_t:
															case LITERAL___decltype:
															case LITERAL___complex:
															case LITERAL___forceinline:
															case LITERAL___clrcall:
															case LITERAL__Noreturn:
															case LITERAL___builtin_va_list:
															case LITERAL__BUILT_IN_TYPE__:
															case LITERAL__TYPE_QUALIFIER__:
															case LITERAL__STORAGE_CLASS_SPECIFIER__:
															{
																break;
															}
															default:
															{
																matchError=true;if (matchError) {break loop375;}
															}
															}
															}
															{
															int LA1_298 = LA(1);
															int LA2_298 = LA(2);
															
															if ((_tokenSet_21.member(LA1_298)) && (LA2_298==LPAREN||LA2_298==LSQUARE)) {
																function_attribute_specification_g();
																if (matchError) {break loop375;}
															}
															else if ((_tokenSet_26.member(LA1_298)) && (_tokenSet_27.member(LA2_298))) {
															}
															else {
																matchError=true;if (matchError) {break loop375;}
															}
															
															}
															declaration_g(declOther);
															if (matchError) {break loop375;}
														}
														else {
															boolean synPredMatched214 = false;
															if (((_tokenSet_10.member(LA1_288)) && (_tokenSet_11.member(LA2_288)))) {
																int _m214 = mark();
																guessing++;
																guess214:  while (true) {
																	{
																	{
																	switch ( LA(1)) {
																	case LITERAL___extension__:
																	{
																		consume();
																		break;
																	}
																	case LSQUARE:
																	case LITERAL_extern:
																	case LITERAL___attribute__:
																	case LITERAL___attribute:
																	{
																		break;
																	}
																	default:
																	{
																		matchError=true;if (matchError) {break guess214;}
																	}
																	}
																	}
																	{
																	switch ( LA(1)) {
																	case LSQUARE:
																	case LITERAL___attribute__:
																	case LITERAL___attribute:
																	{
																		function_attribute_specification_g();
																		if (matchError) {break guess214;}
																		break;
																	}
																	case LITERAL_extern:
																	{
																		break;
																	}
																	default:
																	{
																		matchError=true;if (matchError) {break guess214;}
																	}
																	}
																	}
																	match(LITERAL_extern);
																	if (matchError) {break guess214;}
																	{
																	int LA1_299 = LA(1);
																	int LA2_299 = LA(2);
																	
																	if ((_tokenSet_21.member(LA1_299)) && (LA2_299==LPAREN||LA2_299==LSQUARE)) {
																		function_attribute_specification_g();
																		if (matchError) {break guess214;}
																	}
																	else if ((_tokenSet_24.member(LA1_299)) && (_tokenSet_25.member(LA2_299))) {
																	}
																	else {
																		matchError=true;if (matchError) {break guess214;}
																	}
																	
																	}
																	function_declarator_g(false, false, false);
																	if (matchError) {break guess214;}
																	{
																	switch ( LA(1)) {
																	case EOF:
																	{
																		consume();
																		break;
																	}
																	case SEMICOLON:
																	{
																		consume();
																		break;
																	}
																	default:
																	{
																		matchError=true;if (matchError) {break guess214;}
																	}
																	}
																	}
																	}
																synPredMatched214 = true;
																break;} // guess214
																if (matchError) {
																   resetMatchError();
																}
																rewind(_m214);
																guessing--;
															}
															if ( synPredMatched214 ) {
																{
																switch ( LA(1)) {
																case LITERAL___extension__:
																{
																	consume();
																	break;
																}
																case ELLIPSIS:
																case LPAREN:
																case LSQUARE:
																case STAR:
																case AND:
																case AMPERSAND:
																case TILDE:
																case SCOPE:
																case IDENT:
																case LITERAL_OPERATOR:
																case LITERAL_typeof:
																case LITERAL___typeof__:
																case LITERAL___typeof:
																case LITERAL_typedef:
																case LITERAL_enum:
																case LITERAL_namespace:
																case LITERAL_extern:
																case LITERAL_inline:
																case LITERAL__inline:
																case LITERAL___inline__:
																case LITERAL___inline:
																case LITERAL_virtual:
																case LITERAL_explicit:
																case LITERAL_friend:
																case LITERAL__stdcall:
																case LITERAL___stdcall:
																case LITERAL_typename:
																case LITERAL_auto:
																case LITERAL_register:
																case LITERAL_static:
																case LITERAL_mutable:
																case LITERAL_const:
																case LITERAL___const__:
																case LITERAL___const:
																case LITERAL_const_cast:
																case LITERAL_volatile:
																case LITERAL___volatile__:
																case LITERAL___volatile:
																case LITERAL_char:
																case LITERAL_wchar_t:
																case LITERAL_bool:
																case LITERAL_short:
																case LITERAL_int:
																case LITERAL_long:
																case LITERAL_signed:
																case LITERAL___signed__:
																case LITERAL___signed:
																case LITERAL_unsigned:
																case LITERAL___unsigned__:
																case LITERAL_float:
																case LITERAL_double:
																case LITERAL_void:
																case LITERAL__declspec:
																case LITERAL___declspec:
																case LITERAL_class:
																case LITERAL_struct:
																case LITERAL_union:
																case LITERAL_this:
																case LITERAL_true:
																case LITERAL_false:
																case LITERAL_using:
																case LITERAL__cdecl:
																case LITERAL___cdecl:
																case LITERAL__near:
																case LITERAL___near:
																case LITERAL__far:
																case LITERAL___far:
																case LITERAL___interrupt:
																case LITERAL_pascal:
																case LITERAL__pascal:
																case LITERAL___pascal:
																case LITERAL__int64:
																case LITERAL___int64:
																case LITERAL___w64:
																case LITERAL___attribute__:
																case LITERAL___complex__:
																case LITERAL___global:
																case LITERAL__Bool:
																case LITERAL__Complex:
																case LITERAL___thread:
																case LITERAL___attribute:
																case LITERAL__Imaginary:
																case LITERAL_bit:
																case LITERAL___symbolic:
																case LITERAL___hidden:
																case LITERAL_final:
																case LITERAL_override:
																case LITERAL_constexpr:
																case LITERAL_decltype:
																case LITERAL_thread_local:
																case LITERAL_static_assert:
																case LITERAL_alignas:
																case LITERAL_char16_t:
																case LITERAL_char32_t:
																case LITERAL___decltype:
																case LITERAL___complex:
																case LITERAL___forceinline:
																case LITERAL___clrcall:
																case LITERAL__Noreturn:
																case LITERAL___builtin_va_list:
																case LITERAL__BUILT_IN_TYPE__:
																case LITERAL__TYPE_QUALIFIER__:
																case LITERAL__STORAGE_CLASS_SPECIFIER__:
																{
																	break;
																}
																default:
																{
																	matchError=true;if (matchError) {break loop375;}
																}
																}
																}
																{
																int LA1_300 = LA(1);
																int LA2_300 = LA(2);
																
																if ((_tokenSet_21.member(LA1_300)) && (LA2_300==LPAREN||LA2_300==LSQUARE)) {
																	function_attribute_specification_g();
																	if (matchError) {break loop375;}
																}
																else if ((_tokenSet_26.member(LA1_300)) && (_tokenSet_27.member(LA2_300))) {
																}
																else {
																	matchError=true;if (matchError) {break loop375;}
																}
																
																}
																declaration_g(declExternFunction);
																if (matchError) {break loop375;}
															}
															else {
																boolean synPredMatched220 = false;
																if (((_tokenSet_10.member(LA1_288)) && (_tokenSet_11.member(LA2_288)))) {
																	int _m220 = mark();
																	guessing++;
																	guess220:  while (true) {
																		{
																		literal_ident_g();
																		if (matchError) {break guess220;}
																		match(LPAREN);
																		if (matchError) {break guess220;}
																		{
																		switch ( LA(1)) {
																		case LSQUARE:
																		case SCOPE:
																		case IDENT:
																		case LITERAL_typeof:
																		case LITERAL___typeof__:
																		case LITERAL___typeof:
																		case LITERAL_typedef:
																		case LITERAL_enum:
																		case LITERAL_extern:
																		case LITERAL_inline:
																		case LITERAL__inline:
																		case LITERAL___inline__:
																		case LITERAL___inline:
																		case LITERAL_virtual:
																		case LITERAL_explicit:
																		case LITERAL_friend:
																		case LITERAL__stdcall:
																		case LITERAL___stdcall:
																		case LITERAL_typename:
																		case LITERAL_auto:
																		case LITERAL_register:
																		case LITERAL_static:
																		case LITERAL_mutable:
																		case LITERAL_const:
																		case LITERAL___const__:
																		case LITERAL___const:
																		case LITERAL_const_cast:
																		case LITERAL_volatile:
																		case LITERAL___volatile__:
																		case LITERAL___volatile:
																		case LITERAL_char:
																		case LITERAL_wchar_t:
																		case LITERAL_bool:
																		case LITERAL_short:
																		case LITERAL_int:
																		case LITERAL_long:
																		case LITERAL_signed:
																		case LITERAL___signed__:
																		case LITERAL___signed:
																		case LITERAL_unsigned:
																		case LITERAL___unsigned__:
																		case LITERAL_float:
																		case LITERAL_double:
																		case LITERAL_void:
																		case LITERAL__declspec:
																		case LITERAL___declspec:
																		case LITERAL_class:
																		case LITERAL_struct:
																		case LITERAL_union:
																		case LITERAL__int64:
																		case LITERAL___int64:
																		case LITERAL___w64:
																		case LITERAL___attribute__:
																		case LITERAL___complex__:
																		case LITERAL___global:
																		case LITERAL__Bool:
																		case LITERAL__Complex:
																		case LITERAL___thread:
																		case LITERAL___attribute:
																		case LITERAL__Imaginary:
																		case LITERAL_bit:
																		case LITERAL___symbolic:
																		case LITERAL___hidden:
																		case LITERAL_final:
																		case LITERAL_override:
																		case LITERAL_constexpr:
																		case LITERAL_decltype:
																		case LITERAL_thread_local:
																		case LITERAL_alignas:
																		case LITERAL_char16_t:
																		case LITERAL_char32_t:
																		case LITERAL___decltype:
																		case LITERAL___complex:
																		case LITERAL___forceinline:
																		case LITERAL___clrcall:
																		case LITERAL__Noreturn:
																		case LITERAL___builtin_va_list:
																		case LITERAL__BUILT_IN_TYPE__:
																		case LITERAL__TYPE_QUALIFIER__:
																		case LITERAL__STORAGE_CLASS_SPECIFIER__:
																		{
																			simple_parameter_list_g();
																			if (matchError) {break guess220;}
																			break;
																		}
																		case RPAREN:
																		{
																			break;
																		}
																		default:
																		{
																			matchError=true;if (matchError) {break guess220;}
																		}
																		}
																		}
																		match(RPAREN);
																		if (matchError) {break guess220;}
																		{
																		switch ( LA(1)) {
																		case EOF:
																		{
																			consume();
																			break;
																		}
																		case SEMICOLON:
																		{
																			consume();
																			break;
																		}
																		default:
																		{
																			matchError=true;if (matchError) {break guess220;}
																		}
																		}
																		}
																		}
																	synPredMatched220 = true;
																	break;} // guess220
																	if (matchError) {
																	   resetMatchError();
																	}
																	rewind(_m220);
																	guessing--;
																}
																if ( synPredMatched220 ) {
																	{
																	switch ( LA(1)) {
																	case LITERAL___extension__:
																	{
																		consume();
																		break;
																	}
																	case ELLIPSIS:
																	case LPAREN:
																	case LSQUARE:
																	case STAR:
																	case AND:
																	case AMPERSAND:
																	case TILDE:
																	case SCOPE:
																	case IDENT:
																	case LITERAL_OPERATOR:
																	case LITERAL_typeof:
																	case LITERAL___typeof__:
																	case LITERAL___typeof:
																	case LITERAL_typedef:
																	case LITERAL_enum:
																	case LITERAL_namespace:
																	case LITERAL_extern:
																	case LITERAL_inline:
																	case LITERAL__inline:
																	case LITERAL___inline__:
																	case LITERAL___inline:
																	case LITERAL_virtual:
																	case LITERAL_explicit:
																	case LITERAL_friend:
																	case LITERAL__stdcall:
																	case LITERAL___stdcall:
																	case LITERAL_typename:
																	case LITERAL_auto:
																	case LITERAL_register:
																	case LITERAL_static:
																	case LITERAL_mutable:
																	case LITERAL_const:
																	case LITERAL___const__:
																	case LITERAL___const:
																	case LITERAL_const_cast:
																	case LITERAL_volatile:
																	case LITERAL___volatile__:
																	case LITERAL___volatile:
																	case LITERAL_char:
																	case LITERAL_wchar_t:
																	case LITERAL_bool:
																	case LITERAL_short:
																	case LITERAL_int:
																	case LITERAL_long:
																	case LITERAL_signed:
																	case LITERAL___signed__:
																	case LITERAL___signed:
																	case LITERAL_unsigned:
																	case LITERAL___unsigned__:
																	case LITERAL_float:
																	case LITERAL_double:
																	case LITERAL_void:
																	case LITERAL__declspec:
																	case LITERAL___declspec:
																	case LITERAL_class:
																	case LITERAL_struct:
																	case LITERAL_union:
																	case LITERAL_this:
																	case LITERAL_true:
																	case LITERAL_false:
																	case LITERAL_using:
																	case LITERAL__cdecl:
																	case LITERAL___cdecl:
																	case LITERAL__near:
																	case LITERAL___near:
																	case LITERAL__far:
																	case LITERAL___far:
																	case LITERAL___interrupt:
																	case LITERAL_pascal:
																	case LITERAL__pascal:
																	case LITERAL___pascal:
																	case LITERAL__int64:
																	case LITERAL___int64:
																	case LITERAL___w64:
																	case LITERAL___attribute__:
																	case LITERAL___complex__:
																	case LITERAL___global:
																	case LITERAL__Bool:
																	case LITERAL__Complex:
																	case LITERAL___thread:
																	case LITERAL___attribute:
																	case LITERAL__Imaginary:
																	case LITERAL_bit:
																	case LITERAL___symbolic:
																	case LITERAL___hidden:
																	case LITERAL_final:
																	case LITERAL_override:
																	case LITERAL_constexpr:
																	case LITERAL_decltype:
																	case LITERAL_thread_local:
																	case LITERAL_static_assert:
																	case LITERAL_alignas:
																	case LITERAL_char16_t:
																	case LITERAL_char32_t:
																	case LITERAL___decltype:
																	case LITERAL___complex:
																	case LITERAL___forceinline:
																	case LITERAL___clrcall:
																	case LITERAL__Noreturn:
																	case LITERAL___builtin_va_list:
																	case LITERAL__BUILT_IN_TYPE__:
																	case LITERAL__TYPE_QUALIFIER__:
																	case LITERAL__STORAGE_CLASS_SPECIFIER__:
																	{
																		break;
																	}
																	default:
																	{
																		matchError=true;if (matchError) {break loop375;}
																	}
																	}
																	}
																	{
																	int LA1_301 = LA(1);
																	int LA2_301 = LA(2);
																	
																	if ((_tokenSet_21.member(LA1_301)) && (LA2_301==LPAREN||LA2_301==LSQUARE)) {
																		function_attribute_specification_g();
																		if (matchError) {break loop375;}
																	}
																	else if ((_tokenSet_26.member(LA1_301)) && (_tokenSet_27.member(LA2_301))) {
																	}
																	else {
																		matchError=true;if (matchError) {break loop375;}
																	}
																	
																	}
																	declaration_g(declSimpleFunction);
																	if (matchError) {break loop375;}
																}
																else {
																	boolean synPredMatched229 = false;
																	if (((_tokenSet_28.member(LA1_288)) && (_tokenSet_23.member(LA2_288)))) {
																		int _m229 = mark();
																		guessing++;
																		guess229:  while (true) {
																			{
																			{
																			switch ( LA(1)) {
																			case LITERAL___extension__:
																			{
																				consume();
																				break;
																			}
																			case LSQUARE:
																			case SCOPE:
																			case IDENT:
																			case LITERAL_typeof:
																			case LITERAL___typeof__:
																			case LITERAL___typeof:
																			case LITERAL_typedef:
																			case LITERAL_enum:
																			case LITERAL_extern:
																			case LITERAL_inline:
																			case LITERAL__inline:
																			case LITERAL___inline__:
																			case LITERAL___inline:
																			case LITERAL_virtual:
																			case LITERAL_explicit:
																			case LITERAL_friend:
																			case LITERAL__stdcall:
																			case LITERAL___stdcall:
																			case LITERAL_typename:
																			case LITERAL_auto:
																			case LITERAL_register:
																			case LITERAL_static:
																			case LITERAL_mutable:
																			case LITERAL_const:
																			case LITERAL___const__:
																			case LITERAL___const:
																			case LITERAL_const_cast:
																			case LITERAL_volatile:
																			case LITERAL___volatile__:
																			case LITERAL___volatile:
																			case LITERAL_char:
																			case LITERAL_wchar_t:
																			case LITERAL_bool:
																			case LITERAL_short:
																			case LITERAL_int:
																			case LITERAL_long:
																			case LITERAL_signed:
																			case LITERAL___signed__:
																			case LITERAL___signed:
																			case LITERAL_unsigned:
																			case LITERAL___unsigned__:
																			case LITERAL_float:
																			case LITERAL_double:
																			case LITERAL_void:
																			case LITERAL__declspec:
																			case LITERAL___declspec:
																			case LITERAL_class:
																			case LITERAL_struct:
																			case LITERAL_union:
																			case LITERAL__int64:
																			case LITERAL___int64:
																			case LITERAL___w64:
																			case LITERAL___attribute__:
																			case LITERAL___complex__:
																			case LITERAL___global:
																			case LITERAL__Bool:
																			case LITERAL__Complex:
																			case LITERAL___thread:
																			case LITERAL___attribute:
																			case LITERAL__Imaginary:
																			case LITERAL_bit:
																			case LITERAL___symbolic:
																			case LITERAL___hidden:
																			case LITERAL_final:
																			case LITERAL_override:
																			case LITERAL_constexpr:
																			case LITERAL_decltype:
																			case LITERAL_thread_local:
																			case LITERAL_alignas:
																			case LITERAL_char16_t:
																			case LITERAL_char32_t:
																			case LITERAL___decltype:
																			case LITERAL___complex:
																			case LITERAL___forceinline:
																			case LITERAL___clrcall:
																			case LITERAL__Noreturn:
																			case LITERAL___builtin_va_list:
																			case LITERAL__BUILT_IN_TYPE__:
																			case LITERAL__TYPE_QUALIFIER__:
																			case LITERAL__STORAGE_CLASS_SPECIFIER__:
																			{
																				break;
																			}
																			default:
																			{
																				matchError=true;if (matchError) {break guess229;}
																			}
																			}
																			}
																			{
																			int LA1_302 = LA(1);
																			int LA2_302 = LA(2);
																			
																			if ((_tokenSet_21.member(LA1_302)) && (LA2_302==LPAREN||LA2_302==LSQUARE)) {
																				function_attribute_specification_g();
																				if (matchError) {break guess229;}
																			}
																			else if ((_tokenSet_22.member(LA1_302)) && (_tokenSet_23.member(LA2_302))) {
																			}
																			else {
																				matchError=true;if (matchError) {break guess229;}
																			}
																			
																			}
																			declaration_specifiers_g(false, false);
																			if (matchError) {break guess229;}
																			{
																			int LA1_303 = LA(1);
																			int LA2_303 = LA(2);
																			
																			if ((_tokenSet_21.member(LA1_303)) && (LA2_303==LPAREN||LA2_303==LSQUARE)) {
																				function_attribute_specification_g();
																				if (matchError) {break guess229;}
																			}
																			else if ((_tokenSet_24.member(LA1_303)) && (_tokenSet_25.member(LA2_303))) {
																			}
																			else {
																				matchError=true;if (matchError) {break guess229;}
																			}
																			
																			}
																			function_declarator_g(true, false, false);
																			if (matchError) {break guess229;}
																			{
																			switch ( LA(1)) {
																			case LCURLY:
																			{
																				consume();
																				break;
																			}
																			case LITERAL_try:
																			case LITERAL___try:
																			{
																				literal_try_g();
																				if (matchError) {break guess229;}
																				break;
																			}
																			case ASSIGNEQUAL:
																			{
																				consume();
																				{
																				switch ( LA(1)) {
																				case LITERAL_default:
																				{
																					consume();
																					break;
																				}
																				case LITERAL_delete:
																				{
																					consume();
																					break;
																				}
																				default:
																				{
																					matchError=true;if (matchError) {break guess229;}
																				}
																				}
																				}
																				break;
																			}
																			default:
																			{
																				matchError=true;if (matchError) {break guess229;}
																			}
																			}
																			}
																			}
																		synPredMatched229 = true;
																		break;} // guess229
																		if (matchError) {
																		   resetMatchError();
																		}
																		rewind(_m229);
																		guessing--;
																	}
																	if ( synPredMatched229 ) {
																		{
																		switch ( LA(1)) {
																		case LITERAL___extension__:
																		{
																			consume();
																			break;
																		}
																		case LSQUARE:
																		case SCOPE:
																		case IDENT:
																		case LITERAL_typeof:
																		case LITERAL___typeof__:
																		case LITERAL___typeof:
																		case LITERAL_typedef:
																		case LITERAL_enum:
																		case LITERAL_extern:
																		case LITERAL_inline:
																		case LITERAL__inline:
																		case LITERAL___inline__:
																		case LITERAL___inline:
																		case LITERAL_virtual:
																		case LITERAL_explicit:
																		case LITERAL_friend:
																		case LITERAL__stdcall:
																		case LITERAL___stdcall:
																		case LITERAL_typename:
																		case LITERAL_auto:
																		case LITERAL_register:
																		case LITERAL_static:
																		case LITERAL_mutable:
																		case LITERAL_const:
																		case LITERAL___const__:
																		case LITERAL___const:
																		case LITERAL_const_cast:
																		case LITERAL_volatile:
																		case LITERAL___volatile__:
																		case LITERAL___volatile:
																		case LITERAL_char:
																		case LITERAL_wchar_t:
																		case LITERAL_bool:
																		case LITERAL_short:
																		case LITERAL_int:
																		case LITERAL_long:
																		case LITERAL_signed:
																		case LITERAL___signed__:
																		case LITERAL___signed:
																		case LITERAL_unsigned:
																		case LITERAL___unsigned__:
																		case LITERAL_float:
																		case LITERAL_double:
																		case LITERAL_void:
																		case LITERAL__declspec:
																		case LITERAL___declspec:
																		case LITERAL_class:
																		case LITERAL_struct:
																		case LITERAL_union:
																		case LITERAL__int64:
																		case LITERAL___int64:
																		case LITERAL___w64:
																		case LITERAL___attribute__:
																		case LITERAL___complex__:
																		case LITERAL___global:
																		case LITERAL__Bool:
																		case LITERAL__Complex:
																		case LITERAL___thread:
																		case LITERAL___attribute:
																		case LITERAL__Imaginary:
																		case LITERAL_bit:
																		case LITERAL___symbolic:
																		case LITERAL___hidden:
																		case LITERAL_final:
																		case LITERAL_override:
																		case LITERAL_constexpr:
																		case LITERAL_decltype:
																		case LITERAL_thread_local:
																		case LITERAL_alignas:
																		case LITERAL_char16_t:
																		case LITERAL_char32_t:
																		case LITERAL___decltype:
																		case LITERAL___complex:
																		case LITERAL___forceinline:
																		case LITERAL___clrcall:
																		case LITERAL__Noreturn:
																		case LITERAL___builtin_va_list:
																		case LITERAL__BUILT_IN_TYPE__:
																		case LITERAL__TYPE_QUALIFIER__:
																		case LITERAL__STORAGE_CLASS_SPECIFIER__:
																		{
																			break;
																		}
																		default:
																		{
																			matchError=true;if (matchError) {break loop375;}
																		}
																		}
																		}
																		{
																		int LA1_304 = LA(1);
																		int LA2_304 = LA(2);
																		
																		if ((_tokenSet_21.member(LA1_304)) && (LA2_304==LPAREN||LA2_304==LSQUARE)) {
																			function_attribute_specification_g();
																			if (matchError) {break loop375;}
																		}
																		else if ((_tokenSet_22.member(LA1_304)) && (_tokenSet_23.member(LA2_304))) {
																		}
																		else {
																			matchError=true;if (matchError) {break loop375;}
																		}
																		
																		}
																		function_definition_g();
																		if (matchError) {break loop375;}
																	}
																	else {
																		boolean synPredMatched234 = false;
																		if (((_tokenSet_24.member(LA1_288)) && (_tokenSet_25.member(LA2_288)))) {
																			int _m234 = mark();
																			guessing++;
																			guess234:  while (true) {
																				{
																				function_declarator_g(true, false, false);
																				if (matchError) {break guess234;}
																				{
																				switch ( LA(1)) {
																				case ELLIPSIS:
																				case LPAREN:
																				case LSQUARE:
																				case STAR:
																				case AND:
																				case AMPERSAND:
																				case TILDE:
																				case SCOPE:
																				case IDENT:
																				case LITERAL_OPERATOR:
																				case LITERAL_typeof:
																				case LITERAL___typeof__:
																				case LITERAL___typeof:
																				case LITERAL_typedef:
																				case LITERAL_enum:
																				case LITERAL_namespace:
																				case LITERAL_extern:
																				case LITERAL_inline:
																				case LITERAL__inline:
																				case LITERAL___inline__:
																				case LITERAL___inline:
																				case LITERAL_virtual:
																				case LITERAL_explicit:
																				case LITERAL_friend:
																				case LITERAL__stdcall:
																				case LITERAL___stdcall:
																				case LITERAL_typename:
																				case LITERAL_auto:
																				case LITERAL_register:
																				case LITERAL_static:
																				case LITERAL_mutable:
																				case LITERAL_const:
																				case LITERAL___const__:
																				case LITERAL___const:
																				case LITERAL_const_cast:
																				case LITERAL_volatile:
																				case LITERAL___volatile__:
																				case LITERAL___volatile:
																				case LITERAL_char:
																				case LITERAL_wchar_t:
																				case LITERAL_bool:
																				case LITERAL_short:
																				case LITERAL_int:
																				case LITERAL_long:
																				case LITERAL_signed:
																				case LITERAL___signed__:
																				case LITERAL___signed:
																				case LITERAL_unsigned:
																				case LITERAL___unsigned__:
																				case LITERAL_float:
																				case LITERAL_double:
																				case LITERAL_void:
																				case LITERAL__declspec:
																				case LITERAL___declspec:
																				case LITERAL_class:
																				case LITERAL_struct:
																				case LITERAL_union:
																				case LITERAL_this:
																				case LITERAL_true:
																				case LITERAL_false:
																				case LITERAL_using:
																				case LITERAL__cdecl:
																				case LITERAL___cdecl:
																				case LITERAL__near:
																				case LITERAL___near:
																				case LITERAL__far:
																				case LITERAL___far:
																				case LITERAL___interrupt:
																				case LITERAL_pascal:
																				case LITERAL__pascal:
																				case LITERAL___pascal:
																				case LITERAL__int64:
																				case LITERAL___int64:
																				case LITERAL___w64:
																				case LITERAL___attribute__:
																				case LITERAL___complex__:
																				case LITERAL___global:
																				case LITERAL__Bool:
																				case LITERAL__Complex:
																				case LITERAL___thread:
																				case LITERAL___attribute:
																				case LITERAL__Imaginary:
																				case LITERAL_bit:
																				case LITERAL___symbolic:
																				case LITERAL___hidden:
																				case LITERAL_final:
																				case LITERAL_override:
																				case LITERAL_constexpr:
																				case LITERAL_decltype:
																				case LITERAL_thread_local:
																				case LITERAL_static_assert:
																				case LITERAL_alignas:
																				case LITERAL_char16_t:
																				case LITERAL_char32_t:
																				case LITERAL___decltype:
																				case LITERAL___complex:
																				case LITERAL___forceinline:
																				case LITERAL___clrcall:
																				case LITERAL__Noreturn:
																				case LITERAL___builtin_va_list:
																				case LITERAL__BUILT_IN_TYPE__:
																				case LITERAL__TYPE_QUALIFIER__:
																				case LITERAL__STORAGE_CLASS_SPECIFIER__:
																				{
																					function_K_R_parameter_list_g();
																					if (matchError) {break guess234;}
																					break;
																				}
																				case LCURLY:
																				{
																					break;
																				}
																				default:
																				{
																					matchError=true;if (matchError) {break guess234;}
																				}
																				}
																				}
																				match(LCURLY);
																				if (matchError) {break guess234;}
																				}
																			synPredMatched234 = true;
																			break;} // guess234
																			if (matchError) {
																			   resetMatchError();
																			}
																			rewind(_m234);
																			guessing--;
																		}
																		if ( synPredMatched234 ) {
																			function_definition_no_ret_type_g();
																			if (matchError) {break loop375;}
																		}
																		else {
																			boolean synPredMatched236 = false;
																			if (((_tokenSet_22.member(LA1_288)) && (_tokenSet_23.member(LA2_288)))) {
																				int _m236 = mark();
																				guessing++;
																				guess236:  while (true) {
																					{
																					declaration_specifiers_g(false, false);
																					if (matchError) {break guess236;}
																					function_declarator_g(true, false, false);
																					if (matchError) {break guess236;}
																					declaration_g(declOther);
																					if (matchError) {break guess236;}
																					}
																				synPredMatched236 = true;
																				break;} // guess236
																				if (matchError) {
																				   resetMatchError();
																				}
																				rewind(_m236);
																				guessing--;
																			}
																			if ( synPredMatched236 ) {
																				function_definition_g();
																				if (matchError) {break loop375;}
																			}
																			else {
																				boolean synPredMatched240 = false;
																				if (((_tokenSet_22.member(LA1_288)) && (_tokenSet_23.member(LA2_288)))) {
																					int _m240 = mark();
																					guessing++;
																					guess240:  while (true) {
																						{
																						{
																						switch ( LA(1)) {
																						case LITERAL___extension__:
																						{
																							consume();
																							break;
																						}
																						case LSQUARE:
																						case SCOPE:
																						case IDENT:
																						case LITERAL_typeof:
																						case LITERAL___typeof__:
																						case LITERAL___typeof:
																						case LITERAL_typedef:
																						case LITERAL_enum:
																						case LITERAL_extern:
																						case LITERAL_inline:
																						case LITERAL__inline:
																						case LITERAL___inline__:
																						case LITERAL___inline:
																						case LITERAL_virtual:
																						case LITERAL_explicit:
																						case LITERAL_friend:
																						case LITERAL__stdcall:
																						case LITERAL___stdcall:
																						case LITERAL_typename:
																						case LITERAL_auto:
																						case LITERAL_register:
																						case LITERAL_static:
																						case LITERAL_mutable:
																						case LITERAL_const:
																						case LITERAL___const__:
																						case LITERAL___const:
																						case LITERAL_const_cast:
																						case LITERAL_volatile:
																						case LITERAL___volatile__:
																						case LITERAL___volatile:
																						case LITERAL_char:
																						case LITERAL_wchar_t:
																						case LITERAL_bool:
																						case LITERAL_short:
																						case LITERAL_int:
																						case LITERAL_long:
																						case LITERAL_signed:
																						case LITERAL___signed__:
																						case LITERAL___signed:
																						case LITERAL_unsigned:
																						case LITERAL___unsigned__:
																						case LITERAL_float:
																						case LITERAL_double:
																						case LITERAL_void:
																						case LITERAL__declspec:
																						case LITERAL___declspec:
																						case LITERAL_class:
																						case LITERAL_struct:
																						case LITERAL_union:
																						case LITERAL__int64:
																						case LITERAL___int64:
																						case LITERAL___w64:
																						case LITERAL___attribute__:
																						case LITERAL___complex__:
																						case LITERAL___global:
																						case LITERAL__Bool:
																						case LITERAL__Complex:
																						case LITERAL___thread:
																						case LITERAL___attribute:
																						case LITERAL__Imaginary:
																						case LITERAL_bit:
																						case LITERAL___symbolic:
																						case LITERAL___hidden:
																						case LITERAL_final:
																						case LITERAL_override:
																						case LITERAL_constexpr:
																						case LITERAL_decltype:
																						case LITERAL_thread_local:
																						case LITERAL_alignas:
																						case LITERAL_char16_t:
																						case LITERAL_char32_t:
																						case LITERAL___decltype:
																						case LITERAL___complex:
																						case LITERAL___forceinline:
																						case LITERAL___clrcall:
																						case LITERAL__Noreturn:
																						case LITERAL___builtin_va_list:
																						case LITERAL__BUILT_IN_TYPE__:
																						case LITERAL__TYPE_QUALIFIER__:
																						case LITERAL__STORAGE_CLASS_SPECIFIER__:
																						{
																							break;
																						}
																						default:
																						{
																							matchError=true;if (matchError) {break guess240;}
																						}
																						}
																						}
																						declaration_specifiers_g(false, false);
																						if (matchError) {break guess240;}
																						function_declarator_with_fun_as_ret_type_g(false);
																						if (matchError) {break guess240;}
																						{
																						switch ( LA(1)) {
																						case EOF:
																						{
																							consume();
																							break;
																						}
																						case SEMICOLON:
																						{
																							consume();
																							break;
																						}
																						default:
																						{
																							matchError=true;if (matchError) {break guess240;}
																						}
																						}
																						}
																						}
																					synPredMatched240 = true;
																					break;} // guess240
																					if (matchError) {
																					   resetMatchError();
																					}
																					rewind(_m240);
																					guessing--;
																				}
																				if ( synPredMatched240 ) {
																					function_declaration_with_fun_as_ret_type_g();
																					if (matchError) {break loop375;}
																				}
																				else {
																					boolean synPredMatched243 = false;
																					if (((_tokenSet_22.member(LA1_288)) && (_tokenSet_23.member(LA2_288)))) {
																						int _m243 = mark();
																						guessing++;
																						guess243:  while (true) {
																							{
																							{
																							switch ( LA(1)) {
																							case LITERAL___extension__:
																							{
																								consume();
																								break;
																							}
																							case LSQUARE:
																							case SCOPE:
																							case IDENT:
																							case LITERAL_typeof:
																							case LITERAL___typeof__:
																							case LITERAL___typeof:
																							case LITERAL_typedef:
																							case LITERAL_enum:
																							case LITERAL_extern:
																							case LITERAL_inline:
																							case LITERAL__inline:
																							case LITERAL___inline__:
																							case LITERAL___inline:
																							case LITERAL_virtual:
																							case LITERAL_explicit:
																							case LITERAL_friend:
																							case LITERAL__stdcall:
																							case LITERAL___stdcall:
																							case LITERAL_typename:
																							case LITERAL_auto:
																							case LITERAL_register:
																							case LITERAL_static:
																							case LITERAL_mutable:
																							case LITERAL_const:
																							case LITERAL___const__:
																							case LITERAL___const:
																							case LITERAL_const_cast:
																							case LITERAL_volatile:
																							case LITERAL___volatile__:
																							case LITERAL___volatile:
																							case LITERAL_char:
																							case LITERAL_wchar_t:
																							case LITERAL_bool:
																							case LITERAL_short:
																							case LITERAL_int:
																							case LITERAL_long:
																							case LITERAL_signed:
																							case LITERAL___signed__:
																							case LITERAL___signed:
																							case LITERAL_unsigned:
																							case LITERAL___unsigned__:
																							case LITERAL_float:
																							case LITERAL_double:
																							case LITERAL_void:
																							case LITERAL__declspec:
																							case LITERAL___declspec:
																							case LITERAL_class:
																							case LITERAL_struct:
																							case LITERAL_union:
																							case LITERAL__int64:
																							case LITERAL___int64:
																							case LITERAL___w64:
																							case LITERAL___attribute__:
																							case LITERAL___complex__:
																							case LITERAL___global:
																							case LITERAL__Bool:
																							case LITERAL__Complex:
																							case LITERAL___thread:
																							case LITERAL___attribute:
																							case LITERAL__Imaginary:
																							case LITERAL_bit:
																							case LITERAL___symbolic:
																							case LITERAL___hidden:
																							case LITERAL_final:
																							case LITERAL_override:
																							case LITERAL_constexpr:
																							case LITERAL_decltype:
																							case LITERAL_thread_local:
																							case LITERAL_alignas:
																							case LITERAL_char16_t:
																							case LITERAL_char32_t:
																							case LITERAL___decltype:
																							case LITERAL___complex:
																							case LITERAL___forceinline:
																							case LITERAL___clrcall:
																							case LITERAL__Noreturn:
																							case LITERAL___builtin_va_list:
																							case LITERAL__BUILT_IN_TYPE__:
																							case LITERAL__TYPE_QUALIFIER__:
																							case LITERAL__STORAGE_CLASS_SPECIFIER__:
																							{
																								break;
																							}
																							default:
																							{
																								matchError=true;if (matchError) {break guess243;}
																							}
																							}
																							}
																							declaration_specifiers_g(false, false);
																							if (matchError) {break guess243;}
																							function_declarator_with_fun_as_ret_type_g(true);
																							if (matchError) {break guess243;}
																							match(LCURLY);
																							if (matchError) {break guess243;}
																							}
																						synPredMatched243 = true;
																						break;} // guess243
																						if (matchError) {
																						   resetMatchError();
																						}
																						rewind(_m243);
																						guessing--;
																					}
																					if ( synPredMatched243 ) {
																						function_definition_with_fun_as_ret_type_g();
																						if (matchError) {break loop375;}
																					}
																					else if (((_tokenSet_29.member(LA1_288)) && (_tokenSet_30.member(LA2_288)))&&(isCPlusPlus())) {
																						decl_namespace_g();
																						if (matchError) {break loop375;}
																					}
																					else {
																						boolean synPredMatched245 = false;
																						if ((((_tokenSet_16.member(LA1_288)) && (_tokenSet_17.member(LA2_288)))&&(isCPlusPlus()))) {
																							int _m245 = mark();
																							guessing++;
																							guess245:  while (true) {
																								{
																								ctor_decl_spec_g();
																								if (matchError) {break guess245;}
																								ctor_declarator_g(true);
																								if (matchError) {break guess245;}
																								match(COLON);
																								if (matchError) {break guess245;}
																								}
																							synPredMatched245 = true;
																							break;} // guess245
																							if (matchError) {
																							   resetMatchError();
																							}
																							rewind(_m245);
																							guessing--;
																						}
																						if ( synPredMatched245 ) {
																							ctor_definition_g();
																							if (matchError) {break loop375;}
																						}
																						else if ((_tokenSet_10.member(LA1_288)) && (_tokenSet_11.member(LA2_288))) {
																							{
																							switch ( LA(1)) {
																							case LITERAL___extension__:
																							{
																								consume();
																								break;
																							}
																							case ELLIPSIS:
																							case LPAREN:
																							case LSQUARE:
																							case STAR:
																							case AND:
																							case AMPERSAND:
																							case TILDE:
																							case SCOPE:
																							case IDENT:
																							case LITERAL_OPERATOR:
																							case LITERAL_typeof:
																							case LITERAL___typeof__:
																							case LITERAL___typeof:
																							case LITERAL_typedef:
																							case LITERAL_enum:
																							case LITERAL_namespace:
																							case LITERAL_extern:
																							case LITERAL_inline:
																							case LITERAL__inline:
																							case LITERAL___inline__:
																							case LITERAL___inline:
																							case LITERAL_virtual:
																							case LITERAL_explicit:
																							case LITERAL_friend:
																							case LITERAL__stdcall:
																							case LITERAL___stdcall:
																							case LITERAL_typename:
																							case LITERAL_auto:
																							case LITERAL_register:
																							case LITERAL_static:
																							case LITERAL_mutable:
																							case LITERAL_const:
																							case LITERAL___const__:
																							case LITERAL___const:
																							case LITERAL_const_cast:
																							case LITERAL_volatile:
																							case LITERAL___volatile__:
																							case LITERAL___volatile:
																							case LITERAL_char:
																							case LITERAL_wchar_t:
																							case LITERAL_bool:
																							case LITERAL_short:
																							case LITERAL_int:
																							case LITERAL_long:
																							case LITERAL_signed:
																							case LITERAL___signed__:
																							case LITERAL___signed:
																							case LITERAL_unsigned:
																							case LITERAL___unsigned__:
																							case LITERAL_float:
																							case LITERAL_double:
																							case LITERAL_void:
																							case LITERAL__declspec:
																							case LITERAL___declspec:
																							case LITERAL_class:
																							case LITERAL_struct:
																							case LITERAL_union:
																							case LITERAL_this:
																							case LITERAL_true:
																							case LITERAL_false:
																							case LITERAL_using:
																							case LITERAL__cdecl:
																							case LITERAL___cdecl:
																							case LITERAL__near:
																							case LITERAL___near:
																							case LITERAL__far:
																							case LITERAL___far:
																							case LITERAL___interrupt:
																							case LITERAL_pascal:
																							case LITERAL__pascal:
																							case LITERAL___pascal:
																							case LITERAL__int64:
																							case LITERAL___int64:
																							case LITERAL___w64:
																							case LITERAL___attribute__:
																							case LITERAL___complex__:
																							case LITERAL___global:
																							case LITERAL__Bool:
																							case LITERAL__Complex:
																							case LITERAL___thread:
																							case LITERAL___attribute:
																							case LITERAL__Imaginary:
																							case LITERAL_bit:
																							case LITERAL___symbolic:
																							case LITERAL___hidden:
																							case LITERAL_final:
																							case LITERAL_override:
																							case LITERAL_constexpr:
																							case LITERAL_decltype:
																							case LITERAL_thread_local:
																							case LITERAL_static_assert:
																							case LITERAL_alignas:
																							case LITERAL_char16_t:
																							case LITERAL_char32_t:
																							case LITERAL___decltype:
																							case LITERAL___complex:
																							case LITERAL___forceinline:
																							case LITERAL___clrcall:
																							case LITERAL__Noreturn:
																							case LITERAL___builtin_va_list:
																							case LITERAL__BUILT_IN_TYPE__:
																							case LITERAL__TYPE_QUALIFIER__:
																							case LITERAL__STORAGE_CLASS_SPECIFIER__:
																							{
																								break;
																							}
																							default:
																							{
																								matchError=true;if (matchError) {break loop375;}
																							}
																							}
																							}
																							declaration_g(declGeneric);
																							if (matchError) {break loop375;}
																						}
																					else {
																						matchError=true;if (matchError) {break loop375;}
																					}
																					}}}}}}}}}}}}}}}}}}}
																					}
																					external_declaration_AST = (AST)currentAST.root;
																				break;} // loop375
																				if (matchError) {
																			}
																			returnAST = external_declaration_AST;
																		}
																		
	public final void alias_declaration_type_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST alias_declaration_type_AST = null;
		
		loop376:  while (true) {
			{
			int LA1_305 = LA(1);
			int LA2_305 = LA(2);
			
			boolean synPredMatched1137 = false;
			if (((_tokenSet_22.member(LA1_305)) && (_tokenSet_380.member(LA2_305)))) {
				int _m1137 = mark();
				guessing++;
				guess1137:  while (true) {
					{
					class_head_g();
					if (matchError) {break guess1137;}
					}
				synPredMatched1137 = true;
				break;} // guess1137
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1137);
				guessing--;
			}
			if ( synPredMatched1137 ) {
				type_name_g();
				if (matchError) {break loop376;}
			}
			else {
				boolean synPredMatched1139 = false;
				if (((LA1_305==LITERAL_enum) && (_tokenSet_79.member(LA2_305)))) {
					int _m1139 = mark();
					guessing++;
					guess1139:  while (true) {
						{
						enum_def_head_g();
						if (matchError) {break guess1139;}
						}
					synPredMatched1139 = true;
					break;} // guess1139
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m1139);
					guessing--;
				}
				if ( synPredMatched1139 ) {
					enum_specifier_g();
					if (matchError) {break loop376;}
					{
					switch ( LA(1)) {
					case ELLIPSIS:
					case LPAREN:
					case LSQUARE:
					case STAR:
					case AND:
					case AMPERSAND:
					case TILDE:
					case SCOPE:
					case IDENT:
					case LITERAL_OPERATOR:
					case LITERAL__stdcall:
					case LITERAL___stdcall:
					case LITERAL_this:
					case LITERAL_true:
					case LITERAL_false:
					case LITERAL__cdecl:
					case LITERAL___cdecl:
					case LITERAL__near:
					case LITERAL___near:
					case LITERAL__far:
					case LITERAL___far:
					case LITERAL___interrupt:
					case LITERAL_pascal:
					case LITERAL__pascal:
					case LITERAL___pascal:
					case LITERAL___attribute__:
					case LITERAL___attribute:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_decltype:
					case LITERAL___decltype:
					case LITERAL___clrcall:
					{
						init_declarator_list_g(declOther);
						if (matchError) {break loop376;}
						break;
					}
					case SEMICOLON:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop376;}
					}
					}
					}
				}
				else if ((_tokenSet_22.member(LA1_305)) && (_tokenSet_381.member(LA2_305))) {
					alias_type_name_g();
					if (matchError) {break loop376;}
				}
				else {
					matchError=true;if (matchError) {break loop376;}
				}
				}
				}
				alias_declaration_type_AST = (AST)currentAST.root;
			break;} // loop376
			if (matchError) {
		}
		returnAST = alias_declaration_type_AST;
	}
	
	public final String  unqualified_id_g() {
		String q = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST unqualified_id_AST = null;
		
			    String so, id;
			    StringBuilder qitem = new StringBuilder();
			
		
		loop377:  while (true) {
			so=scope_override_g();
			if (matchError) {break loop377;}
			{
			switch ( LA(1)) {
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				id=literal_ident_g();
				if (matchError) {break loop377;}
				{
				switch ( LA(1)) {
				case LESSTHAN:
				{
					AST tmp1522_AST = null;
					consume();
					template_argument_list_g();
					if (matchError) {break loop377;}
					AST tmp1523_AST = null;
					match(GREATERTHAN);
					if (matchError) {break loop377;}
					break;
				}
				case SEMICOLON:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop377;}
				}
				}
				}
				break;
			}
			case LITERAL_OPERATOR:
			{
				AST tmp1524_AST = null;
				consume();
				{
				int LA1_306 = LA(1);
				int LA2_306 = LA(2);
				
				boolean synPredMatched564 = false;
				if (((_tokenSet_94.member(LA1_306)) && (_tokenSet_225.member(LA2_306)))) {
					int _m564 = mark();
					guessing++;
					guess564:  while (true) {
						{
						optor_g();
						if (matchError) {break guess564;}
						}
					synPredMatched564 = true;
					break;} // guess564
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m564);
					guessing--;
				}
				if ( synPredMatched564 ) {
					optor_g();
					if (matchError) {break loop377;}
					{
					switch ( LA(1)) {
					case LESSTHAN:
					{
						AST tmp1525_AST = null;
						consume();
						template_argument_list_g();
						if (matchError) {break loop377;}
						AST tmp1526_AST = null;
						match(GREATERTHAN);
						if (matchError) {break loop377;}
						break;
					}
					case SEMICOLON:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop377;}
					}
					}
					}
				}
				else if ((LA1_306==STRING_LITERAL)) {
					AST tmp1527_AST = null;
					consume();
					id=literal_ident_g();
					if (matchError) {break loop377;}
					{
					switch ( LA(1)) {
					case LESSTHAN:
					{
						AST tmp1528_AST = null;
						consume();
						template_argument_list_g();
						if (matchError) {break loop377;}
						AST tmp1529_AST = null;
						match(GREATERTHAN);
						if (matchError) {break loop377;}
						break;
					}
					case SEMICOLON:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop377;}
					}
					}
					}
				}
				else if ((_tokenSet_22.member(LA1_306)) && (_tokenSet_226.member(LA2_306))) {
					declaration_specifiers_g(false, false);
					if (matchError) {break loop377;}
					{
					switch ( LA(1)) {
					case STAR:
					case AND:
					case AMPERSAND:
					case SCOPE:
					case IDENT:
					case LITERAL__stdcall:
					case LITERAL___stdcall:
					case LITERAL__cdecl:
					case LITERAL___cdecl:
					case LITERAL__near:
					case LITERAL___near:
					case LITERAL__far:
					case LITERAL___far:
					case LITERAL___interrupt:
					case LITERAL_pascal:
					case LITERAL__pascal:
					case LITERAL___pascal:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_decltype:
					case LITERAL___decltype:
					case LITERAL___clrcall:
					{
						ptr_operator_g();
						if (matchError) {break loop377;}
						break;
					}
					case SEMICOLON:
					case LESSTHAN:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop377;}
					}
					}
					}
					{
					switch ( LA(1)) {
					case LESSTHAN:
					{
						AST tmp1530_AST = null;
						consume();
						template_parameter_list_g();
						if (matchError) {break loop377;}
						AST tmp1531_AST = null;
						match(GREATERTHAN);
						if (matchError) {break loop377;}
						break;
					}
					case SEMICOLON:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop377;}
					}
					}
					}
				}
				else {
					matchError=true;if (matchError) {break loop377;}
				}
				
				}
				break;
			}
			case LITERAL_this:
			{
				AST tmp1532_AST = null;
				consume();
				break;
			}
			case LITERAL_true:
			case LITERAL_false:
			{
				{
				switch ( LA(1)) {
				case LITERAL_true:
				{
					AST tmp1533_AST = null;
					consume();
					break;
				}
				case LITERAL_false:
				{
					AST tmp1534_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop377;}
				}
				}
				}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop377;}
			}
			}
			}
			unqualified_id_AST = (AST)currentAST.root;
		break;} // loop377
		if (matchError) {
	}
	returnAST = unqualified_id_AST;
	return q;
}

	protected final void exception_type_id_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST exception_type_id_AST = null;
		/*TypeSpecifier*/int ts; String so;
		
		loop378:  while (true) {
			parameter_declaration_g(false);
			if (matchError) {break loop378;}
			exception_type_id_AST = (AST)currentAST.root;
		break;} // loop378
		if (matchError) {
	}
	returnAST = exception_type_id_AST;
}

	public final String  qualified_ctor_id_g() {
		String q = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qualified_ctor_id_AST = null;
		
		loop379:  while (true) {
			switch ( LA(1)) {
			case LPAREN:
			{
				AST tmp1535_AST = null;
				consume();
				q=qualified_ctor_id_g();
				if (matchError) {break loop379;}
				AST tmp1536_AST = null;
				match(RPAREN);
				if (matchError) {break loop379;}
				qualified_ctor_id_AST = (AST)currentAST.root;
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				q=qualified_ctor_direct_id_g();
				if (matchError) {break loop379;}
				qualified_ctor_id_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop379;}
			}
			}
		break;} // loop379
		if (matchError) {
	}
	returnAST = qualified_ctor_id_AST;
	return q;
}

	public final String  qualified_dtor_id_g() {
		String q = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qualified_dtor_id_AST = null;
		
		loop380:  while (true) {
			switch ( LA(1)) {
			case LPAREN:
			{
				AST tmp1537_AST = null;
				consume();
				q=qualified_dtor_id_g();
				if (matchError) {break loop380;}
				AST tmp1538_AST = null;
				match(RPAREN);
				if (matchError) {break loop380;}
				qualified_dtor_id_AST = (AST)currentAST.root;
				break;
			}
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			{
				q=qualified_dtor_direct_id_g();
				if (matchError) {break loop380;}
				qualified_dtor_id_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop380;}
			}
			}
		break;} // loop380
		if (matchError) {
	}
	returnAST = qualified_dtor_id_AST;
	return q;
}

	public final String  class_qualified_id_g() {
		String q = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST class_qualified_id_AST = null;
		
		String so;
		String id;
		StringBuilder qitem = new StringBuilder();
		
		
		loop381:  while (true) {
			so=scope_override_g();
			if (matchError) {break loop381;}
			{
			switch ( LA(1)) {
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				id=literal_ident_g();
				if (matchError) {break loop381;}
				{
				int LA1_307 = LA(1);
				int LA2_307 = LA(2);
				
				if ((LA1_307==LESSTHAN) && (_tokenSet_91.member(LA2_307))) {
					AST tmp1539_AST = null;
					consume();
					template_argument_list_g();
					if (matchError) {break loop381;}
					AST tmp1540_AST = null;
					match(GREATERTHAN);
					if (matchError) {break loop381;}
				}
				else if ((_tokenSet_204.member(LA1_307)) && (_tokenSet_1.member(LA2_307))) {
				}
				else {
					matchError=true;if (matchError) {break loop381;}
				}
				
				}
				break;
			}
			case LITERAL_OPERATOR:
			{
				AST tmp1541_AST = null;
				consume();
				optor_g();
				if (matchError) {break loop381;}
				{
				int LA1_308 = LA(1);
				int LA2_308 = LA(2);
				
				if ((LA1_308==LESSTHAN) && (_tokenSet_91.member(LA2_308))) {
					AST tmp1542_AST = null;
					consume();
					template_argument_list_g();
					if (matchError) {break loop381;}
					AST tmp1543_AST = null;
					match(GREATERTHAN);
					if (matchError) {break loop381;}
				}
				else if ((_tokenSet_204.member(LA1_308)) && (_tokenSet_1.member(LA2_308))) {
				}
				else {
					matchError=true;if (matchError) {break loop381;}
				}
				
				}
				break;
			}
			case LITERAL_this:
			{
				AST tmp1544_AST = null;
				consume();
				break;
			}
			case LITERAL_true:
			case LITERAL_false:
			{
				{
				switch ( LA(1)) {
				case LITERAL_true:
				{
					AST tmp1545_AST = null;
					consume();
					break;
				}
				case LITERAL_false:
				{
					AST tmp1546_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop381;}
				}
				}
				}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop381;}
			}
			}
			}
			class_qualified_id_AST = (AST)currentAST.root;
		break;} // loop381
		if (matchError) {
	}
	returnAST = class_qualified_id_AST;
	return q;
}

	public final void class_members_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST class_members_AST = null;
		
		loop382:  while (true) {
			{
			_loop518:
			do {
				// nongreedy exit test
				if ((LA(1)==EOF||LA(1)==RCURLY) && (_tokenSet_88.member(LA(2)))) break _loop518;
				int LA1_309 = LA(1);
				int LA2_309 = LA(2);
				
				if ((_tokenSet_157.member(LA1_309)) && (_tokenSet_1.member(LA2_309))) {
					member_declaration_g();
					if (matchError) {break loop382;}
				}
				else if ((LA1_309==LCURLY)) {
					balanceCurlies_g();
					if (matchError) {break loop382;}
				}
				else if ((_tokenSet_213.member(LA1_309)) && (_tokenSet_1.member(LA2_309))) {
					{
					{
					match(_tokenSet_213);
					if (matchError) {break loop382;}
					}
					}
				}
				else {
					break _loop518;
				}
				
			} while (true);
			}
			class_members_AST = (AST)currentAST.root;
		break;} // loop382
		if (matchError) {
	}
	returnAST = class_members_AST;
}

	public final void member_declaration_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST member_declaration_AST = null;
		AST cds_AST = null;
		AST cd_AST = null;
		String q; boolean definition;boolean ctrName=false;StorageClass sc = scInvalid;int ts = 0;boolean friend = false;
		
		loop383:  while (true) {
			{
			int LA1_310 = LA(1);
			int LA2_310 = LA(2);
			
			switch ( LA1_310) {
			case LITERAL_public:
			case LITERAL_protected:
			case LITERAL_private:
			{
				access_specifier_g();
				if (matchError) {break loop383;}
				match(COLON);
				if (matchError) {break loop383;}
				break;
			}
			case SEMICOLON:
			{
				match(SEMICOLON);
				if (matchError) {break loop383;}
				break;
			}
			default:
				boolean synPredMatched293 = false;
				if (((_tokenSet_10.member(LA1_310)) && (_tokenSet_11.member(LA2_310)))) {
					int _m293 = mark();
					guessing++;
					guess293:  while (true) {
						{
						{
						switch ( LA(1)) {
						case LITERAL___extension__:
						{
							consume();
							break;
						}
						case LITERAL_typedef:
						case LITERAL_extern:
						case LITERAL_friend:
						case LITERAL_auto:
						case LITERAL_register:
						case LITERAL_static:
						case LITERAL_mutable:
						case LITERAL_const:
						case LITERAL___const__:
						case LITERAL___const:
						case LITERAL_const_cast:
						case LITERAL_volatile:
						case LITERAL___volatile__:
						case LITERAL___volatile:
						case LITERAL_class:
						case LITERAL_struct:
						case LITERAL_union:
						case LITERAL___global:
						case LITERAL___thread:
						case LITERAL___symbolic:
						case LITERAL___hidden:
						case LITERAL_constexpr:
						case LITERAL_thread_local:
						case LITERAL__TYPE_QUALIFIER__:
						case LITERAL__STORAGE_CLASS_SPECIFIER__:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess293;}
						}
						}
						}
						{
						switch ( LA(1)) {
						case LITERAL_typedef:
						case LITERAL_extern:
						case LITERAL_friend:
						case LITERAL_auto:
						case LITERAL_register:
						case LITERAL_static:
						case LITERAL_mutable:
						case LITERAL_const:
						case LITERAL___const__:
						case LITERAL___const:
						case LITERAL_const_cast:
						case LITERAL_volatile:
						case LITERAL___volatile__:
						case LITERAL___volatile:
						case LITERAL___global:
						case LITERAL___thread:
						case LITERAL___symbolic:
						case LITERAL___hidden:
						case LITERAL_constexpr:
						case LITERAL_thread_local:
						case LITERAL__TYPE_QUALIFIER__:
						case LITERAL__STORAGE_CLASS_SPECIFIER__:
						{
							decl_specifiers_before_type_g();
							if (matchError) {break guess293;}
							break;
						}
						case LITERAL_class:
						case LITERAL_struct:
						case LITERAL_union:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess293;}
						}
						}
						}
						class_head_g();
						if (matchError) {break guess293;}
						}
					synPredMatched293 = true;
					break;} // guess293
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m293);
					guessing--;
				}
				if ( synPredMatched293 ) {
					{
					switch ( LA(1)) {
					case LITERAL___extension__:
					{
						consume();
						break;
					}
					case ELLIPSIS:
					case LPAREN:
					case LSQUARE:
					case STAR:
					case AND:
					case AMPERSAND:
					case TILDE:
					case SCOPE:
					case IDENT:
					case LITERAL_OPERATOR:
					case LITERAL_typeof:
					case LITERAL___typeof__:
					case LITERAL___typeof:
					case LITERAL_typedef:
					case LITERAL_enum:
					case LITERAL_namespace:
					case LITERAL_extern:
					case LITERAL_inline:
					case LITERAL__inline:
					case LITERAL___inline__:
					case LITERAL___inline:
					case LITERAL_virtual:
					case LITERAL_explicit:
					case LITERAL_friend:
					case LITERAL__stdcall:
					case LITERAL___stdcall:
					case LITERAL_typename:
					case LITERAL_auto:
					case LITERAL_register:
					case LITERAL_static:
					case LITERAL_mutable:
					case LITERAL_const:
					case LITERAL___const__:
					case LITERAL___const:
					case LITERAL_const_cast:
					case LITERAL_volatile:
					case LITERAL___volatile__:
					case LITERAL___volatile:
					case LITERAL_char:
					case LITERAL_wchar_t:
					case LITERAL_bool:
					case LITERAL_short:
					case LITERAL_int:
					case LITERAL_long:
					case LITERAL_signed:
					case LITERAL___signed__:
					case LITERAL___signed:
					case LITERAL_unsigned:
					case LITERAL___unsigned__:
					case LITERAL_float:
					case LITERAL_double:
					case LITERAL_void:
					case LITERAL__declspec:
					case LITERAL___declspec:
					case LITERAL_class:
					case LITERAL_struct:
					case LITERAL_union:
					case LITERAL_this:
					case LITERAL_true:
					case LITERAL_false:
					case LITERAL_using:
					case LITERAL__cdecl:
					case LITERAL___cdecl:
					case LITERAL__near:
					case LITERAL___near:
					case LITERAL__far:
					case LITERAL___far:
					case LITERAL___interrupt:
					case LITERAL_pascal:
					case LITERAL__pascal:
					case LITERAL___pascal:
					case LITERAL__int64:
					case LITERAL___int64:
					case LITERAL___w64:
					case LITERAL___attribute__:
					case LITERAL___complex__:
					case LITERAL___global:
					case LITERAL__Bool:
					case LITERAL__Complex:
					case LITERAL___thread:
					case LITERAL___attribute:
					case LITERAL__Imaginary:
					case LITERAL_bit:
					case LITERAL___symbolic:
					case LITERAL___hidden:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_constexpr:
					case LITERAL_decltype:
					case LITERAL_thread_local:
					case LITERAL_static_assert:
					case LITERAL_alignas:
					case LITERAL_char16_t:
					case LITERAL_char32_t:
					case LITERAL___decltype:
					case LITERAL___complex:
					case LITERAL___forceinline:
					case LITERAL___clrcall:
					case LITERAL__Noreturn:
					case LITERAL___builtin_va_list:
					case LITERAL__BUILT_IN_TYPE__:
					case LITERAL__TYPE_QUALIFIER__:
					case LITERAL__STORAGE_CLASS_SPECIFIER__:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop383;}
					}
					}
					}
					declaration_g(declOther);
					if (matchError) {break loop383;}
				}
				else {
					boolean synPredMatched298 = false;
					if (((_tokenSet_28.member(LA1_310)) && (_tokenSet_119.member(LA2_310)))) {
						int _m298 = mark();
						guessing++;
						guess298:  while (true) {
							{
							{
							switch ( LA(1)) {
							case LITERAL___extension__:
							{
								consume();
								break;
							}
							case LITERAL_typedef:
							case LITERAL_enum:
							case LITERAL_extern:
							case LITERAL_friend:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL_const:
							case LITERAL___const__:
							case LITERAL___const:
							case LITERAL_const_cast:
							case LITERAL_volatile:
							case LITERAL___volatile__:
							case LITERAL___volatile:
							case LITERAL___global:
							case LITERAL___thread:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_constexpr:
							case LITERAL_thread_local:
							case LITERAL__TYPE_QUALIFIER__:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess298;}
							}
							}
							}
							{
							switch ( LA(1)) {
							case LITERAL_typedef:
							case LITERAL_extern:
							case LITERAL_friend:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL_const:
							case LITERAL___const__:
							case LITERAL___const:
							case LITERAL_const_cast:
							case LITERAL_volatile:
							case LITERAL___volatile__:
							case LITERAL___volatile:
							case LITERAL___global:
							case LITERAL___thread:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_constexpr:
							case LITERAL_thread_local:
							case LITERAL__TYPE_QUALIFIER__:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								decl_specifiers_before_type_g();
								if (matchError) {break guess298;}
								break;
							}
							case LITERAL_enum:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess298;}
							}
							}
							}
							enum_def_head_g();
							if (matchError) {break guess298;}
							}
						synPredMatched298 = true;
						break;} // guess298
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m298);
						guessing--;
					}
					if ( synPredMatched298 ) {
						{
						switch ( LA(1)) {
						case LITERAL___extension__:
						{
							consume();
							break;
						}
						case LSQUARE:
						case SCOPE:
						case IDENT:
						case LITERAL_typeof:
						case LITERAL___typeof__:
						case LITERAL___typeof:
						case LITERAL_typedef:
						case LITERAL_enum:
						case LITERAL_extern:
						case LITERAL_inline:
						case LITERAL__inline:
						case LITERAL___inline__:
						case LITERAL___inline:
						case LITERAL_virtual:
						case LITERAL_explicit:
						case LITERAL_friend:
						case LITERAL__stdcall:
						case LITERAL___stdcall:
						case LITERAL_typename:
						case LITERAL_auto:
						case LITERAL_register:
						case LITERAL_static:
						case LITERAL_mutable:
						case LITERAL_const:
						case LITERAL___const__:
						case LITERAL___const:
						case LITERAL_const_cast:
						case LITERAL_volatile:
						case LITERAL___volatile__:
						case LITERAL___volatile:
						case LITERAL_char:
						case LITERAL_wchar_t:
						case LITERAL_bool:
						case LITERAL_short:
						case LITERAL_int:
						case LITERAL_long:
						case LITERAL_signed:
						case LITERAL___signed__:
						case LITERAL___signed:
						case LITERAL_unsigned:
						case LITERAL___unsigned__:
						case LITERAL_float:
						case LITERAL_double:
						case LITERAL_void:
						case LITERAL__declspec:
						case LITERAL___declspec:
						case LITERAL_class:
						case LITERAL_struct:
						case LITERAL_union:
						case LITERAL__int64:
						case LITERAL___int64:
						case LITERAL___w64:
						case LITERAL___attribute__:
						case LITERAL___complex__:
						case LITERAL___global:
						case LITERAL__Bool:
						case LITERAL__Complex:
						case LITERAL___thread:
						case LITERAL___attribute:
						case LITERAL__Imaginary:
						case LITERAL_bit:
						case LITERAL___symbolic:
						case LITERAL___hidden:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_constexpr:
						case LITERAL_decltype:
						case LITERAL_thread_local:
						case LITERAL_alignas:
						case LITERAL_char16_t:
						case LITERAL_char32_t:
						case LITERAL___decltype:
						case LITERAL___complex:
						case LITERAL___forceinline:
						case LITERAL___clrcall:
						case LITERAL__Noreturn:
						case LITERAL___builtin_va_list:
						case LITERAL__BUILT_IN_TYPE__:
						case LITERAL__TYPE_QUALIFIER__:
						case LITERAL__STORAGE_CLASS_SPECIFIER__:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break loop383;}
						}
						}
						}
						declaration_specifiers_g(true, false);
						if (matchError) {break loop383;}
						{
						switch ( LA(1)) {
						case ELLIPSIS:
						case COLON:
						case LPAREN:
						case LSQUARE:
						case STAR:
						case AND:
						case AMPERSAND:
						case TILDE:
						case SCOPE:
						case IDENT:
						case LITERAL_OPERATOR:
						case LITERAL__stdcall:
						case LITERAL___stdcall:
						case LITERAL_this:
						case LITERAL_true:
						case LITERAL_false:
						case LITERAL__cdecl:
						case LITERAL___cdecl:
						case LITERAL__near:
						case LITERAL___near:
						case LITERAL__far:
						case LITERAL___far:
						case LITERAL___interrupt:
						case LITERAL_pascal:
						case LITERAL__pascal:
						case LITERAL___pascal:
						case LITERAL___attribute__:
						case LITERAL___attribute:
						case LITERAL_final:
						case LITERAL_override:
						case LITERAL_decltype:
						case LITERAL___decltype:
						case LITERAL___clrcall:
						{
							member_declarator_list_g();
							if (matchError) {break loop383;}
							break;
						}
						case SEMICOLON:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break loop383;}
						}
						}
						}
						AST tmp1552_AST = null;
						match(SEMICOLON);
						if (matchError) {break loop383;}
					}
					else {
						boolean synPredMatched304 = false;
						if (((_tokenSet_149.member(LA1_310)) && (_tokenSet_150.member(LA2_310)))) {
							int _m304 = mark();
							guessing++;
							guess304:  while (true) {
								{
								{
								switch ( LA(1)) {
								case LITERAL___extension__:
								{
									consume();
									break;
								}
								case LITERAL_typedef:
								case LITERAL_enum:
								case LITERAL_extern:
								case LITERAL_friend:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_const_cast:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_constexpr:
								case LITERAL_thread_local:
								case LITERAL__TYPE_QUALIFIER__:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess304;}
								}
								}
								}
								{
								switch ( LA(1)) {
								case LITERAL_typedef:
								case LITERAL_extern:
								case LITERAL_friend:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_const_cast:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_constexpr:
								case LITERAL_thread_local:
								case LITERAL__TYPE_QUALIFIER__:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									decl_specifiers_before_type_g();
									if (matchError) {break guess304;}
									break;
								}
								case LITERAL_enum:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess304;}
								}
								}
								}
								enum_fwd_head_g();
								if (matchError) {break guess304;}
								}
							synPredMatched304 = true;
							break;} // guess304
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m304);
							guessing--;
						}
						if ( synPredMatched304 ) {
							{
							switch ( LA(1)) {
							case LITERAL___extension__:
							{
								consume();
								break;
							}
							case LITERAL_typedef:
							case LITERAL_enum:
							case LITERAL_extern:
							case LITERAL_friend:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL_const:
							case LITERAL___const__:
							case LITERAL___const:
							case LITERAL_const_cast:
							case LITERAL_volatile:
							case LITERAL___volatile__:
							case LITERAL___volatile:
							case LITERAL___global:
							case LITERAL___thread:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_constexpr:
							case LITERAL_thread_local:
							case LITERAL__TYPE_QUALIFIER__:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break loop383;}
							}
							}
							}
							{
							switch ( LA(1)) {
							case LITERAL_typedef:
							case LITERAL_extern:
							case LITERAL_friend:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL_const:
							case LITERAL___const__:
							case LITERAL___const:
							case LITERAL_const_cast:
							case LITERAL_volatile:
							case LITERAL___volatile__:
							case LITERAL___volatile:
							case LITERAL___global:
							case LITERAL___thread:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_constexpr:
							case LITERAL_thread_local:
							case LITERAL__TYPE_QUALIFIER__:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								decl_specifiers_before_type_g();
								if (matchError) {break loop383;}
								break;
							}
							case LITERAL_enum:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break loop383;}
							}
							}
							}
							enum_specifier_g();
							if (matchError) {break loop383;}
							AST tmp1554_AST = null;
							match(SEMICOLON);
							if (matchError) {break loop383;}
						}
						else {
							boolean synPredMatched309 = false;
							if (((_tokenSet_16.member(LA1_310)) && (_tokenSet_17.member(LA2_310)))) {
								int _m309 = mark();
								guessing++;
								guess309:  while (true) {
									{
									ctor_decl_spec_g();
									if (matchError) {break guess309;}
									ctor_declarator_g(false);
									if (matchError) {break guess309;}
									{
									switch ( LA(1)) {
									case EOF:
									{
										consume();
										break;
									}
									case SEMICOLON:
									{
										consume();
										break;
									}
									default:
									{
										matchError=true;if (matchError) {break guess309;}
									}
									}
									}
									}
								synPredMatched309 = true;
								break;} // guess309
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m309);
								guessing--;
							}
							if ( synPredMatched309 ) {
								friend=ctor_decl_spec_g();
								if (matchError) {break loop383;}
								cds_AST = (AST)returnAST;
								ctrName=ctor_declarator_g(false);
								if (matchError) {break loop383;}
								cd_AST = (AST)returnAST;
								{
								switch ( LA(1)) {
								case EOF:
								{
									consume();
									break;
								}
								case SEMICOLON:
								{
									AST tmp1556_AST = null;
									consume();
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break loop383;}
								}
								}
								}
							}
							else {
								boolean synPredMatched314 = false;
								if (((_tokenSet_16.member(LA1_310)) && (_tokenSet_17.member(LA2_310)))) {
									int _m314 = mark();
									guessing++;
									guess314:  while (true) {
										{
										ctor_decl_spec_g();
										if (matchError) {break guess314;}
										ctor_declarator_g(true);
										if (matchError) {break guess314;}
										{
										switch ( LA(1)) {
										case COLON:
										{
											consume();
											break;
										}
										case LCURLY:
										{
											consume();
											break;
										}
										case LITERAL_try:
										case LITERAL___try:
										{
											literal_try_g();
											if (matchError) {break guess314;}
											break;
										}
										case ASSIGNEQUAL:
										{
											consume();
											{
											switch ( LA(1)) {
											case LITERAL_default:
											{
												consume();
												break;
											}
											case LITERAL_delete:
											{
												consume();
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess314;}
											}
											}
											}
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break guess314;}
										}
										}
										}
										}
									synPredMatched314 = true;
									break;} // guess314
									if (matchError) {
									   resetMatchError();
									}
									rewind(_m314);
									guessing--;
								}
								if ( synPredMatched314 ) {
									friend=ctor_decl_spec_g();
									if (matchError) {break loop383;}
									ctrName=ctor_declarator_g(true);
									if (matchError) {break loop383;}
									{
									switch ( LA(1)) {
									case COLON:
									case LCURLY:
									case LITERAL_try:
									case LITERAL___try:
									{
										ctor_body_g();
										if (matchError) {break loop383;}
										break;
									}
									case ASSIGNEQUAL:
									{
										AST tmp1557_AST = null;
										consume();
										{
										switch ( LA(1)) {
										case LITERAL_default:
										{
											AST tmp1558_AST = null;
											consume();
											break;
										}
										case LITERAL_delete:
										{
											AST tmp1559_AST = null;
											consume();
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break loop383;}
										}
										}
										}
										break;
									}
									default:
									{
										matchError=true;if (matchError) {break loop383;}
									}
									}
									}
								}
								else {
									boolean synPredMatched319 = false;
									if (((_tokenSet_32.member(LA1_310)) && (_tokenSet_13.member(LA2_310)))) {
										int _m319 = mark();
										guessing++;
										guess319:  while (true) {
											{
											dtor_head_g(false);
											if (matchError) {break guess319;}
											{
											switch ( LA(1)) {
											case EOF:
											{
												consume();
												break;
											}
											case SEMICOLON:
											{
												consume();
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess319;}
											}
											}
											}
											}
										synPredMatched319 = true;
										break;} // guess319
										if (matchError) {
										   resetMatchError();
										}
										rewind(_m319);
										guessing--;
									}
									if ( synPredMatched319 ) {
										friend=dtor_decl_spec_g();
										if (matchError) {break loop383;}
										dtor_declarator_g(false);
										if (matchError) {break loop383;}
										{
										switch ( LA(1)) {
										case EOF:
										{
											consume();
											break;
										}
										case SEMICOLON:
										{
											AST tmp1561_AST = null;
											consume();
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break loop383;}
										}
										}
										}
									}
									else {
										boolean synPredMatched324 = false;
										if (((_tokenSet_32.member(LA1_310)) && (_tokenSet_13.member(LA2_310)))) {
											int _m324 = mark();
											guessing++;
											guess324:  while (true) {
												{
												dtor_head_g(true);
												if (matchError) {break guess324;}
												{
												switch ( LA(1)) {
												case LCURLY:
												{
													consume();
													break;
												}
												case ASSIGNEQUAL:
												{
													consume();
													{
													switch ( LA(1)) {
													case LITERAL_default:
													{
														consume();
														break;
													}
													case LITERAL_delete:
													{
														consume();
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess324;}
													}
													}
													}
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess324;}
												}
												}
												}
												}
											synPredMatched324 = true;
											break;} // guess324
											if (matchError) {
											   resetMatchError();
											}
											rewind(_m324);
											guessing--;
										}
										if ( synPredMatched324 ) {
											dtor_head_g(true);
											if (matchError) {break loop383;}
											{
											switch ( LA(1)) {
											case LCURLY:
											{
												dtor_body_g();
												if (matchError) {break loop383;}
												break;
											}
											case ASSIGNEQUAL:
											{
												AST tmp1562_AST = null;
												consume();
												{
												switch ( LA(1)) {
												case LITERAL_default:
												{
													AST tmp1563_AST = null;
													consume();
													break;
												}
												case LITERAL_delete:
												{
													AST tmp1564_AST = null;
													consume();
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break loop383;}
												}
												}
												}
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break loop383;}
											}
											}
											}
										}
										else {
											boolean synPredMatched330 = false;
											if (((_tokenSet_26.member(LA1_310)) && (_tokenSet_27.member(LA2_310)))) {
												int _m330 = mark();
												guessing++;
												guess330:  while (true) {
													{
													{
													switch ( LA(1)) {
													case LITERAL___extension__:
													{
														consume();
														break;
													}
													case LSQUARE:
													case SCOPE:
													case IDENT:
													case LITERAL_typeof:
													case LITERAL___typeof__:
													case LITERAL___typeof:
													case LITERAL_typedef:
													case LITERAL_enum:
													case LITERAL_extern:
													case LITERAL_inline:
													case LITERAL__inline:
													case LITERAL___inline__:
													case LITERAL___inline:
													case LITERAL_virtual:
													case LITERAL_explicit:
													case LITERAL_friend:
													case LITERAL__stdcall:
													case LITERAL___stdcall:
													case LITERAL_typename:
													case LITERAL_auto:
													case LITERAL_register:
													case LITERAL_static:
													case LITERAL_mutable:
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL_char:
													case LITERAL_wchar_t:
													case LITERAL_bool:
													case LITERAL_short:
													case LITERAL_int:
													case LITERAL_long:
													case LITERAL_signed:
													case LITERAL___signed__:
													case LITERAL___signed:
													case LITERAL_unsigned:
													case LITERAL___unsigned__:
													case LITERAL_float:
													case LITERAL_double:
													case LITERAL_void:
													case LITERAL__declspec:
													case LITERAL___declspec:
													case LITERAL_class:
													case LITERAL_struct:
													case LITERAL_union:
													case LITERAL__int64:
													case LITERAL___int64:
													case LITERAL___w64:
													case LITERAL___attribute__:
													case LITERAL___complex__:
													case LITERAL___global:
													case LITERAL__Bool:
													case LITERAL__Complex:
													case LITERAL___thread:
													case LITERAL___attribute:
													case LITERAL__Imaginary:
													case LITERAL_bit:
													case LITERAL___symbolic:
													case LITERAL___hidden:
													case LITERAL_final:
													case LITERAL_override:
													case LITERAL_constexpr:
													case LITERAL_decltype:
													case LITERAL_thread_local:
													case LITERAL_alignas:
													case LITERAL_char16_t:
													case LITERAL_char32_t:
													case LITERAL___decltype:
													case LITERAL___complex:
													case LITERAL___forceinline:
													case LITERAL___clrcall:
													case LITERAL__Noreturn:
													case LITERAL___builtin_va_list:
													case LITERAL__BUILT_IN_TYPE__:
													case LITERAL__TYPE_QUALIFIER__:
													case LITERAL__STORAGE_CLASS_SPECIFIER__:
													{
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess330;}
													}
													}
													}
													declaration_specifiers_g(false, false);
													if (matchError) {break guess330;}
													function_declarator_g(false, false, false);
													if (matchError) {break guess330;}
													{
													switch ( LA(1)) {
													case EOF:
													{
														consume();
														break;
													}
													case SEMICOLON:
													{
														consume();
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess330;}
													}
													}
													}
													}
												synPredMatched330 = true;
												break;} // guess330
												if (matchError) {
												   resetMatchError();
												}
												rewind(_m330);
												guessing--;
											}
											if ( synPredMatched330 ) {
												declaration_g(declOther);
												if (matchError) {break loop383;}
											}
											else {
												boolean synPredMatched335 = false;
												if (((_tokenSet_22.member(LA1_310)) && (_tokenSet_23.member(LA2_310)))) {
													int _m335 = mark();
													guessing++;
													guess335:  while (true) {
														{
														{
														switch ( LA(1)) {
														case LITERAL___extension__:
														{
															consume();
															break;
														}
														case LSQUARE:
														case SCOPE:
														case IDENT:
														case LITERAL_typeof:
														case LITERAL___typeof__:
														case LITERAL___typeof:
														case LITERAL_typedef:
														case LITERAL_enum:
														case LITERAL_extern:
														case LITERAL_inline:
														case LITERAL__inline:
														case LITERAL___inline__:
														case LITERAL___inline:
														case LITERAL_virtual:
														case LITERAL_explicit:
														case LITERAL_friend:
														case LITERAL__stdcall:
														case LITERAL___stdcall:
														case LITERAL_typename:
														case LITERAL_auto:
														case LITERAL_register:
														case LITERAL_static:
														case LITERAL_mutable:
														case LITERAL_const:
														case LITERAL___const__:
														case LITERAL___const:
														case LITERAL_const_cast:
														case LITERAL_volatile:
														case LITERAL___volatile__:
														case LITERAL___volatile:
														case LITERAL_char:
														case LITERAL_wchar_t:
														case LITERAL_bool:
														case LITERAL_short:
														case LITERAL_int:
														case LITERAL_long:
														case LITERAL_signed:
														case LITERAL___signed__:
														case LITERAL___signed:
														case LITERAL_unsigned:
														case LITERAL___unsigned__:
														case LITERAL_float:
														case LITERAL_double:
														case LITERAL_void:
														case LITERAL__declspec:
														case LITERAL___declspec:
														case LITERAL_class:
														case LITERAL_struct:
														case LITERAL_union:
														case LITERAL__int64:
														case LITERAL___int64:
														case LITERAL___w64:
														case LITERAL___attribute__:
														case LITERAL___complex__:
														case LITERAL___global:
														case LITERAL__Bool:
														case LITERAL__Complex:
														case LITERAL___thread:
														case LITERAL___attribute:
														case LITERAL__Imaginary:
														case LITERAL_bit:
														case LITERAL___symbolic:
														case LITERAL___hidden:
														case LITERAL_final:
														case LITERAL_override:
														case LITERAL_constexpr:
														case LITERAL_decltype:
														case LITERAL_thread_local:
														case LITERAL_alignas:
														case LITERAL_char16_t:
														case LITERAL_char32_t:
														case LITERAL___decltype:
														case LITERAL___complex:
														case LITERAL___forceinline:
														case LITERAL___clrcall:
														case LITERAL__Noreturn:
														case LITERAL___builtin_va_list:
														case LITERAL__BUILT_IN_TYPE__:
														case LITERAL__TYPE_QUALIFIER__:
														case LITERAL__STORAGE_CLASS_SPECIFIER__:
														{
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess335;}
														}
														}
														}
														declaration_specifiers_g(false, false);
														if (matchError) {break guess335;}
														function_declarator_g(true, false, false);
														if (matchError) {break guess335;}
														{
														switch ( LA(1)) {
														case LCURLY:
														{
															consume();
															break;
														}
														case LITERAL_try:
														case LITERAL___try:
														{
															literal_try_g();
															if (matchError) {break guess335;}
															break;
														}
														case ASSIGNEQUAL:
														{
															consume();
															{
															switch ( LA(1)) {
															case LITERAL_default:
															{
																consume();
																break;
															}
															case LITERAL_delete:
															{
																consume();
																break;
															}
															default:
															{
																matchError=true;if (matchError) {break guess335;}
															}
															}
															}
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess335;}
														}
														}
														}
														}
													synPredMatched335 = true;
													break;} // guess335
													if (matchError) {
													   resetMatchError();
													}
													rewind(_m335);
													guessing--;
												}
												if ( synPredMatched335 ) {
													function_definition_g();
													if (matchError) {break loop383;}
												}
												else {
													boolean synPredMatched339 = false;
													if (((_tokenSet_152.member(LA1_310)) && (_tokenSet_25.member(LA2_310)))) {
														int _m339 = mark();
														guessing++;
														guess339:  while (true) {
															{
															{
															switch ( LA(1)) {
															case LITERAL_static:
															{
																consume();
																break;
															}
															case LPAREN:
															case LSQUARE:
															case STAR:
															case AND:
															case AMPERSAND:
															case SCOPE:
															case IDENT:
															case LITERAL_OPERATOR:
															case LITERAL__stdcall:
															case LITERAL___stdcall:
															case LITERAL_this:
															case LITERAL_true:
															case LITERAL_false:
															case LITERAL__cdecl:
															case LITERAL___cdecl:
															case LITERAL__near:
															case LITERAL___near:
															case LITERAL__far:
															case LITERAL___far:
															case LITERAL___interrupt:
															case LITERAL_pascal:
															case LITERAL__pascal:
															case LITERAL___pascal:
															case LITERAL___attribute__:
															case LITERAL___attribute:
															case LITERAL_final:
															case LITERAL_override:
															case LITERAL_decltype:
															case LITERAL___decltype:
															case LITERAL___clrcall:
															{
																break;
															}
															default:
															{
																matchError=true;if (matchError) {break guess339;}
															}
															}
															}
															function_declarator_g(false, false, false);
															if (matchError) {break guess339;}
															{
															switch ( LA(1)) {
															case EOF:
															{
																consume();
																break;
															}
															case SEMICOLON:
															{
																consume();
																break;
															}
															default:
															{
																matchError=true;if (matchError) {break guess339;}
															}
															}
															}
															}
														synPredMatched339 = true;
														break;} // guess339
														if (matchError) {
														   resetMatchError();
														}
														rewind(_m339);
														guessing--;
													}
													if ( synPredMatched339 ) {
														{
														switch ( LA(1)) {
														case LITERAL_static:
														{
															AST tmp1565_AST = null;
															consume();
															break;
														}
														case LPAREN:
														case LSQUARE:
														case STAR:
														case AND:
														case AMPERSAND:
														case SCOPE:
														case IDENT:
														case LITERAL_OPERATOR:
														case LITERAL__stdcall:
														case LITERAL___stdcall:
														case LITERAL_this:
														case LITERAL_true:
														case LITERAL_false:
														case LITERAL__cdecl:
														case LITERAL___cdecl:
														case LITERAL__near:
														case LITERAL___near:
														case LITERAL__far:
														case LITERAL___far:
														case LITERAL___interrupt:
														case LITERAL_pascal:
														case LITERAL__pascal:
														case LITERAL___pascal:
														case LITERAL___attribute__:
														case LITERAL___attribute:
														case LITERAL_final:
														case LITERAL_override:
														case LITERAL_decltype:
														case LITERAL___decltype:
														case LITERAL___clrcall:
														{
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break loop383;}
														}
														}
														}
														function_declarator_g(false, false, false);
														if (matchError) {break loop383;}
														{
														switch ( LA(1)) {
														case EOF:
														{
															consume();
															break;
														}
														case SEMICOLON:
														{
															AST tmp1567_AST = null;
															consume();
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break loop383;}
														}
														}
														}
													}
													else {
														boolean synPredMatched344 = false;
														if (((_tokenSet_152.member(LA1_310)) && (_tokenSet_25.member(LA2_310)))) {
															int _m344 = mark();
															guessing++;
															guess344:  while (true) {
																{
																{
																switch ( LA(1)) {
																case LITERAL_static:
																{
																	consume();
																	break;
																}
																case LPAREN:
																case LSQUARE:
																case STAR:
																case AND:
																case AMPERSAND:
																case SCOPE:
																case IDENT:
																case LITERAL_OPERATOR:
																case LITERAL__stdcall:
																case LITERAL___stdcall:
																case LITERAL_this:
																case LITERAL_true:
																case LITERAL_false:
																case LITERAL__cdecl:
																case LITERAL___cdecl:
																case LITERAL__near:
																case LITERAL___near:
																case LITERAL__far:
																case LITERAL___far:
																case LITERAL___interrupt:
																case LITERAL_pascal:
																case LITERAL__pascal:
																case LITERAL___pascal:
																case LITERAL___attribute__:
																case LITERAL___attribute:
																case LITERAL_final:
																case LITERAL_override:
																case LITERAL_decltype:
																case LITERAL___decltype:
																case LITERAL___clrcall:
																{
																	break;
																}
																default:
																{
																	matchError=true;if (matchError) {break guess344;}
																}
																}
																}
																function_declarator_g(true, false, false);
																if (matchError) {break guess344;}
																match(LCURLY);
																if (matchError) {break guess344;}
																}
															synPredMatched344 = true;
															break;} // guess344
															if (matchError) {
															   resetMatchError();
															}
															rewind(_m344);
															guessing--;
														}
														if ( synPredMatched344 ) {
															{
															switch ( LA(1)) {
															case LITERAL_static:
															{
																AST tmp1568_AST = null;
																consume();
																break;
															}
															case LPAREN:
															case LSQUARE:
															case STAR:
															case AND:
															case AMPERSAND:
															case SCOPE:
															case IDENT:
															case LITERAL_OPERATOR:
															case LITERAL__stdcall:
															case LITERAL___stdcall:
															case LITERAL_this:
															case LITERAL_true:
															case LITERAL_false:
															case LITERAL__cdecl:
															case LITERAL___cdecl:
															case LITERAL__near:
															case LITERAL___near:
															case LITERAL__far:
															case LITERAL___far:
															case LITERAL___interrupt:
															case LITERAL_pascal:
															case LITERAL__pascal:
															case LITERAL___pascal:
															case LITERAL___attribute__:
															case LITERAL___attribute:
															case LITERAL_final:
															case LITERAL_override:
															case LITERAL_decltype:
															case LITERAL___decltype:
															case LITERAL___clrcall:
															{
																break;
															}
															default:
															{
																matchError=true;if (matchError) {break loop383;}
															}
															}
															}
															function_declarator_g(true, false, false);
															if (matchError) {break loop383;}
															compound_statement_g();
															if (matchError) {break loop383;}
														}
														else {
															boolean synPredMatched349 = false;
															if (((_tokenSet_22.member(LA1_310)) && (_tokenSet_23.member(LA2_310)))) {
																int _m349 = mark();
																guessing++;
																guess349:  while (true) {
																	{
																	{
																	switch ( LA(1)) {
																	case LITERAL___extension__:
																	{
																		consume();
																		break;
																	}
																	case LSQUARE:
																	case SCOPE:
																	case IDENT:
																	case LITERAL_typeof:
																	case LITERAL___typeof__:
																	case LITERAL___typeof:
																	case LITERAL_typedef:
																	case LITERAL_enum:
																	case LITERAL_extern:
																	case LITERAL_inline:
																	case LITERAL__inline:
																	case LITERAL___inline__:
																	case LITERAL___inline:
																	case LITERAL_virtual:
																	case LITERAL_explicit:
																	case LITERAL_friend:
																	case LITERAL__stdcall:
																	case LITERAL___stdcall:
																	case LITERAL_typename:
																	case LITERAL_auto:
																	case LITERAL_register:
																	case LITERAL_static:
																	case LITERAL_mutable:
																	case LITERAL_const:
																	case LITERAL___const__:
																	case LITERAL___const:
																	case LITERAL_const_cast:
																	case LITERAL_volatile:
																	case LITERAL___volatile__:
																	case LITERAL___volatile:
																	case LITERAL_char:
																	case LITERAL_wchar_t:
																	case LITERAL_bool:
																	case LITERAL_short:
																	case LITERAL_int:
																	case LITERAL_long:
																	case LITERAL_signed:
																	case LITERAL___signed__:
																	case LITERAL___signed:
																	case LITERAL_unsigned:
																	case LITERAL___unsigned__:
																	case LITERAL_float:
																	case LITERAL_double:
																	case LITERAL_void:
																	case LITERAL__declspec:
																	case LITERAL___declspec:
																	case LITERAL_class:
																	case LITERAL_struct:
																	case LITERAL_union:
																	case LITERAL__int64:
																	case LITERAL___int64:
																	case LITERAL___w64:
																	case LITERAL___attribute__:
																	case LITERAL___complex__:
																	case LITERAL___global:
																	case LITERAL__Bool:
																	case LITERAL__Complex:
																	case LITERAL___thread:
																	case LITERAL___attribute:
																	case LITERAL__Imaginary:
																	case LITERAL_bit:
																	case LITERAL___symbolic:
																	case LITERAL___hidden:
																	case LITERAL_final:
																	case LITERAL_override:
																	case LITERAL_constexpr:
																	case LITERAL_decltype:
																	case LITERAL_thread_local:
																	case LITERAL_alignas:
																	case LITERAL_char16_t:
																	case LITERAL_char32_t:
																	case LITERAL___decltype:
																	case LITERAL___complex:
																	case LITERAL___forceinline:
																	case LITERAL___clrcall:
																	case LITERAL__Noreturn:
																	case LITERAL___builtin_va_list:
																	case LITERAL__BUILT_IN_TYPE__:
																	case LITERAL__TYPE_QUALIFIER__:
																	case LITERAL__STORAGE_CLASS_SPECIFIER__:
																	{
																		break;
																	}
																	default:
																	{
																		matchError=true;if (matchError) {break guess349;}
																	}
																	}
																	}
																	declaration_specifiers_g(false, false);
																	if (matchError) {break guess349;}
																	function_declarator_with_fun_as_ret_type_g(false);
																	if (matchError) {break guess349;}
																	{
																	switch ( LA(1)) {
																	case EOF:
																	{
																		consume();
																		break;
																	}
																	case SEMICOLON:
																	{
																		consume();
																		break;
																	}
																	default:
																	{
																		matchError=true;if (matchError) {break guess349;}
																	}
																	}
																	}
																	}
																synPredMatched349 = true;
																break;} // guess349
																if (matchError) {
																   resetMatchError();
																}
																rewind(_m349);
																guessing--;
															}
															if ( synPredMatched349 ) {
																function_declaration_with_fun_as_ret_type_g();
																if (matchError) {break loop383;}
															}
															else {
																boolean synPredMatched352 = false;
																if (((_tokenSet_22.member(LA1_310)) && (_tokenSet_23.member(LA2_310)))) {
																	int _m352 = mark();
																	guessing++;
																	guess352:  while (true) {
																		{
																		{
																		switch ( LA(1)) {
																		case LITERAL___extension__:
																		{
																			consume();
																			break;
																		}
																		case LSQUARE:
																		case SCOPE:
																		case IDENT:
																		case LITERAL_typeof:
																		case LITERAL___typeof__:
																		case LITERAL___typeof:
																		case LITERAL_typedef:
																		case LITERAL_enum:
																		case LITERAL_extern:
																		case LITERAL_inline:
																		case LITERAL__inline:
																		case LITERAL___inline__:
																		case LITERAL___inline:
																		case LITERAL_virtual:
																		case LITERAL_explicit:
																		case LITERAL_friend:
																		case LITERAL__stdcall:
																		case LITERAL___stdcall:
																		case LITERAL_typename:
																		case LITERAL_auto:
																		case LITERAL_register:
																		case LITERAL_static:
																		case LITERAL_mutable:
																		case LITERAL_const:
																		case LITERAL___const__:
																		case LITERAL___const:
																		case LITERAL_const_cast:
																		case LITERAL_volatile:
																		case LITERAL___volatile__:
																		case LITERAL___volatile:
																		case LITERAL_char:
																		case LITERAL_wchar_t:
																		case LITERAL_bool:
																		case LITERAL_short:
																		case LITERAL_int:
																		case LITERAL_long:
																		case LITERAL_signed:
																		case LITERAL___signed__:
																		case LITERAL___signed:
																		case LITERAL_unsigned:
																		case LITERAL___unsigned__:
																		case LITERAL_float:
																		case LITERAL_double:
																		case LITERAL_void:
																		case LITERAL__declspec:
																		case LITERAL___declspec:
																		case LITERAL_class:
																		case LITERAL_struct:
																		case LITERAL_union:
																		case LITERAL__int64:
																		case LITERAL___int64:
																		case LITERAL___w64:
																		case LITERAL___attribute__:
																		case LITERAL___complex__:
																		case LITERAL___global:
																		case LITERAL__Bool:
																		case LITERAL__Complex:
																		case LITERAL___thread:
																		case LITERAL___attribute:
																		case LITERAL__Imaginary:
																		case LITERAL_bit:
																		case LITERAL___symbolic:
																		case LITERAL___hidden:
																		case LITERAL_final:
																		case LITERAL_override:
																		case LITERAL_constexpr:
																		case LITERAL_decltype:
																		case LITERAL_thread_local:
																		case LITERAL_alignas:
																		case LITERAL_char16_t:
																		case LITERAL_char32_t:
																		case LITERAL___decltype:
																		case LITERAL___complex:
																		case LITERAL___forceinline:
																		case LITERAL___clrcall:
																		case LITERAL__Noreturn:
																		case LITERAL___builtin_va_list:
																		case LITERAL__BUILT_IN_TYPE__:
																		case LITERAL__TYPE_QUALIFIER__:
																		case LITERAL__STORAGE_CLASS_SPECIFIER__:
																		{
																			break;
																		}
																		default:
																		{
																			matchError=true;if (matchError) {break guess352;}
																		}
																		}
																		}
																		declaration_specifiers_g(false, false);
																		if (matchError) {break guess352;}
																		function_declarator_with_fun_as_ret_type_g(true);
																		if (matchError) {break guess352;}
																		match(LCURLY);
																		if (matchError) {break guess352;}
																		}
																	synPredMatched352 = true;
																	break;} // guess352
																	if (matchError) {
																	   resetMatchError();
																	}
																	rewind(_m352);
																	guessing--;
																}
																if ( synPredMatched352 ) {
																	function_definition_with_fun_as_ret_type_g();
																	if (matchError) {break loop383;}
																}
																else {
																	boolean synPredMatched357 = false;
																	if (((_tokenSet_153.member(LA1_310)) && (_tokenSet_147.member(LA2_310)))) {
																		int _m357 = mark();
																		guessing++;
																		guess357:  while (true) {
																			{
																			{
																			_loop356:
																			do {
																				switch ( LA(1)) {
																				case LSQUARE:
																				case LITERAL___attribute__:
																				case LITERAL___attribute:
																				{
																					{
																					function_attribute_specification_g();
																					if (matchError) {break guess357;}
																					}
																					break;
																				}
																				case LITERAL_inline:
																				case LITERAL__inline:
																				case LITERAL___inline__:
																				case LITERAL___inline:
																				case LITERAL___forceinline:
																				{
																					literal_inline_g();
																					if (matchError) {break guess357;}
																					break;
																				}
																				case LITERAL_virtual:
																				{
																					consume();
																					break;
																				}
																				case LITERAL_constexpr:
																				{
																					consume();
																					break;
																				}
																				case LITERAL_explicit:
																				{
																					consume();
																					break;
																				}
																				default:
																				{
																					break _loop356;
																				}
																				}
																			} while (true);
																			}
																			conversion_function_decl_or_def_g();
																			if (matchError) {break guess357;}
																			}
																		synPredMatched357 = true;
																		break;} // guess357
																		if (matchError) {
																		   resetMatchError();
																		}
																		rewind(_m357);
																		guessing--;
																	}
																	if ( synPredMatched357 ) {
																		{
																		_loop360:
																		do {
																			switch ( LA(1)) {
																			case LSQUARE:
																			case LITERAL___attribute__:
																			case LITERAL___attribute:
																			{
																				{
																				function_attribute_specification_g();
																				if (matchError) {break loop383;}
																				}
																				break;
																			}
																			case LITERAL_inline:
																			case LITERAL__inline:
																			case LITERAL___inline__:
																			case LITERAL___inline:
																			case LITERAL___forceinline:
																			{
																				literal_inline_g();
																				if (matchError) {break loop383;}
																				break;
																			}
																			case LITERAL_virtual:
																			{
																				AST tmp1569_AST = null;
																				consume();
																				break;
																			}
																			case LITERAL_constexpr:
																			{
																				AST tmp1570_AST = null;
																				consume();
																				break;
																			}
																			case LITERAL_explicit:
																			{
																				AST tmp1571_AST = null;
																				consume();
																				break;
																			}
																			default:
																			{
																				break _loop360;
																			}
																			}
																		} while (true);
																		}
																		definition=conversion_function_decl_or_def_g();
																		if (matchError) {break loop383;}
																	}
																	else {
																		boolean synPredMatched363 = false;
																		if (((_tokenSet_90.member(LA1_310)) && (_tokenSet_154.member(LA2_310)))) {
																			int _m363 = mark();
																			guessing++;
																			guess363:  while (true) {
																				{
																				qualified_id_g();
																				if (matchError) {break guess363;}
																				{
																				switch ( LA(1)) {
																				case EOF:
																				{
																					consume();
																					break;
																				}
																				case SEMICOLON:
																				{
																					consume();
																					break;
																				}
																				default:
																				{
																					matchError=true;if (matchError) {break guess363;}
																				}
																				}
																				}
																				}
																			synPredMatched363 = true;
																			break;} // guess363
																			if (matchError) {
																			   resetMatchError();
																			}
																			rewind(_m363);
																			guessing--;
																		}
																		if ( synPredMatched363 ) {
																			visibility_redef_declaration_g();
																			if (matchError) {break loop383;}
																		}
																		else {
																			boolean synPredMatched366 = false;
																			if (((_tokenSet_28.member(LA1_310)) && (_tokenSet_155.member(LA2_310)))) {
																				int _m366 = mark();
																				guessing++;
																				guess366:  while (true) {
																					{
																					{
																					switch ( LA(1)) {
																					case LITERAL___extension__:
																					{
																						consume();
																						break;
																					}
																					case LSQUARE:
																					case SCOPE:
																					case IDENT:
																					case LITERAL_typeof:
																					case LITERAL___typeof__:
																					case LITERAL___typeof:
																					case LITERAL_typedef:
																					case LITERAL_enum:
																					case LITERAL_extern:
																					case LITERAL_inline:
																					case LITERAL__inline:
																					case LITERAL___inline__:
																					case LITERAL___inline:
																					case LITERAL_virtual:
																					case LITERAL_explicit:
																					case LITERAL_friend:
																					case LITERAL__stdcall:
																					case LITERAL___stdcall:
																					case LITERAL_typename:
																					case LITERAL_auto:
																					case LITERAL_register:
																					case LITERAL_static:
																					case LITERAL_mutable:
																					case LITERAL_const:
																					case LITERAL___const__:
																					case LITERAL___const:
																					case LITERAL_const_cast:
																					case LITERAL_volatile:
																					case LITERAL___volatile__:
																					case LITERAL___volatile:
																					case LITERAL_char:
																					case LITERAL_wchar_t:
																					case LITERAL_bool:
																					case LITERAL_short:
																					case LITERAL_int:
																					case LITERAL_long:
																					case LITERAL_signed:
																					case LITERAL___signed__:
																					case LITERAL___signed:
																					case LITERAL_unsigned:
																					case LITERAL___unsigned__:
																					case LITERAL_float:
																					case LITERAL_double:
																					case LITERAL_void:
																					case LITERAL__declspec:
																					case LITERAL___declspec:
																					case LITERAL_class:
																					case LITERAL_struct:
																					case LITERAL_union:
																					case LITERAL__int64:
																					case LITERAL___int64:
																					case LITERAL___w64:
																					case LITERAL___attribute__:
																					case LITERAL___complex__:
																					case LITERAL___global:
																					case LITERAL__Bool:
																					case LITERAL__Complex:
																					case LITERAL___thread:
																					case LITERAL___attribute:
																					case LITERAL__Imaginary:
																					case LITERAL_bit:
																					case LITERAL___symbolic:
																					case LITERAL___hidden:
																					case LITERAL_final:
																					case LITERAL_override:
																					case LITERAL_constexpr:
																					case LITERAL_decltype:
																					case LITERAL_thread_local:
																					case LITERAL_alignas:
																					case LITERAL_char16_t:
																					case LITERAL_char32_t:
																					case LITERAL___decltype:
																					case LITERAL___complex:
																					case LITERAL___forceinline:
																					case LITERAL___clrcall:
																					case LITERAL__Noreturn:
																					case LITERAL___builtin_va_list:
																					case LITERAL__BUILT_IN_TYPE__:
																					case LITERAL__TYPE_QUALIFIER__:
																					case LITERAL__STORAGE_CLASS_SPECIFIER__:
																					{
																						break;
																					}
																					default:
																					{
																						matchError=true;if (matchError) {break guess366;}
																					}
																					}
																					}
																					declaration_specifiers_g(true, false);
																					if (matchError) {break guess366;}
																					}
																				synPredMatched366 = true;
																				break;} // guess366
																				if (matchError) {
																				   resetMatchError();
																				}
																				rewind(_m366);
																				guessing--;
																			}
																			if ( synPredMatched366 ) {
																				{
																				switch ( LA(1)) {
																				case LITERAL___extension__:
																				{
																					consume();
																					break;
																				}
																				case LSQUARE:
																				case SCOPE:
																				case IDENT:
																				case LITERAL_typeof:
																				case LITERAL___typeof__:
																				case LITERAL___typeof:
																				case LITERAL_typedef:
																				case LITERAL_enum:
																				case LITERAL_extern:
																				case LITERAL_inline:
																				case LITERAL__inline:
																				case LITERAL___inline__:
																				case LITERAL___inline:
																				case LITERAL_virtual:
																				case LITERAL_explicit:
																				case LITERAL_friend:
																				case LITERAL__stdcall:
																				case LITERAL___stdcall:
																				case LITERAL_typename:
																				case LITERAL_auto:
																				case LITERAL_register:
																				case LITERAL_static:
																				case LITERAL_mutable:
																				case LITERAL_const:
																				case LITERAL___const__:
																				case LITERAL___const:
																				case LITERAL_const_cast:
																				case LITERAL_volatile:
																				case LITERAL___volatile__:
																				case LITERAL___volatile:
																				case LITERAL_char:
																				case LITERAL_wchar_t:
																				case LITERAL_bool:
																				case LITERAL_short:
																				case LITERAL_int:
																				case LITERAL_long:
																				case LITERAL_signed:
																				case LITERAL___signed__:
																				case LITERAL___signed:
																				case LITERAL_unsigned:
																				case LITERAL___unsigned__:
																				case LITERAL_float:
																				case LITERAL_double:
																				case LITERAL_void:
																				case LITERAL__declspec:
																				case LITERAL___declspec:
																				case LITERAL_class:
																				case LITERAL_struct:
																				case LITERAL_union:
																				case LITERAL__int64:
																				case LITERAL___int64:
																				case LITERAL___w64:
																				case LITERAL___attribute__:
																				case LITERAL___complex__:
																				case LITERAL___global:
																				case LITERAL__Bool:
																				case LITERAL__Complex:
																				case LITERAL___thread:
																				case LITERAL___attribute:
																				case LITERAL__Imaginary:
																				case LITERAL_bit:
																				case LITERAL___symbolic:
																				case LITERAL___hidden:
																				case LITERAL_final:
																				case LITERAL_override:
																				case LITERAL_constexpr:
																				case LITERAL_decltype:
																				case LITERAL_thread_local:
																				case LITERAL_alignas:
																				case LITERAL_char16_t:
																				case LITERAL_char32_t:
																				case LITERAL___decltype:
																				case LITERAL___complex:
																				case LITERAL___forceinline:
																				case LITERAL___clrcall:
																				case LITERAL__Noreturn:
																				case LITERAL___builtin_va_list:
																				case LITERAL__BUILT_IN_TYPE__:
																				case LITERAL__TYPE_QUALIFIER__:
																				case LITERAL__STORAGE_CLASS_SPECIFIER__:
																				{
																					break;
																				}
																				default:
																				{
																					matchError=true;if (matchError) {break loop383;}
																				}
																				}
																				}
																				declaration_specifiers_g(true, false);
																				if (matchError) {break loop383;}
																				{
																				switch ( LA(1)) {
																				case ELLIPSIS:
																				case COLON:
																				case LPAREN:
																				case LSQUARE:
																				case STAR:
																				case AND:
																				case AMPERSAND:
																				case TILDE:
																				case SCOPE:
																				case IDENT:
																				case LITERAL_OPERATOR:
																				case LITERAL__stdcall:
																				case LITERAL___stdcall:
																				case LITERAL_this:
																				case LITERAL_true:
																				case LITERAL_false:
																				case LITERAL__cdecl:
																				case LITERAL___cdecl:
																				case LITERAL__near:
																				case LITERAL___near:
																				case LITERAL__far:
																				case LITERAL___far:
																				case LITERAL___interrupt:
																				case LITERAL_pascal:
																				case LITERAL__pascal:
																				case LITERAL___pascal:
																				case LITERAL___attribute__:
																				case LITERAL___attribute:
																				case LITERAL_final:
																				case LITERAL_override:
																				case LITERAL_decltype:
																				case LITERAL___decltype:
																				case LITERAL___clrcall:
																				{
																					member_declarator_list_g();
																					if (matchError) {break loop383;}
																					break;
																				}
																				case EOF:
																				case SEMICOLON:
																				{
																					break;
																				}
																				default:
																				{
																					matchError=true;if (matchError) {break loop383;}
																				}
																				}
																				}
																				{
																				switch ( LA(1)) {
																				case EOF:
																				{
																					consume();
																					break;
																				}
																				case SEMICOLON:
																				{
																					AST tmp1574_AST = null;
																					consume();
																					break;
																				}
																				default:
																				{
																					matchError=true;if (matchError) {break loop383;}
																				}
																				}
																				}
																			}
																			else {
																				boolean synPredMatched372 = false;
																				if ((((LA1_310==LITERAL_template||LA1_310==LITERAL_export))&&(isCPlusPlus()))) {
																					int _m372 = mark();
																					guessing++;
																					guess372:  while (true) {
																						{
																						{
																						switch ( LA(1)) {
																						case LITERAL_export:
																						{
																							consume();
																							break;
																						}
																						case LITERAL_template:
																						{
																							break;
																						}
																						default:
																						{
																							matchError=true;if (matchError) {break guess372;}
																						}
																						}
																						}
																						match(LITERAL_template);
																						if (matchError) {break guess372;}
																						}
																					synPredMatched372 = true;
																					break;} // guess372
																					if (matchError) {
																					   resetMatchError();
																					}
																					rewind(_m372);
																					guessing--;
																				}
																				if ( synPredMatched372 ) {
																					member_declaration_template_g();
																					if (matchError) {break loop383;}
																				}
																				else {
																					boolean synPredMatched374 = false;
																					if (((LA1_310==LITERAL_using) && (_tokenSet_0.member(LA2_310)))) {
																						int _m374 = mark();
																						guessing++;
																						guess374:  while (true) {
																							{
																							match(LITERAL_using);
																							if (matchError) {break guess374;}
																							literal_ident_g();
																							if (matchError) {break guess374;}
																							match(ASSIGNEQUAL);
																							if (matchError) {break guess374;}
																							}
																						synPredMatched374 = true;
																						break;} // guess374
																						if (matchError) {
																						   resetMatchError();
																						}
																						rewind(_m374);
																						guessing--;
																					}
																					if ( synPredMatched374 ) {
																						alias_declaration_g();
																						if (matchError) {break loop383;}
																					}
																					else if ((LA1_310==LITERAL_using) && (_tokenSet_112.member(LA2_310))) {
																						using_declaration_g();
																						if (matchError) {break loop383;}
																					}
																					else if ((LA1_310==LITERAL_static_assert) && (LA2_310==LPAREN)) {
																						static_assert_declaration_g();
																						if (matchError) {break loop383;}
																					}
																				else {
																					matchError=true;if (matchError) {break loop383;}
																				}
																				}}}}}}}}}}}}}}}}}}
																				}
																				member_declaration_AST = (AST)currentAST.root;
																			break;} // loop383
																			if (matchError) {
																		}
																		returnAST = member_declaration_AST;
																	}
																	
	public final void enumerator_list_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST enumerator_list_AST = null;
		
		loop384:  while (true) {
			switch ( LA(1)) {
			case COMMA:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				{
				switch ( LA(1)) {
				case COMMA:
				{
					consume();
					break;
				}
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop384;}
				}
				}
				}
				enumerator_g();
				if (matchError) {break loop384;}
				{
				_loop548:
				do {
					int LA1_311 = LA(1);
					int LA2_311 = LA(2);
					
					if ((LA1_311==COMMA) && (_tokenSet_0.member(LA2_311))) {
						{
						match(COMMA);
						if (matchError) {break loop384;}
						}
						enumerator_g();
						if (matchError) {break loop384;}
					}
					else {
						break _loop548;
					}
					
				} while (true);
				}
				{
				switch ( LA(1)) {
				case COMMA:
				{
					consume();
					break;
				}
				case EOF:
				case RCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop384;}
				}
				}
				}
				enumerator_list_AST = (AST)currentAST.root;
				break;
			}
			case EOF:
			case RCURLY:
			{
				enumerator_list_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop384;}
			}
			}
		break;} // loop384
		if (matchError) {
	}
	returnAST = enumerator_list_AST;
}

	public final void cpp11_expression_list_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cpp11_expression_list_AST = null;
		
		loop385:  while (true) {
			cpp11_assignment_expression_g();
			if (matchError) {break loop385;}
			{
			_loop1169:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp1578_AST = null;
					consume();
					cpp11_assignment_expression_g();
					if (matchError) {break loop385;}
				}
				else {
					break _loop1169;
				}
				
			} while (true);
			}
			cpp11_expression_list_AST = (AST)currentAST.root;
		break;} // loop385
		if (matchError) {
	}
	returnAST = cpp11_expression_list_AST;
}

	public final void declarator_suffixes_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declarator_suffixes_AST = null;
		TypeQualifier tq;
		
		loop386:  while (true) {
			{
			int LA1_312 = LA(1);
			int LA2_312 = LA(2);
			
			if ((LA1_312==LSQUARE)) {
				{
				int _cnt748=0;
				_loop748:
				do {
					int LA1_313 = LA(1);
					int LA2_313 = LA(2);
					
					if ((LA1_313==LSQUARE) && (_tokenSet_289.member(LA2_313))) {
						AST tmp1579_AST = null;
						consume();
						{
						if ((_tokenSet_169.member(LA(1)))) {
							constant_expression_g();
							if (matchError) {break loop386;}
						}
						else if ((LA(1)==RSQUARE)) {
						}
						else {
							matchError=true;if (matchError) {break loop386;}
						}
						
						}
						AST tmp1580_AST = null;
						match(RSQUARE);
						if (matchError) {break loop386;}
					}
					else {
						if ( _cnt748>=1 ) { break _loop748; } else {matchError=true;if (matchError) {break loop386;}}
					}
					
					_cnt748++;
				} while (true);
				}
			}
			else {
				boolean synPredMatched750 = false;
				if (((LA1_312==LPAREN) && (_tokenSet_165.member(LA2_312)))) {
					int _m750 = mark();
					guessing++;
					guess750:  while (true) {
						{
						match(LPAREN);
						if (matchError) {break guess750;}
						match(RPAREN);
						if (matchError) {break guess750;}
						}
					synPredMatched750 = true;
					break;} // guess750
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m750);
					guessing--;
				}
				if ( synPredMatched750 ) {
					declarator_param_list_g();
					if (matchError) {break loop386;}
				}
				else if (((LA1_312==LPAREN) && (_tokenSet_165.member(LA2_312)))&&((!((LA(1)==LPAREN)&&(LA(2)==IDENT||LA(2)==LITERAL_final))||(qualifiedItemIsOneOf(qiType|qiCtor,1))))) {
					declarator_param_list_g();
					if (matchError) {break loop386;}
				}
				else {
					matchError=true;if (matchError) {break loop386;}
				}
				}
				}
				declarator_suffixes_AST = (AST)currentAST.root;
			break;} // loop386
			if (matchError) {
		}
		returnAST = declarator_suffixes_AST;
	}
	
	public final void template_param_expression_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_param_expression_AST = null;
		
		loop387:  while (true) {
			lazy_expression_g(true, false, 1);
			if (matchError) {break loop387;}
			template_param_expression_AST = (AST)currentAST.root;
		break;} // loop387
		if (matchError) {
	}
	returnAST = template_param_expression_AST;
}

	public final void initializer_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST initializer_AST = null;
		String s;
		
		loop388:  while (true) {
			int LA1_314 = LA(1);
			int LA2_314 = LA(2);
			
			boolean synPredMatched585 = false;
			if (((_tokenSet_0.member(LA1_314)) && (LA2_314==COLON))) {
				int _m585 = mark();
				guessing++;
				guess585:  while (true) {
					{
					literal_ident_g();
					if (matchError) {break guess585;}
					match(COLON);
					if (matchError) {break guess585;}
					}
				synPredMatched585 = true;
				break;} // guess585
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m585);
				guessing--;
			}
			if ( synPredMatched585 ) {
				s=literal_ident_g();
				if (matchError) {break loop388;}
				AST tmp1581_AST = null;
				match(COLON);
				if (matchError) {break loop388;}
				{
				int LA1_315 = LA(1);
				int LA2_315 = LA(2);
				
				if ((_tokenSet_233.member(LA1_315)) && (_tokenSet_1.member(LA2_315))) {
					initializer_g();
					if (matchError) {break loop388;}
				}
				else if ((_tokenSet_234.member(LA1_315)) && (_tokenSet_1.member(LA2_315))) {
				}
				else {
					matchError=true;if (matchError) {break loop388;}
				}
				
				}
				initializer_AST = (AST)currentAST.root;
			}
			else if ((LA1_314==LCURLY)) {
				array_initializer_g();
				if (matchError) {break loop388;}
				initializer_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_169.member(LA1_314)) && (_tokenSet_1.member(LA2_314))) {
				{
				int LA1_316 = LA(1);
				int LA2_316 = LA(2);
				
				boolean synPredMatched590 = false;
				if (((_tokenSet_236.member(LA1_316)) && (_tokenSet_190.member(LA2_316)))) {
					int _m590 = mark();
					guessing++;
					guess590:  while (true) {
						{
						{
						switch ( LA(1)) {
						case LITERAL___extension__:
						{
							consume();
							break;
						}
						case LPAREN:
						case LCURLY:
						case AMPERSAND:
						{
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess590;}
						}
						}
						}
						cast_array_initializer_head_g();
						if (matchError) {break guess590;}
						}
					synPredMatched590 = true;
					break;} // guess590
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m590);
					guessing--;
				}
				if ( synPredMatched590 ) {
					{
					switch ( LA(1)) {
					case LITERAL___extension__:
					{
						AST tmp1582_AST = null;
						consume();
						break;
					}
					case LPAREN:
					case AMPERSAND:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop388;}
					}
					}
					}
					cast_array_initializer_g();
					if (matchError) {break loop388;}
					{
					int LA1_317 = LA(1);
					int LA2_317 = LA(2);
					
					if ((_tokenSet_169.member(LA1_317)) && (_tokenSet_1.member(LA2_317))) {
						lazy_expression_g(false, false, 0);
						if (matchError) {break loop388;}
					}
					else if ((_tokenSet_237.member(LA1_317)) && (_tokenSet_1.member(LA2_317))) {
					}
					else {
						matchError=true;if (matchError) {break loop388;}
					}
					
					}
				}
				else if ((_tokenSet_169.member(LA1_316)) && (_tokenSet_1.member(LA2_316))) {
					lazy_expression_g(false, false, 0);
					if (matchError) {break loop388;}
				}
				else {
					matchError=true;if (matchError) {break loop388;}
				}
				
				}
				{
				switch ( LA(1)) {
				case ASSIGNEQUAL:
				case DIVIDEEQUAL:
				case PLUSEQUAL:
				case MINUSEQUAL:
				case TIMESEQUAL:
				case MODEQUAL:
				case SHIFTRIGHTEQUAL:
				case SHIFTLEFTEQUAL:
				case BITWISEANDEQUAL:
				case BITWISEOREQUAL:
				case BITWISEXOREQUAL:
				{
					{
					switch ( LA(1)) {
					case ASSIGNEQUAL:
					{
						AST tmp1583_AST = null;
						consume();
						break;
					}
					case TIMESEQUAL:
					{
						AST tmp1584_AST = null;
						consume();
						break;
					}
					case DIVIDEEQUAL:
					{
						AST tmp1585_AST = null;
						consume();
						break;
					}
					case MINUSEQUAL:
					{
						AST tmp1586_AST = null;
						consume();
						break;
					}
					case PLUSEQUAL:
					{
						AST tmp1587_AST = null;
						consume();
						break;
					}
					case MODEQUAL:
					{
						AST tmp1588_AST = null;
						consume();
						break;
					}
					case SHIFTLEFTEQUAL:
					{
						AST tmp1589_AST = null;
						consume();
						break;
					}
					case SHIFTRIGHTEQUAL:
					{
						AST tmp1590_AST = null;
						consume();
						break;
					}
					case BITWISEANDEQUAL:
					{
						AST tmp1591_AST = null;
						consume();
						break;
					}
					case BITWISEXOREQUAL:
					{
						AST tmp1592_AST = null;
						consume();
						break;
					}
					case BITWISEOREQUAL:
					{
						AST tmp1593_AST = null;
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop388;}
					}
					}
					}
					initializer_g();
					if (matchError) {break loop388;}
					break;
				}
				case EOF:
				case ELLIPSIS:
				case COLON:
				case COMMA:
				case SEMICOLON:
				case RCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop388;}
				}
				}
				}
				initializer_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;if (matchError) {break loop388;}
			}
			
		break;} // loop388
		if (matchError) {
	}
	returnAST = initializer_AST;
}

	public final void decltype_expression_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST decltype_expression_AST = null;
		
		loop389:  while (true) {
			AST tmp1594_AST = null;
			match(LPAREN);
			if (matchError) {break loop389;}
			expression_list_g();
			if (matchError) {break loop389;}
			AST tmp1595_AST = null;
			match(RPAREN);
			if (matchError) {break loop389;}
			decltype_expression_AST = (AST)currentAST.root;
		break;} // loop389
		if (matchError) {
	}
	returnAST = decltype_expression_AST;
}

	protected final void balanceSquaresInExpression_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST balanceSquaresInExpression_AST = null;
		/*TypeSpecifier*/int ts=0; String s;
		
		loop390:  while (true) {
			AST tmp1596_AST = null;
			match(LSQUARE);
			if (matchError) {break loop390;}
			{
			_loop1272:
			do {
				// nongreedy exit test
				if ((LA(1)==RSQUARE) && (_tokenSet_1.member(LA(2)))) break _loop1272;
				int LA1_318 = LA(1);
				int LA2_318 = LA(2);
				
				switch ( LA1_318) {
				case LCURLY:
				{
					balanceCurlies_g();
					if (matchError) {break loop390;}
					break;
				}
				case LSQUARE:
				{
					balanceSquaresInExpression_g();
					if (matchError) {break loop390;}
					{
					int LA1_319 = LA(1);
					int LA2_319 = LA(2);
					
					boolean synPredMatched1269 = false;
					if (((_tokenSet_245.member(LA1_319)) && (_tokenSet_1.member(LA2_319)))) {
						int _m1269 = mark();
						guessing++;
						guess1269:  while (true) {
							{
							lambda_expression_post_capture_predicate_g();
							if (matchError) {break guess1269;}
							}
						synPredMatched1269 = true;
						break;} // guess1269
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1269);
						guessing--;
					}
					if ( synPredMatched1269 ) {
						lambda_expression_post_capture_g();
						if (matchError) {break loop390;}
					}
					else if ((_tokenSet_190.member(LA1_319)) && (_tokenSet_1.member(LA2_319))) {
					}
					else {
						matchError=true;if (matchError) {break loop390;}
					}
					
					}
					break;
				}
				case LPAREN:
				{
					balanceParensInExpression_g();
					if (matchError) {break loop390;}
					break;
				}
				case RPAREN:
				case RCURLY:
				{
					{
					switch ( LA(1)) {
					case RCURLY:
					{
						AST tmp1597_AST = null;
						consume();
						break;
					}
					case RPAREN:
					{
						AST tmp1598_AST = null;
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop390;}
					}
					}
					}
					break;
				}
				default:
					boolean synPredMatched1260 = false;
					if (((_tokenSet_0.member(LA1_318)) && (_tokenSet_190.member(LA2_318)))) {
						int _m1260 = mark();
						guessing++;
						guess1260:  while (true) {
							{
							literal_ident_g();
							if (matchError) {break guess1260;}
							}
						synPredMatched1260 = true;
						break;} // guess1260
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1260);
						guessing--;
					}
					if ( synPredMatched1260 ) {
						s=literal_ident_g();
						if (matchError) {break loop390;}
						{
						_loop1262:
						do {
							int LA1_320 = LA(1);
							int LA2_320 = LA(2);
							
							if ((LA1_320==LSQUARE) && (_tokenSet_190.member(LA2_320))) {
								balanceSquaresInExpression_g();
								if (matchError) {break loop390;}
							}
							else {
								break _loop1262;
							}
							
						} while (true);
						}
					}
					else {
						boolean synPredMatched1264 = false;
						if (((_tokenSet_200.member(LA1_318)) && (_tokenSet_190.member(LA2_318)))) {
							int _m1264 = mark();
							guessing++;
							guess1264:  while (true) {
								{
								builtin_type_g(0);
								if (matchError) {break guess1264;}
								}
							synPredMatched1264 = true;
							break;} // guess1264
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m1264);
							guessing--;
						}
						if ( synPredMatched1264 ) {
							ts=builtin_type_g(0);
							if (matchError) {break loop390;}
							{
							_loop1266:
							do {
								int LA1_321 = LA(1);
								int LA2_321 = LA(2);
								
								if ((LA1_321==LSQUARE) && (_tokenSet_190.member(LA2_321))) {
									balanceSquaresInExpression_g();
									if (matchError) {break loop390;}
								}
								else {
									break _loop1266;
								}
								
							} while (true);
							}
						}
						else if ((_tokenSet_5.member(LA1_318)) && (_tokenSet_190.member(LA2_318))) {
							{
							AST tmp1599_AST = null;
							match(_tokenSet_5);
							if (matchError) {break loop390;}
							}
						}
					else {
						break _loop1272;
					}
					}}
				} while (true);
				}
				AST tmp1600_AST = null;
				match(RSQUARE);
				if (matchError) {break loop390;}
				balanceSquaresInExpression_AST = (AST)currentAST.root;
			break;} // loop390
			if (matchError) {
		}
		returnAST = balanceSquaresInExpression_AST;
	}
	
	public final void lambda_expression_post_capture_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lambda_expression_post_capture_AST = null;
		
		loop391:  while (true) {
			{
			{
			switch ( LA(1)) {
			case LPAREN:
			{
				AST tmp1601_AST = null;
				consume();
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				case LPAREN:
				case LSQUARE:
				case STAR:
				case AND:
				case AMPERSAND:
				case TILDE:
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					parameter_list_g(false);
					if (matchError) {break loop391;}
					break;
				}
				case RPAREN:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop391;}
				}
				}
				}
				AST tmp1602_AST = null;
				match(RPAREN);
				if (matchError) {break loop391;}
				break;
			}
			case POINTERTO:
			case LSQUARE:
			case LCURLY:
			case LITERAL_mutable:
			case LITERAL_throw:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_noexcept:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop391;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_mutable:
			{
				AST tmp1603_AST = null;
				consume();
				break;
			}
			case POINTERTO:
			case LSQUARE:
			case LCURLY:
			case LITERAL_throw:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			case LITERAL_noexcept:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop391;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification_g();
				if (matchError) {break loop391;}
				break;
			}
			case POINTERTO:
			case LSQUARE:
			case LCURLY:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop391;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LSQUARE:
			case LITERAL___attribute__:
			case LITERAL___attribute:
			{
				function_attribute_specification_g();
				if (matchError) {break loop391;}
				break;
			}
			case POINTERTO:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop391;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case POINTERTO:
			{
				trailing_type_g();
				if (matchError) {break loop391;}
				break;
			}
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop391;}
			}
			}
			}
			compound_statement_g();
			if (matchError) {break loop391;}
			}
			lambda_expression_post_capture_AST = (AST)currentAST.root;
		break;} // loop391
		if (matchError) {
	}
	returnAST = lambda_expression_post_capture_AST;
}

	public final /*TypeSpecifier*/int  trailing_type_specifier_g() {
		/*TypeSpecifier*/int ts = tsInvalid;
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST trailing_type_specifier_AST = null;
		String id;
		
		loop392:  while (true) {
			switch ( LA(1)) {
			case SCOPE:
			case IDENT:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___complex__:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			{
				ts=simple_type_specifier_g(false);
				if (matchError) {break loop392;}
				trailing_type_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_enum:
			case LITERAL_typename:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			{
				{
				switch ( LA(1)) {
				case LITERAL_class:
				{
					AST tmp1604_AST = null;
					consume();
					break;
				}
				case LITERAL_struct:
				{
					AST tmp1605_AST = null;
					consume();
					break;
				}
				case LITERAL_union:
				{
					AST tmp1606_AST = null;
					consume();
					break;
				}
				case LITERAL_enum:
				{
					AST tmp1607_AST = null;
					consume();
					break;
				}
				case LITERAL_typename:
				{
					AST tmp1608_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop392;}
				}
				}
				}
				id=qualified_id_g();
				if (matchError) {break loop392;}
				trailing_type_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_auto:
			{
				AST tmp1609_AST = null;
				consume();
				trailing_type_specifier_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop392;}
			}
			}
		break;} // loop392
		if (matchError) {
	}
	returnAST = trailing_type_specifier_AST;
	return ts;
}

/**
 * This rule could be used when nothing goes after it (i.e. parent rule is not anchored).
 * NOTE: it doesn't handle top-level empty alternative
 */
	public final void greedy_abstract_declarator_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST greedy_abstract_declarator_AST = null;
		
		loop393:  while (true) {
			switch ( LA(1)) {
			case STAR:
			case AND:
			case AMPERSAND:
			case SCOPE:
			case IDENT:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			case LITERAL___clrcall:
			{
				ptr_operator_g();
				if (matchError) {break loop393;}
				{
				switch ( LA(1)) {
				case LITERAL_restrict:
				case LITERAL___restrict:
				case LITERAL___restrict__:
				{
					literal_restrict_g();
					if (matchError) {break loop393;}
					break;
				}
				case EOF:
				case ELLIPSIS:
				case ASSIGNEQUAL:
				case COLON:
				case COMMA:
				case SEMICOLON:
				case POINTERTO:
				case LPAREN:
				case RPAREN:
				case LSQUARE:
				case LCURLY:
				case GREATERTHAN:
				case STAR:
				case AND:
				case AMPERSAND:
				case TILDE:
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_namespace:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL_try:
				case LITERAL_using:
				case LITERAL_asm:
				case LITERAL__asm:
				case LITERAL___asm__:
				case LITERAL___asm:
				case LITERAL_new:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_static_assert:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL___try:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop393;}
				}
				}
				}
				{
				int LA1_322 = LA(1);
				int LA2_322 = LA(2);
				
				if ((_tokenSet_304.member(LA1_322)) && (_tokenSet_305.member(LA2_322))) {
					greedy_abstract_declarator_g();
					if (matchError) {break loop393;}
				}
				else if ((_tokenSet_132.member(LA1_322)) && (_tokenSet_1.member(LA2_322))) {
				}
				else {
					matchError=true;if (matchError) {break loop393;}
				}
				
				}
				greedy_abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			case LPAREN:
			case LSQUARE:
			{
				{
				int _cnt879=0;
				_loop879:
				do {
					int LA1_323 = LA(1);
					int LA2_323 = LA(2);
					
					if ((LA1_323==LPAREN||LA1_323==LSQUARE) && (_tokenSet_292.member(LA2_323))) {
						abstract_declarator_suffix_g();
						if (matchError) {break loop393;}
					}
					else {
						if ( _cnt879>=1 ) { break _loop879; } else {matchError=true;if (matchError) {break loop393;}}
					}
					
					_cnt879++;
				} while (true);
				}
				greedy_abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			case ELLIPSIS:
			{
				AST tmp1610_AST = null;
				consume();
				greedy_abstract_declarator_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop393;}
			}
			}
		break;} // loop393
		if (matchError) {
	}
	returnAST = greedy_abstract_declarator_AST;
}

	public final void lazy_base_close_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST lazy_base_close_AST = null;
		
		loop394:  while (true) {
			{
			AST tmp1611_AST = null;
			match(COLON);
			if (matchError) {break loop394;}
			}
			{
			_loop1300:
			do {
				// nongreedy exit test
				if ((LA(1)==LCURLY) && (_tokenSet_1.member(LA(2)))) break _loop1300;
				int LA1_324 = LA(1);
				int LA2_324 = LA(2);
				
				if (((LA1_324 >= ELLIPSIS && LA1_324 <= CSM_END)) && ((LA2_324 >= ELLIPSIS && LA2_324 <= CSM_END))) {
					AST tmp1612_AST = null;
					matchNot(EOF);
					if (matchError) {break loop394;}
				}
				else {
					break _loop1300;
				}
				
			} while (true);
			}
			balanceCurlies_g();
			if (matchError) {break loop394;}
			lazy_base_close_AST = (AST)currentAST.root;
		break;} // loop394
		if (matchError) {
	}
	returnAST = lazy_base_close_AST;
}

	public final void cast_array_initializer_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cast_array_initializer_AST = null;
		
		loop395:  while (true) {
			{
			switch ( LA(1)) {
			case AMPERSAND:
			{
				AST tmp1613_AST = null;
				consume();
				break;
			}
			case LPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop395;}
			}
			}
			}
			{
			int _cnt598=0;
			_loop598:
			do {
				if ((LA(1)==LPAREN)) {
					balanceParensInExpression_g();
					if (matchError) {break loop395;}
				}
				else {
					if ( _cnt598>=1 ) { break _loop598; } else {matchError=true;if (matchError) {break loop395;}}
				}
				
				_cnt598++;
			} while (true);
			}
			array_initializer_g();
			if (matchError) {break loop395;}
			cast_array_initializer_AST = (AST)currentAST.root;
		break;} // loop395
		if (matchError) {
	}
	returnAST = cast_array_initializer_AST;
}

	public final void throw_expression_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST throw_expression_AST = null;
		
		loop396:  while (true) {
			AST tmp1614_AST = null;
			match(LITERAL_throw);
			if (matchError) {break loop396;}
			{
			int LA1_325 = LA(1);
			int LA2_325 = LA(2);
			
			if ((_tokenSet_189.member(LA1_325)) && (_tokenSet_1.member(LA2_325))) {
				assignment_expression_g();
				if (matchError) {break loop396;}
			}
			else if ((_tokenSet_243.member(LA1_325)) && (_tokenSet_1.member(LA2_325))) {
			}
			else {
				matchError=true;if (matchError) {break loop396;}
			}
			
			}
			throw_expression_AST = (AST)currentAST.root;
		break;} // loop396
		if (matchError) {
	}
	returnAST = throw_expression_AST;
}

	public final void parameter_declaration_list_g(
		boolean symTabCheck
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST parameter_declaration_list_AST = null;
		
		loop397:  while (true) {
			{
			if (!(!symTabCheck || action.isType(LT(1).getText())))
			{matchError=true;
			if (matchError) {break loop397;}}
			parameter_declaration_g(false);
			if (matchError) {break loop397;}
			{
			_loop849:
			do {
				if ((LA(1)==COMMA)) {
					consume();
					parameter_declaration_g(false);
					if (matchError) {break loop397;}
				}
				else {
					break _loop849;
				}
				
			} while (true);
			}
			}
			parameter_declaration_list_AST = (AST)currentAST.root;
		break;} // loop397
		if (matchError) {
	}
	returnAST = parameter_declaration_list_AST;
}

	protected final void literal_asm_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_asm_AST = null;
		
		loop398:  while (true) {
			switch ( LA(1)) {
			case LITERAL_asm:
			{
				AST tmp1616_AST = null;
				consume();
				literal_asm_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL__asm:
			{
				AST tmp1617_AST = null;
				consume();
				literal_asm_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___asm:
			{
				AST tmp1618_AST = null;
				consume();
				literal_asm_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___asm__:
			{
				AST tmp1619_AST = null;
				consume();
				literal_asm_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop398;}
			}
			}
		break;} // loop398
		if (matchError) {
	}
	returnAST = literal_asm_AST;
}

	public final void declarator_param_list_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declarator_param_list_AST = null;
		
		loop399:  while (true) {
			AST tmp1620_AST = null;
			match(LPAREN);
			if (matchError) {break loop399;}
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			case LPAREN:
			case LSQUARE:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				parameter_list_g(false);
				if (matchError) {break loop399;}
				break;
			}
			case RPAREN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop399;}
			}
			}
			}
			AST tmp1621_AST = null;
			match(RPAREN);
			if (matchError) {break loop399;}
			cv_qualifier_seq_g();
			if (matchError) {break loop399;}
			{
			int LA1_326 = LA(1);
			int LA2_326 = LA(2);
			
			if ((LA1_326==AND||LA1_326==AMPERSAND) && (_tokenSet_168.member(LA2_326))) {
				ref_qualifier_g();
				if (matchError) {break loop399;}
			}
			else if ((_tokenSet_168.member(LA1_326)) && (_tokenSet_1.member(LA2_326))) {
			}
			else {
				matchError=true;if (matchError) {break loop399;}
			}
			
			}
			{
			switch ( LA(1)) {
			case LITERAL_throw:
			case LITERAL_noexcept:
			{
				exception_specification_g();
				if (matchError) {break loop399;}
				break;
			}
			case EOF:
			case ELLIPSIS:
			case ASSIGNEQUAL:
			case COLON:
			case COMMA:
			case SEMICOLON:
			case POINTERTO:
			case LPAREN:
			case RPAREN:
			case LSQUARE:
			case LCURLY:
			case GREATERTHAN:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_namespace:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_try:
			case LITERAL_using:
			case LITERAL_asm:
			case LITERAL__asm:
			case LITERAL___asm__:
			case LITERAL___asm:
			case LITERAL_new:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_static_assert:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL___try:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop399;}
			}
			}
			}
			{
			int LA1_327 = LA(1);
			int LA2_327 = LA(2);
			
			if ((LA1_327==POINTERTO) && (_tokenSet_306.member(LA2_327))) {
				trailing_type_g();
				if (matchError) {break loop399;}
			}
			else if ((_tokenSet_132.member(LA1_327)) && (_tokenSet_1.member(LA2_327))) {
			}
			else {
				matchError=true;if (matchError) {break loop399;}
			}
			
			}
			declarator_param_list_AST = (AST)currentAST.root;
		break;} // loop399
		if (matchError) {
	}
	returnAST = declarator_param_list_AST;
}

	protected final void literal_declspec_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_declspec_AST = null;
		
		loop400:  while (true) {
			switch ( LA(1)) {
			case LITERAL__declspec:
			{
				AST tmp1622_AST = null;
				consume();
				literal_declspec_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL___declspec:
			{
				AST tmp1623_AST = null;
				consume();
				literal_declspec_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop400;}
			}
			}
		break;} // loop400
		if (matchError) {
	}
	returnAST = literal_declspec_AST;
}

	public final void access_specifier_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST access_specifier_AST = null;
		
		loop401:  while (true) {
			switch ( LA(1)) {
			case LITERAL_public:
			{
				AST tmp1624_AST = null;
				consume();
				access_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_protected:
			{
				AST tmp1625_AST = null;
				consume();
				access_specifier_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_private:
			{
				AST tmp1626_AST = null;
				consume();
				access_specifier_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop401;}
			}
			}
		break;} // loop401
		if (matchError) {
	}
	returnAST = access_specifier_AST;
}

	public final void assigned_type_name_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST assigned_type_name_AST = null;
		/*TypeSpecifier*/int ts;
		TypeQualifier tq;
		DeclSpecifier ds = dsInvalid;
		
		loop402:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL__TYPE_QUALIFIER__:
			{
				tq=cv_qualifier_g();
				if (matchError) {break loop402;}
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_enum:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___complex__:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop402;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case LITERAL_typename:
			{
				AST tmp1627_AST = null;
				consume();
				break;
			}
			case SCOPE:
			case IDENT:
			case LITERAL_enum:
			case LITERAL_auto:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___complex__:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop402;}
			}
			}
			}
			ts=type_specifier_g(ds, false);
			if (matchError) {break loop402;}
			{
			switch ( LA(1)) {
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL__TYPE_QUALIFIER__:
			{
				postfix_cv_qualifier_g();
				if (matchError) {break loop402;}
				break;
			}
			case ELLIPSIS:
			case COMMA:
			case LPAREN:
			case LSQUARE:
			case GREATERTHAN:
			case STAR:
			case AND:
			case AMPERSAND:
			case SCOPE:
			case IDENT:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_decltype:
			case LITERAL___decltype:
			case LITERAL___clrcall:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop402;}
			}
			}
			}
			abstract_declarator_g();
			if (matchError) {break loop402;}
			assigned_type_name_AST = (AST)currentAST.root;
		break;} // loop402
		if (matchError) {
	}
	returnAST = assigned_type_name_AST;
}

	protected final void template_template_parameter_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_template_parameter_AST = null;
		String s;
		
		loop403:  while (true) {
			template_head_g();
			if (matchError) {break loop403;}
			AST tmp1628_AST = null;
			match(LITERAL_class);
			if (matchError) {break loop403;}
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			{
				AST tmp1629_AST = null;
				consume();
				break;
			}
			case ASSIGNEQUAL:
			case COMMA:
			case GREATERTHAN:
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop403;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case IDENT:
			case LITERAL_final:
			case LITERAL_override:
			{
				s=literal_ident_g();
				if (matchError) {break loop403;}
				break;
			}
			case ASSIGNEQUAL:
			case COMMA:
			case GREATERTHAN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop403;}
			}
			}
			}
			{
			switch ( LA(1)) {
			case ASSIGNEQUAL:
			{
				AST tmp1630_AST = null;
				consume();
				assigned_type_name_g();
				if (matchError) {break loop403;}
				break;
			}
			case COMMA:
			case GREATERTHAN:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop403;}
			}
			}
			}
			template_template_parameter_AST = (AST)currentAST.root;
		break;} // loop403
		if (matchError) {
	}
	returnAST = template_template_parameter_AST;
}

	public final void parameter_declaration_g(
		boolean inTemplateParams
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST parameter_declaration_AST = null;
		int oldTs = _ts;
		
		loop404:  while (true) {
			{
			if (!(beginParameterDeclaration()))
			{matchError=true;
			if (matchError) {break loop404;}}
			}
			{
			int LA1_328 = LA(1);
			int LA2_328 = LA(2);
			
			if (((_tokenSet_22.member(LA1_328)) && (_tokenSet_329.member(LA2_328)))&&(!((LA(1)==SCOPE) && (LA(2)==STAR||LA(2)==LITERAL_OPERATOR)) &&
			    (!(LA(1)==SCOPE||LA(1)==IDENT||LA(1)==LITERAL_final) ||
			    qualifiedItemIsOneOf(qiType|qiCtor) ))) {
				declaration_specifiers_g(true, false);
				if (matchError) {break loop404;}
				{
				int LA1_329 = LA(1);
				int LA2_329 = LA(2);
				
				boolean synPredMatched855 = false;
				if (((_tokenSet_109.member(LA1_329)) && (_tokenSet_330.member(LA2_329)))) {
					int _m855 = mark();
					guessing++;
					guess855:  while (true) {
						{
						declarator_g(declFunctionParam, 0);
						if (matchError) {break guess855;}
						}
					synPredMatched855 = true;
					break;} // guess855
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m855);
					guessing--;
				}
				if ( synPredMatched855 ) {
					declarator_g(declFunctionParam, 0);
					if (matchError) {break loop404;}
				}
				else if ((_tokenSet_331.member(LA1_329)) && (_tokenSet_332.member(LA2_329))) {
					abstract_declarator_g();
					if (matchError) {break loop404;}
				}
				else {
					matchError=true;if (matchError) {break loop404;}
				}
				
				}
			}
			else {
				boolean synPredMatched857 = false;
				if (((_tokenSet_109.member(LA1_328)) && (_tokenSet_330.member(LA2_328)))) {
					int _m857 = mark();
					guessing++;
					guess857:  while (true) {
						{
						declarator_g(declOther, 0);
						if (matchError) {break guess857;}
						}
					synPredMatched857 = true;
					break;} // guess857
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m857);
					guessing--;
				}
				if ( synPredMatched857 ) {
					declarator_g(declOther, 0);
					if (matchError) {break loop404;}
				}
				else if ((LA1_328==ELLIPSIS) && (_tokenSet_334.member(LA2_328))) {
					AST tmp1631_AST = null;
					consume();
				}
				else {
					matchError=true;if (matchError) {break loop404;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case ASSIGNEQUAL:
				{
					AST tmp1632_AST = null;
					consume();
					{
					int LA1_330 = LA(1);
					int LA2_330 = LA(2);
					
					if (((_tokenSet_169.member(LA1_330)) && (_tokenSet_190.member(LA2_330)))&&(inTemplateParams)) {
						template_param_expression_g();
						if (matchError) {break loop404;}
					}
					else if ((_tokenSet_284.member(LA1_330)) && (_tokenSet_190.member(LA2_330))) {
						cpp11_assignment_expression_g();
						if (matchError) {break loop404;}
					}
					else {
						matchError=true;if (matchError) {break loop404;}
					}
					
					}
					break;
				}
				case ELLIPSIS:
				case COMMA:
				case RPAREN:
				case GREATERTHAN:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop404;}
				}
				}
				}
				{
				if (!(endParameterDeclaration(oldTs)))
				{matchError=true;
				if (matchError) {break loop404;}}
				}
				parameter_declaration_AST = (AST)currentAST.root;
			break;} // loop404
			if (matchError) {
		}
		returnAST = parameter_declaration_AST;
	}
	
	public final void statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST statement_AST = null;
		StorageClass sc = scInvalid; int ts = 0;
		
		loop405:  while (true) {
			{
			int LA1_331 = LA(1);
			int LA2_331 = LA(2);
			
			switch ( LA1_331) {
			case LITERAL_case:
			{
				case_statement_g();
				if (matchError) {break loop405;}
				break;
			}
			case LITERAL_default:
			{
				default_statement_g();
				if (matchError) {break loop405;}
				break;
			}
			case LCURLY:
			{
				compound_statement_g();
				if (matchError) {break loop405;}
				break;
			}
			case LITERAL_if:
			case LITERAL_switch:
			{
				selection_statement_g();
				if (matchError) {break loop405;}
				break;
			}
			case LITERAL_while:
			case LITERAL_do:
			case LITERAL_for:
			{
				iteration_statement_g();
				if (matchError) {break loop405;}
				break;
			}
			case LITERAL_goto:
			case LITERAL_continue:
			case LITERAL_break:
			case LITERAL_return:
			{
				jump_statement_g();
				if (matchError) {break loop405;}
				break;
			}
			case LITERAL_try:
			case LITERAL___try:
			{
				try_block_g(false);
				if (matchError) {break loop405;}
				break;
			}
			default:
				boolean synPredMatched1025 = false;
				if (((_tokenSet_26.member(LA1_331)) && (_tokenSet_27.member(LA2_331)))) {
					int _m1025 = mark();
					guessing++;
					guess1025:  while (true) {
						{
						{
						_loop1024:
						do {
							switch ( LA(1)) {
							case LITERAL_extern:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL___global:
							case LITERAL___thread:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_thread_local:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								storage_class_specifier_g();
								if (matchError) {break guess1025;}
								break;
							}
							case LITERAL_const:
							case LITERAL___const__:
							case LITERAL___const:
							case LITERAL_const_cast:
							case LITERAL_volatile:
							case LITERAL___volatile__:
							case LITERAL___volatile:
							case LITERAL__TYPE_QUALIFIER__:
							{
								cv_qualifier_g();
								if (matchError) {break guess1025;}
								break;
							}
							case LITERAL_typedef:
							{
								consume();
								break;
							}
							default:
							{
								break _loop1024;
							}
							}
						} while (true);
						}
						class_head_g();
						if (matchError) {break guess1025;}
						}
					synPredMatched1025 = true;
					break;} // guess1025
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m1025);
					guessing--;
				}
				if ( synPredMatched1025 ) {
					declaration_g(declOther);
					if (matchError) {break loop405;}
				}
				else {
					boolean synPredMatched1029 = false;
					if (((_tokenSet_26.member(LA1_331)) && (_tokenSet_27.member(LA2_331)))) {
						int _m1029 = mark();
						guessing++;
						guess1029:  while (true) {
							{
							{
							_loop1028:
							do {
								switch ( LA(1)) {
								case LITERAL_extern:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_thread_local:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									storage_class_specifier_g();
									if (matchError) {break guess1029;}
									break;
								}
								case LITERAL_const:
								case LITERAL___const__:
								case LITERAL___const:
								case LITERAL_const_cast:
								case LITERAL_volatile:
								case LITERAL___volatile__:
								case LITERAL___volatile:
								case LITERAL__TYPE_QUALIFIER__:
								{
									cv_qualifier_g();
									if (matchError) {break guess1029;}
									break;
								}
								case LITERAL_typedef:
								{
									consume();
									break;
								}
								default:
								{
									break _loop1028;
								}
								}
							} while (true);
							}
							class_forward_declaration_g();
							if (matchError) {break guess1029;}
							}
						synPredMatched1029 = true;
						break;} // guess1029
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1029);
						guessing--;
					}
					if ( synPredMatched1029 ) {
						declaration_g(declOther);
						if (matchError) {break loop405;}
					}
					else {
						boolean synPredMatched1035 = false;
						if (((_tokenSet_363.member(LA1_331)) && (_tokenSet_364.member(LA2_331)))) {
							int _m1035 = mark();
							guessing++;
							guess1035:  while (true) {
								{
								{
								switch ( LA(1)) {
								case LITERAL_extern:
								case LITERAL_auto:
								case LITERAL_register:
								case LITERAL_static:
								case LITERAL_mutable:
								case LITERAL___global:
								case LITERAL___thread:
								case LITERAL___symbolic:
								case LITERAL___hidden:
								case LITERAL_thread_local:
								case LITERAL__STORAGE_CLASS_SPECIFIER__:
								{
									storage_class_specifier_g();
									if (matchError) {break guess1035;}
									break;
								}
								case LITERAL_enum:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess1035;}
								}
								}
								}
								match(LITERAL_enum);
								if (matchError) {break guess1035;}
								{
								switch ( LA(1)) {
								case LITERAL_class:
								{
									consume();
									break;
								}
								case LITERAL_struct:
								{
									consume();
									break;
								}
								case COLON:
								case LCURLY:
								case IDENT:
								case LITERAL_final:
								case LITERAL_override:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess1035;}
								}
								}
								}
								{
								switch ( LA(1)) {
								case IDENT:
								case LITERAL_final:
								case LITERAL_override:
								{
									literal_ident_g();
									if (matchError) {break guess1035;}
									break;
								}
								case COLON:
								case LCURLY:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess1035;}
								}
								}
								}
								{
								switch ( LA(1)) {
								case COLON:
								{
									consume();
									ts=builtin_cv_type_specifier_g(ts);
									if (matchError) {break guess1035;}
									break;
								}
								case LCURLY:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess1035;}
								}
								}
								}
								match(LCURLY);
								if (matchError) {break guess1035;}
								}
							synPredMatched1035 = true;
							break;} // guess1035
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m1035);
							guessing--;
						}
						if ( synPredMatched1035 ) {
							{
							switch ( LA(1)) {
							case LITERAL_extern:
							case LITERAL_auto:
							case LITERAL_register:
							case LITERAL_static:
							case LITERAL_mutable:
							case LITERAL___global:
							case LITERAL___thread:
							case LITERAL___symbolic:
							case LITERAL___hidden:
							case LITERAL_thread_local:
							case LITERAL__STORAGE_CLASS_SPECIFIER__:
							{
								sc=storage_class_specifier_g();
								if (matchError) {break loop405;}
								break;
							}
							case LITERAL_enum:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break loop405;}
							}
							}
							}
							enum_specifier_g();
							if (matchError) {break loop405;}
							{
							switch ( LA(1)) {
							case ELLIPSIS:
							case COLON:
							case LPAREN:
							case LSQUARE:
							case STAR:
							case AND:
							case AMPERSAND:
							case TILDE:
							case SCOPE:
							case IDENT:
							case LITERAL_OPERATOR:
							case LITERAL__stdcall:
							case LITERAL___stdcall:
							case LITERAL_this:
							case LITERAL_true:
							case LITERAL_false:
							case LITERAL__cdecl:
							case LITERAL___cdecl:
							case LITERAL__near:
							case LITERAL___near:
							case LITERAL__far:
							case LITERAL___far:
							case LITERAL___interrupt:
							case LITERAL_pascal:
							case LITERAL__pascal:
							case LITERAL___pascal:
							case LITERAL___attribute__:
							case LITERAL___attribute:
							case LITERAL_final:
							case LITERAL_override:
							case LITERAL_decltype:
							case LITERAL___decltype:
							case LITERAL___clrcall:
							{
								member_declarator_list_g();
								if (matchError) {break loop405;}
								break;
							}
							case SEMICOLON:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break loop405;}
							}
							}
							}
							match(SEMICOLON);
							if (matchError) {break loop405;}
						}
						else {
							boolean synPredMatched1039 = false;
							if (((_tokenSet_2.member(LA1_331)) && (_tokenSet_365.member(LA2_331)))) {
								int _m1039 = mark();
								guessing++;
								guess1039:  while (true) {
									{
									match(LITERAL_typedef);
									if (matchError) {break guess1039;}
									}
								synPredMatched1039 = true;
								break;} // guess1039
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m1039);
								guessing--;
							}
							if ( synPredMatched1039 ) {
								external_declaration_g();
								if (matchError) {break loop405;}
							}
							else {
								boolean synPredMatched1044 = false;
								if ((((_tokenSet_2.member(LA1_331)) && (_tokenSet_365.member(LA2_331)))&&(isC()))) {
									int _m1044 = mark();
									guessing++;
									guess1044:  while (true) {
										{
										{
										switch ( LA(1)) {
										case LITERAL___extension__:
										{
											consume();
											break;
										}
										case LSQUARE:
										case SCOPE:
										case IDENT:
										case LITERAL_typeof:
										case LITERAL___typeof__:
										case LITERAL___typeof:
										case LITERAL_typedef:
										case LITERAL_enum:
										case LITERAL_extern:
										case LITERAL_inline:
										case LITERAL__inline:
										case LITERAL___inline__:
										case LITERAL___inline:
										case LITERAL_virtual:
										case LITERAL_explicit:
										case LITERAL_friend:
										case LITERAL__stdcall:
										case LITERAL___stdcall:
										case LITERAL_typename:
										case LITERAL_auto:
										case LITERAL_register:
										case LITERAL_static:
										case LITERAL_mutable:
										case LITERAL_const:
										case LITERAL___const__:
										case LITERAL___const:
										case LITERAL_const_cast:
										case LITERAL_volatile:
										case LITERAL___volatile__:
										case LITERAL___volatile:
										case LITERAL_char:
										case LITERAL_wchar_t:
										case LITERAL_bool:
										case LITERAL_short:
										case LITERAL_int:
										case LITERAL_long:
										case LITERAL_signed:
										case LITERAL___signed__:
										case LITERAL___signed:
										case LITERAL_unsigned:
										case LITERAL___unsigned__:
										case LITERAL_float:
										case LITERAL_double:
										case LITERAL_void:
										case LITERAL__declspec:
										case LITERAL___declspec:
										case LITERAL_class:
										case LITERAL_struct:
										case LITERAL_union:
										case LITERAL__int64:
										case LITERAL___int64:
										case LITERAL___w64:
										case LITERAL___attribute__:
										case LITERAL___complex__:
										case LITERAL___global:
										case LITERAL__Bool:
										case LITERAL__Complex:
										case LITERAL___thread:
										case LITERAL___attribute:
										case LITERAL__Imaginary:
										case LITERAL_bit:
										case LITERAL___symbolic:
										case LITERAL___hidden:
										case LITERAL_final:
										case LITERAL_override:
										case LITERAL_constexpr:
										case LITERAL_decltype:
										case LITERAL_thread_local:
										case LITERAL_alignas:
										case LITERAL_char16_t:
										case LITERAL_char32_t:
										case LITERAL___decltype:
										case LITERAL___complex:
										case LITERAL___forceinline:
										case LITERAL___clrcall:
										case LITERAL__Noreturn:
										case LITERAL___builtin_va_list:
										case LITERAL__BUILT_IN_TYPE__:
										case LITERAL__TYPE_QUALIFIER__:
										case LITERAL__STORAGE_CLASS_SPECIFIER__:
										{
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break guess1044;}
										}
										}
										}
										{
										int LA1_332 = LA(1);
										int LA2_332 = LA(2);
										
										if ((_tokenSet_21.member(LA1_332)) && (LA2_332==LPAREN||LA2_332==LSQUARE)) {
											function_attribute_specification_g();
											if (matchError) {break guess1044;}
										}
										else if ((_tokenSet_22.member(LA1_332)) && (_tokenSet_23.member(LA2_332))) {
										}
										else {
											matchError=true;if (matchError) {break guess1044;}
										}
										
										}
										declaration_specifiers_g(false, false);
										if (matchError) {break guess1044;}
										{
										int LA1_333 = LA(1);
										int LA2_333 = LA(2);
										
										if ((_tokenSet_21.member(LA1_333)) && (LA2_333==LPAREN||LA2_333==LSQUARE)) {
											function_attribute_specification_g();
											if (matchError) {break guess1044;}
										}
										else if ((_tokenSet_24.member(LA1_333)) && (_tokenSet_25.member(LA2_333))) {
										}
										else {
											matchError=true;if (matchError) {break guess1044;}
										}
										
										}
										function_declarator_g(true, false, false);
										if (matchError) {break guess1044;}
										match(LCURLY);
										if (matchError) {break guess1044;}
										}
									synPredMatched1044 = true;
									break;} // guess1044
									if (matchError) {
									   resetMatchError();
									}
									rewind(_m1044);
									guessing--;
								}
								if ( synPredMatched1044 ) {
									external_declaration_g();
									if (matchError) {break loop405;}
								}
								else {
									boolean synPredMatched1046 = false;
									if ((((_tokenSet_0.member(LA1_331)) && (_tokenSet_0.member(LA2_331)))&&( LT(1).getText().equals(LITERAL_EXEC) && LT(2).getText().equals(LITERAL_SQL) ))) {
										int _m1046 = mark();
										guessing++;
										guess1046:  while (true) {
											{
											literal_ident_g();
											if (matchError) {break guess1046;}
											literal_ident_g();
											if (matchError) {break guess1046;}
											}
										synPredMatched1046 = true;
										break;} // guess1046
										if (matchError) {
										   resetMatchError();
										}
										rewind(_m1046);
										guessing--;
									}
									if ( synPredMatched1046 ) {
										pro_c_statement_g();
										if (matchError) {break loop405;}
									}
									else {
										boolean synPredMatched1048 = false;
										if (((_tokenSet_26.member(LA1_331)) && (_tokenSet_27.member(LA2_331)))) {
											int _m1048 = mark();
											guessing++;
											guess1048:  while (true) {
												{
												is_known_typename_g();
												if (matchError) {break guess1048;}
												match(LPAREN);
												if (matchError) {break guess1048;}
												literal_ident_g();
												if (matchError) {break guess1048;}
												match(RPAREN);
												if (matchError) {break guess1048;}
												}
											synPredMatched1048 = true;
											break;} // guess1048
											if (matchError) {
											   resetMatchError();
											}
											rewind(_m1048);
											guessing--;
										}
										if ( synPredMatched1048 ) {
											declaration_g(declGeneric);
											if (matchError) {break loop405;}
										}
										else {
											boolean synPredMatched1050 = false;
											if (((_tokenSet_26.member(LA1_331)) && (_tokenSet_27.member(LA2_331)))) {
												int _m1050 = mark();
												guessing++;
												guess1050:  while (true) {
													{
													int LA1_334 = LA(1);
													int LA2_334 = LA(2);
													
													switch ( LA1_334) {
													case LITERAL_namespace:
													{
														consume();
														break;
													}
													case LITERAL_static_assert:
													{
														consume();
														break;
													}
													default:
														if ((_tokenSet_173.member(LA1_334)) && (true)) {
															is_declaration_g();
															if (matchError) {break guess1050;}
														}
														else if ((_tokenSet_54.member(LA1_334)) && (LA2_334==LITERAL_namespace)) {
															literal_inline_g();
															if (matchError) {break guess1050;}
															match(LITERAL_namespace);
															if (matchError) {break guess1050;}
														}
													else {
														matchError=true;if (matchError) {break guess1050;}
													}
													}
													}
												synPredMatched1050 = true;
												break;} // guess1050
												if (matchError) {
												   resetMatchError();
												}
												rewind(_m1050);
												guessing--;
											}
											if ( synPredMatched1050 ) {
												declaration_g(declStatement);
												if (matchError) {break loop405;}
											}
											else {
												boolean synPredMatched1052 = false;
												if (((_tokenSet_0.member(LA1_331)) && (LA2_331==COLON))) {
													int _m1052 = mark();
													guessing++;
													guess1052:  while (true) {
														{
														literal_ident_g();
														if (matchError) {break guess1052;}
														match(COLON);
														if (matchError) {break guess1052;}
														}
													synPredMatched1052 = true;
													break;} // guess1052
													if (matchError) {
													   resetMatchError();
													}
													rewind(_m1052);
													guessing--;
												}
												if ( synPredMatched1052 ) {
													labeled_statement_g();
													if (matchError) {break loop405;}
												}
												else if ((_tokenSet_189.member(LA1_331)) && ((LA2_331 >= ELLIPSIS && LA2_331 <= CSM_END))) {
													expression_g();
													if (matchError) {break loop405;}
													match(SEMICOLON);
													if (matchError) {break loop405;}
												}
												else if ((LA1_331==SEMICOLON) && (_tokenSet_366.member(LA2_331))) {
													match(SEMICOLON);
													if (matchError) {break loop405;}
												}
												else if (((LA1_331 >= LITERAL_asm && LA1_331 <= LITERAL___asm)) && (_tokenSet_367.member(LA2_331))) {
													asm_block_g();
													if (matchError) {break loop405;}
												}
											else {
												matchError=true;if (matchError) {break loop405;}
											}
											}}}}}}}}}
											}
											statement_AST = (AST)currentAST.root;
										break;} // loop405
										if (matchError) {
									}
									returnAST = statement_AST;
								}
								
	public final void function_parameters_g(
		boolean symTabCheck
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_parameters_AST = null;
		
		loop406:  while (true) {
			AST tmp1636_AST = null;
			match(LPAREN);
			if (matchError) {break loop406;}
			{
			int LA1_335 = LA(1);
			int LA2_335 = LA(2);
			
			boolean synPredMatched782 = false;
			if (((LA1_335==LPAREN) && (_tokenSet_165.member(LA2_335)))) {
				int _m782 = mark();
				guessing++;
				guess782:  while (true) {
					{
					match(LPAREN);
					if (matchError) {break guess782;}
					}
				synPredMatched782 = true;
				break;} // guess782
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m782);
				guessing--;
			}
			if ( synPredMatched782 ) {
				function_parameters_g(symTabCheck);
				if (matchError) {break loop406;}
			}
			else if ((_tokenSet_165.member(LA1_335)) && (_tokenSet_313.member(LA2_335))) {
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				case LPAREN:
				case LSQUARE:
				case STAR:
				case AND:
				case AMPERSAND:
				case TILDE:
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					parameter_list_g(symTabCheck);
					if (matchError) {break loop406;}
					break;
				}
				case RPAREN:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop406;}
				}
				}
				}
			}
			else {
				matchError=true;if (matchError) {break loop406;}
			}
			
			}
			AST tmp1637_AST = null;
			match(RPAREN);
			if (matchError) {break loop406;}
			function_parameters_AST = (AST)currentAST.root;
		break;} // loop406
		if (matchError) {
	}
	returnAST = function_parameters_AST;
}

	protected final void external_declaration_template_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST external_declaration_template_AST = null;
		String s; K_and_R = false; boolean ctrName=false; boolean definition; boolean friend = false; TypeQualifier tq; StorageClass sc;int ts = 0;
		
		loop407:  while (true) {
			int LA1_336 = LA(1);
			int LA2_336 = LA(2);
			
			boolean synPredMatched67 = false;
			if (((_tokenSet_8.member(LA1_336)) && (_tokenSet_113.member(LA2_336)))) {
				int _m67 = mark();
				guessing++;
				guess67:  while (true) {
					{
					{
					switch ( LA(1)) {
					case LITERAL___extension__:
					{
						consume();
						break;
					}
					case LITERAL_template:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess67;}
					}
					}
					}
					match(LITERAL_template);
					if (matchError) {break guess67;}
					match(LESSTHAN);
					if (matchError) {break guess67;}
					match(GREATERTHAN);
					if (matchError) {break guess67;}
					}
				synPredMatched67 = true;
				break;} // guess67
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m67);
				guessing--;
			}
			if ( synPredMatched67 ) {
				{
				{
				switch ( LA(1)) {
				case LITERAL___extension__:
				{
					consume();
					break;
				}
				case LITERAL_template:
				case LITERAL_export:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop407;}
				}
				}
				}
				{
				int LA1_337 = LA(1);
				int LA2_337 = LA(2);
				
				if (((LA1_337==LITERAL_template) && (LA2_337==LESSTHAN))&&(checkTemplateExplicitSpecialization())) {
					template_explicit_specialization_g();
					if (matchError) {break loop407;}
				}
				else if ((LA1_337==LITERAL_template||LA1_337==LITERAL_export) && (LA2_337==LESSTHAN||LA2_337==LITERAL_template)) {
					declaration_template_impl_g();
					if (matchError) {break loop407;}
				}
				else {
					matchError=true;if (matchError) {break loop407;}
				}
				
				}
				}
				external_declaration_template_AST = (AST)currentAST.root;
			}
			else {
				boolean synPredMatched73 = false;
				if (((LA1_336==LITERAL_template) && ((LA2_336 >= LITERAL_class && LA2_336 <= LITERAL_union)))) {
					int _m73 = mark();
					guessing++;
					guess73:  while (true) {
						{
						match(LITERAL_template);
						if (matchError) {break guess73;}
						{
						switch ( LA(1)) {
						case LITERAL_class:
						{
							consume();
							break;
						}
						case LITERAL_struct:
						{
							consume();
							break;
						}
						case LITERAL_union:
						{
							consume();
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess73;}
						}
						}
						}
						}
					synPredMatched73 = true;
					break;} // guess73
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m73);
					guessing--;
				}
				if ( synPredMatched73 ) {
					AST tmp1639_AST = null;
					consume();
					{
					switch ( LA(1)) {
					case LITERAL_class:
					{
						AST tmp1640_AST = null;
						consume();
						break;
					}
					case LITERAL_struct:
					{
						AST tmp1641_AST = null;
						consume();
						break;
					}
					case LITERAL_union:
					{
						AST tmp1642_AST = null;
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop407;}
					}
					}
					}
					s=scope_override_g();
					if (matchError) {break loop407;}
					s=literal_ident_g();
					if (matchError) {break loop407;}
					{
					switch ( LA(1)) {
					case LESSTHAN:
					{
						AST tmp1643_AST = null;
						consume();
						template_argument_list_g();
						if (matchError) {break loop407;}
						AST tmp1644_AST = null;
						match(GREATERTHAN);
						if (matchError) {break loop407;}
						break;
					}
					case SEMICOLON:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop407;}
					}
					}
					}
					AST tmp1645_AST = null;
					match(SEMICOLON);
					if (matchError) {break loop407;}
					external_declaration_template_AST = (AST)currentAST.root;
				}
				else {
					boolean synPredMatched78 = false;
					if (((LA1_336==LITERAL_template) && (_tokenSet_26.member(LA2_336)))) {
						int _m78 = mark();
						guessing++;
						guess78:  while (true) {
							{
							match(LITERAL_template);
							if (matchError) {break guess78;}
							{
							matchNot(LESSTHAN);
							if (matchError) {break guess78;}
							}
							}
						synPredMatched78 = true;
						break;} // guess78
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m78);
						guessing--;
					}
					if ( synPredMatched78 ) {
						AST tmp1646_AST = null;
						consume();
						{
						int LA1_338 = LA(1);
						int LA2_338 = LA(2);
						
						boolean synPredMatched81 = false;
						if (((_tokenSet_116.member(LA1_338)) && (_tokenSet_19.member(LA2_338)))) {
							int _m81 = mark();
							guessing++;
							guess81:  while (true) {
								{
								scope_override_g();
								if (matchError) {break guess81;}
								match(LITERAL_OPERATOR);
								if (matchError) {break guess81;}
								}
							synPredMatched81 = true;
							break;} // guess81
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m81);
							guessing--;
						}
						if ( synPredMatched81 ) {
							s=scope_override_g();
							if (matchError) {break loop407;}
							conversion_function_decl_g();
							if (matchError) {break loop407;}
						}
						else if ((_tokenSet_26.member(LA1_338)) && (_tokenSet_27.member(LA2_338))) {
							declaration_g(declOther);
							if (matchError) {break loop407;}
						}
						else {
							matchError=true;if (matchError) {break loop407;}
						}
						
						}
						external_declaration_template_AST = (AST)currentAST.root;
					}
					else if ((LA1_336==LITERAL_template||LA1_336==LITERAL_export) && (LA2_336==LESSTHAN||LA2_336==LITERAL_template)) {
						declaration_template_impl_g();
						if (matchError) {break loop407;}
						external_declaration_template_AST = (AST)currentAST.root;
					}
					else {
						matchError=true;if (matchError) {break loop407;}
					}
					}}
				break;} // loop407
				if (matchError) {
			}
			returnAST = external_declaration_template_AST;
		}
		
	public final void dtor_body_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dtor_body_AST = null;
		
		loop408:  while (true) {
			compound_statement_g();
			if (matchError) {break loop408;}
			dtor_body_AST = (AST)currentAST.root;
		break;} // loop408
		if (matchError) {
	}
	returnAST = dtor_body_AST;
}

	public final void ctor_definition_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ctor_definition_AST = null;
		
		loop409:  while (true) {
			ctor_head_g();
			if (matchError) {break loop409;}
			{
			switch ( LA(1)) {
			case COLON:
			case LCURLY:
			case LITERAL_try:
			case LITERAL___try:
			{
				ctor_body_g();
				if (matchError) {break loop409;}
				break;
			}
			case ASSIGNEQUAL:
			{
				AST tmp1647_AST = null;
				consume();
				{
				switch ( LA(1)) {
				case LITERAL_default:
				{
					AST tmp1648_AST = null;
					consume();
					break;
				}
				case LITERAL_delete:
				{
					AST tmp1649_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop409;}
				}
				}
				}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop409;}
			}
			}
			}
			ctor_definition_AST = (AST)currentAST.root;
		break;} // loop409
		if (matchError) {
	}
	returnAST = ctor_definition_AST;
}

	public final void function_definition_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_definition_AST = null;
		
		loop410:  while (true) {
			declaration_specifiers_g(false, false);
			if (matchError) {break loop410;}
			{
			int LA1_339 = LA(1);
			int LA2_339 = LA(2);
			
			if ((_tokenSet_21.member(LA1_339)) && (LA2_339==LPAREN||LA2_339==LSQUARE)) {
				function_attribute_specification_g();
				if (matchError) {break loop410;}
			}
			else if ((_tokenSet_24.member(LA1_339)) && (_tokenSet_25.member(LA2_339))) {
			}
			else {
				matchError=true;if (matchError) {break loop410;}
			}
			
			}
			function_declarator_g(true, false, false);
			if (matchError) {break loop410;}
			{
			int LA1_340 = LA(1);
			int LA2_340 = LA(2);
			
			if ((_tokenSet_64.member(LA1_340)) && (_tokenSet_1.member(LA2_340))) {
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				case LPAREN:
				case LSQUARE:
				case STAR:
				case AND:
				case AMPERSAND:
				case TILDE:
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_namespace:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL_using:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_static_assert:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					function_K_R_parameter_list_g();
					if (matchError) {break loop410;}
					break;
				}
				case ASSIGNEQUAL:
				case LCURLY:
				case LITERAL_try:
				case LITERAL___try:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop410;}
				}
				}
				}
			}
			else if ((_tokenSet_65.member(LA1_340)) && (_tokenSet_1.member(LA2_340))) {
			}
			else {
				matchError=true;if (matchError) {break loop410;}
			}
			
			}
			{
			switch ( LA(1)) {
			case ASSIGNEQUAL:
			{
				AST tmp1650_AST = null;
				consume();
				{
				switch ( LA(1)) {
				case LITERAL_default:
				{
					AST tmp1651_AST = null;
					consume();
					break;
				}
				case LITERAL_delete:
				{
					AST tmp1652_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop410;}
				}
				}
				}
				break;
			}
			case LCURLY:
			{
				compound_statement_g();
				if (matchError) {break loop410;}
				break;
			}
			case LITERAL_try:
			case LITERAL___try:
			{
				function_try_block_g(false);
				if (matchError) {break loop410;}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop410;}
			}
			}
			}
			function_definition_AST = (AST)currentAST.root;
		break;} // loop410
		if (matchError) {
	}
	returnAST = function_definition_AST;
}

	public final void function_definition_no_ret_type_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_definition_no_ret_type_AST = null;
		
		loop411:  while (true) {
			{
			function_declarator_g(true, false, false);
			if (matchError) {break loop411;}
			{
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			case LPAREN:
			case LSQUARE:
			case STAR:
			case AND:
			case AMPERSAND:
			case TILDE:
			case SCOPE:
			case IDENT:
			case LITERAL_OPERATOR:
			case LITERAL_typeof:
			case LITERAL___typeof__:
			case LITERAL___typeof:
			case LITERAL_typedef:
			case LITERAL_enum:
			case LITERAL_namespace:
			case LITERAL_extern:
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL_virtual:
			case LITERAL_explicit:
			case LITERAL_friend:
			case LITERAL__stdcall:
			case LITERAL___stdcall:
			case LITERAL_typename:
			case LITERAL_auto:
			case LITERAL_register:
			case LITERAL_static:
			case LITERAL_mutable:
			case LITERAL_const:
			case LITERAL___const__:
			case LITERAL___const:
			case LITERAL_const_cast:
			case LITERAL_volatile:
			case LITERAL___volatile__:
			case LITERAL___volatile:
			case LITERAL_char:
			case LITERAL_wchar_t:
			case LITERAL_bool:
			case LITERAL_short:
			case LITERAL_int:
			case LITERAL_long:
			case LITERAL_signed:
			case LITERAL___signed__:
			case LITERAL___signed:
			case LITERAL_unsigned:
			case LITERAL___unsigned__:
			case LITERAL_float:
			case LITERAL_double:
			case LITERAL_void:
			case LITERAL__declspec:
			case LITERAL___declspec:
			case LITERAL_class:
			case LITERAL_struct:
			case LITERAL_union:
			case LITERAL_this:
			case LITERAL_true:
			case LITERAL_false:
			case LITERAL_using:
			case LITERAL__cdecl:
			case LITERAL___cdecl:
			case LITERAL__near:
			case LITERAL___near:
			case LITERAL__far:
			case LITERAL___far:
			case LITERAL___interrupt:
			case LITERAL_pascal:
			case LITERAL__pascal:
			case LITERAL___pascal:
			case LITERAL__int64:
			case LITERAL___int64:
			case LITERAL___w64:
			case LITERAL___attribute__:
			case LITERAL___complex__:
			case LITERAL___global:
			case LITERAL__Bool:
			case LITERAL__Complex:
			case LITERAL___thread:
			case LITERAL___attribute:
			case LITERAL__Imaginary:
			case LITERAL_bit:
			case LITERAL___symbolic:
			case LITERAL___hidden:
			case LITERAL_final:
			case LITERAL_override:
			case LITERAL_constexpr:
			case LITERAL_decltype:
			case LITERAL_thread_local:
			case LITERAL_static_assert:
			case LITERAL_alignas:
			case LITERAL_char16_t:
			case LITERAL_char32_t:
			case LITERAL___decltype:
			case LITERAL___complex:
			case LITERAL___forceinline:
			case LITERAL___clrcall:
			case LITERAL__Noreturn:
			case LITERAL___builtin_va_list:
			case LITERAL__BUILT_IN_TYPE__:
			case LITERAL__TYPE_QUALIFIER__:
			case LITERAL__STORAGE_CLASS_SPECIFIER__:
			{
				function_K_R_parameter_list_g();
				if (matchError) {break loop411;}
				break;
			}
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop411;}
			}
			}
			}
			}
			compound_statement_g();
			if (matchError) {break loop411;}
			}
			function_definition_no_ret_type_AST = (AST)currentAST.root;
		break;} // loop411
		if (matchError) {
	}
	returnAST = function_definition_no_ret_type_AST;
}

	public final void function_declaration_with_fun_as_ret_type_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_declaration_with_fun_as_ret_type_AST = null;
		
		loop412:  while (true) {
			declaration_specifiers_g(false, false);
			if (matchError) {break loop412;}
			function_declarator_with_fun_as_ret_type_g(false);
			if (matchError) {break loop412;}
			{
			switch ( LA(1)) {
			case EOF:
			{
				consume();
				break;
			}
			case SEMICOLON:
			{
				AST tmp1654_AST = null;
				consume();
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop412;}
			}
			}
			}
			function_declaration_with_fun_as_ret_type_AST = (AST)currentAST.root;
		break;} // loop412
		if (matchError) {
	}
	returnAST = function_declaration_with_fun_as_ret_type_AST;
}

	public final void function_definition_with_fun_as_ret_type_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_definition_with_fun_as_ret_type_AST = null;
		
		loop413:  while (true) {
			declaration_specifiers_g(false, false);
			if (matchError) {break loop413;}
			function_declarator_with_fun_as_ret_type_g(true);
			if (matchError) {break loop413;}
			{
			int LA1_341 = LA(1);
			int LA2_341 = LA(2);
			
			if ((_tokenSet_133.member(LA1_341)) && (_tokenSet_1.member(LA2_341))) {
				{
				switch ( LA(1)) {
				case ELLIPSIS:
				case LPAREN:
				case LSQUARE:
				case STAR:
				case AND:
				case AMPERSAND:
				case TILDE:
				case SCOPE:
				case IDENT:
				case LITERAL_OPERATOR:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_namespace:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL_this:
				case LITERAL_true:
				case LITERAL_false:
				case LITERAL_using:
				case LITERAL__cdecl:
				case LITERAL___cdecl:
				case LITERAL__near:
				case LITERAL___near:
				case LITERAL__far:
				case LITERAL___far:
				case LITERAL___interrupt:
				case LITERAL_pascal:
				case LITERAL__pascal:
				case LITERAL___pascal:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_static_assert:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					function_K_R_parameter_list_g();
					if (matchError) {break loop413;}
					break;
				}
				case LCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop413;}
				}
				}
				}
			}
			else if ((LA1_341==LCURLY) && (_tokenSet_1.member(LA2_341))) {
			}
			else {
				matchError=true;if (matchError) {break loop413;}
			}
			
			}
			compound_statement_g();
			if (matchError) {break loop413;}
			function_definition_with_fun_as_ret_type_AST = (AST)currentAST.root;
		break;} // loop413
		if (matchError) {
	}
	returnAST = function_definition_with_fun_as_ret_type_AST;
}

	public final void decl_namespace_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST decl_namespace_AST = null;
		Token  token = null;
		AST token_AST = null;
		Token  token2 = null;
		AST token2_AST = null;
		String qid; String name = "";
		
		loop414:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_inline:
			case LITERAL__inline:
			case LITERAL___inline__:
			case LITERAL___inline:
			case LITERAL___forceinline:
			{
				literal_inline_g();
				if (matchError) {break loop414;}
				break;
			}
			case LITERAL_namespace:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop414;}
			}
			}
			}
			token = LT(1);
			match(LITERAL_namespace);
			if (matchError) {break loop414;}
			{
			int LA1_342 = LA(1);
			int LA2_342 = LA(2);
			
			if ((_tokenSet_141.member(LA1_342)) && (_tokenSet_142.member(LA2_342))) {
				{
				switch ( LA(1)) {
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				{
					name=literal_ident_g();
					if (matchError) {break loop414;}
					break;
				}
				case LSQUARE:
				case LCURLY:
				case LITERAL___attribute__:
				case LITERAL___attribute:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop414;}
				}
				}
				}
				{
				switch ( LA(1)) {
				case LSQUARE:
				case LITERAL___attribute__:
				case LITERAL___attribute:
				{
					namespace_attribute_specification_g();
					if (matchError) {break loop414;}
					break;
				}
				case LCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop414;}
				}
				}
				}
				AST tmp1655_AST = null;
				match(LCURLY);
				if (matchError) {break loop414;}
				{
				{
				_loop254:
				do {
					if ((_tokenSet_2.member(LA(1)))) {
						external_declaration_g();
						if (matchError) {break loop414;}
					}
					else {
						break _loop254;
					}
					
				} while (true);
				}
				}
				token2 = LT(1);
				match(RCURLY);
				if (matchError) {break loop414;}
			}
			else if ((_tokenSet_0.member(LA1_342)) && (LA2_342==ASSIGNEQUAL)) {
				name=literal_ident_g();
				if (matchError) {break loop414;}
				AST tmp1656_AST = null;
				match(ASSIGNEQUAL);
				if (matchError) {break loop414;}
				qid=qualified_id_g();
				if (matchError) {break loop414;}
				match(SEMICOLON);
				if (matchError) {break loop414;}
			}
			else {
				matchError=true;if (matchError) {break loop414;}
			}
			
			}
			decl_namespace_AST = (AST)currentAST.root;
		break;} // loop414
		if (matchError) {
	}
	returnAST = decl_namespace_AST;
}

	public final void alias_type_name_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST alias_type_name_AST = null;
		
		loop415:  while (true) {
			type_name_g();
			if (matchError) {break loop415;}
			{
			switch ( LA(1)) {
			case POINTERTO:
			{
				trailing_type_g();
				if (matchError) {break loop415;}
				break;
			}
			case SEMICOLON:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop415;}
			}
			}
			}
			alias_type_name_AST = (AST)currentAST.root;
		break;} // loop415
		if (matchError) {
	}
	returnAST = alias_type_name_AST;
}

	public final String  qualified_ctor_direct_id_g() {
		String q = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qualified_ctor_direct_id_AST = null;
		
			    String str;
			    StringBuilder  qitem = new StringBuilder();
			
		
		loop416:  while (true) {
			str=scope_override_g();
			if (matchError) {break loop416;}
			str=literal_ident_g();
			if (matchError) {break loop416;}
			qualified_ctor_direct_id_AST = (AST)currentAST.root;
		break;} // loop416
		if (matchError) {
	}
	returnAST = qualified_ctor_direct_id_AST;
	return q;
}

	public final String  qualified_dtor_direct_id_g() {
		String q = "";
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST qualified_dtor_direct_id_AST = null;
		
			    String str;
			    StringBuilder  qitem = new StringBuilder();
			
		
		loop417:  while (true) {
			str=scope_override_g();
			if (matchError) {break loop417;}
			AST tmp1658_AST = null;
			match(TILDE);
			if (matchError) {break loop417;}
			str=literal_ident_g();
			if (matchError) {break loop417;}
			qualified_dtor_direct_id_AST = (AST)currentAST.root;
		break;} // loop417
		if (matchError) {
	}
	returnAST = qualified_dtor_direct_id_AST;
	return q;
}

	public final void member_declarator_list_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST member_declarator_list_AST = null;
		
		loop418:  while (true) {
			member_declarator_g();
			if (matchError) {break loop418;}
			{
			_loop648:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp1659_AST = null;
					consume();
					member_declarator_g();
					if (matchError) {break loop418;}
				}
				else {
					break _loop648;
				}
				
			} while (true);
			}
			member_declarator_list_AST = (AST)currentAST.root;
		break;} // loop418
		if (matchError) {
	}
	returnAST = member_declarator_list_AST;
}

	public final void ctor_body_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ctor_body_AST = null;
		
		loop419:  while (true) {
			{
			switch ( LA(1)) {
			case COLON:
			case LCURLY:
			{
				{
				switch ( LA(1)) {
				case COLON:
				{
					ctor_initializer_g();
					if (matchError) {break loop419;}
					break;
				}
				case LCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop419;}
				}
				}
				}
				compound_statement_g();
				if (matchError) {break loop419;}
				break;
			}
			case LITERAL_try:
			case LITERAL___try:
			{
				function_try_block_g(true);
				if (matchError) {break loop419;}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop419;}
			}
			}
			}
			ctor_body_AST = (AST)currentAST.root;
		break;} // loop419
		if (matchError) {
	}
	returnAST = ctor_body_AST;
}

	public final void visibility_redef_declaration_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST visibility_redef_declaration_AST = null;
		String qid="";
		
		loop420:  while (true) {
			qid=qualified_id_g();
			if (matchError) {break loop420;}
			{
			switch ( LA(1)) {
			case EOF:
			{
				consume();
				break;
			}
			case SEMICOLON:
			{
				consume();
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop420;}
			}
			}
			}
			visibility_redef_declaration_AST = (AST)currentAST.root;
		break;} // loop420
		if (matchError) {
	}
	returnAST = visibility_redef_declaration_AST;
}

	public final void member_declaration_template_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST member_declaration_template_AST = null;
		String q; boolean definition=false; boolean friend = false; boolean ctorName = false;
		
		loop421:  while (true) {
			template_head_g();
			if (matchError) {break loop421;}
			{
			int LA1_343 = LA(1);
			int LA2_343 = LA(2);
			
			boolean synPredMatched259 = false;
			if (((_tokenSet_26.member(LA1_343)) && (_tokenSet_27.member(LA2_343)))) {
				int _m259 = mark();
				guessing++;
				guess259:  while (true) {
					{
					class_head_g();
					if (matchError) {break guess259;}
					}
				synPredMatched259 = true;
				break;} // guess259
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m259);
				guessing--;
			}
			if ( synPredMatched259 ) {
				declaration_g(declOther);
				if (matchError) {break loop421;}
			}
			else {
				boolean synPredMatched262 = false;
				if (((_tokenSet_16.member(LA1_343)) && (_tokenSet_17.member(LA2_343)))) {
					int _m262 = mark();
					guessing++;
					guess262:  while (true) {
						{
						ctor_decl_spec_g();
						if (matchError) {break guess262;}
						if (!(qualifiedItemIsOneOf(qiCtor)))
						{matchError=true;
						if (matchError) {break guess262;}}
						ctor_declarator_g(false);
						if (matchError) {break guess262;}
						{
						switch ( LA(1)) {
						case EOF:
						{
							consume();
							break;
						}
						case SEMICOLON:
						{
							consume();
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess262;}
						}
						}
						}
						}
					synPredMatched262 = true;
					break;} // guess262
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m262);
					guessing--;
				}
				if ( synPredMatched262 ) {
					friend=ctor_decl_spec_g();
					if (matchError) {break loop421;}
					ctorName=ctor_declarator_g(false);
					if (matchError) {break loop421;}
					{
					switch ( LA(1)) {
					case EOF:
					{
						consume();
						break;
					}
					case SEMICOLON:
					{
						AST tmp1663_AST = null;
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop421;}
					}
					}
					}
				}
				else {
					boolean synPredMatched267 = false;
					if (((_tokenSet_16.member(LA1_343)) && (_tokenSet_17.member(LA2_343)))) {
						int _m267 = mark();
						guessing++;
						guess267:  while (true) {
							{
							ctor_decl_spec_g();
							if (matchError) {break guess267;}
							if (!(qualifiedItemIsOneOf(qiCtor)))
							{matchError=true;
							if (matchError) {break guess267;}}
							ctor_declarator_g(true);
							if (matchError) {break guess267;}
							{
							switch ( LA(1)) {
							case COLON:
							{
								consume();
								break;
							}
							case LCURLY:
							{
								consume();
								break;
							}
							case ASSIGNEQUAL:
							{
								consume();
								{
								switch ( LA(1)) {
								case LITERAL_default:
								{
									consume();
									break;
								}
								case LITERAL_delete:
								{
									consume();
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess267;}
								}
								}
								}
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess267;}
							}
							}
							}
							}
						synPredMatched267 = true;
						break;} // guess267
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m267);
						guessing--;
					}
					if ( synPredMatched267 ) {
						ctor_definition_g();
						if (matchError) {break loop421;}
					}
					else {
						boolean synPredMatched269 = false;
						if (((_tokenSet_26.member(LA1_343)) && (_tokenSet_27.member(LA2_343)))) {
							int _m269 = mark();
							guessing++;
							guess269:  while (true) {
								{
								declaration_specifiers_g(false, false);
								if (matchError) {break guess269;}
								function_declarator_g(false, false, false);
								if (matchError) {break guess269;}
								match(SEMICOLON);
								if (matchError) {break guess269;}
								}
							synPredMatched269 = true;
							break;} // guess269
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m269);
							guessing--;
						}
						if ( synPredMatched269 ) {
							declaration_g(declOther);
							if (matchError) {break loop421;}
						}
						else {
							boolean synPredMatched273 = false;
							if (((_tokenSet_22.member(LA1_343)) && (_tokenSet_23.member(LA2_343)))) {
								int _m273 = mark();
								guessing++;
								guess273:  while (true) {
									{
									declaration_specifiers_g(false, false);
									if (matchError) {break guess273;}
									function_declarator_g(true, false, false);
									if (matchError) {break guess273;}
									{
									switch ( LA(1)) {
									case LCURLY:
									{
										consume();
										break;
									}
									case LITERAL_try:
									case LITERAL___try:
									{
										literal_try_g();
										if (matchError) {break guess273;}
										break;
									}
									case ASSIGNEQUAL:
									{
										consume();
										{
										switch ( LA(1)) {
										case LITERAL_default:
										{
											consume();
											break;
										}
										case LITERAL_delete:
										{
											consume();
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break guess273;}
										}
										}
										}
										break;
									}
									default:
									{
										matchError=true;if (matchError) {break guess273;}
									}
									}
									}
									}
								synPredMatched273 = true;
								break;} // guess273
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m273);
								guessing--;
							}
							if ( synPredMatched273 ) {
								function_definition_g();
								if (matchError) {break loop421;}
							}
							else {
								boolean synPredMatched278 = false;
								if (((_tokenSet_146.member(LA1_343)) && (_tokenSet_147.member(LA2_343)))) {
									int _m278 = mark();
									guessing++;
									guess278:  while (true) {
										{
										{
										_loop277:
										do {
											switch ( LA(1)) {
											case LSQUARE:
											case LITERAL___attribute__:
											case LITERAL___attribute:
											{
												{
												function_attribute_specification_g();
												if (matchError) {break guess278;}
												}
												break;
											}
											case LITERAL_inline:
											case LITERAL__inline:
											case LITERAL___inline__:
											case LITERAL___inline:
											case LITERAL___forceinline:
											{
												literal_inline_g();
												if (matchError) {break guess278;}
												break;
											}
											case LITERAL_constexpr:
											{
												consume();
												break;
											}
											case LITERAL_explicit:
											{
												consume();
												break;
											}
											default:
											{
												break _loop277;
											}
											}
										} while (true);
										}
										conversion_function_decl_or_def_g();
										if (matchError) {break guess278;}
										}
									synPredMatched278 = true;
									break;} // guess278
									if (matchError) {
									   resetMatchError();
									}
									rewind(_m278);
									guessing--;
								}
								if ( synPredMatched278 ) {
									{
									_loop281:
									do {
										switch ( LA(1)) {
										case LSQUARE:
										case LITERAL___attribute__:
										case LITERAL___attribute:
										{
											{
											function_attribute_specification_g();
											if (matchError) {break loop421;}
											}
											break;
										}
										case LITERAL_inline:
										case LITERAL__inline:
										case LITERAL___inline__:
										case LITERAL___inline:
										case LITERAL___forceinline:
										{
											literal_inline_g();
											if (matchError) {break loop421;}
											break;
										}
										case LITERAL_constexpr:
										{
											AST tmp1664_AST = null;
											consume();
											break;
										}
										case LITERAL_explicit:
										{
											AST tmp1665_AST = null;
											consume();
											break;
										}
										default:
										{
											break _loop281;
										}
										}
									} while (true);
									}
									definition=conversion_function_decl_or_def_g();
									if (matchError) {break loop421;}
								}
								else {
									boolean synPredMatched283 = false;
									if (((LA1_343==LITERAL_using) && (_tokenSet_0.member(LA2_343)))) {
										int _m283 = mark();
										guessing++;
										guess283:  while (true) {
											{
											match(LITERAL_using);
											if (matchError) {break guess283;}
											literal_ident_g();
											if (matchError) {break guess283;}
											match(ASSIGNEQUAL);
											if (matchError) {break guess283;}
											}
										synPredMatched283 = true;
										break;} // guess283
										if (matchError) {
										   resetMatchError();
										}
										rewind(_m283);
										guessing--;
									}
									if ( synPredMatched283 ) {
										alias_declaration_g();
										if (matchError) {break loop421;}
									}
									else {
										boolean synPredMatched286 = false;
										if (((_tokenSet_22.member(LA1_343)) && (_tokenSet_119.member(LA2_343)))) {
											int _m286 = mark();
											guessing++;
											guess286:  while (true) {
												{
												declaration_specifiers_g(true, false);
												if (matchError) {break guess286;}
												{
												switch ( LA(1)) {
												case ELLIPSIS:
												case LPAREN:
												case LSQUARE:
												case STAR:
												case AND:
												case AMPERSAND:
												case TILDE:
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL__stdcall:
												case LITERAL___stdcall:
												case LITERAL_this:
												case LITERAL_true:
												case LITERAL_false:
												case LITERAL__cdecl:
												case LITERAL___cdecl:
												case LITERAL__near:
												case LITERAL___near:
												case LITERAL__far:
												case LITERAL___far:
												case LITERAL___interrupt:
												case LITERAL_pascal:
												case LITERAL__pascal:
												case LITERAL___pascal:
												case LITERAL___attribute__:
												case LITERAL___attribute:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_decltype:
												case LITERAL___decltype:
												case LITERAL___clrcall:
												{
													init_declarator_list_g(declOther);
													if (matchError) {break guess286;}
													break;
												}
												case SEMICOLON:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess286;}
												}
												}
												}
												match(SEMICOLON);
												if (matchError) {break guess286;}
												}
											synPredMatched286 = true;
											break;} // guess286
											if (matchError) {
											   resetMatchError();
											}
											rewind(_m286);
											guessing--;
										}
										if ( synPredMatched286 ) {
											declaration_specifiers_g(true, false);
											if (matchError) {break loop421;}
											{
											switch ( LA(1)) {
											case ELLIPSIS:
											case LPAREN:
											case LSQUARE:
											case STAR:
											case AND:
											case AMPERSAND:
											case TILDE:
											case SCOPE:
											case IDENT:
											case LITERAL_OPERATOR:
											case LITERAL__stdcall:
											case LITERAL___stdcall:
											case LITERAL_this:
											case LITERAL_true:
											case LITERAL_false:
											case LITERAL__cdecl:
											case LITERAL___cdecl:
											case LITERAL__near:
											case LITERAL___near:
											case LITERAL__far:
											case LITERAL___far:
											case LITERAL___interrupt:
											case LITERAL_pascal:
											case LITERAL__pascal:
											case LITERAL___pascal:
											case LITERAL___attribute__:
											case LITERAL___attribute:
											case LITERAL_final:
											case LITERAL_override:
											case LITERAL_decltype:
											case LITERAL___decltype:
											case LITERAL___clrcall:
											{
												init_declarator_list_g(declOther);
												if (matchError) {break loop421;}
												break;
											}
											case SEMICOLON:
											{
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break loop421;}
											}
											}
											}
											AST tmp1666_AST = null;
											match(SEMICOLON);
											if (matchError) {break loop421;}
										}
										else {
											matchError=true;if (matchError) {break loop421;}
										}
										}}}}}}}
										}
										member_declaration_template_AST = (AST)currentAST.root;
									break;} // loop421
									if (matchError) {
								}
								returnAST = member_declaration_template_AST;
							}
							
	public final void enumerator_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST enumerator_AST = null;
		String id = "";
		
		loop422:  while (true) {
			id=literal_ident_g();
			if (matchError) {break loop422;}
			{
			switch ( LA(1)) {
			case ASSIGNEQUAL:
			{
				AST tmp1667_AST = null;
				consume();
				constant_expression_g();
				if (matchError) {break loop422;}
				break;
			}
			case EOF:
			case COMMA:
			case RCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop422;}
			}
			}
			}
			enumerator_AST = (AST)currentAST.root;
		break;} // loop422
		if (matchError) {
	}
	returnAST = enumerator_AST;
}

	public final void cpp11_assignment_expression_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST cpp11_assignment_expression_AST = null;
		
		loop423:  while (true) {
			if ((_tokenSet_189.member(LA(1)))) {
				assignment_expression_g();
				if (matchError) {break loop423;}
				cpp11_assignment_expression_AST = (AST)currentAST.root;
			}
			else if ((LA(1)==LCURLY)) {
				array_initializer_g();
				if (matchError) {break loop423;}
				cpp11_assignment_expression_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;if (matchError) {break loop423;}
			}
			
		break;} // loop423
		if (matchError) {
	}
	returnAST = cpp11_assignment_expression_AST;
}

	public final void expression_list_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST expression_list_AST = null;
		
		loop424:  while (true) {
			assignment_expression_g();
			if (matchError) {break loop424;}
			{
			_loop1163:
			do {
				if ((LA(1)==COMMA)) {
					AST tmp1668_AST = null;
					consume();
					assignment_expression_g();
					if (matchError) {break loop424;}
				}
				else {
					break _loop1163;
				}
				
			} while (true);
			}
			expression_list_AST = (AST)currentAST.root;
		break;} // loop424
		if (matchError) {
	}
	returnAST = expression_list_AST;
}

	public final void case_statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST case_statement_AST = null;
		
		loop425:  while (true) {
			AST tmp1669_AST = null;
			match(LITERAL_case);
			if (matchError) {break loop425;}
			case_expression_g();
			if (matchError) {break loop425;}
			AST tmp1670_AST = null;
			match(COLON);
			if (matchError) {break loop425;}
			single_statement_g();
			if (matchError) {break loop425;}
			case_statement_AST = (AST)currentAST.root;
		break;} // loop425
		if (matchError) {
	}
	returnAST = case_statement_AST;
}

	public final void default_statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST default_statement_AST = null;
		
		loop426:  while (true) {
			default_label_g();
			if (matchError) {break loop426;}
			AST tmp1671_AST = null;
			match(COLON);
			if (matchError) {break loop426;}
			single_statement_g();
			if (matchError) {break loop426;}
			default_statement_AST = (AST)currentAST.root;
		break;} // loop426
		if (matchError) {
	}
	returnAST = default_statement_AST;
}

	public final void selection_statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST selection_statement_AST = null;
		
		loop427:  while (true) {
			switch ( LA(1)) {
			case LITERAL_if:
			{
				AST tmp1672_AST = null;
				consume();
				AST tmp1673_AST = null;
				match(LPAREN);
				if (matchError) {break loop427;}
				condition_g();
				if (matchError) {break loop427;}
				AST tmp1674_AST = null;
				match(RPAREN);
				if (matchError) {break loop427;}
				single_statement_g();
				if (matchError) {break loop427;}
				{
				int LA1_344 = LA(1);
				int LA2_344 = LA(2);
				
				if ((LA1_344==LITERAL_else) && (_tokenSet_159.member(LA2_344))) {
					AST tmp1675_AST = null;
					consume();
					single_statement_g();
					if (matchError) {break loop427;}
				}
				else if ((_tokenSet_366.member(LA1_344)) && (_tokenSet_1.member(LA2_344))) {
				}
				else {
					matchError=true;if (matchError) {break loop427;}
				}
				
				}
				selection_statement_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_switch:
			{
				AST tmp1676_AST = null;
				consume();
				AST tmp1677_AST = null;
				match(LPAREN);
				if (matchError) {break loop427;}
				condition_g();
				if (matchError) {break loop427;}
				AST tmp1678_AST = null;
				match(RPAREN);
				if (matchError) {break loop427;}
				single_statement_g();
				if (matchError) {break loop427;}
				selection_statement_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop427;}
			}
			}
		break;} // loop427
		if (matchError) {
	}
	returnAST = selection_statement_AST;
}

	public final void iteration_statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST iteration_statement_AST = null;
		
		loop428:  while (true) {
			switch ( LA(1)) {
			case LITERAL_while:
			{
				while_statement_g();
				if (matchError) {break loop428;}
				iteration_statement_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_do:
			{
				do_while_statement_g();
				if (matchError) {break loop428;}
				iteration_statement_AST = (AST)currentAST.root;
				break;
			}
			case LITERAL_for:
			{
				for_statement_g();
				if (matchError) {break loop428;}
				iteration_statement_AST = (AST)currentAST.root;
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop428;}
			}
			}
		break;} // loop428
		if (matchError) {
	}
	returnAST = iteration_statement_AST;
}

	public final void jump_statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST jump_statement_AST = null;
		String s;
		
		loop429:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_goto:
			{
				AST tmp1679_AST = null;
				consume();
				{
				int LA1_345 = LA(1);
				int LA2_345 = LA(2);
				
				boolean synPredMatched1108 = false;
				if (((_tokenSet_0.member(LA1_345)) && (LA2_345==EOF||LA2_345==SEMICOLON))) {
					int _m1108 = mark();
					guessing++;
					guess1108:  while (true) {
						{
						literal_ident_g();
						if (matchError) {break guess1108;}
						{
						switch ( LA(1)) {
						case EOF:
						{
							consume();
							break;
						}
						case SEMICOLON:
						{
							consume();
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess1108;}
						}
						}
						}
						}
					synPredMatched1108 = true;
					break;} // guess1108
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m1108);
					guessing--;
				}
				if ( synPredMatched1108 ) {
					s=literal_ident_g();
					if (matchError) {break loop429;}
				}
				else if ((_tokenSet_189.member(LA1_345)) && (_tokenSet_1.member(LA2_345))) {
					expression_g();
					if (matchError) {break loop429;}
				}
				else {
					matchError=true;if (matchError) {break loop429;}
				}
				
				}
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					break;
				}
				case SEMICOLON:
				{
					AST tmp1681_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop429;}
				}
				}
				}
				break;
			}
			case LITERAL_continue:
			{
				AST tmp1682_AST = null;
				consume();
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					break;
				}
				case SEMICOLON:
				{
					AST tmp1684_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop429;}
				}
				}
				}
				break;
			}
			case LITERAL_break:
			{
				AST tmp1685_AST = null;
				consume();
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					break;
				}
				case SEMICOLON:
				{
					AST tmp1687_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop429;}
				}
				}
				}
				break;
			}
			case LITERAL_return:
			{
				AST tmp1688_AST = null;
				consume();
				{
				if ((_tokenSet_284.member(LA(1)))) {
					{
					int LA1_346 = LA(1);
					int LA2_346 = LA(2);
					
					boolean synPredMatched1116 = false;
					if (((_tokenSet_233.member(LA1_346)) && (_tokenSet_1.member(LA2_346)))) {
						int _m1116 = mark();
						guessing++;
						guess1116:  while (true) {
							{
							{
							switch ( LA(1)) {
							case LITERAL___extension__:
							{
								consume();
								break;
							}
							case LPAREN:
							case LCURLY:
							case AMPERSAND:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess1116;}
							}
							}
							}
							cast_array_initializer_head_g();
							if (matchError) {break guess1116;}
							}
						synPredMatched1116 = true;
						break;} // guess1116
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m1116);
						guessing--;
					}
					if ( synPredMatched1116 ) {
						initializer_g();
						if (matchError) {break loop429;}
					}
					else if ((_tokenSet_189.member(LA1_346)) && (_tokenSet_1.member(LA2_346))) {
						expression_g();
						if (matchError) {break loop429;}
					}
					else {
						matchError=true;if (matchError) {break loop429;}
					}
					
					}
				}
				else if ((LA(1)==EOF||LA(1)==SEMICOLON)) {
				}
				else {
					matchError=true;if (matchError) {break loop429;}
				}
				
				}
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					break;
				}
				case SEMICOLON:
				{
					AST tmp1690_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop429;}
				}
				}
				}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop429;}
			}
			}
			}
			jump_statement_AST = (AST)currentAST.root;
		break;} // loop429
		if (matchError) {
	}
	returnAST = jump_statement_AST;
}

	public final void try_block_g(
		boolean constructor
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST try_block_AST = null;
		
		loop430:  while (true) {
			literal_try_g();
			if (matchError) {break loop430;}
			{
			int LA1_347 = LA(1);
			int LA2_347 = LA(2);
			
			if (((LA1_347==COLON||LA1_347==LCURLY) && (_tokenSet_1.member(LA2_347)))&&((constructor))) {
				{
				switch ( LA(1)) {
				case COLON:
				{
					ctor_initializer_g();
					if (matchError) {break loop430;}
					break;
				}
				case LCURLY:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop430;}
				}
				}
				}
			}
			else if ((LA1_347==LCURLY) && (_tokenSet_1.member(LA2_347))) {
			}
			else {
				matchError=true;if (matchError) {break loop430;}
			}
			
			}
			compound_statement_g();
			if (matchError) {break loop430;}
			{
			_loop1124:
			do {
				int LA1_348 = LA(1);
				int LA2_348 = LA(2);
				
				if ((LA1_348==LITERAL_catch||LA1_348==LITERAL___finally) && (LA2_348==LPAREN||LA2_348==LCURLY)) {
					handler_g();
					if (matchError) {break loop430;}
				}
				else {
					break _loop1124;
				}
				
			} while (true);
			}
			try_block_AST = (AST)currentAST.root;
		break;} // loop430
		if (matchError) {
	}
	returnAST = try_block_AST;
}

	public final void pro_c_statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST pro_c_statement_AST = null;
		String s;
		
		loop431:  while (true) {
			s=literal_ident_g();
			if (matchError) {break loop431;}
			s=literal_ident_g();
			if (matchError) {break loop431;}
			{
			_loop1159:
			do {
				switch ( LA(1)) {
				case LCURLY:
				{
					balanceCurlies_g();
					if (matchError) {break loop431;}
					break;
				}
				case LSQUARE:
				{
					balanceSquaresInExpression_g();
					if (matchError) {break loop431;}
					break;
				}
				case LPAREN:
				{
					balanceParensInExpression_g();
					if (matchError) {break loop431;}
					break;
				}
				case RPAREN:
				case RCURLY:
				{
					{
					switch ( LA(1)) {
					case RCURLY:
					{
						AST tmp1691_AST = null;
						consume();
						break;
					}
					case RPAREN:
					{
						AST tmp1692_AST = null;
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop431;}
					}
					}
					}
					break;
				}
				default:
					if ((_tokenSet_5.member(LA(1)))) {
						{
						AST tmp1693_AST = null;
						match(_tokenSet_5);
						if (matchError) {break loop431;}
						}
					}
				else {
					break _loop1159;
				}
				}
			} while (true);
			}
			{
			switch ( LA(1)) {
			case EOF:
			{
				consume();
				break;
			}
			case SEMICOLON:
			{
				consume();
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop431;}
			}
			}
			}
			pro_c_statement_AST = (AST)currentAST.root;
		break;} // loop431
		if (matchError) {
	}
	returnAST = pro_c_statement_AST;
}

	public final void labeled_statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST labeled_statement_AST = null;
		
		loop432:  while (true) {
			label_g();
			if (matchError) {break loop432;}
			AST tmp1696_AST = null;
			match(COLON);
			if (matchError) {break loop432;}
			{
			int LA1_349 = LA(1);
			int LA2_349 = LA(2);
			
			if ((_tokenSet_21.member(LA1_349)) && (LA2_349==LPAREN||LA2_349==LSQUARE)) {
				attribute_specification_g();
				if (matchError) {break loop432;}
			}
			else if ((_tokenSet_159.member(LA1_349)) && (_tokenSet_1.member(LA2_349))) {
			}
			else {
				matchError=true;if (matchError) {break loop432;}
			}
			
			}
			single_statement_g();
			if (matchError) {break loop432;}
			labeled_statement_AST = (AST)currentAST.root;
		break;} // loop432
		if (matchError) {
	}
	returnAST = labeled_statement_AST;
}

	protected final void template_explicit_specialization_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST template_explicit_specialization_AST = null;
		String s; TypeQualifier tq; StorageClass sc;int ts = 0; boolean b;
		
		loop433:  while (true) {
			AST tmp1697_AST = null;
			match(LITERAL_template);
			if (matchError) {break loop433;}
			AST tmp1698_AST = null;
			match(LESSTHAN);
			if (matchError) {break loop433;}
			AST tmp1699_AST = null;
			match(GREATERTHAN);
			if (matchError) {break loop433;}
			{
			int LA1_350 = LA(1);
			int LA2_350 = LA(2);
			
			boolean synPredMatched14 = false;
			if (((_tokenSet_31.member(LA1_350)) && (_tokenSet_23.member(LA2_350)))) {
				int _m14 = mark();
				guessing++;
				guess14:  while (true) {
					{
					{
					switch ( LA(1)) {
					case LITERAL_template:
					{
						consume();
						match(LESSTHAN);
						if (matchError) {break guess14;}
						match(GREATERTHAN);
						if (matchError) {break guess14;}
						break;
					}
					case LSQUARE:
					case SCOPE:
					case IDENT:
					case LITERAL_typeof:
					case LITERAL___typeof__:
					case LITERAL___typeof:
					case LITERAL_typedef:
					case LITERAL_enum:
					case LITERAL_extern:
					case LITERAL_inline:
					case LITERAL__inline:
					case LITERAL___inline__:
					case LITERAL___inline:
					case LITERAL_virtual:
					case LITERAL_explicit:
					case LITERAL_friend:
					case LITERAL__stdcall:
					case LITERAL___stdcall:
					case LITERAL_typename:
					case LITERAL_auto:
					case LITERAL_register:
					case LITERAL_static:
					case LITERAL_mutable:
					case LITERAL_const:
					case LITERAL___const__:
					case LITERAL___const:
					case LITERAL_const_cast:
					case LITERAL_volatile:
					case LITERAL___volatile__:
					case LITERAL___volatile:
					case LITERAL_char:
					case LITERAL_wchar_t:
					case LITERAL_bool:
					case LITERAL_short:
					case LITERAL_int:
					case LITERAL_long:
					case LITERAL_signed:
					case LITERAL___signed__:
					case LITERAL___signed:
					case LITERAL_unsigned:
					case LITERAL___unsigned__:
					case LITERAL_float:
					case LITERAL_double:
					case LITERAL_void:
					case LITERAL__declspec:
					case LITERAL___declspec:
					case LITERAL_class:
					case LITERAL_struct:
					case LITERAL_union:
					case LITERAL__int64:
					case LITERAL___int64:
					case LITERAL___w64:
					case LITERAL___attribute__:
					case LITERAL___complex__:
					case LITERAL___global:
					case LITERAL__Bool:
					case LITERAL__Complex:
					case LITERAL___thread:
					case LITERAL___attribute:
					case LITERAL__Imaginary:
					case LITERAL_bit:
					case LITERAL___symbolic:
					case LITERAL___hidden:
					case LITERAL_final:
					case LITERAL_override:
					case LITERAL_constexpr:
					case LITERAL_decltype:
					case LITERAL_thread_local:
					case LITERAL_alignas:
					case LITERAL_char16_t:
					case LITERAL_char32_t:
					case LITERAL___decltype:
					case LITERAL___complex:
					case LITERAL___forceinline:
					case LITERAL___clrcall:
					case LITERAL__Noreturn:
					case LITERAL___builtin_va_list:
					case LITERAL__BUILT_IN_TYPE__:
					case LITERAL__TYPE_QUALIFIER__:
					case LITERAL__STORAGE_CLASS_SPECIFIER__:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess14;}
					}
					}
					}
					declaration_specifiers_g(false, false);
					if (matchError) {break guess14;}
					function_declarator_g(true, false, false);
					if (matchError) {break guess14;}
					{
					switch ( LA(1)) {
					case LCURLY:
					{
						consume();
						break;
					}
					case LITERAL_try:
					case LITERAL___try:
					{
						literal_try_g();
						if (matchError) {break guess14;}
						break;
					}
					case ASSIGNEQUAL:
					{
						consume();
						{
						switch ( LA(1)) {
						case LITERAL_default:
						{
							consume();
							break;
						}
						case LITERAL_delete:
						{
							consume();
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess14;}
						}
						}
						}
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess14;}
					}
					}
					}
					}
				synPredMatched14 = true;
				break;} // guess14
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m14);
				guessing--;
			}
			if ( synPredMatched14 ) {
				{
				switch ( LA(1)) {
				case LITERAL_template:
				{
					AST tmp1700_AST = null;
					consume();
					AST tmp1701_AST = null;
					match(LESSTHAN);
					if (matchError) {break loop433;}
					AST tmp1702_AST = null;
					match(GREATERTHAN);
					if (matchError) {break loop433;}
					break;
				}
				case LSQUARE:
				case SCOPE:
				case IDENT:
				case LITERAL_typeof:
				case LITERAL___typeof__:
				case LITERAL___typeof:
				case LITERAL_typedef:
				case LITERAL_enum:
				case LITERAL_extern:
				case LITERAL_inline:
				case LITERAL__inline:
				case LITERAL___inline__:
				case LITERAL___inline:
				case LITERAL_virtual:
				case LITERAL_explicit:
				case LITERAL_friend:
				case LITERAL__stdcall:
				case LITERAL___stdcall:
				case LITERAL_typename:
				case LITERAL_auto:
				case LITERAL_register:
				case LITERAL_static:
				case LITERAL_mutable:
				case LITERAL_const:
				case LITERAL___const__:
				case LITERAL___const:
				case LITERAL_const_cast:
				case LITERAL_volatile:
				case LITERAL___volatile__:
				case LITERAL___volatile:
				case LITERAL_char:
				case LITERAL_wchar_t:
				case LITERAL_bool:
				case LITERAL_short:
				case LITERAL_int:
				case LITERAL_long:
				case LITERAL_signed:
				case LITERAL___signed__:
				case LITERAL___signed:
				case LITERAL_unsigned:
				case LITERAL___unsigned__:
				case LITERAL_float:
				case LITERAL_double:
				case LITERAL_void:
				case LITERAL__declspec:
				case LITERAL___declspec:
				case LITERAL_class:
				case LITERAL_struct:
				case LITERAL_union:
				case LITERAL__int64:
				case LITERAL___int64:
				case LITERAL___w64:
				case LITERAL___attribute__:
				case LITERAL___complex__:
				case LITERAL___global:
				case LITERAL__Bool:
				case LITERAL__Complex:
				case LITERAL___thread:
				case LITERAL___attribute:
				case LITERAL__Imaginary:
				case LITERAL_bit:
				case LITERAL___symbolic:
				case LITERAL___hidden:
				case LITERAL_final:
				case LITERAL_override:
				case LITERAL_constexpr:
				case LITERAL_decltype:
				case LITERAL_thread_local:
				case LITERAL_alignas:
				case LITERAL_char16_t:
				case LITERAL_char32_t:
				case LITERAL___decltype:
				case LITERAL___complex:
				case LITERAL___forceinline:
				case LITERAL___clrcall:
				case LITERAL__Noreturn:
				case LITERAL___builtin_va_list:
				case LITERAL__BUILT_IN_TYPE__:
				case LITERAL__TYPE_QUALIFIER__:
				case LITERAL__STORAGE_CLASS_SPECIFIER__:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop433;}
				}
				}
				}
				function_definition_g();
				if (matchError) {break loop433;}
			}
			else {
				boolean synPredMatched19 = false;
				if (((_tokenSet_16.member(LA1_350)) && (_tokenSet_17.member(LA2_350)))) {
					int _m19 = mark();
					guessing++;
					guess19:  while (true) {
						{
						ctor_decl_spec_g();
						if (matchError) {break guess19;}
						ctor_declarator_g(true);
						if (matchError) {break guess19;}
						{
						switch ( LA(1)) {
						case COLON:
						{
							consume();
							break;
						}
						case LCURLY:
						{
							consume();
							break;
						}
						case ASSIGNEQUAL:
						{
							consume();
							{
							switch ( LA(1)) {
							case LITERAL_default:
							{
								consume();
								break;
							}
							case LITERAL_delete:
							{
								consume();
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break guess19;}
							}
							}
							}
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess19;}
						}
						}
						}
						}
					synPredMatched19 = true;
					break;} // guess19
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m19);
					guessing--;
				}
				if ( synPredMatched19 ) {
					ctor_definition_g();
					if (matchError) {break loop433;}
				}
				else {
					boolean synPredMatched21 = false;
					if (((_tokenSet_32.member(LA1_350)) && (_tokenSet_13.member(LA2_350)))) {
						int _m21 = mark();
						guessing++;
						guess21:  while (true) {
							{
							dtor_declarator_g(true);
							if (matchError) {break guess21;}
							match(LCURLY);
							if (matchError) {break guess21;}
							}
						synPredMatched21 = true;
						break;} // guess21
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m21);
						guessing--;
					}
					if ( synPredMatched21 ) {
						dtor_definition_g();
						if (matchError) {break loop433;}
					}
					else {
						boolean synPredMatched23 = false;
						if (((_tokenSet_33.member(LA1_350)) && (_tokenSet_34.member(LA2_350)))) {
							int _m23 = mark();
							guessing++;
							guess23:  while (true) {
								{
								ctor_declarator_g(false);
								if (matchError) {break guess23;}
								match(SEMICOLON);
								if (matchError) {break guess23;}
								}
							synPredMatched23 = true;
							break;} // guess23
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m23);
							guessing--;
						}
						if ( synPredMatched23 ) {
							b=ctor_declarator_g(false);
							if (matchError) {break loop433;}
							AST tmp1703_AST = null;
							match(SEMICOLON);
							if (matchError) {break loop433;}
						}
						else {
							boolean synPredMatched25 = false;
							if (((_tokenSet_35.member(LA1_350)) && (_tokenSet_36.member(LA2_350)))) {
								int _m25 = mark();
								guessing++;
								guess25:  while (true) {
									{
									dtor_declarator_g(false);
									if (matchError) {break guess25;}
									match(SEMICOLON);
									if (matchError) {break guess25;}
									}
								synPredMatched25 = true;
								break;} // guess25
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m25);
								guessing--;
							}
							if ( synPredMatched25 ) {
								dtor_declarator_g(false);
								if (matchError) {break loop433;}
								AST tmp1704_AST = null;
								match(SEMICOLON);
								if (matchError) {break loop433;}
							}
							else {
								boolean synPredMatched27 = false;
								if (((_tokenSet_22.member(LA1_350)) && (_tokenSet_37.member(LA2_350)))) {
									int _m27 = mark();
									guessing++;
									guess27:  while (true) {
										{
										class_forward_declaration_g();
										if (matchError) {break guess27;}
										}
									synPredMatched27 = true;
									break;} // guess27
									if (matchError) {
									   resetMatchError();
									}
									rewind(_m27);
									guessing--;
								}
								if ( synPredMatched27 ) {
									declaration_specifiers_g(false, false);
									if (matchError) {break loop433;}
									AST tmp1705_AST = null;
									match(SEMICOLON);
									if (matchError) {break loop433;}
								}
								else {
									boolean synPredMatched33 = false;
									if (((_tokenSet_38.member(LA1_350)) && (_tokenSet_39.member(LA2_350)))) {
										int _m33 = mark();
										guessing++;
										guess33:  while (true) {
											{
											{
											switch ( LA(1)) {
											case LITERAL___extension__:
											{
												consume();
												break;
											}
											case LITERAL_template:
											case LITERAL_typedef:
											case LITERAL_enum:
											case LITERAL_extern:
											case LITERAL_auto:
											case LITERAL_register:
											case LITERAL_static:
											case LITERAL_mutable:
											case LITERAL_const:
											case LITERAL___const__:
											case LITERAL___const:
											case LITERAL_const_cast:
											case LITERAL_volatile:
											case LITERAL___volatile__:
											case LITERAL___volatile:
											case LITERAL___global:
											case LITERAL___thread:
											case LITERAL___symbolic:
											case LITERAL___hidden:
											case LITERAL_thread_local:
											case LITERAL__TYPE_QUALIFIER__:
											case LITERAL__STORAGE_CLASS_SPECIFIER__:
											{
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess33;}
											}
											}
											}
											{
											switch ( LA(1)) {
											case LITERAL_template:
											{
												consume();
												match(LESSTHAN);
												if (matchError) {break guess33;}
												match(GREATERTHAN);
												if (matchError) {break guess33;}
												break;
											}
											case LITERAL_typedef:
											case LITERAL_enum:
											case LITERAL_extern:
											case LITERAL_auto:
											case LITERAL_register:
											case LITERAL_static:
											case LITERAL_mutable:
											case LITERAL_const:
											case LITERAL___const__:
											case LITERAL___const:
											case LITERAL_const_cast:
											case LITERAL_volatile:
											case LITERAL___volatile__:
											case LITERAL___volatile:
											case LITERAL___global:
											case LITERAL___thread:
											case LITERAL___symbolic:
											case LITERAL___hidden:
											case LITERAL_thread_local:
											case LITERAL__TYPE_QUALIFIER__:
											case LITERAL__STORAGE_CLASS_SPECIFIER__:
											{
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess33;}
											}
											}
											}
											{
											_loop32:
											do {
												switch ( LA(1)) {
												case LITERAL_extern:
												case LITERAL_auto:
												case LITERAL_register:
												case LITERAL_static:
												case LITERAL_mutable:
												case LITERAL___global:
												case LITERAL___thread:
												case LITERAL___symbolic:
												case LITERAL___hidden:
												case LITERAL_thread_local:
												case LITERAL__STORAGE_CLASS_SPECIFIER__:
												{
													storage_class_specifier_g();
													if (matchError) {break guess33;}
													break;
												}
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL__TYPE_QUALIFIER__:
												{
													cv_qualifier_g();
													if (matchError) {break guess33;}
													break;
												}
												case LITERAL_typedef:
												{
													consume();
													break;
												}
												default:
												{
													break _loop32;
												}
												}
											} while (true);
											}
											enum_def_head_g();
											if (matchError) {break guess33;}
											}
										synPredMatched33 = true;
										break;} // guess33
										if (matchError) {
										   resetMatchError();
										}
										rewind(_m33);
										guessing--;
									}
									if ( synPredMatched33 ) {
										{
										switch ( LA(1)) {
										case LITERAL___extension__:
										{
											consume();
											break;
										}
										case LITERAL_template:
										case LITERAL_typedef:
										case LITERAL_enum:
										case LITERAL_extern:
										case LITERAL_auto:
										case LITERAL_register:
										case LITERAL_static:
										case LITERAL_mutable:
										case LITERAL_const:
										case LITERAL___const__:
										case LITERAL___const:
										case LITERAL_const_cast:
										case LITERAL_volatile:
										case LITERAL___volatile__:
										case LITERAL___volatile:
										case LITERAL___global:
										case LITERAL___thread:
										case LITERAL___symbolic:
										case LITERAL___hidden:
										case LITERAL_thread_local:
										case LITERAL__TYPE_QUALIFIER__:
										case LITERAL__STORAGE_CLASS_SPECIFIER__:
										{
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break loop433;}
										}
										}
										}
										{
										switch ( LA(1)) {
										case LITERAL_template:
										{
											AST tmp1707_AST = null;
											consume();
											AST tmp1708_AST = null;
											match(LESSTHAN);
											if (matchError) {break loop433;}
											AST tmp1709_AST = null;
											match(GREATERTHAN);
											if (matchError) {break loop433;}
											break;
										}
										case LITERAL_typedef:
										case LITERAL_enum:
										case LITERAL_extern:
										case LITERAL_auto:
										case LITERAL_register:
										case LITERAL_static:
										case LITERAL_mutable:
										case LITERAL_const:
										case LITERAL___const__:
										case LITERAL___const:
										case LITERAL_const_cast:
										case LITERAL_volatile:
										case LITERAL___volatile__:
										case LITERAL___volatile:
										case LITERAL___global:
										case LITERAL___thread:
										case LITERAL___symbolic:
										case LITERAL___hidden:
										case LITERAL_thread_local:
										case LITERAL__TYPE_QUALIFIER__:
										case LITERAL__STORAGE_CLASS_SPECIFIER__:
										{
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break loop433;}
										}
										}
										}
										{
										_loop37:
										do {
											switch ( LA(1)) {
											case LITERAL_extern:
											case LITERAL_auto:
											case LITERAL_register:
											case LITERAL_static:
											case LITERAL_mutable:
											case LITERAL___global:
											case LITERAL___thread:
											case LITERAL___symbolic:
											case LITERAL___hidden:
											case LITERAL_thread_local:
											case LITERAL__STORAGE_CLASS_SPECIFIER__:
											{
												sc=storage_class_specifier_g();
												if (matchError) {break loop433;}
												break;
											}
											case LITERAL_const:
											case LITERAL___const__:
											case LITERAL___const:
											case LITERAL_const_cast:
											case LITERAL_volatile:
											case LITERAL___volatile__:
											case LITERAL___volatile:
											case LITERAL__TYPE_QUALIFIER__:
											{
												tq=cv_qualifier_g();
												if (matchError) {break loop433;}
												break;
											}
											case LITERAL_typedef:
											{
												AST tmp1710_AST = null;
												consume();
												break;
											}
											default:
											{
												break _loop37;
											}
											}
										} while (true);
										}
										enum_specifier_g();
										if (matchError) {break loop433;}
										{
										switch ( LA(1)) {
										case ELLIPSIS:
										case LPAREN:
										case LSQUARE:
										case STAR:
										case AND:
										case AMPERSAND:
										case TILDE:
										case SCOPE:
										case IDENT:
										case LITERAL_OPERATOR:
										case LITERAL__stdcall:
										case LITERAL___stdcall:
										case LITERAL_this:
										case LITERAL_true:
										case LITERAL_false:
										case LITERAL__cdecl:
										case LITERAL___cdecl:
										case LITERAL__near:
										case LITERAL___near:
										case LITERAL__far:
										case LITERAL___far:
										case LITERAL___interrupt:
										case LITERAL_pascal:
										case LITERAL__pascal:
										case LITERAL___pascal:
										case LITERAL___attribute__:
										case LITERAL___attribute:
										case LITERAL_final:
										case LITERAL_override:
										case LITERAL_decltype:
										case LITERAL___decltype:
										case LITERAL___clrcall:
										{
											init_declarator_list_g(declOther);
											if (matchError) {break loop433;}
											break;
										}
										case SEMICOLON:
										{
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break loop433;}
										}
										}
										}
										AST tmp1711_AST = null;
										match(SEMICOLON);
										if (matchError) {break loop433;}
									}
									else {
										boolean synPredMatched47 = false;
										if (((_tokenSet_38.member(LA1_350)) && (_tokenSet_39.member(LA2_350)))) {
											int _m47 = mark();
											guessing++;
											guess47:  while (true) {
												{
												{
												switch ( LA(1)) {
												case LITERAL___extension__:
												{
													consume();
													break;
												}
												case LITERAL_template:
												case LITERAL_typedef:
												case LITERAL_enum:
												case LITERAL_extern:
												case LITERAL_auto:
												case LITERAL_register:
												case LITERAL_static:
												case LITERAL_mutable:
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL___global:
												case LITERAL___thread:
												case LITERAL___symbolic:
												case LITERAL___hidden:
												case LITERAL_thread_local:
												case LITERAL__TYPE_QUALIFIER__:
												case LITERAL__STORAGE_CLASS_SPECIFIER__:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess47;}
												}
												}
												}
												{
												switch ( LA(1)) {
												case LITERAL_template:
												{
													consume();
													match(LESSTHAN);
													if (matchError) {break guess47;}
													match(GREATERTHAN);
													if (matchError) {break guess47;}
													break;
												}
												case LITERAL_typedef:
												case LITERAL_enum:
												case LITERAL_extern:
												case LITERAL_auto:
												case LITERAL_register:
												case LITERAL_static:
												case LITERAL_mutable:
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL___global:
												case LITERAL___thread:
												case LITERAL___symbolic:
												case LITERAL___hidden:
												case LITERAL_thread_local:
												case LITERAL__TYPE_QUALIFIER__:
												case LITERAL__STORAGE_CLASS_SPECIFIER__:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess47;}
												}
												}
												}
												{
												_loop43:
												do {
													switch ( LA(1)) {
													case LITERAL_extern:
													case LITERAL_auto:
													case LITERAL_register:
													case LITERAL_static:
													case LITERAL_mutable:
													case LITERAL___global:
													case LITERAL___thread:
													case LITERAL___symbolic:
													case LITERAL___hidden:
													case LITERAL_thread_local:
													case LITERAL__STORAGE_CLASS_SPECIFIER__:
													{
														storage_class_specifier_g();
														if (matchError) {break guess47;}
														break;
													}
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL__TYPE_QUALIFIER__:
													{
														cv_qualifier_g();
														if (matchError) {break guess47;}
														break;
													}
													case LITERAL_typedef:
													{
														consume();
														break;
													}
													default:
													{
														break _loop43;
													}
													}
												} while (true);
												}
												match(LITERAL_enum);
												if (matchError) {break guess47;}
												{
												switch ( LA(1)) {
												case LITERAL_class:
												{
													consume();
													break;
												}
												case LITERAL_struct:
												{
													consume();
													break;
												}
												case COLON:
												case SEMICOLON:
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL_this:
												case LITERAL_true:
												case LITERAL_false:
												case LITERAL__cdecl:
												case LITERAL___cdecl:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_decltype:
												case LITERAL___decltype:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess47;}
												}
												}
												}
												{
												switch ( LA(1)) {
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL_this:
												case LITERAL_true:
												case LITERAL_false:
												case LITERAL__cdecl:
												case LITERAL___cdecl:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_decltype:
												case LITERAL___decltype:
												{
													qualified_id_g();
													if (matchError) {break guess47;}
													break;
												}
												case COLON:
												case SEMICOLON:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess47;}
												}
												}
												}
												{
												switch ( LA(1)) {
												case COLON:
												{
													consume();
													ts=type_specifier_g(dsInvalid, false);
													if (matchError) {break guess47;}
													break;
												}
												case SEMICOLON:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess47;}
												}
												}
												}
												match(SEMICOLON);
												if (matchError) {break guess47;}
												}
											synPredMatched47 = true;
											break;} // guess47
											if (matchError) {
											   resetMatchError();
											}
											rewind(_m47);
											guessing--;
										}
										if ( synPredMatched47 ) {
											{
											switch ( LA(1)) {
											case LITERAL___extension__:
											{
												consume();
												break;
											}
											case LITERAL_template:
											case LITERAL_typedef:
											case LITERAL_enum:
											case LITERAL_extern:
											case LITERAL_auto:
											case LITERAL_register:
											case LITERAL_static:
											case LITERAL_mutable:
											case LITERAL_const:
											case LITERAL___const__:
											case LITERAL___const:
											case LITERAL_const_cast:
											case LITERAL_volatile:
											case LITERAL___volatile__:
											case LITERAL___volatile:
											case LITERAL___global:
											case LITERAL___thread:
											case LITERAL___symbolic:
											case LITERAL___hidden:
											case LITERAL_thread_local:
											case LITERAL__TYPE_QUALIFIER__:
											case LITERAL__STORAGE_CLASS_SPECIFIER__:
											{
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break loop433;}
											}
											}
											}
											{
											switch ( LA(1)) {
											case LITERAL_template:
											{
												AST tmp1713_AST = null;
												consume();
												AST tmp1714_AST = null;
												match(LESSTHAN);
												if (matchError) {break loop433;}
												AST tmp1715_AST = null;
												match(GREATERTHAN);
												if (matchError) {break loop433;}
												break;
											}
											case LITERAL_typedef:
											case LITERAL_enum:
											case LITERAL_extern:
											case LITERAL_auto:
											case LITERAL_register:
											case LITERAL_static:
											case LITERAL_mutable:
											case LITERAL_const:
											case LITERAL___const__:
											case LITERAL___const:
											case LITERAL_const_cast:
											case LITERAL_volatile:
											case LITERAL___volatile__:
											case LITERAL___volatile:
											case LITERAL___global:
											case LITERAL___thread:
											case LITERAL___symbolic:
											case LITERAL___hidden:
											case LITERAL_thread_local:
											case LITERAL__TYPE_QUALIFIER__:
											case LITERAL__STORAGE_CLASS_SPECIFIER__:
											{
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break loop433;}
											}
											}
											}
											{
											_loop51:
											do {
												switch ( LA(1)) {
												case LITERAL_extern:
												case LITERAL_auto:
												case LITERAL_register:
												case LITERAL_static:
												case LITERAL_mutable:
												case LITERAL___global:
												case LITERAL___thread:
												case LITERAL___symbolic:
												case LITERAL___hidden:
												case LITERAL_thread_local:
												case LITERAL__STORAGE_CLASS_SPECIFIER__:
												{
													sc=storage_class_specifier_g();
													if (matchError) {break loop433;}
													break;
												}
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL__TYPE_QUALIFIER__:
												{
													tq=cv_qualifier_g();
													if (matchError) {break loop433;}
													break;
												}
												case LITERAL_typedef:
												{
													AST tmp1716_AST = null;
													consume();
													break;
												}
												default:
												{
													break _loop51;
												}
												}
											} while (true);
											}
											enum_specifier_g();
											if (matchError) {break loop433;}
											AST tmp1717_AST = null;
											match(SEMICOLON);
											if (matchError) {break loop433;}
										}
										else {
											boolean synPredMatched57 = false;
											if (((_tokenSet_42.member(LA1_350)) && (_tokenSet_19.member(LA2_350)))) {
												int _m57 = mark();
												guessing++;
												guess57:  while (true) {
													{
													{
													switch ( LA(1)) {
													case LITERAL___extension__:
													{
														consume();
														break;
													}
													case SCOPE:
													case IDENT:
													case LITERAL_OPERATOR:
													case LITERAL_template:
													case LITERAL_inline:
													case LITERAL__inline:
													case LITERAL___inline__:
													case LITERAL___inline:
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL_final:
													case LITERAL_override:
													case LITERAL_constexpr:
													case LITERAL_decltype:
													case LITERAL___decltype:
													case LITERAL___forceinline:
													case LITERAL__TYPE_QUALIFIER__:
													{
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess57;}
													}
													}
													}
													{
													switch ( LA(1)) {
													case LITERAL_template:
													{
														consume();
														match(LESSTHAN);
														if (matchError) {break guess57;}
														match(GREATERTHAN);
														if (matchError) {break guess57;}
														break;
													}
													case SCOPE:
													case IDENT:
													case LITERAL_OPERATOR:
													case LITERAL_inline:
													case LITERAL__inline:
													case LITERAL___inline__:
													case LITERAL___inline:
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL_final:
													case LITERAL_override:
													case LITERAL_constexpr:
													case LITERAL_decltype:
													case LITERAL___decltype:
													case LITERAL___forceinline:
													case LITERAL__TYPE_QUALIFIER__:
													{
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess57;}
													}
													}
													}
													{
													_loop56:
													do {
														switch ( LA(1)) {
														case LITERAL_inline:
														case LITERAL__inline:
														case LITERAL___inline__:
														case LITERAL___inline:
														case LITERAL___forceinline:
														{
															literal_inline_g();
															if (matchError) {break guess57;}
															break;
														}
														case LITERAL_const:
														case LITERAL___const__:
														case LITERAL___const:
														case LITERAL_const_cast:
														case LITERAL_volatile:
														case LITERAL___volatile__:
														case LITERAL___volatile:
														case LITERAL__TYPE_QUALIFIER__:
														{
															cv_qualifier_g();
															if (matchError) {break guess57;}
															break;
														}
														case LITERAL_constexpr:
														{
															consume();
															break;
														}
														default:
														{
															break _loop56;
														}
														}
													} while (true);
													}
													scope_override_g();
													if (matchError) {break guess57;}
													match(LITERAL_OPERATOR);
													if (matchError) {break guess57;}
													}
												synPredMatched57 = true;
												break;} // guess57
												if (matchError) {
												   resetMatchError();
												}
												rewind(_m57);
												guessing--;
											}
											if ( synPredMatched57 ) {
												{
												{
												switch ( LA(1)) {
												case LITERAL___extension__:
												{
													consume();
													break;
												}
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL_template:
												case LITERAL_inline:
												case LITERAL__inline:
												case LITERAL___inline__:
												case LITERAL___inline:
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_constexpr:
												case LITERAL_decltype:
												case LITERAL___decltype:
												case LITERAL___forceinline:
												case LITERAL__TYPE_QUALIFIER__:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break loop433;}
												}
												}
												}
												{
												switch ( LA(1)) {
												case LITERAL_template:
												{
													AST tmp1719_AST = null;
													consume();
													AST tmp1720_AST = null;
													match(LESSTHAN);
													if (matchError) {break loop433;}
													AST tmp1721_AST = null;
													match(GREATERTHAN);
													if (matchError) {break loop433;}
													break;
												}
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL_inline:
												case LITERAL__inline:
												case LITERAL___inline__:
												case LITERAL___inline:
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_constexpr:
												case LITERAL_decltype:
												case LITERAL___decltype:
												case LITERAL___forceinline:
												case LITERAL__TYPE_QUALIFIER__:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break loop433;}
												}
												}
												}
												{
												_loop62:
												do {
													switch ( LA(1)) {
													case LITERAL_inline:
													case LITERAL__inline:
													case LITERAL___inline__:
													case LITERAL___inline:
													case LITERAL___forceinline:
													{
														literal_inline_g();
														if (matchError) {break loop433;}
														break;
													}
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL__TYPE_QUALIFIER__:
													{
														tq=cv_qualifier_g();
														if (matchError) {break loop433;}
														break;
													}
													case LITERAL_constexpr:
													{
														AST tmp1722_AST = null;
														consume();
														break;
													}
													default:
													{
														break _loop62;
													}
													}
												} while (true);
												}
												s=scope_override_g();
												if (matchError) {break loop433;}
												b=conversion_function_decl_or_def_g();
												if (matchError) {break loop433;}
												}
											}
											else if ((_tokenSet_44.member(LA1_350)) && (_tokenSet_27.member(LA2_350))) {
												{
												switch ( LA(1)) {
												case LITERAL_template:
												{
													AST tmp1723_AST = null;
													consume();
													AST tmp1724_AST = null;
													match(LESSTHAN);
													if (matchError) {break loop433;}
													AST tmp1725_AST = null;
													match(GREATERTHAN);
													if (matchError) {break loop433;}
													break;
												}
												case ELLIPSIS:
												case LPAREN:
												case LSQUARE:
												case STAR:
												case AND:
												case AMPERSAND:
												case TILDE:
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL_typeof:
												case LITERAL___typeof__:
												case LITERAL___typeof:
												case LITERAL_typedef:
												case LITERAL_enum:
												case LITERAL_namespace:
												case LITERAL_extern:
												case LITERAL_inline:
												case LITERAL__inline:
												case LITERAL___inline__:
												case LITERAL___inline:
												case LITERAL_virtual:
												case LITERAL_explicit:
												case LITERAL_friend:
												case LITERAL__stdcall:
												case LITERAL___stdcall:
												case LITERAL_typename:
												case LITERAL_auto:
												case LITERAL_register:
												case LITERAL_static:
												case LITERAL_mutable:
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL_char:
												case LITERAL_wchar_t:
												case LITERAL_bool:
												case LITERAL_short:
												case LITERAL_int:
												case LITERAL_long:
												case LITERAL_signed:
												case LITERAL___signed__:
												case LITERAL___signed:
												case LITERAL_unsigned:
												case LITERAL___unsigned__:
												case LITERAL_float:
												case LITERAL_double:
												case LITERAL_void:
												case LITERAL__declspec:
												case LITERAL___declspec:
												case LITERAL_class:
												case LITERAL_struct:
												case LITERAL_union:
												case LITERAL_this:
												case LITERAL_true:
												case LITERAL_false:
												case LITERAL_using:
												case LITERAL__cdecl:
												case LITERAL___cdecl:
												case LITERAL__near:
												case LITERAL___near:
												case LITERAL__far:
												case LITERAL___far:
												case LITERAL___interrupt:
												case LITERAL_pascal:
												case LITERAL__pascal:
												case LITERAL___pascal:
												case LITERAL__int64:
												case LITERAL___int64:
												case LITERAL___w64:
												case LITERAL___attribute__:
												case LITERAL___complex__:
												case LITERAL___global:
												case LITERAL__Bool:
												case LITERAL__Complex:
												case LITERAL___thread:
												case LITERAL___attribute:
												case LITERAL__Imaginary:
												case LITERAL_bit:
												case LITERAL___symbolic:
												case LITERAL___hidden:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_constexpr:
												case LITERAL_decltype:
												case LITERAL_thread_local:
												case LITERAL_static_assert:
												case LITERAL_alignas:
												case LITERAL_char16_t:
												case LITERAL_char32_t:
												case LITERAL___decltype:
												case LITERAL___complex:
												case LITERAL___forceinline:
												case LITERAL___clrcall:
												case LITERAL__Noreturn:
												case LITERAL___builtin_va_list:
												case LITERAL__BUILT_IN_TYPE__:
												case LITERAL__TYPE_QUALIFIER__:
												case LITERAL__STORAGE_CLASS_SPECIFIER__:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break loop433;}
												}
												}
												}
												declaration_g(declOther);
												if (matchError) {break loop433;}
											}
											else {
												matchError=true;if (matchError) {break loop433;}
											}
											}}}}}}}}
											}
											template_explicit_specialization_AST = (AST)currentAST.root;
										break;} // loop433
										if (matchError) {
									}
									returnAST = template_explicit_specialization_AST;
								}
								
	protected final void declaration_template_impl_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST declaration_template_impl_AST = null;
		String s; K_and_R = false; boolean ctrName=false; boolean definition; boolean friend = false; TypeQualifier tq; StorageClass sc;int ts = 0;
		
		loop434:  while (true) {
			{
			int _cnt87=0;
			_loop87:
			do {
				if ((LA(1)==LITERAL_template||LA(1)==LITERAL_export)) {
					{
					int LA1_351 = LA(1);
					int LA2_351 = LA(2);
					
					boolean synPredMatched86 = false;
					if (((LA1_351==LITERAL_template) && (LA2_351==LESSTHAN))) {
						int _m86 = mark();
						guessing++;
						guess86:  while (true) {
							{
							match(LITERAL_template);
							if (matchError) {break guess86;}
							match(LESSTHAN);
							if (matchError) {break guess86;}
							match(GREATERTHAN);
							if (matchError) {break guess86;}
							}
						synPredMatched86 = true;
						break;} // guess86
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m86);
						guessing--;
					}
					if ( synPredMatched86 ) {
						AST tmp1726_AST = null;
						consume();
						consume();
						match(GREATERTHAN);
						if (matchError) {break loop434;}
					}
					else if ((LA1_351==LITERAL_template||LA1_351==LITERAL_export) && (LA2_351==LESSTHAN||LA2_351==LITERAL_template)) {
						template_head_g();
						if (matchError) {break loop434;}
					}
					else {
						matchError=true;if (matchError) {break loop434;}
					}
					
					}
				}
				else {
					if ( _cnt87>=1 ) { break _loop87; } else {matchError=true;if (matchError) {break loop434;}}
				}
				
				_cnt87++;
			} while (true);
			}
			{
			int LA1_352 = LA(1);
			int LA2_352 = LA(2);
			
			boolean synPredMatched90 = false;
			if (((_tokenSet_26.member(LA1_352)) && (_tokenSet_27.member(LA2_352)))) {
				int _m90 = mark();
				guessing++;
				guess90:  while (true) {
					{
					class_head_g();
					if (matchError) {break guess90;}
					}
				synPredMatched90 = true;
				break;} // guess90
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m90);
				guessing--;
			}
			if ( synPredMatched90 ) {
				declaration_g(declOther);
				if (matchError) {break loop434;}
			}
			else {
				boolean synPredMatched93 = false;
				if (((_tokenSet_16.member(LA1_352)) && (_tokenSet_17.member(LA2_352)))) {
					int _m93 = mark();
					guessing++;
					guess93:  while (true) {
						{
						ctor_decl_spec_g();
						if (matchError) {break guess93;}
						ctor_declarator_g(false);
						if (matchError) {break guess93;}
						{
						switch ( LA(1)) {
						case EOF:
						{
							consume();
							break;
						}
						case SEMICOLON:
						{
							consume();
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break guess93;}
						}
						}
						}
						}
					synPredMatched93 = true;
					break;} // guess93
					if (matchError) {
					   resetMatchError();
					}
					rewind(_m93);
					guessing--;
				}
				if ( synPredMatched93 ) {
					friend=ctor_decl_spec_g();
					if (matchError) {break loop434;}
					ctrName=ctor_declarator_g(false);
					if (matchError) {break loop434;}
					{
					switch ( LA(1)) {
					case EOF:
					{
						consume();
						break;
					}
					case SEMICOLON:
					{
						AST tmp1730_AST = null;
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop434;}
					}
					}
					}
				}
				else {
					boolean synPredMatched96 = false;
					if (((_tokenSet_16.member(LA1_352)) && (_tokenSet_17.member(LA2_352)))) {
						int _m96 = mark();
						guessing++;
						guess96:  while (true) {
							{
							ctor_decl_spec_g();
							if (matchError) {break guess96;}
							ctor_declarator_g(true);
							if (matchError) {break guess96;}
							}
						synPredMatched96 = true;
						break;} // guess96
						if (matchError) {
						   resetMatchError();
						}
						rewind(_m96);
						guessing--;
					}
					if ( synPredMatched96 ) {
						friend=ctor_decl_spec_g();
						if (matchError) {break loop434;}
						ctrName=ctor_declarator_g(true);
						if (matchError) {break loop434;}
						{
						switch ( LA(1)) {
						case COLON:
						case LCURLY:
						case LITERAL_try:
						case LITERAL___try:
						{
							ctor_body_g();
							if (matchError) {break loop434;}
							break;
						}
						case ASSIGNEQUAL:
						{
							AST tmp1731_AST = null;
							consume();
							{
							switch ( LA(1)) {
							case LITERAL_default:
							{
								AST tmp1732_AST = null;
								consume();
								break;
							}
							case LITERAL_delete:
							{
								AST tmp1733_AST = null;
								consume();
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break loop434;}
							}
							}
							}
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break loop434;}
						}
						}
						}
					}
					else {
						boolean synPredMatched101 = false;
						if ((((_tokenSet_20.member(LA1_352)) && (_tokenSet_19.member(LA2_352)))&&(isCPlusPlus()))) {
							int _m101 = mark();
							guessing++;
							guess101:  while (true) {
								{
								{
								switch ( LA(1)) {
								case LITERAL_inline:
								case LITERAL__inline:
								case LITERAL___inline__:
								case LITERAL___inline:
								case LITERAL___forceinline:
								{
									literal_inline_g();
									if (matchError) {break guess101;}
									break;
								}
								case LITERAL_constexpr:
								{
									consume();
									break;
								}
								case SCOPE:
								case IDENT:
								case LITERAL_OPERATOR:
								case LITERAL_final:
								case LITERAL_override:
								case LITERAL_decltype:
								case LITERAL___decltype:
								{
									break;
								}
								default:
								{
									matchError=true;if (matchError) {break guess101;}
								}
								}
								}
								scope_override_g();
								if (matchError) {break guess101;}
								conversion_function_decl_or_def_g();
								if (matchError) {break guess101;}
								}
							synPredMatched101 = true;
							break;} // guess101
							if (matchError) {
							   resetMatchError();
							}
							rewind(_m101);
							guessing--;
						}
						if ( synPredMatched101 ) {
							{
							switch ( LA(1)) {
							case LITERAL_inline:
							case LITERAL__inline:
							case LITERAL___inline__:
							case LITERAL___inline:
							case LITERAL___forceinline:
							{
								literal_inline_g();
								if (matchError) {break loop434;}
								break;
							}
							case LITERAL_constexpr:
							{
								AST tmp1734_AST = null;
								consume();
								break;
							}
							case SCOPE:
							case IDENT:
							case LITERAL_OPERATOR:
							case LITERAL_final:
							case LITERAL_override:
							case LITERAL_decltype:
							case LITERAL___decltype:
							{
								break;
							}
							default:
							{
								matchError=true;if (matchError) {break loop434;}
							}
							}
							}
							s=scope_override_g();
							if (matchError) {break loop434;}
							definition=conversion_function_decl_or_def_g();
							if (matchError) {break loop434;}
						}
						else {
							boolean synPredMatched104 = false;
							if (((_tokenSet_26.member(LA1_352)) && (_tokenSet_27.member(LA2_352)))) {
								int _m104 = mark();
								guessing++;
								guess104:  while (true) {
									{
									declaration_specifiers_g(false, false);
									if (matchError) {break guess104;}
									function_declarator_g(false, false, false);
									if (matchError) {break guess104;}
									match(SEMICOLON);
									if (matchError) {break guess104;}
									}
								synPredMatched104 = true;
								break;} // guess104
								if (matchError) {
								   resetMatchError();
								}
								rewind(_m104);
								guessing--;
							}
							if ( synPredMatched104 ) {
								declaration_g(declOther);
								if (matchError) {break loop434;}
							}
							else {
								boolean synPredMatched108 = false;
								if (((_tokenSet_22.member(LA1_352)) && (_tokenSet_23.member(LA2_352)))) {
									int _m108 = mark();
									guessing++;
									guess108:  while (true) {
										{
										declaration_specifiers_g(false, false);
										if (matchError) {break guess108;}
										function_declarator_g(true, false, false);
										if (matchError) {break guess108;}
										{
										switch ( LA(1)) {
										case LCURLY:
										{
											consume();
											break;
										}
										case LITERAL_try:
										case LITERAL___try:
										{
											literal_try_g();
											if (matchError) {break guess108;}
											break;
										}
										case ASSIGNEQUAL:
										{
											consume();
											{
											switch ( LA(1)) {
											case LITERAL_default:
											{
												consume();
												break;
											}
											case LITERAL_delete:
											{
												consume();
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess108;}
											}
											}
											}
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break guess108;}
										}
										}
										}
										}
									synPredMatched108 = true;
									break;} // guess108
									if (matchError) {
									   resetMatchError();
									}
									rewind(_m108);
									guessing--;
								}
								if ( synPredMatched108 ) {
									function_definition_g();
									if (matchError) {break loop434;}
								}
								else {
									boolean synPredMatched112 = false;
									if (((_tokenSet_32.member(LA1_352)) && (_tokenSet_13.member(LA2_352)))) {
										int _m112 = mark();
										guessing++;
										guess112:  while (true) {
											{
											dtor_head_g(true);
											if (matchError) {break guess112;}
											{
											switch ( LA(1)) {
											case LCURLY:
											{
												consume();
												break;
											}
											case ASSIGNEQUAL:
											{
												consume();
												{
												switch ( LA(1)) {
												case LITERAL_default:
												{
													consume();
													break;
												}
												case LITERAL_delete:
												{
													consume();
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break guess112;}
												}
												}
												}
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break guess112;}
											}
											}
											}
											}
										synPredMatched112 = true;
										break;} // guess112
										if (matchError) {
										   resetMatchError();
										}
										rewind(_m112);
										guessing--;
									}
									if ( synPredMatched112 ) {
										dtor_head_g(true);
										if (matchError) {break loop434;}
										{
										switch ( LA(1)) {
										case LCURLY:
										{
											dtor_body_g();
											if (matchError) {break loop434;}
											break;
										}
										case ASSIGNEQUAL:
										{
											AST tmp1735_AST = null;
											consume();
											{
											switch ( LA(1)) {
											case LITERAL_default:
											{
												AST tmp1736_AST = null;
												consume();
												break;
											}
											case LITERAL_delete:
											{
												AST tmp1737_AST = null;
												consume();
												break;
											}
											default:
											{
												matchError=true;if (matchError) {break loop434;}
											}
											}
											}
											break;
										}
										default:
										{
											matchError=true;if (matchError) {break loop434;}
										}
										}
										}
									}
									else {
										boolean synPredMatched116 = false;
										if (((LA1_352==LITERAL_using) && (_tokenSet_0.member(LA2_352)))) {
											int _m116 = mark();
											guessing++;
											guess116:  while (true) {
												{
												match(LITERAL_using);
												if (matchError) {break guess116;}
												literal_ident_g();
												if (matchError) {break guess116;}
												match(ASSIGNEQUAL);
												if (matchError) {break guess116;}
												}
											synPredMatched116 = true;
											break;} // guess116
											if (matchError) {
											   resetMatchError();
											}
											rewind(_m116);
											guessing--;
										}
										if ( synPredMatched116 ) {
											alias_declaration_g();
											if (matchError) {break loop434;}
										}
										else {
											boolean synPredMatched121 = false;
											if (((_tokenSet_117.member(LA1_352)) && (_tokenSet_118.member(LA2_352)))) {
												int _m121 = mark();
												guessing++;
												guess121:  while (true) {
													{
													{
													switch ( LA(1)) {
													case LITERAL___extension__:
													{
														consume();
														break;
													}
													case LITERAL_typedef:
													case LITERAL_enum:
													case LITERAL_extern:
													case LITERAL_auto:
													case LITERAL_register:
													case LITERAL_static:
													case LITERAL_mutable:
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL___global:
													case LITERAL___thread:
													case LITERAL___symbolic:
													case LITERAL___hidden:
													case LITERAL_thread_local:
													case LITERAL__TYPE_QUALIFIER__:
													case LITERAL__STORAGE_CLASS_SPECIFIER__:
													{
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break guess121;}
													}
													}
													}
													{
													_loop120:
													do {
														switch ( LA(1)) {
														case LITERAL_extern:
														case LITERAL_auto:
														case LITERAL_register:
														case LITERAL_static:
														case LITERAL_mutable:
														case LITERAL___global:
														case LITERAL___thread:
														case LITERAL___symbolic:
														case LITERAL___hidden:
														case LITERAL_thread_local:
														case LITERAL__STORAGE_CLASS_SPECIFIER__:
														{
															storage_class_specifier_g();
															if (matchError) {break guess121;}
															break;
														}
														case LITERAL_const:
														case LITERAL___const__:
														case LITERAL___const:
														case LITERAL_const_cast:
														case LITERAL_volatile:
														case LITERAL___volatile__:
														case LITERAL___volatile:
														case LITERAL__TYPE_QUALIFIER__:
														{
															cv_qualifier_g();
															if (matchError) {break guess121;}
															break;
														}
														case LITERAL_typedef:
														{
															consume();
															break;
														}
														default:
														{
															break _loop120;
														}
														}
													} while (true);
													}
													enum_def_head_g();
													if (matchError) {break guess121;}
													}
												synPredMatched121 = true;
												break;} // guess121
												if (matchError) {
												   resetMatchError();
												}
												rewind(_m121);
												guessing--;
											}
											if ( synPredMatched121 ) {
												{
												switch ( LA(1)) {
												case LITERAL___extension__:
												{
													consume();
													break;
												}
												case LITERAL_typedef:
												case LITERAL_enum:
												case LITERAL_extern:
												case LITERAL_auto:
												case LITERAL_register:
												case LITERAL_static:
												case LITERAL_mutable:
												case LITERAL_const:
												case LITERAL___const__:
												case LITERAL___const:
												case LITERAL_const_cast:
												case LITERAL_volatile:
												case LITERAL___volatile__:
												case LITERAL___volatile:
												case LITERAL___global:
												case LITERAL___thread:
												case LITERAL___symbolic:
												case LITERAL___hidden:
												case LITERAL_thread_local:
												case LITERAL__TYPE_QUALIFIER__:
												case LITERAL__STORAGE_CLASS_SPECIFIER__:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break loop434;}
												}
												}
												}
												{
												_loop124:
												do {
													switch ( LA(1)) {
													case LITERAL_extern:
													case LITERAL_auto:
													case LITERAL_register:
													case LITERAL_static:
													case LITERAL_mutable:
													case LITERAL___global:
													case LITERAL___thread:
													case LITERAL___symbolic:
													case LITERAL___hidden:
													case LITERAL_thread_local:
													case LITERAL__STORAGE_CLASS_SPECIFIER__:
													{
														sc=storage_class_specifier_g();
														if (matchError) {break loop434;}
														break;
													}
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL__TYPE_QUALIFIER__:
													{
														tq=cv_qualifier_g();
														if (matchError) {break loop434;}
														break;
													}
													case LITERAL_typedef:
													{
														AST tmp1739_AST = null;
														consume();
														break;
													}
													default:
													{
														break _loop124;
													}
													}
												} while (true);
												}
												enum_specifier_g();
												if (matchError) {break loop434;}
												{
												switch ( LA(1)) {
												case ELLIPSIS:
												case LPAREN:
												case LSQUARE:
												case STAR:
												case AND:
												case AMPERSAND:
												case TILDE:
												case SCOPE:
												case IDENT:
												case LITERAL_OPERATOR:
												case LITERAL__stdcall:
												case LITERAL___stdcall:
												case LITERAL_this:
												case LITERAL_true:
												case LITERAL_false:
												case LITERAL__cdecl:
												case LITERAL___cdecl:
												case LITERAL__near:
												case LITERAL___near:
												case LITERAL__far:
												case LITERAL___far:
												case LITERAL___interrupt:
												case LITERAL_pascal:
												case LITERAL__pascal:
												case LITERAL___pascal:
												case LITERAL___attribute__:
												case LITERAL___attribute:
												case LITERAL_final:
												case LITERAL_override:
												case LITERAL_decltype:
												case LITERAL___decltype:
												case LITERAL___clrcall:
												{
													init_declarator_list_g(declOther);
													if (matchError) {break loop434;}
													break;
												}
												case SEMICOLON:
												{
													break;
												}
												default:
												{
													matchError=true;if (matchError) {break loop434;}
												}
												}
												}
												AST tmp1740_AST = null;
												match(SEMICOLON);
												if (matchError) {break loop434;}
											}
											else {
												boolean synPredMatched133 = false;
												if (((_tokenSet_117.member(LA1_352)) && (_tokenSet_118.member(LA2_352)))) {
													int _m133 = mark();
													guessing++;
													guess133:  while (true) {
														{
														{
														switch ( LA(1)) {
														case LITERAL___extension__:
														{
															consume();
															break;
														}
														case LITERAL_typedef:
														case LITERAL_enum:
														case LITERAL_extern:
														case LITERAL_auto:
														case LITERAL_register:
														case LITERAL_static:
														case LITERAL_mutable:
														case LITERAL_const:
														case LITERAL___const__:
														case LITERAL___const:
														case LITERAL_const_cast:
														case LITERAL_volatile:
														case LITERAL___volatile__:
														case LITERAL___volatile:
														case LITERAL___global:
														case LITERAL___thread:
														case LITERAL___symbolic:
														case LITERAL___hidden:
														case LITERAL_thread_local:
														case LITERAL__TYPE_QUALIFIER__:
														case LITERAL__STORAGE_CLASS_SPECIFIER__:
														{
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess133;}
														}
														}
														}
														{
														_loop129:
														do {
															switch ( LA(1)) {
															case LITERAL_extern:
															case LITERAL_auto:
															case LITERAL_register:
															case LITERAL_static:
															case LITERAL_mutable:
															case LITERAL___global:
															case LITERAL___thread:
															case LITERAL___symbolic:
															case LITERAL___hidden:
															case LITERAL_thread_local:
															case LITERAL__STORAGE_CLASS_SPECIFIER__:
															{
																storage_class_specifier_g();
																if (matchError) {break guess133;}
																break;
															}
															case LITERAL_const:
															case LITERAL___const__:
															case LITERAL___const:
															case LITERAL_const_cast:
															case LITERAL_volatile:
															case LITERAL___volatile__:
															case LITERAL___volatile:
															case LITERAL__TYPE_QUALIFIER__:
															{
																cv_qualifier_g();
																if (matchError) {break guess133;}
																break;
															}
															case LITERAL_typedef:
															{
																consume();
																break;
															}
															default:
															{
																break _loop129;
															}
															}
														} while (true);
														}
														match(LITERAL_enum);
														if (matchError) {break guess133;}
														{
														switch ( LA(1)) {
														case LITERAL_class:
														{
															consume();
															break;
														}
														case LITERAL_struct:
														{
															consume();
															break;
														}
														case COLON:
														case SEMICOLON:
														case SCOPE:
														case IDENT:
														case LITERAL_OPERATOR:
														case LITERAL_this:
														case LITERAL_true:
														case LITERAL_false:
														case LITERAL__cdecl:
														case LITERAL___cdecl:
														case LITERAL_final:
														case LITERAL_override:
														case LITERAL_decltype:
														case LITERAL___decltype:
														{
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess133;}
														}
														}
														}
														{
														switch ( LA(1)) {
														case SCOPE:
														case IDENT:
														case LITERAL_OPERATOR:
														case LITERAL_this:
														case LITERAL_true:
														case LITERAL_false:
														case LITERAL__cdecl:
														case LITERAL___cdecl:
														case LITERAL_final:
														case LITERAL_override:
														case LITERAL_decltype:
														case LITERAL___decltype:
														{
															qualified_id_g();
															if (matchError) {break guess133;}
															break;
														}
														case COLON:
														case SEMICOLON:
														{
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess133;}
														}
														}
														}
														{
														switch ( LA(1)) {
														case COLON:
														{
															consume();
															ts=type_specifier_g(dsInvalid, false);
															if (matchError) {break guess133;}
															break;
														}
														case SEMICOLON:
														{
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break guess133;}
														}
														}
														}
														match(SEMICOLON);
														if (matchError) {break guess133;}
														}
													synPredMatched133 = true;
													break;} // guess133
													if (matchError) {
													   resetMatchError();
													}
													rewind(_m133);
													guessing--;
												}
												if ( synPredMatched133 ) {
													{
													switch ( LA(1)) {
													case LITERAL___extension__:
													{
														consume();
														break;
													}
													case LITERAL_typedef:
													case LITERAL_enum:
													case LITERAL_extern:
													case LITERAL_auto:
													case LITERAL_register:
													case LITERAL_static:
													case LITERAL_mutable:
													case LITERAL_const:
													case LITERAL___const__:
													case LITERAL___const:
													case LITERAL_const_cast:
													case LITERAL_volatile:
													case LITERAL___volatile__:
													case LITERAL___volatile:
													case LITERAL___global:
													case LITERAL___thread:
													case LITERAL___symbolic:
													case LITERAL___hidden:
													case LITERAL_thread_local:
													case LITERAL__TYPE_QUALIFIER__:
													case LITERAL__STORAGE_CLASS_SPECIFIER__:
													{
														break;
													}
													default:
													{
														matchError=true;if (matchError) {break loop434;}
													}
													}
													}
													{
													_loop136:
													do {
														switch ( LA(1)) {
														case LITERAL_extern:
														case LITERAL_auto:
														case LITERAL_register:
														case LITERAL_static:
														case LITERAL_mutable:
														case LITERAL___global:
														case LITERAL___thread:
														case LITERAL___symbolic:
														case LITERAL___hidden:
														case LITERAL_thread_local:
														case LITERAL__STORAGE_CLASS_SPECIFIER__:
														{
															sc=storage_class_specifier_g();
															if (matchError) {break loop434;}
															break;
														}
														case LITERAL_const:
														case LITERAL___const__:
														case LITERAL___const:
														case LITERAL_const_cast:
														case LITERAL_volatile:
														case LITERAL___volatile__:
														case LITERAL___volatile:
														case LITERAL__TYPE_QUALIFIER__:
														{
															tq=cv_qualifier_g();
															if (matchError) {break loop434;}
															break;
														}
														case LITERAL_typedef:
														{
															AST tmp1742_AST = null;
															consume();
															break;
														}
														default:
														{
															break _loop136;
														}
														}
													} while (true);
													}
													enum_specifier_g();
													if (matchError) {break loop434;}
													AST tmp1743_AST = null;
													match(SEMICOLON);
													if (matchError) {break loop434;}
												}
												else {
													boolean synPredMatched139 = false;
													if (((_tokenSet_22.member(LA1_352)) && (_tokenSet_119.member(LA2_352)))) {
														int _m139 = mark();
														guessing++;
														guess139:  while (true) {
															{
															declaration_specifiers_g(true, false);
															if (matchError) {break guess139;}
															{
															switch ( LA(1)) {
															case ELLIPSIS:
															case LPAREN:
															case LSQUARE:
															case STAR:
															case AND:
															case AMPERSAND:
															case TILDE:
															case SCOPE:
															case IDENT:
															case LITERAL_OPERATOR:
															case LITERAL__stdcall:
															case LITERAL___stdcall:
															case LITERAL_this:
															case LITERAL_true:
															case LITERAL_false:
															case LITERAL__cdecl:
															case LITERAL___cdecl:
															case LITERAL__near:
															case LITERAL___near:
															case LITERAL__far:
															case LITERAL___far:
															case LITERAL___interrupt:
															case LITERAL_pascal:
															case LITERAL__pascal:
															case LITERAL___pascal:
															case LITERAL___attribute__:
															case LITERAL___attribute:
															case LITERAL_final:
															case LITERAL_override:
															case LITERAL_decltype:
															case LITERAL___decltype:
															case LITERAL___clrcall:
															{
																init_declarator_list_g(declOther);
																if (matchError) {break guess139;}
																break;
															}
															case SEMICOLON:
															{
																break;
															}
															default:
															{
																matchError=true;if (matchError) {break guess139;}
															}
															}
															}
															match(SEMICOLON);
															if (matchError) {break guess139;}
															}
														synPredMatched139 = true;
														break;} // guess139
														if (matchError) {
														   resetMatchError();
														}
														rewind(_m139);
														guessing--;
													}
													if ( synPredMatched139 ) {
														declaration_specifiers_g(true, false);
														if (matchError) {break loop434;}
														{
														switch ( LA(1)) {
														case ELLIPSIS:
														case LPAREN:
														case LSQUARE:
														case STAR:
														case AND:
														case AMPERSAND:
														case TILDE:
														case SCOPE:
														case IDENT:
														case LITERAL_OPERATOR:
														case LITERAL__stdcall:
														case LITERAL___stdcall:
														case LITERAL_this:
														case LITERAL_true:
														case LITERAL_false:
														case LITERAL__cdecl:
														case LITERAL___cdecl:
														case LITERAL__near:
														case LITERAL___near:
														case LITERAL__far:
														case LITERAL___far:
														case LITERAL___interrupt:
														case LITERAL_pascal:
														case LITERAL__pascal:
														case LITERAL___pascal:
														case LITERAL___attribute__:
														case LITERAL___attribute:
														case LITERAL_final:
														case LITERAL_override:
														case LITERAL_decltype:
														case LITERAL___decltype:
														case LITERAL___clrcall:
														{
															init_declarator_list_g(declOther);
															if (matchError) {break loop434;}
															break;
														}
														case SEMICOLON:
														{
															break;
														}
														default:
														{
															matchError=true;if (matchError) {break loop434;}
														}
														}
														}
														AST tmp1744_AST = null;
														match(SEMICOLON);
														if (matchError) {break loop434;}
													}
													else {
														matchError=true;if (matchError) {break loop434;}
													}
													}}}}}}}}}}
													}
													declaration_template_impl_AST = (AST)currentAST.root;
												break;} // loop434
												if (matchError) {
											}
											returnAST = declaration_template_impl_AST;
										}
										
	public final void conversion_function_decl_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST conversion_function_decl_AST = null;
		
		loop435:  while (true) {
			conversion_function_head_g();
			if (matchError) {break loop435;}
			match(SEMICOLON);
			if (matchError) {break loop435;}
			conversion_function_decl_AST = (AST)currentAST.root;
		break;} // loop435
		if (matchError) {
	}
	returnAST = conversion_function_decl_AST;
}

	public final void ctor_head_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ctor_head_AST = null;
		boolean friend = false; boolean ctorName = false;
		
		loop436:  while (true) {
			friend=ctor_decl_spec_g();
			if (matchError) {break loop436;}
			ctorName=ctor_declarator_g(true);
			if (matchError) {break loop436;}
			ctor_head_AST = (AST)currentAST.root;
		break;} // loop436
		if (matchError) {
	}
	returnAST = ctor_head_AST;
}

	public final void function_try_block_g(
		boolean constructor
	) {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST function_try_block_AST = null;
		
		loop437:  while (true) {
			int LA1_353 = LA(1);
			int LA2_353 = LA(2);
			
			if (((LA1_353==LITERAL_try||LA1_353==LITERAL___try) && (LA2_353==COLON||LA2_353==LCURLY))&&(isLazyCompound())) {
				literal_try_g();
				if (matchError) {break loop437;}
				{
				int LA1_354 = LA(1);
				int LA2_354 = LA(2);
				
				if (((LA1_354==COLON||LA1_354==LCURLY) && (_tokenSet_1.member(LA2_354)))&&((constructor))) {
					{
					switch ( LA(1)) {
					case COLON:
					{
						ctor_initializer_g();
						if (matchError) {break loop437;}
						break;
					}
					case LCURLY:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop437;}
					}
					}
					}
				}
				else if ((LA1_354==LCURLY) && (_tokenSet_1.member(LA2_354))) {
				}
				else {
					matchError=true;if (matchError) {break loop437;}
				}
				
				}
				balanceCurlies_g();
				if (matchError) {break loop437;}
				{
				_loop1073:
				do {
					int LA1_355 = LA(1);
					int LA2_355 = LA(2);
					
					if ((LA1_355==LITERAL_catch||LA1_355==LITERAL___finally) && (LA2_355==LPAREN||LA2_355==LCURLY)) {
						{
						switch ( LA(1)) {
						case LITERAL_catch:
						{
							AST tmp1746_AST = null;
							consume();
							AST tmp1747_AST = null;
							match(LPAREN);
							if (matchError) {break loop437;}
							exception_declaration_g();
							if (matchError) {break loop437;}
							AST tmp1748_AST = null;
							match(RPAREN);
							if (matchError) {break loop437;}
							break;
						}
						case LITERAL___finally:
						{
							literal_finally_g();
							if (matchError) {break loop437;}
							break;
						}
						default:
						{
							matchError=true;if (matchError) {break loop437;}
						}
						}
						}
						balanceCurlies_g();
						if (matchError) {break loop437;}
					}
					else {
						break _loop1073;
					}
					
				} while (true);
				}
				function_try_block_AST = (AST)currentAST.root;
			}
			else if (((LA1_353==LITERAL_try||LA1_353==LITERAL___try) && (LA2_353==COLON||LA2_353==LCURLY))&&(!isLazyCompound())) {
				try_block_g(constructor);
				if (matchError) {break loop437;}
				function_try_block_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;if (matchError) {break loop437;}
			}
			
		break;} // loop437
		if (matchError) {
	}
	returnAST = function_try_block_AST;
}

	protected final void namespace_attribute_specification_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST namespace_attribute_specification_AST = null;
		
		loop438:  while (true) {
			attribute_specification_list_g();
			if (matchError) {break loop438;}
		break;} // loop438
		if (matchError) {
	}
	returnAST = namespace_attribute_specification_AST;
}

	public final void member_declarator_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST member_declarator_AST = null;
		String s;
		
		loop439:  while (true) {
			int LA1_356 = LA(1);
			int LA2_356 = LA(2);
			
			boolean synPredMatched652 = false;
			if (((_tokenSet_263.member(LA1_356)) && (_tokenSet_264.member(LA2_356)))) {
				int _m652 = mark();
				guessing++;
				guess652:  while (true) {
					{
					{
					switch ( LA(1)) {
					case IDENT:
					case LITERAL_final:
					case LITERAL_override:
					{
						literal_ident_g();
						if (matchError) {break guess652;}
						break;
					}
					case COLON:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break guess652;}
					}
					}
					}
					match(COLON);
					if (matchError) {break guess652;}
					constant_expression_g();
					if (matchError) {break guess652;}
					}
				synPredMatched652 = true;
				break;} // guess652
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m652);
				guessing--;
			}
			if ( synPredMatched652 ) {
				{
				switch ( LA(1)) {
				case IDENT:
				case LITERAL_final:
				case LITERAL_override:
				{
					s=literal_ident_g();
					if (matchError) {break loop439;}
					break;
				}
				case COLON:
				{
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop439;}
				}
				}
				}
				AST tmp1749_AST = null;
				match(COLON);
				if (matchError) {break loop439;}
				constant_expression_g();
				if (matchError) {break loop439;}
				member_declarator_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_109.member(LA1_356)) && (_tokenSet_110.member(LA2_356))) {
				init_declarator_g(declOther);
				if (matchError) {break loop439;}
				member_declarator_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;if (matchError) {break loop439;}
			}
			
		break;} // loop439
		if (matchError) {
	}
	returnAST = member_declarator_AST;
}

	public final void ctor_initializer_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST ctor_initializer_AST = null;
		
		loop440:  while (true) {
			match(COLON);
			if (matchError) {break loop440;}
			superclass_init_g();
			if (matchError) {break loop440;}
			{
			switch ( LA(1)) {
			case ELLIPSIS:
			{
				AST tmp1751_AST = null;
				consume();
				break;
			}
			case COMMA:
			case LCURLY:
			{
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop440;}
			}
			}
			}
			{
			_loop817:
			do {
				if ((LA(1)==COMMA)) {
					consume();
					superclass_init_g();
					if (matchError) {break loop440;}
					{
					switch ( LA(1)) {
					case ELLIPSIS:
					{
						AST tmp1753_AST = null;
						consume();
						break;
					}
					case COMMA:
					case LCURLY:
					{
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop440;}
					}
					}
					}
				}
				else {
					break _loop817;
				}
				
			} while (true);
			}
			ctor_initializer_AST = (AST)currentAST.root;
		break;} // loop440
		if (matchError) {
	}
	returnAST = ctor_initializer_AST;
}

	public final void case_expression_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST case_expression_AST = null;
		
		loop441:  while (true) {
			constant_expression_g();
			if (matchError) {break loop441;}
			case_expression_AST = (AST)currentAST.root;
		break;} // loop441
		if (matchError) {
	}
	returnAST = case_expression_AST;
}

	public final void single_statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST single_statement_AST = null;
		
		loop442:  while (true) {
			int LA1_357 = LA(1);
			int LA2_357 = LA(2);
			
			boolean synPredMatched1019 = false;
			if (((_tokenSet_0.member(LA1_357)) && (LA2_357==COLON))) {
				int _m1019 = mark();
				guessing++;
				guess1019:  while (true) {
					{
					literal_ident_g();
					if (matchError) {break guess1019;}
					match(COLON);
					if (matchError) {break guess1019;}
					}
				synPredMatched1019 = true;
				break;} // guess1019
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1019);
				guessing--;
			}
			if ( synPredMatched1019 ) {
				compound_labeled_statement_g();
				if (matchError) {break loop442;}
				single_statement_AST = (AST)currentAST.root;
			}
			else if ((_tokenSet_159.member(LA1_357)) && (_tokenSet_1.member(LA2_357))) {
				statement_g();
				if (matchError) {break loop442;}
				single_statement_AST = (AST)currentAST.root;
			}
			else {
				matchError=true;if (matchError) {break loop442;}
			}
			
		break;} // loop442
		if (matchError) {
	}
	returnAST = single_statement_AST;
}

	protected final void default_label_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST default_label_AST = null;
		
		loop443:  while (true) {
			AST tmp1754_AST = null;
			match(LITERAL_default);
			if (matchError) {break loop443;}
			default_label_AST = (AST)currentAST.root;
		break;} // loop443
		if (matchError) {
	}
	returnAST = default_label_AST;
}

	protected final void condition_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST condition_AST = null;
		
		loop444:  while (true) {
			{
			int LA1_358 = LA(1);
			int LA2_358 = LA(2);
			
			boolean synPredMatched1077 = false;
			if (((_tokenSet_22.member(LA1_358)) && (_tokenSet_172.member(LA2_358)))) {
				int _m1077 = mark();
				guessing++;
				guess1077:  while (true) {
					{
					condition_declaration_g();
					if (matchError) {break guess1077;}
					}
				synPredMatched1077 = true;
				break;} // guess1077
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1077);
				guessing--;
			}
			if ( synPredMatched1077 ) {
				condition_declaration_g();
				if (matchError) {break loop444;}
			}
			else if ((_tokenSet_189.member(LA1_358)) && (_tokenSet_1.member(LA2_358))) {
				condition_expression_g();
				if (matchError) {break loop444;}
			}
			else {
				matchError=true;if (matchError) {break loop444;}
			}
			
			}
			condition_AST = (AST)currentAST.root;
		break;} // loop444
		if (matchError) {
	}
	returnAST = condition_AST;
}

	protected final void while_statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST while_statement_AST = null;
		
		loop445:  while (true) {
			AST tmp1755_AST = null;
			match(LITERAL_while);
			if (matchError) {break loop445;}
			match(LPAREN);
			if (matchError) {break loop445;}
			condition_g();
			if (matchError) {break loop445;}
			match(RPAREN);
			if (matchError) {break loop445;}
			single_statement_g();
			if (matchError) {break loop445;}
			while_statement_AST = (AST)currentAST.root;
		break;} // loop445
		if (matchError) {
	}
	returnAST = while_statement_AST;
}

	protected final void do_while_statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST do_while_statement_AST = null;
		
		loop446:  while (true) {
			AST tmp1758_AST = null;
			match(LITERAL_do);
			if (matchError) {break loop446;}
			single_statement_g();
			if (matchError) {break loop446;}
			AST tmp1759_AST = null;
			match(LITERAL_while);
			if (matchError) {break loop446;}
			match(LPAREN);
			if (matchError) {break loop446;}
			expression_g();
			if (matchError) {break loop446;}
			match(RPAREN);
			if (matchError) {break loop446;}
			{
			switch ( LA(1)) {
			case EOF:
			{
				consume();
				break;
			}
			case SEMICOLON:
			{
				AST tmp1763_AST = null;
				consume();
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop446;}
			}
			}
			}
			do_while_statement_AST = (AST)currentAST.root;
		break;} // loop446
		if (matchError) {
	}
	returnAST = do_while_statement_AST;
}

	protected final void for_statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST for_statement_AST = null;
		
		loop447:  while (true) {
			AST tmp1764_AST = null;
			match(LITERAL_for);
			if (matchError) {break loop447;}
			match(LPAREN);
			if (matchError) {break loop447;}
			{
			int LA1_359 = LA(1);
			int LA2_359 = LA(2);
			
			boolean synPredMatched1090 = false;
			if (((_tokenSet_22.member(LA1_359)) && (_tokenSet_172.member(LA2_359)))) {
				int _m1090 = mark();
				guessing++;
				guess1090:  while (true) {
					{
					for_range_init_statement_g();
					if (matchError) {break guess1090;}
					match(COLON);
					if (matchError) {break guess1090;}
					}
				synPredMatched1090 = true;
				break;} // guess1090
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1090);
				guessing--;
			}
			if ( synPredMatched1090 ) {
				for_range_init_statement_g();
				if (matchError) {break loop447;}
				AST tmp1766_AST = null;
				match(COLON);
				if (matchError) {break loop447;}
				{
				if ((_tokenSet_189.member(LA(1)))) {
					expression_g();
					if (matchError) {break loop447;}
				}
				else if ((LA(1)==LCURLY)) {
					array_initializer_g();
					if (matchError) {break loop447;}
				}
				else {
					matchError=true;if (matchError) {break loop447;}
				}
				
				}
			}
			else if ((_tokenSet_375.member(LA1_359)) && (_tokenSet_1.member(LA2_359))) {
				for_init_statement_g();
				if (matchError) {break loop447;}
				{
				if ((_tokenSet_376.member(LA(1)))) {
					{
					if ((_tokenSet_191.member(LA(1)))) {
						condition_g();
						if (matchError) {break loop447;}
					}
					else if ((LA(1)==EOF||LA(1)==SEMICOLON)) {
					}
					else {
						matchError=true;if (matchError) {break loop447;}
					}
					
					}
					{
					switch ( LA(1)) {
					case EOF:
					{
						consume();
						break;
					}
					case SEMICOLON:
					{
						AST tmp1768_AST = null;
						consume();
						break;
					}
					default:
					{
						matchError=true;if (matchError) {break loop447;}
					}
					}
					}
					{
					if ((_tokenSet_189.member(LA(1)))) {
						expression_g();
						if (matchError) {break loop447;}
					}
					else if ((LA(1)==RPAREN)) {
					}
					else {
						matchError=true;if (matchError) {break loop447;}
					}
					
					}
				}
				else if ((LA(1)==RPAREN)) {
				}
				else {
					matchError=true;if (matchError) {break loop447;}
				}
				
				}
			}
			else {
				matchError=true;if (matchError) {break loop447;}
			}
			
			}
			match(RPAREN);
			if (matchError) {break loop447;}
			single_statement_g();
			if (matchError) {break loop447;}
			for_statement_AST = (AST)currentAST.root;
		break;} // loop447
		if (matchError) {
	}
	returnAST = for_statement_AST;
}

	public final void handler_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST handler_AST = null;
		
		loop448:  while (true) {
			{
			switch ( LA(1)) {
			case LITERAL_catch:
			{
				AST tmp1770_AST = null;
				consume();
				AST tmp1771_AST = null;
				match(LPAREN);
				if (matchError) {break loop448;}
				exception_declaration_g();
				if (matchError) {break loop448;}
				AST tmp1772_AST = null;
				match(RPAREN);
				if (matchError) {break loop448;}
				break;
			}
			case LITERAL___finally:
			{
				literal_finally_g();
				if (matchError) {break loop448;}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop448;}
			}
			}
			}
			compound_statement_g();
			if (matchError) {break loop448;}
			handler_AST = (AST)currentAST.root;
		break;} // loop448
		if (matchError) {
	}
	returnAST = handler_AST;
}

	protected final void label_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST label_AST = null;
		String s;
		
		loop449:  while (true) {
			s=literal_ident_g();
			if (matchError) {break loop449;}
			label_AST = (AST)currentAST.root;
		break;} // loop449
		if (matchError) {
	}
	returnAST = label_AST;
}

	public final void dtor_definition_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST dtor_definition_AST = null;
		
		loop450:  while (true) {
			dtor_head_g(true);
			if (matchError) {break loop450;}
			dtor_body_g();
			if (matchError) {break loop450;}
			dtor_definition_AST = (AST)currentAST.root;
		break;} // loop450
		if (matchError) {
	}
	returnAST = dtor_definition_AST;
}

	public final void exception_declaration_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST exception_declaration_AST = null;
		
		loop451:  while (true) {
			parameter_declaration_list_g(false);
			if (matchError) {break loop451;}
			exception_declaration_AST = (AST)currentAST.root;
		break;} // loop451
		if (matchError) {
	}
	returnAST = exception_declaration_AST;
}

	protected final void literal_finally_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST literal_finally_AST = null;
		
		loop452:  while (true) {
			AST tmp1773_AST = null;
			match(LITERAL___finally);
			if (matchError) {break loop452;}
			literal_finally_AST = (AST)currentAST.root;
		break;} // loop452
		if (matchError) {
	}
	returnAST = literal_finally_AST;
}

	public final void superclass_init_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST superclass_init_AST = null;
		String q;
		
		loop453:  while (true) {
			q=qualified_id_g();
			if (matchError) {break loop453;}
			{
			switch ( LA(1)) {
			case LPAREN:
			{
				AST tmp1774_AST = null;
				consume();
				{
				if ((_tokenSet_284.member(LA(1)))) {
					cpp11_expression_list_g();
					if (matchError) {break loop453;}
				}
				else if ((LA(1)==RPAREN)) {
				}
				else {
					matchError=true;if (matchError) {break loop453;}
				}
				
				}
				AST tmp1775_AST = null;
				match(RPAREN);
				if (matchError) {break loop453;}
				break;
			}
			case LCURLY:
			{
				array_initializer_g();
				if (matchError) {break loop453;}
				break;
			}
			default:
			{
				matchError=true;if (matchError) {break loop453;}
			}
			}
			}
			superclass_init_AST = (AST)currentAST.root;
		break;} // loop453
		if (matchError) {
	}
	returnAST = superclass_init_AST;
}

	public final void compound_labeled_statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST compound_labeled_statement_AST = null;
		
		loop454:  while (true) {
			labeled_statement_g();
			if (matchError) {break loop454;}
			compound_labeled_statement_AST = (AST)currentAST.root;
		break;} // loop454
		if (matchError) {
	}
	returnAST = compound_labeled_statement_AST;
}

	protected final void condition_expression_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST condition_expression_AST = null;
		
		loop455:  while (true) {
			expression_g();
			if (matchError) {break loop455;}
			condition_expression_AST = (AST)currentAST.root;
		break;} // loop455
		if (matchError) {
	}
	returnAST = condition_expression_AST;
}

	protected final void for_init_statement_g() {
		
		returnAST = null;
		ASTPair currentAST = new ASTPair();
		AST for_init_statement_AST = null;
		
		loop456:  while (true) {
			{
			int LA1_360 = LA(1);
			int LA2_360 = LA(2);
			
			boolean synPredMatched1099 = false;
			if (((_tokenSet_26.member(LA1_360)) && (_tokenSet_27.member(LA2_360)))) {
				int _m1099 = mark();
				guessing++;
				guess1099:  while (true) {
					{
					declaration_g(declStatement);
					if (matchError) {break guess1099;}
					}
				synPredMatched1099 = true;
				break;} // guess1099
				if (matchError) {
				   resetMatchError();
				}
				rewind(_m1099);
				guessing--;
			}
			if ( synPredMatched1099 ) {
				declaration_g(declStatement);
				if (matchError) {break loop456;}
			}
			else if ((_tokenSet_189.member(LA1_360)) && (_tokenSet_1.member(LA2_360))) {
				expression_g();
				if (matchError) {break loop456;}
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					break;
				}
				case SEMICOLON:
				{
					AST tmp1777_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop456;}
				}
				}
				}
			}
			else if ((LA1_360==EOF||LA1_360==SEMICOLON)) {
				{
				switch ( LA(1)) {
				case EOF:
				{
					consume();
					break;
				}
				case SEMICOLON:
				{
					AST tmp1779_AST = null;
					consume();
					break;
				}
				default:
				{
					matchError=true;if (matchError) {break loop456;}
				}
				}
				}
			}
			else {
				matchError=true;if (matchError) {break loop456;}
			}
			
			}
			for_init_statement_AST = (AST)currentAST.root;
		break;} // loop456
		if (matchError) {
	}
	returnAST = for_init_statement_AST;
}


public static final String[] _tokenNames = {
	"<0>",
	"EOF",
	"<2>",
	"NULL_TREE_LOOKAHEAD",
	"ELLIPSIS",
	"DOT",
	"ASSIGNEQUAL",
	"COLON",
	"COMMA",
	"QUESTIONMARK",
	"SEMICOLON",
	"POINTERTO",
	"LPAREN",
	"RPAREN",
	"LSQUARE",
	"RSQUARE",
	"LCURLY",
	"RCURLY",
	"EQUAL",
	"NOTEQUAL",
	"LESSTHANOREQUALTO",
	"LESSTHAN",
	"GREATERTHANOREQUALTO",
	"GREATERTHAN",
	"DIVIDE",
	"DIVIDEEQUAL",
	"PLUS",
	"PLUSEQUAL",
	"PLUSPLUS",
	"MINUS",
	"MINUSEQUAL",
	"MINUSMINUS",
	"STAR",
	"TIMESEQUAL",
	"MOD",
	"MODEQUAL",
	"SHIFTRIGHT",
	"SHIFTRIGHTEQUAL",
	"SHIFTLEFT",
	"SHIFTLEFTEQUAL",
	"AND",
	"NOT",
	"OR",
	"AMPERSAND",
	"BITWISEANDEQUAL",
	"TILDE",
	"BITWISEOR",
	"BITWISEOREQUAL",
	"BITWISEXOR",
	"BITWISEXOREQUAL",
	"POINTERTOMBR",
	"DOTMBR",
	"SCOPE",
	"AT",
	"DOLLAR",
	"BACK_SLASH",
	"DEFINED",
	"DBL_SHARP",
	"SHARP",
	"FUN_LIKE_MACRO_LPAREN",
	"GRAVE_ACCENT",
	"END_PREPROC_DIRECTIVE",
	"LAST_CONST_TEXT_TOKEN",
	"FLOATONE",
	"FLOATTWO",
	"HEXADECIMALINT",
	"OCTALINT",
	"DECIMALINT",
	"Whitespace",
	"EndOfLine",
	"Skip",
	"PreProcComment",
	"PPLiterals",
	"Space",
	"PreProcBlockComment",
	"PreProcLineComment",
	"Comment",
	"CPPComment",
	"CHAR_LITERAL",
	"STRING_LITERAL",
	"InterStringWhitespace",
	"StringPart",
	"Escape",
	"Digit",
	"Decimal",
	"LongSuffix",
	"UnsignedSuffix",
	"FloatSuffix",
	"Exponent",
	"Vocabulary",
	"NUMBER",
	"IDENT",
	"BINARYINT",
	"INCLUDE_STRING",
	"SYS_INCLUDE_STRING",
	"INCLUDE",
	"INCLUDE_NEXT",
	"DEFINE",
	"UNDEF",
	"IFDEF",
	"IFNDEF",
	"IF",
	"ELIF",
	"ELSE",
	"ENDIF",
	"PRAGMA",
	"LINE",
	"ERROR",
	"PREPROC_DIRECTIVE",
	"FIRST_LITERAL_TOKEN",
	"\"operator\"",
	"\"alignof\"",
	"\"__alignof__\"",
	"\"typeof\"",
	"\"__typeof__\"",
	"\"__typeof\"",
	"\"template\"",
	"\"typedef\"",
	"\"enum\"",
	"\"namespace\"",
	"\"extern\"",
	"\"inline\"",
	"\"_inline\"",
	"\"__inline__\"",
	"\"__inline\"",
	"\"virtual\"",
	"\"explicit\"",
	"\"friend\"",
	"\"_stdcall\"",
	"\"__stdcall\"",
	"\"typename\"",
	"\"auto\"",
	"\"register\"",
	"\"static\"",
	"\"mutable\"",
	"\"const\"",
	"\"__const__\"",
	"\"__const\"",
	"\"const_cast\"",
	"\"volatile\"",
	"\"__volatile__\"",
	"\"__volatile\"",
	"\"char\"",
	"\"wchar_t\"",
	"\"bool\"",
	"\"short\"",
	"\"int\"",
	"\"long\"",
	"\"signed\"",
	"\"__signed__\"",
	"\"__signed\"",
	"\"unsigned\"",
	"\"__unsigned__\"",
	"\"float\"",
	"\"double\"",
	"\"void\"",
	"\"_declspec\"",
	"\"__declspec\"",
	"\"class\"",
	"\"struct\"",
	"\"union\"",
	"\"this\"",
	"\"true\"",
	"\"false\"",
	"\"public\"",
	"\"protected\"",
	"\"private\"",
	"\"throw\"",
	"\"case\"",
	"\"default\"",
	"\"if\"",
	"\"else\"",
	"\"switch\"",
	"\"while\"",
	"\"do\"",
	"\"for\"",
	"\"goto\"",
	"\"continue\"",
	"\"break\"",
	"\"return\"",
	"\"try\"",
	"\"catch\"",
	"\"using\"",
	"\"export\"",
	"\"asm\"",
	"\"_asm\"",
	"\"__asm__\"",
	"\"__asm\"",
	"\"_endasm\"",
	"\"sizeof\"",
	"\"dynamic_cast\"",
	"\"static_cast\"",
	"\"reinterpret_cast\"",
	"\"new\"",
	"\"_cdecl\"",
	"\"__cdecl\"",
	"\"_near\"",
	"\"__near\"",
	"\"_far\"",
	"\"__far\"",
	"\"__interrupt\"",
	"\"pascal\"",
	"\"_pascal\"",
	"\"__pascal\"",
	"\"delete\"",
	"\"_int64\"",
	"\"__int64\"",
	"\"__w64\"",
	"\"__extension__\"",
	"\"__attribute__\"",
	"\"restrict\"",
	"\"__restrict\"",
	"\"__complex__\"",
	"\"__imag__\"",
	"\"__real__\"",
	"\"__global\"",
	"\"_Bool\"",
	"\"_Complex\"",
	"\"__thread\"",
	"\"__attribute\"",
	"\"_Imaginary\"",
	"\"bit\"",
	"\"__symbolic\"",
	"\"__hidden\"",
	"\"final\"",
	"\"override\"",
	"\"constexpr\"",
	"\"decltype\"",
	"\"nullptr\"",
	"\"thread_local\"",
	"\"static_assert\"",
	"\"alignas\"",
	"\"char16_t\"",
	"\"char32_t\"",
	"\"noexcept\"",
	"\"__decltype\"",
	"\"__complex\"",
	"\"__forceinline\"",
	"\"__clrcall\"",
	"\"__try\"",
	"\"__finally\"",
	"\"__null\"",
	"\"__alignof\"",
	"\"__is_class\"",
	"\"__is_enum\"",
	"\"__is_pod\"",
	"\"__is_base_of\"",
	"\"__has_trivial_constructor\"",
	"\"__restrict__\"",
	"\"_Noreturn\"",
	"\"__has_nothrow_assign\"",
	"\"__has_nothrow_copy\"",
	"\"__has_nothrow_constructor\"",
	"\"__has_trivial_assign\"",
	"\"__has_trivial_copy\"",
	"\"__has_trivial_destructor\"",
	"\"__has_virtual_destructor\"",
	"\"__is_abstract\"",
	"\"__is_empty\"",
	"\"__is_literal_type\"",
	"\"__is_polymorphic\"",
	"\"__is_standard_layout\"",
	"\"__is_trivial\"",
	"\"__is_union\"",
	"\"__underlying_type\"",
	"\"__builtin_va_list\"",
	"LAST_LITERAL_TOKEN",
	"LITERAL__BUILT_IN_TYPE__",
	"LITERAL__TYPE_QUALIFIER__",
	"LITERAL__STORAGE_CLASS_SPECIFIER__",
	"T_CLOSE",
	"T_BLOCK",
	"T_GE",
	"T_CONTAINS",
	"T_ABSTRACT",
	"T_CLASS",
	"T_NOPASS",
	"T_UNFORMATTED",
	"T_LESSTHAN",
	"T_ENDSUBROUTINE",
	"T_GT",
	"T_IDENT",
	"T_INTERFACE",
	"T_RETURN",
	"T_XYZ",
	"T_EOF",
	"T_CALL",
	"T_EOS",
	"T_GO",
	"T_AND",
	"T_PERCENT",
	"T_PRINT",
	"T_ALLOCATE_STMT_1",
	"T_SUBROUTINE",
	"T_CONTROL_EDIT_DESC",
	"T_ENUMERATOR",
	"Alphanumeric_Character",
	"T_DEFINED_OP",
	"T_KIND",
	"T_STOP",
	"T_GREATERTHAN_EQ",
	"T_CHAR_STRING_EDIT_DESC",
	"T_ALLOCATABLE",
	"T_ENDINTERFACE",
	"T_END",
	"T_ASTERISK",
	"T_PRIVATE",
	"T_DOUBLEPRECISION",
	"T_CASE",
	"T_IMPLICIT",
	"T_IF",
	"T_THEN",
	"T_DIMENSION",
	"T_GOTO",
	"T_ENDMODULE",
	"T_IN",
	"T_WRITE",
	"T_FORMATTED",
	"WS",
	"T_DATA",
	"T_FALSE",
	"T_WHERE",
	"T_ENDIF",
	"T_SLASH",
	"SQ_Rep_Char",
	"T_GENERIC",
	"T_RECURSIVE",
	"DQ_Rep_Char",
	"T_ELSEIF",
	"T_BLOCKDATA",
	"OCTAL_CONSTANT",
	"T_SELECTTYPE",
	"T_MINUS",
	"T_SELECT",
	"T_FINAL",
	"T_UNDERSCORE",
	"T_IMPORT",
	"T_USE",
	"T_FILE",
	"T_RPAREN",
	"T_INTENT",
	"T_ENDBLOCK",
	"T_ASSIGNMENT_STMT",
	"T_PAUSE",
	"T_BACKSPACE",
	"T_ENDFILE",
	"T_EQUALS",
	"T_NON_INTRINSIC",
	"T_SELECTCASE",
	"T_DIGIT_STRING",
	"T_COLON_COLON",
	"T_NON_OVERRIDABLE",
	"Special_Character",
	"T_INCLUDE",
	"T_OPEN",
	"T_POWER",
	"T_ASSOCIATE",
	"T_CHAR_CONSTANT",
	"T_OPERATOR",
	"T_TO",
	"T_ENDASSOCIATE",
	"T_EQ",
	"T_GREATERTHAN",
	"T_DATA_EDIT_DESC",
	"T_INQUIRE_STMT_2",
	"T_EQV",
	"HEX_CONSTANT",
	"Digit_String",
	"T_ELEMENTAL",
	"T_CHARACTER",
	"PREPROCESS_LINE",
	"T_NULLIFY",
	"T_REWIND",
	"T_ARITHMETIC_IF_STMT",
	"T_FORALL_CONSTRUCT_STMT",
	"T_BIND",
	"T_ENDFORALL",
	"T_DO",
	"T_WHERE_STMT",
	"T_POINTER",
	"T_PROGRAM",
	"T_ENDTYPE",
	"T_WAIT",
	"T_ELSE",
	"T_IF_STMT",
	"T_RBRACKET",
	"T_LPAREN",
	"T_EXTENDS",
	"T_OPTIONAL",
	"T_DOUBLE",
	"T_MODULE",
	"T_READ",
	"T_ALLOCATE",
	"T_INTEGER",
	"T_OR",
	"T_EQUIVALENCE",
	"T_PERIOD",
	"T_ENTRY",
	"T_LABEL_DO_TERMINAL",
	"T_REAL",
	"T_CYCLE",
	"T_PROCEDURE",
	"T_EQ_EQ",
	"T_SLASH_EQ",
	"T_ENDSELECT",
	"T_PURE",
	"T_TRUE",
	"T_NE",
	"T_INTRINSIC",
	"T_PASS",
	"T_REAL_CONSTANT",
	"LINE_COMMENT",
	"T_PERIOD_EXPONENT",
	"T_ENDWHERE",
	"MISC_CHAR",
	"T_FORMAT",
	"T_DEFAULT",
	"T_SLASH_SLASH",
	"T_NONE",
	"T_NAMELIST",
	"T_SEQUENCE",
	"T_PRECISION",
	"T_ASYNCHRONOUS",
	"T_COMMA",
	"T_RESULT",
	"T_ENDBLOCKDATA",
	"T_LOGICAL",
	"T_VALUE",
	"Letter",
	"T_FORALL",
	"T_SAVE",
	"T_HOLLERITH",
	"T_FLUSH",
	"T_WHILE",
	"T_INQUIRE",
	"T_DEFERRED",
	"T_FORALL_STMT",
	"T_ASSIGN",
	"T_LBRACKET",
	"T_EXTERNAL",
	"T_VOLATILE",
	"T_OUT",
	"CONTINUE_CHAR",
	"T_COLON",
	"T_COMPLEX",
	"T_PLUS",
	"T_STMT_FUNCTION",
	"T_ONLY",
	"T_PROTECTED",
	"T_COMMON",
	"T_INOUT",
	"T_NEQV",
	"T_PUBLIC",
	"T_ENDDO",
	"T_ENDPROGRAM",
	"T_ENDFUNCTION",
	"T_WHERE_CONSTRUCT_STMT",
	"T_ELSEWHERE",
	"T_ENUM",
	"T_PARAMETER",
	"T_TARGET",
	"T_DOUBLECOMPLEX",
	"T_PTR_ASSIGNMENT_STMT",
	"T_TYPE",
	"T_LESSTHAN_EQ",
	"T_DEALLOCATE",
	"T_LT",
	"T_FUNCTION",
	"T_EQ_GT",
	"T_ENDENUM",
	"BINARY_CONSTANT",
	"T_LE",
	"T_LEN",
	"T_CONTINUE",
	"T_NOT",
	"Rep_Char",
	"T_ASSIGNMENT",
	"T_EXIT",
	"FORTRAN_COMMENT",
	"FIRST_ASSIGN",
	"FIRST_DIVIDE",
	"FIRST_STAR",
	"FIRST_MOD",
	"FIRST_NOT",
	"FIRST_AMPERSAND",
	"COMMENT",
	"CPP_COMMENT",
	"FIRST_OR",
	"FIRST_BITWISEXOR",
	"FIRST_COLON",
	"FIRST_LESS",
	"FIRST_GREATER",
	"FIRST_MINUS",
	"FIRST_PLUS",
	"FIRST_QUOTATION",
	"H_char_sequence",
	"Q_char_sequence",
	"DirectiveBody",
	"CHAR_LITERAL_BODY",
	"STRING_LITERAL_BODY",
	"RAW_STRING_LITERAL",
	"RAW_STRING_LITERAL_BODY",
	"Suffix",
	"ID_LIKE",
	"ID_DEFINED",
	"Identifier",
	"PostPPKwdChar",
	"PostInclChar",
	"PostIfChar",
	"LAST_LEXER_FAKE_RULE",
	"CSM_START",
	"CSM_TRANSLATION_UNIT",
	"CSM_CLASS_DECLARATION",
	"CSM_ENUM_DECLARATION",
	"CSM_ENUM_FWD_DECLARATION",
	"CSM_NAMESPACE_DECLARATION",
	"CSM_CTOR_DECLARATION",
	"CSM_CTOR_TEMPLATE_DECLARATION",
	"CSM_FUNCTION_DECLARATION",
	"CSM_FUNCTION_LIKE_VARIABLE_DECLARATION",
	"CSM_FUNCTION_DEFINITION",
	"CSM_FUNCTION_RET_FUN_DECLARATION",
	"CSM_FUNCTION_RET_FUN_DEFINITION",
	"CSM_FUNCTION_TEMPLATE_DECLARATION",
	"CSM_FUNCTION_TEMPLATE_DEFINITION",
	"CSM_PARAMETER_DECLARATION",
	"CSM_TYPE_BUILTIN",
	"CSM_TYPE_DECLTYPE",
	"CSM_TYPE_COMPOUND",
	"CSM_TEMPLATE_EXPLICIT_SPECIALIZATION",
	"CSM_FWD_TEMPLATE_EXPLICIT_SPECIALIZATION",
	"CSM_TEMPLATE_EXPLICIT_INSTANTIATION",
	"CSM_TEMPLATE_CTOR_DEFINITION_EXPLICIT_SPECIALIZATION",
	"CSM_TEMPLATE_DTOR_DEFINITION_EXPLICIT_SPECIALIZATION",
	"CSM_TEMPLATE_FUNCTION_DEFINITION_EXPLICIT_SPECIALIZATION",
	"CSM_USER_TYPE_CAST_DEFINITION_EXPLICIT_SPECIALIZATION",
	"CSM_TEMPLATE_CLASS_DECLARATION",
	"CSM_EXTERN_TEMPLATE",
	"CSM_TEMPLATE_TEMPLATE_PARAMETER",
	"CSM_DTOR_DEFINITION",
	"CSM_DTOR_TEMPLATE_DEFINITION",
	"CSM_DTOR_DECLARATION",
	"CSM_CTOR_DEFINITION",
	"CSM_CTOR_TEMPLATE_DEFINITION",
	"CSM_USER_TYPE_CAST_DECLARATION",
	"CSM_USER_TYPE_CAST_TEMPLATE_DECLARATION",
	"CSM_USER_TYPE_CAST_DEFINITION",
	"CSM_USER_TYPE_CAST_TEMPLATE_DEFINITION",
	"CSM_GENERIC_DECLARATION",
	"CSM_TEMPL_FWD_CL_OR_STAT_MEM",
	"CSM_STRANGE_2",
	"CSM_FIELD",
	"CSM_VISIBILITY_REDEF",
	"CSM_TEMPLATE_PARMLIST",
	"CSM_PARMLIST",
	"CSM_KR_PARMLIST",
	"CSM_ENUMERATOR_LIST",
	"CSM_NAMESPACE_ALIAS",
	"CSM_USING_DIRECTIVE",
	"CSM_USING_DECLARATION",
	"CSM_TYPE_ALIAS",
	"CSM_CTOR_INITIALIZER",
	"CSM_CTOR_INITIALIZER_LIST",
	"CSM_QUALIFIED_ID",
	"CSM_STATEMENTS_START",
	"CSM_LABELED_STATEMENT",
	"CSM_CASE_STATEMENT",
	"CSM_DEFAULT_STATEMENT",
	"CSM_EXPRESSION_STATEMENT",
	"CSM_DECLARATION_STATEMENT",
	"CSM_COMPOUND_STATEMENT",
	"CSM_COMPOUND_STATEMENT_LAZY",
	"CSM_TRY_CATCH_STATEMENT_LAZY",
	"CSM_IF_STATEMENT",
	"CSM_SWITCH_STATEMENT",
	"CSM_WHILE_STATEMENT",
	"CSM_DO_WHILE_STATEMENT",
	"CSM_FOR_STATEMENT",
	"CSM_GOTO_STATEMENT",
	"CSM_CONTINUE_STATEMENT",
	"CSM_BREAK_STATEMENT",
	"CSM_RETURN_STATEMENT",
	"CSM_TRY_STATEMENT",
	"CSM_CATCH_CLAUSE",
	"CSM_THROW_STATEMENT",
	"CSM_ASM_BLOCK",
	"CSM_STATEMENTS_END",
	"CSM_EXPRESSIONS_START",
	"CSM_EXPRESSION",
	"CSM_CAST_EXPRESSION",
	"CSM_FUN_TYPE_CAST_EXPRESSION",
	"CSM_FUNCALL_EXPRESSION",
	"CSM_EXPRESSIONS_END",
	"CSM_FOR_INIT_STATEMENT",
	"CSM_LINKAGE_SPECIFICATION",
	"CSM_PTR_OPERATOR",
	"CSM_ARRAY_DECLARATION",
	"CSM_VARIABLE_DECLARATION",
	"CSM_VARIABLE_LIKE_FUNCTION_DECLARATION",
	"CSM_CONDITION",
	"CSM_BASE_SPECIFIER",
	"CSM_TEST",
	"CSM_END"
};

protected static AST createTokenASTByType(int type) {
	switch(type) {
		case 510 : 
		case 511 : 
		case 512 : 
		case 513 : 
		case 514 : 
			return new org.netbeans.modules.cnd.modelimpl.parser.FakeAST();
		case 515 : 
			return new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST();
		case 516 : 
		case 517 : 
		case 518 : 
		case 519 : 
		case 520 : 
		case 521 : 
		case 522 : 
		case 523 : 
		case 524 : 
		case 525 : 
		case 526 : 
		case 527 : 
		case 528 : 
		case 529 : 
		case 530 : 
		case 531 : 
		case 532 : 
		case 533 : 
		case 534 : 
		case 535 : 
		case 536 : 
		case 537 : 
		case 538 : 
		case 539 : 
		case 540 : 
		case 541 : 
		case 542 : 
		case 543 : 
		case 544 : 
		case 545 : 
		case 546 : 
		case 547 : 
		case 548 : 
		case 549 : 
		case 550 : 
		case 551 : 
			return new org.netbeans.modules.cnd.modelimpl.parser.FakeAST();
		case 552 : 
			return new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST();
		case 553 : 
		case 554 : 
		case 555 : 
		case 556 : 
			return new org.netbeans.modules.cnd.modelimpl.parser.FakeAST();
		case 557 : 
		case 558 : 
		case 559 : 
		case 560 : 
			return new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST();
		case 561 : 
		case 562 : 
			return new org.netbeans.modules.cnd.modelimpl.parser.FakeAST();
		case 563 : 
			return new org.netbeans.modules.cnd.modelimpl.parser.NamedFakeAST();
		case 564 : 
		case 565 : 
		case 566 : 
		case 567 : 
		case 568 : 
		case 569 : 
		case 570 : 
		case 571 : 
		case 572 : 
		case 573 : 
		case 574 : 
		case 575 : 
		case 576 : 
		case 577 : 
		case 578 : 
		case 579 : 
		case 580 : 
		case 581 : 
		case 582 : 
		case 583 : 
		case 584 : 
		case 585 : 
		case 586 : 
		case 587 : 
		case 588 : 
		case 589 : 
		case 590 : 
		case 591 : 
		case 592 : 
		case 593 : 
		case 594 : 
		case 595 : 
		case 596 : 
		case 597 : 
		case 598 : 
		case 599 : 
		case 600 : 
		case 601 : 
		case 602 : 
			return new org.netbeans.modules.cnd.modelimpl.parser.FakeAST();
	}
	return null;
};

private static final long[] mk_tokenSet_0() {
	long[] data = new long[10];
	data[1]=134217728L;
	data[3]=12884901888L;
	return data;
}
public static final BitSet _tokenSet_0 = new BitSet(mk_tokenSet_0());
private static final long[] mk_tokenSet_1() {
	long[] data = new long[20];
	data[0]=-14L;
	for (int i = 1; i<=8; i++) { data[i]=-1L; }
	data[9]=134217727L;
	return data;
}
public static final BitSet _tokenSet_1 = new BitSet(mk_tokenSet_1());
private static final long[] mk_tokenSet_2() {
	long[] data = new long[10];
	data[0]=4548683899098128L;
	data[1]=-492581075025920L;
	data[2]=1134907174816841727L;
	data[3]=144251458791141372L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_2 = new BitSet(mk_tokenSet_2());
private static final long[] mk_tokenSet_3() {
	long[] data = new long[10];
	data[0]=2L;
	return data;
}
public static final BitSet _tokenSet_3 = new BitSet(mk_tokenSet_3());
private static final long[] mk_tokenSet_4() {
	long[] data = new long[10];
	data[0]=139264L;
	return data;
}
public static final BitSet _tokenSet_4 = new BitSet(mk_tokenSet_4());
private static final long[] mk_tokenSet_5() {
	long[] data = new long[20];
	data[0]=-226320L;
	for (int i = 1; i<=8; i++) { data[i]=-1L; }
	data[9]=134217727L;
	return data;
}
public static final BitSet _tokenSet_5 = new BitSet(mk_tokenSet_5());
private static final long[] mk_tokenSet_6() {
	long[] data = new long[10];
	data[0]=1026L;
	return data;
}
public static final BitSet _tokenSet_6 = new BitSet(mk_tokenSet_6());
private static final long[] mk_tokenSet_7() {
	long[] data = new long[10];
	data[1]=72057594037927936L;
	data[3]=65536L;
	return data;
}
public static final BitSet _tokenSet_7 = new BitSet(mk_tokenSet_7());
private static final long[] mk_tokenSet_8() {
	long[] data = new long[10];
	data[1]=4503599627370496L;
	data[2]=36028797018963968L;
	data[3]=65536L;
	return data;
}
public static final BitSet _tokenSet_8 = new BitSet(mk_tokenSet_8());
private static final long[] mk_tokenSet_9() {
	long[] data = new long[10];
	data[0]=4548683901194256L;
	data[1]=-492581075025920L;
	data[2]=54043264247922687L;
	data[3]=144251458791075836L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_9 = new BitSet(mk_tokenSet_9());
private static final long[] mk_tokenSet_10() {
	long[] data = new long[10];
	data[0]=4548683899097104L;
	data[1]=-4996180702396416L;
	data[2]=18014467228958719L;
	data[3]=144251458791141372L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_10 = new BitSet(mk_tokenSet_10());
private static final long[] mk_tokenSet_11() {
	long[] data = new long[10];
	data[0]=6755399440883154L;
	data[1]=-492581074993152L;
	data[2]=1098878377797877759L;
	data[3]=216309052829794302L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_11 = new BitSet(mk_tokenSet_11());
private static final long[] mk_tokenSet_12() {
	long[] data = new long[10];
	data[0]=4538783999479808L;
	data[1]=-4751297606741655552L;
	data[2]=36028797018963968L;
	data[3]=44027844100096L;
	return data;
}
public static final BitSet _tokenSet_12 = new BitSet(mk_tokenSet_12());
private static final long[] mk_tokenSet_13() {
	long[] data = new long[10];
	data[0]=4538784001576960L;
	data[1]=-4751297606741655552L;
	data[3]=44027844100096L;
	return data;
}
public static final BitSet _tokenSet_13 = new BitSet(mk_tokenSet_13());
private static final long[] mk_tokenSet_14() {
	long[] data = new long[10];
	data[2]=2199023255552L;
	data[3]=4096L;
	return data;
}
public static final BitSet _tokenSet_14 = new BitSet(mk_tokenSet_14());
private static final long[] mk_tokenSet_15() {
	long[] data = new long[10];
	data[0]=65600L;
	return data;
}
public static final BitSet _tokenSet_15 = new BitSet(mk_tokenSet_15());
private static final long[] mk_tokenSet_16() {
	long[] data = new long[10];
	data[0]=4503599627390976L;
	data[1]=-2449958197155332096L;
	data[3]=44045023969280L;
	return data;
}
public static final BitSet _tokenSet_16 = new BitSet(mk_tokenSet_16());
private static final long[] mk_tokenSet_17() {
	long[] data = new long[10];
	data[0]=4503599629488128L;
	data[1]=-2445454597527961600L;
	data[3]=44045023969280L;
	return data;
}
public static final BitSet _tokenSet_17 = new BitSet(mk_tokenSet_17());
private static final long[] mk_tokenSet_18() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=2166301789643603968L;
	data[2]=36028797018963968L;
	data[3]=44044889620480L;
	return data;
}
public static final BitSet _tokenSet_18 = new BitSet(mk_tokenSet_18());
private static final long[] mk_tokenSet_19() {
	long[] data = new long[10];
	data[0]=4503599629488128L;
	data[1]=-36521378093989888L;
	data[2]=8589934591L;
	data[3]=144251183913164800L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_19 = new BitSet(mk_tokenSet_19());
private static final long[] mk_tokenSet_20() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=2161798190016233472L;
	data[3]=44044889620480L;
	return data;
}
public static final BitSet _tokenSet_20 = new BitSet(mk_tokenSet_20());
private static final long[] mk_tokenSet_21() {
	long[] data = new long[10];
	data[0]=16384L;
	data[3]=134348800L;
	return data;
}
public static final BitSet _tokenSet_21 = new BitSet(mk_tokenSet_21());
private static final long[] mk_tokenSet_22() {
	long[] data = new long[10];
	data[0]=4503599627386880L;
	data[1]=-41095346465538048L;
	data[2]=8589934591L;
	data[3]=144251183913164800L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_22 = new BitSet(mk_tokenSet_22());
private static final long[] mk_tokenSet_23() {
	long[] data = new long[10];
	data[0]=4513499529171072L;
	data[1]=-36521378093989888L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_23 = new BitSet(mk_tokenSet_23());
private static final long[] mk_tokenSet_24() {
	long[] data = new long[10];
	data[0]=4513499527008256L;
	data[1]=70368878395392L;
	data[2]=60129542147L;
	data[3]=79212216193020L;
	return data;
}
public static final BitSet _tokenSet_24 = new BitSet(mk_tokenSet_24());
private static final long[] mk_tokenSet_25() {
	long[] data = new long[10];
	data[0]=6755399440816448L;
	data[1]=4573968505798656L;
	data[2]=60129558403L;
	data[3]=79212216197118L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_25 = new BitSet(mk_tokenSet_25());
private static final long[] mk_tokenSet_26() {
	long[] data = new long[10];
	data[0]=4548683899097104L;
	data[1]=-4996180702396416L;
	data[2]=18014467228958719L;
	data[3]=144251458791075836L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_26 = new BitSet(mk_tokenSet_26());
private static final long[] mk_tokenSet_27() {
	long[] data = new long[10];
	data[0]=6755399440883154L;
	data[1]=-492581074993152L;
	data[2]=1080863979288395775L;
	data[3]=216308777951887358L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_27 = new BitSet(mk_tokenSet_27());
private static final long[] mk_tokenSet_28() {
	long[] data = new long[10];
	data[0]=4503599627386880L;
	data[1]=-41095346465538048L;
	data[2]=8589934591L;
	data[3]=144251183913230336L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_28 = new BitSet(mk_tokenSet_28());
private static final long[] mk_tokenSet_29() {
	long[] data = new long[10];
	data[1]=2197756618156802048L;
	data[3]=35184372088832L;
	return data;
}
public static final BitSet _tokenSet_29 = new BitSet(mk_tokenSet_29());
private static final long[] mk_tokenSet_30() {
	long[] data = new long[10];
	data[0]=81920L;
	data[1]=36028797153181696L;
	data[3]=13019250688L;
	return data;
}
public static final BitSet _tokenSet_30 = new BitSet(mk_tokenSet_30());
private static final long[] mk_tokenSet_31() {
	long[] data = new long[10];
	data[0]=4503599627386880L;
	data[1]=-36591746838167552L;
	data[2]=8589934591L;
	data[3]=144251183913164800L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_31 = new BitSet(mk_tokenSet_31());
private static final long[] mk_tokenSet_32() {
	long[] data = new long[10];
	data[0]=4538783999479808L;
	data[1]=-4755801206369026048L;
	data[3]=44027844100096L;
	return data;
}
public static final BitSet _tokenSet_32 = new BitSet(mk_tokenSet_32());
private static final long[] mk_tokenSet_33() {
	long[] data = new long[10];
	data[0]=4503599627374592L;
	data[1]=134217728L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_33 = new BitSet(mk_tokenSet_33());
private static final long[] mk_tokenSet_34() {
	long[] data = new long[10];
	data[0]=4503599629471744L;
	data[1]=4503599761588224L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_34 = new BitSet(mk_tokenSet_34());
private static final long[] mk_tokenSet_35() {
	long[] data = new long[10];
	data[0]=4538783999463424L;
	data[1]=134217728L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_35 = new BitSet(mk_tokenSet_35());
private static final long[] mk_tokenSet_36() {
	long[] data = new long[10];
	data[0]=4538784001560576L;
	data[1]=4503599761588224L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_36 = new BitSet(mk_tokenSet_36());
private static final long[] mk_tokenSet_37() {
	long[] data = new long[10];
	data[0]=4503599629554816L;
	data[1]=-36521378093989888L;
	data[2]=68719476735L;
	data[3]=144251183913164812L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_37 = new BitSet(mk_tokenSet_37());
private static final long[] mk_tokenSet_38() {
	long[] data = new long[10];
	data[1]=103582791429521408L;
	data[2]=16376L;
	data[3]=140735741952L;
	data[4]=12288L;
	return data;
}
public static final BitSet _tokenSet_38 = new BitSet(mk_tokenSet_38());
private static final long[] mk_tokenSet_39() {
	long[] data = new long[10];
	data[0]=4503599629549696L;
	data[1]=103653160307916800L;
	data[2]=64156090360L;
	data[3]=9533963501580L;
	data[4]=12288L;
	return data;
}
public static final BitSet _tokenSet_39 = new BitSet(mk_tokenSet_39());
private static final long[] mk_tokenSet_40() {
	long[] data = new long[10];
	data[1]=103582791429521408L;
	data[2]=16376L;
	data[3]=140735676416L;
	data[4]=12288L;
	return data;
}
public static final BitSet _tokenSet_40 = new BitSet(mk_tokenSet_40());
private static final long[] mk_tokenSet_41() {
	long[] data = new long[10];
	data[0]=4548683899098128L;
	data[1]=70368878395392L;
	data[2]=60129542147L;
	data[3]=79212216193020L;
	return data;
}
public static final BitSet _tokenSet_41 = new BitSet(mk_tokenSet_41());
private static final long[] mk_tokenSet_42() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=2166301789643603968L;
	data[2]=16256L;
	data[3]=44044889686016L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_42 = new BitSet(mk_tokenSet_42());
private static final long[] mk_tokenSet_43() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=2166301789643603968L;
	data[2]=16256L;
	data[3]=44044889620480L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_43 = new BitSet(mk_tokenSet_43());
private static final long[] mk_tokenSet_44() {
	long[] data = new long[10];
	data[0]=4548683899097104L;
	data[1]=-492581075025920L;
	data[2]=18014467228958719L;
	data[3]=144251458791075836L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_44 = new BitSet(mk_tokenSet_44());
private static final long[] mk_tokenSet_45() {
	long[] data = new long[10];
	data[0]=4548683899097104L;
	data[1]=-492581075025920L;
	data[2]=18014467228958719L;
	data[3]=144251458791141372L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_45 = new BitSet(mk_tokenSet_45());
private static final long[] mk_tokenSet_46() {
	long[] data = new long[10];
	data[1]=72057594037927936L;
	data[2]=120L;
	data[3]=140735676416L;
	data[4]=8192L;
	return data;
}
public static final BitSet _tokenSet_46 = new BitSet(mk_tokenSet_46());
private static final long[] mk_tokenSet_47() {
	long[] data = new long[10];
	data[0]=4548683909594578L;
	data[1]=9077568133136384L;
	data[2]=60129542147L;
	data[3]=79212216193020L;
	return data;
}
public static final BitSet _tokenSet_47 = new BitSet(mk_tokenSet_47());
private static final long[] mk_tokenSet_48() {
	long[] data = new long[10];
	data[0]=4548683909660114L;
	data[1]=-36521378093989888L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_48 = new BitSet(mk_tokenSet_48());
private static final long[] mk_tokenSet_49() {
	long[] data = new long[10];
	data[0]=4503599627386880L;
	data[1]=-7039689167399288832L;
	data[2]=8589934504L;
	data[3]=65486357454848L;
	data[4]=6656L;
	return data;
}
public static final BitSet _tokenSet_49 = new BitSet(mk_tokenSet_49());
private static final long[] mk_tokenSet_50() {
	long[] data = new long[10];
	data[0]=4548683909660114L;
	data[1]=-4648207396521377792L;
	data[2]=68719476731L;
	data[3]=135995837313020L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_50 = new BitSet(mk_tokenSet_50());
private static final long[] mk_tokenSet_51() {
	long[] data = new long[10];
	data[1]=72057594037927936L;
	data[2]=112L;
	data[3]=140735676416L;
	data[4]=8192L;
	return data;
}
public static final BitSet _tokenSet_51 = new BitSet(mk_tokenSet_51());
private static final long[] mk_tokenSet_52() {
	long[] data = new long[10];
	data[0]=16384L;
	data[2]=805306368L;
	data[3]=549890162688L;
	return data;
}
public static final BitSet _tokenSet_52 = new BitSet(mk_tokenSet_52());
private static final long[] mk_tokenSet_53() {
	long[] data = new long[10];
	data[0]=4503599627386880L;
	data[1]=18014398643699712L;
	data[2]=8589918216L;
	data[3]=30284805496832L;
	data[4]=2560L;
	return data;
}
public static final BitSet _tokenSet_53 = new BitSet(mk_tokenSet_53());
private static final long[] mk_tokenSet_54() {
	long[] data = new long[10];
	data[1]=2161727821137838080L;
	data[3]=35184372088832L;
	return data;
}
public static final BitSet _tokenSet_54 = new BitSet(mk_tokenSet_54());
private static final long[] mk_tokenSet_55() {
	long[] data = new long[10];
	data[0]=4503599627386880L;
	data[1]=21955048317648896L;
	data[2]=8589918216L;
	data[3]=30284805496832L;
	data[4]=2560L;
	return data;
}
public static final BitSet _tokenSet_55 = new BitSet(mk_tokenSet_55());
private static final long[] mk_tokenSet_56() {
	long[] data = new long[10];
	data[0]=4548683909594578L;
	data[1]=70368878395392L;
	data[2]=60129542147L;
	data[3]=79212216193020L;
	return data;
}
public static final BitSet _tokenSet_56 = new BitSet(mk_tokenSet_56());
private static final long[] mk_tokenSet_57() {
	long[] data = new long[10];
	data[0]=4513499526987776L;
	data[1]=134217728L;
	data[2]=3L;
	data[3]=79212081844220L;
	return data;
}
public static final BitSet _tokenSet_57 = new BitSet(mk_tokenSet_57());
private static final long[] mk_tokenSet_58() {
	long[] data = new long[10];
	data[0]=4513499529105408L;
	data[1]=4573968505765888L;
	data[2]=60129558403L;
	data[3]=79212216193020L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_58 = new BitSet(mk_tokenSet_58());
private static final long[] mk_tokenSet_59() {
	long[] data = new long[10];
	data[0]=4503599627390976L;
	data[1]=70368878395392L;
	data[2]=60129542144L;
	data[3]=8843472011276L;
	return data;
}
public static final BitSet _tokenSet_59 = new BitSet(mk_tokenSet_59());
private static final long[] mk_tokenSet_60() {
	long[] data = new long[10];
	data[0]=6755399440816448L;
	data[1]=4573968505798656L;
	data[2]=60129542144L;
	data[3]=8843472015374L;
	return data;
}
public static final BitSet _tokenSet_60 = new BitSet(mk_tokenSet_60());
private static final long[] mk_tokenSet_61() {
	long[] data = new long[10];
	data[0]=4548683899171922L;
	data[1]=-4996180702396416L;
	data[2]=22518066856329215L;
	data[3]=144392196279431164L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_61 = new BitSet(mk_tokenSet_61());
private static final long[] mk_tokenSet_62() {
	long[] data = new long[10];
	data[2]=4503599627370496L;
	data[3]=140737488355328L;
	return data;
}
public static final BitSet _tokenSet_62 = new BitSet(mk_tokenSet_62());
private static final long[] mk_tokenSet_63() {
	long[] data = new long[10];
	data[0]=65666L;
	return data;
}
public static final BitSet _tokenSet_63 = new BitSet(mk_tokenSet_63());
private static final long[] mk_tokenSet_64() {
	long[] data = new long[10];
	data[0]=4548683899162704L;
	data[1]=-4996180702396416L;
	data[2]=22518066856329215L;
	data[3]=144392196279431164L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_64 = new BitSet(mk_tokenSet_64());
private static final long[] mk_tokenSet_65() {
	long[] data = new long[10];
	data[0]=65600L;
	data[2]=4503599627370496L;
	data[3]=140737488355328L;
	return data;
}
public static final BitSet _tokenSet_65 = new BitSet(mk_tokenSet_65());
private static final long[] mk_tokenSet_66() {
	long[] data = new long[10];
	data[0]=74946L;
	data[2]=4503599627370496L;
	data[3]=140737488355328L;
	return data;
}
public static final BitSet _tokenSet_66 = new BitSet(mk_tokenSet_66());
private static final long[] mk_tokenSet_67() {
	long[] data = new long[10];
	data[0]=65728L;
	data[2]=4503599627370496L;
	data[3]=140737488355328L;
	return data;
}
public static final BitSet _tokenSet_67 = new BitSet(mk_tokenSet_67());
private static final long[] mk_tokenSet_68() {
	long[] data = new long[10];
	data[0]=74818L;
	return data;
}
public static final BitSet _tokenSet_68 = new BitSet(mk_tokenSet_68());
private static final long[] mk_tokenSet_69() {
	long[] data = new long[10];
	data[2]=7516192768L;
	return data;
}
public static final BitSet _tokenSet_69 = new BitSet(mk_tokenSet_69());
private static final long[] mk_tokenSet_70() {
	long[] data = new long[10];
	data[0]=4503599627387904L;
	data[1]=134217728L;
	data[2]=805306368L;
	data[3]=9393227825152L;
	return data;
}
public static final BitSet _tokenSet_70 = new BitSet(mk_tokenSet_70());
private static final long[] mk_tokenSet_71() {
	long[] data = new long[10];
	data[0]=2098304L;
	data[1]=4611686018427387904L;
	data[3]=4294967296L;
	return data;
}
public static final BitSet _tokenSet_71 = new BitSet(mk_tokenSet_71());
private static final long[] mk_tokenSet_72() {
	long[] data = new long[10];
	data[0]=1152L;
	data[1]=4611686018427387904L;
	data[3]=4294967296L;
	return data;
}
public static final BitSet _tokenSet_72 = new BitSet(mk_tokenSet_72());
private static final long[] mk_tokenSet_73() {
	long[] data = new long[10];
	data[0]=1152L;
	return data;
}
public static final BitSet _tokenSet_73 = new BitSet(mk_tokenSet_73());
private static final long[] mk_tokenSet_74() {
	long[] data = new long[10];
	data[0]=4503599627371520L;
	data[1]=134217728L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_74 = new BitSet(mk_tokenSet_74());
private static final long[] mk_tokenSet_75() {
	long[] data = new long[10];
	data[0]=4548683909660114L;
	data[1]=-41024977721360384L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_75 = new BitSet(mk_tokenSet_75());
private static final long[] mk_tokenSet_76() {
	long[] data = new long[10];
	data[2]=1920L;
	return data;
}
public static final BitSet _tokenSet_76 = new BitSet(mk_tokenSet_76());
private static final long[] mk_tokenSet_77() {
	long[] data = new long[10];
	data[2]=16256L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_77 = new BitSet(mk_tokenSet_77());
private static final long[] mk_tokenSet_78() {
	long[] data = new long[10];
	data[0]=4548683909660114L;
	data[1]=-4996180702396416L;
	data[2]=1103382527181062143L;
	data[3]=216454188364656638L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_78 = new BitSet(mk_tokenSet_78());
private static final long[] mk_tokenSet_79() {
	long[] data = new long[10];
	data[0]=4503599627452544L;
	data[1]=70368878395392L;
	data[2]=64156073984L;
	data[3]=9393227825164L;
	return data;
}
public static final BitSet _tokenSet_79 = new BitSet(mk_tokenSet_79());
private static final long[] mk_tokenSet_80() {
	long[] data = new long[10];
	data[0]=6755399441022418L;
	data[1]=-4670162444704776192L;
	data[2]=61203283967L;
	data[3]=135995837317118L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_80 = new BitSet(mk_tokenSet_80());
private static final long[] mk_tokenSet_81() {
	long[] data = new long[10];
	data[2]=3221225472L;
	return data;
}
public static final BitSet _tokenSet_81 = new BitSet(mk_tokenSet_81());
private static final long[] mk_tokenSet_82() {
	long[] data = new long[10];
	data[0]=82048L;
	data[2]=805306368L;
	data[3]=549890162688L;
	return data;
}
public static final BitSet _tokenSet_82 = new BitSet(mk_tokenSet_82());
private static final long[] mk_tokenSet_83() {
	long[] data = new long[10];
	data[0]=81920L;
	data[2]=805306368L;
	data[3]=549890162688L;
	return data;
}
public static final BitSet _tokenSet_83 = new BitSet(mk_tokenSet_83());
private static final long[] mk_tokenSet_84() {
	long[] data = new long[10];
	data[0]=131074L;
	return data;
}
public static final BitSet _tokenSet_84 = new BitSet(mk_tokenSet_84());
private static final long[] mk_tokenSet_85() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=134217728L;
	data[2]=268435332L;
	data[3]=29734915334144L;
	data[4]=6656L;
	return data;
}
public static final BitSet _tokenSet_85 = new BitSet(mk_tokenSet_85());
private static final long[] mk_tokenSet_86() {
	long[] data = new long[10];
	data[0]=4548683909660114L;
	data[1]=-4674666044332179456L;
	data[2]=60934864891L;
	data[3]=115104259641340L;
	data[4]=12288L;
	return data;
}
public static final BitSet _tokenSet_86 = new BitSet(mk_tokenSet_86());
private static final long[] mk_tokenSet_87() {
	long[] data = new long[10];
	data[0]=151810L;
	data[1]=134217728L;
	data[3]=12884901888L;
	return data;
}
public static final BitSet _tokenSet_87 = new BitSet(mk_tokenSet_87());
private static final long[] mk_tokenSet_88() {
	long[] data = new long[10];
	data[0]=4548683909594578L;
	data[1]=-4674666044332179456L;
	data[2]=60934864891L;
	data[3]=115104259641340L;
	data[4]=12288L;
	return data;
}
public static final BitSet _tokenSet_88 = new BitSet(mk_tokenSet_88());
private static final long[] mk_tokenSet_89() {
	long[] data = new long[10];
	data[0]=4503599627452544L;
	data[1]=70368878395392L;
	data[2]=60934848512L;
	data[3]=9393227825164L;
	return data;
}
public static final BitSet _tokenSet_89 = new BitSet(mk_tokenSet_89());
private static final long[] mk_tokenSet_90() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=70368878395392L;
	data[2]=60129542144L;
	data[3]=8843337662476L;
	return data;
}
public static final BitSet _tokenSet_90 = new BitSet(mk_tokenSet_90());
private static final long[] mk_tokenSet_91() {
	long[] data = new long[20];
	data[0]=-196624L;
	for (int i = 1; i<=8; i++) { data[i]=-1L; }
	data[9]=134217727L;
	return data;
}
public static final BitSet _tokenSet_91 = new BitSet(mk_tokenSet_91());
private static final long[] mk_tokenSet_92() {
	long[] data = new long[10];
	data[0]=4548683909660114L;
	data[1]=-4996180702396416L;
	data[2]=1103381977425248255L;
	data[3]=144392196279431166L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_92 = new BitSet(mk_tokenSet_92());
private static final long[] mk_tokenSet_93() {
	long[] data = new long[10];
	data[2]=51539607552L;
	return data;
}
public static final BitSet _tokenSet_93 = new BitSet(mk_tokenSet_93());
private static final long[] mk_tokenSet_94() {
	long[] data = new long[10];
	data[0]=2251799813445952L;
	data[3]=4098L;
	return data;
}
public static final BitSet _tokenSet_94 = new BitSet(mk_tokenSet_94());
private static final long[] mk_tokenSet_95() {
	long[] data = new long[10];
	data[1]=70368878395392L;
	data[2]=60129542144L;
	data[3]=12884901888L;
	return data;
}
public static final BitSet _tokenSet_95 = new BitSet(mk_tokenSet_95());
private static final long[] mk_tokenSet_96() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=18014398643699712L;
	data[2]=7784611848L;
	data[3]=29734915334144L;
	data[4]=2560L;
	return data;
}
public static final BitSet _tokenSet_96 = new BitSet(mk_tokenSet_96());
private static final long[] mk_tokenSet_97() {
	long[] data = new long[10];
	data[0]=4548683909594578L;
	data[1]=-4996180702396416L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_97 = new BitSet(mk_tokenSet_97());
private static final long[] mk_tokenSet_98() {
	long[] data = new long[10];
	data[0]=35188667056128L;
	data[1]=4573968505765888L;
	data[2]=60129542144L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_98 = new BitSet(mk_tokenSet_98());
private static final long[] mk_tokenSet_99() {
	long[] data = new long[10];
	data[0]=4538788294426624L;
	data[1]=70368878395392L;
	data[2]=60129542144L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_99 = new BitSet(mk_tokenSet_99());
private static final long[] mk_tokenSet_100() {
	long[] data = new long[10];
	data[1]=134217728L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_100 = new BitSet(mk_tokenSet_100());
private static final long[] mk_tokenSet_101() {
	long[] data = new long[10];
	data[0]=4503599629471744L;
	return data;
}
public static final BitSet _tokenSet_101 = new BitSet(mk_tokenSet_101());
private static final long[] mk_tokenSet_102() {
	long[] data = new long[20];
	data[0]=-8585232L;
	for (int i = 1; i<=8; i++) { data[i]=-1L; }
	data[9]=134217727L;
	return data;
}
public static final BitSet _tokenSet_102 = new BitSet(mk_tokenSet_102());
private static final long[] mk_tokenSet_103() {
	long[] data = new long[10];
	data[0]=35188667056128L;
	data[1]=70368878395392L;
	data[2]=60129542144L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_103 = new BitSet(mk_tokenSet_103());
private static final long[] mk_tokenSet_104() {
	long[] data = new long[10];
	data[0]=6755399440891346L;
	data[1]=-4996180702363648L;
	data[2]=1103381977425248255L;
	data[3]=216449790318149630L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_104 = new BitSet(mk_tokenSet_104());
private static final long[] mk_tokenSet_105() {
	long[] data = new long[10];
	data[0]=1088L;
	return data;
}
public static final BitSet _tokenSet_105 = new BitSet(mk_tokenSet_105());
private static final long[] mk_tokenSet_106() {
	long[] data = new long[10];
	data[0]=66624L;
	return data;
}
public static final BitSet _tokenSet_106 = new BitSet(mk_tokenSet_106());
private static final long[] mk_tokenSet_107() {
	long[] data = new long[10];
	data[0]=4548683899098386L;
	data[1]=70368878395392L;
	data[2]=60129542147L;
	data[3]=79212216193020L;
	return data;
}
public static final BitSet _tokenSet_107 = new BitSet(mk_tokenSet_107());
private static final long[] mk_tokenSet_108() {
	long[] data = new long[10];
	data[0]=4548683899097360L;
	data[1]=70368878395392L;
	data[2]=60129542147L;
	data[3]=79212216193020L;
	return data;
}
public static final BitSet _tokenSet_108 = new BitSet(mk_tokenSet_108());
private static final long[] mk_tokenSet_109() {
	long[] data = new long[10];
	data[0]=4548683899097104L;
	data[1]=70368878395392L;
	data[2]=60129542147L;
	data[3]=79212216193020L;
	return data;
}
public static final BitSet _tokenSet_109 = new BitSet(mk_tokenSet_109());
private static final long[] mk_tokenSet_110() {
	long[] data = new long[10];
	data[0]=6755399440883026L;
	data[1]=4573968505798656L;
	data[2]=1080863970698477443L;
	data[3]=72136806254911486L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_110 = new BitSet(mk_tokenSet_110());
private static final long[] mk_tokenSet_111() {
	long[] data = new long[10];
	data[0]=4548683901261202L;
	data[1]=-36521378093989888L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_111 = new BitSet(mk_tokenSet_111());
private static final long[] mk_tokenSet_112() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=36099165897359360L;
	data[2]=60129542148L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_112 = new BitSet(mk_tokenSet_112());
private static final long[] mk_tokenSet_113() {
	long[] data = new long[10];
	data[0]=2097152L;
	data[1]=4503599627370496L;
	data[2]=36028797018963968L;
	return data;
}
public static final BitSet _tokenSet_113 = new BitSet(mk_tokenSet_113());
private static final long[] mk_tokenSet_114() {
	long[] data = new long[10];
	data[1]=4503599627370496L;
	data[2]=36028797018963968L;
	return data;
}
public static final BitSet _tokenSet_114 = new BitSet(mk_tokenSet_114());
private static final long[] mk_tokenSet_115() {
	long[] data = new long[10];
	data[0]=2098176L;
	return data;
}
public static final BitSet _tokenSet_115 = new BitSet(mk_tokenSet_115());
private static final long[] mk_tokenSet_116() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=70368878395392L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_116 = new BitSet(mk_tokenSet_116());
private static final long[] mk_tokenSet_117() {
	long[] data = new long[10];
	data[1]=99079191802150912L;
	data[2]=16376L;
	data[3]=140735741952L;
	data[4]=12288L;
	return data;
}
public static final BitSet _tokenSet_117 = new BitSet(mk_tokenSet_117());
private static final long[] mk_tokenSet_118() {
	long[] data = new long[10];
	data[0]=4503599627452544L;
	data[1]=99149560680546304L;
	data[2]=64156090360L;
	data[3]=9533963501580L;
	data[4]=12288L;
	return data;
}
public static final BitSet _tokenSet_118 = new BitSet(mk_tokenSet_118());
private static final long[] mk_tokenSet_119() {
	long[] data = new long[10];
	data[0]=4548683901260944L;
	data[1]=-36521378093989888L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_119 = new BitSet(mk_tokenSet_119());
private static final long[] mk_tokenSet_120() {
	long[] data = new long[10];
	data[0]=8388880L;
	return data;
}
public static final BitSet _tokenSet_120 = new BitSet(mk_tokenSet_120());
private static final long[] mk_tokenSet_121() {
	long[] data = new long[10];
	data[0]=8388608L;
	return data;
}
public static final BitSet _tokenSet_121 = new BitSet(mk_tokenSet_121());
private static final long[] mk_tokenSet_122() {
	long[] data = new long[10];
	data[0]=4548683899097104L;
	data[1]=-492581075025920L;
	data[2]=54043264247922687L;
	data[3]=144251458791141372L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_122 = new BitSet(mk_tokenSet_122());
private static final long[] mk_tokenSet_123() {
	long[] data = new long[10];
	data[0]=4503599627452416L;
	data[1]=72057594172145664L;
	data[2]=805306488L;
	data[3]=9533963501568L;
	data[4]=8192L;
	return data;
}
public static final BitSet _tokenSet_123 = new BitSet(mk_tokenSet_123());
private static final long[] mk_tokenSet_124() {
	long[] data = new long[10];
	data[0]=4503599627436032L;
	data[1]=72057594172145664L;
	data[2]=120L;
	data[3]=8984073338880L;
	data[4]=8192L;
	return data;
}
public static final BitSet _tokenSet_124 = new BitSet(mk_tokenSet_124());
private static final long[] mk_tokenSet_125() {
	long[] data = new long[10];
	data[0]=2162816L;
	data[1]=4611686018427387904L;
	data[3]=4294967296L;
	return data;
}
public static final BitSet _tokenSet_125 = new BitSet(mk_tokenSet_125());
private static final long[] mk_tokenSet_126() {
	long[] data = new long[10];
	data[0]=65664L;
	data[1]=4611686018427387904L;
	data[3]=4294967296L;
	return data;
}
public static final BitSet _tokenSet_126 = new BitSet(mk_tokenSet_126());
private static final long[] mk_tokenSet_127() {
	long[] data = new long[10];
	data[0]=65664L;
	return data;
}
public static final BitSet _tokenSet_127 = new BitSet(mk_tokenSet_127());
private static final long[] mk_tokenSet_128() {
	long[] data = new long[10];
	data[0]=4503599627436032L;
	data[1]=134217728L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_128 = new BitSet(mk_tokenSet_128());
private static final long[] mk_tokenSet_129() {
	long[] data = new long[10];
	data[0]=65664L;
	data[2]=4503599627370496L;
	data[3]=140737488355328L;
	return data;
}
public static final BitSet _tokenSet_129 = new BitSet(mk_tokenSet_129());
private static final long[] mk_tokenSet_130() {
	long[] data = new long[10];
	data[1]=-9142307243562106880L;
	data[2]=16376L;
	data[3]=157915545600L;
	data[4]=12288L;
	return data;
}
public static final BitSet _tokenSet_130 = new BitSet(mk_tokenSet_130());
private static final long[] mk_tokenSet_131() {
	long[] data = new long[10];
	data[1]=18014398509481984L;
	return data;
}
public static final BitSet _tokenSet_131 = new BitSet(mk_tokenSet_131());
private static final long[] mk_tokenSet_132() {
	long[] data = new long[10];
	data[0]=4548683907562962L;
	data[1]=-4996180702396416L;
	data[2]=1103381977425248255L;
	data[3]=144392196279431166L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_132 = new BitSet(mk_tokenSet_132());
private static final long[] mk_tokenSet_133() {
	long[] data = new long[10];
	data[0]=4548683899162640L;
	data[1]=-4996180702396416L;
	data[2]=18014467228958719L;
	data[3]=144251458791075836L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_133 = new BitSet(mk_tokenSet_133());
private static final long[] mk_tokenSet_134() {
	long[] data = new long[10];
	data[0]=4548683899163666L;
	data[1]=-4996180702396416L;
	data[2]=18015016984772607L;
	data[3]=144255856837586940L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_134 = new BitSet(mk_tokenSet_134());
private static final long[] mk_tokenSet_135() {
	long[] data = new long[10];
	data[0]=4513499526991872L;
	data[1]=134217728L;
	data[2]=3L;
	data[3]=79212081844220L;
	return data;
}
public static final BitSet _tokenSet_135 = new BitSet(mk_tokenSet_135());
private static final long[] mk_tokenSet_136() {
	long[] data = new long[10];
	data[0]=4548683899163666L;
	data[1]=-4996180702396416L;
	data[2]=18014467228958719L;
	data[3]=144251458791075836L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_136 = new BitSet(mk_tokenSet_136());
private static final long[] mk_tokenSet_137() {
	long[] data = new long[20];
	data[0]=-131088L;
	for (int i = 1; i<=8; i++) { data[i]=-1L; }
	data[9]=134217727L;
	return data;
}
public static final BitSet _tokenSet_137 = new BitSet(mk_tokenSet_137());
private static final long[] mk_tokenSet_138() {
	long[] data = new long[10];
	data[0]=4096L;
	data[2]=281474976724992L;
	return data;
}
public static final BitSet _tokenSet_138 = new BitSet(mk_tokenSet_138());
private static final long[] mk_tokenSet_139() {
	long[] data = new long[10];
	data[0]=4096L;
	return data;
}
public static final BitSet _tokenSet_139 = new BitSet(mk_tokenSet_139());
private static final long[] mk_tokenSet_140() {
	long[] data = new long[10];
	data[2]=1080863910568919040L;
	return data;
}
public static final BitSet _tokenSet_140 = new BitSet(mk_tokenSet_140());
private static final long[] mk_tokenSet_141() {
	long[] data = new long[10];
	data[0]=81920L;
	data[1]=134217728L;
	data[3]=13019250688L;
	return data;
}
public static final BitSet _tokenSet_141 = new BitSet(mk_tokenSet_141());
private static final long[] mk_tokenSet_142() {
	long[] data = new long[10];
	data[0]=4548683899294736L;
	data[1]=-492581075025920L;
	data[2]=1134907174816841727L;
	data[3]=144251458791141372L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_142 = new BitSet(mk_tokenSet_142());
private static final long[] mk_tokenSet_143() {
	long[] data = new long[10];
	data[0]=81920L;
	data[3]=134348800L;
	return data;
}
public static final BitSet _tokenSet_143 = new BitSet(mk_tokenSet_143());
private static final long[] mk_tokenSet_144() {
	long[] data = new long[10];
	data[0]=4548683899229200L;
	data[1]=-492581075025920L;
	data[2]=1134907174816841727L;
	data[3]=144251458791141372L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_144 = new BitSet(mk_tokenSet_144());
private static final long[] mk_tokenSet_145() {
	long[] data = new long[10];
	data[0]=65536L;
	return data;
}
public static final BitSet _tokenSet_145 = new BitSet(mk_tokenSet_145());
private static final long[] mk_tokenSet_146() {
	long[] data = new long[10];
	data[0]=16384L;
	data[1]=6773484208309403648L;
	data[3]=35201686306816L;
	return data;
}
public static final BitSet _tokenSet_146 = new BitSet(mk_tokenSet_146());
private static final long[] mk_tokenSet_147() {
	long[] data = new long[10];
	data[0]=4503599627390976L;
	data[1]=-41024977721360384L;
	data[2]=8589934591L;
	data[3]=144251183913164800L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_147 = new BitSet(mk_tokenSet_147());
private static final long[] mk_tokenSet_148() {
	long[] data = new long[10];
	data[0]=4548683899098256L;
	data[1]=70368878395392L;
	data[2]=60129542147L;
	data[3]=79212216193020L;
	return data;
}
public static final BitSet _tokenSet_148 = new BitSet(mk_tokenSet_148());
private static final long[] mk_tokenSet_149() {
	long[] data = new long[10];
	data[1]=-9124292845052624896L;
	data[2]=16376L;
	data[3]=157915611136L;
	data[4]=12288L;
	return data;
}
public static final BitSet _tokenSet_149 = new BitSet(mk_tokenSet_149());
private static final long[] mk_tokenSet_150() {
	long[] data = new long[10];
	data[0]=4503599627452544L;
	data[1]=-9124222476174229504L;
	data[2]=64156090360L;
	data[3]=9551143370764L;
	data[4]=12288L;
	return data;
}
public static final BitSet _tokenSet_150 = new BitSet(mk_tokenSet_150());
private static final long[] mk_tokenSet_151() {
	long[] data = new long[10];
	data[1]=-9124292845052624896L;
	data[2]=16376L;
	data[3]=157915545600L;
	data[4]=12288L;
	return data;
}
public static final BitSet _tokenSet_151 = new BitSet(mk_tokenSet_151());
private static final long[] mk_tokenSet_152() {
	long[] data = new long[10];
	data[0]=4513499527008256L;
	data[1]=70368878395392L;
	data[2]=60129542179L;
	data[3]=79212216193020L;
	return data;
}
public static final BitSet _tokenSet_152 = new BitSet(mk_tokenSet_152());
private static final long[] mk_tokenSet_153() {
	long[] data = new long[10];
	data[0]=16384L;
	data[1]=9079327217523097600L;
	data[3]=35201686306816L;
	return data;
}
public static final BitSet _tokenSet_153 = new BitSet(mk_tokenSet_153());
private static final long[] mk_tokenSet_154() {
	long[] data = new long[10];
	data[0]=6755399440817474L;
	data[1]=4573968505798656L;
	data[2]=60129542144L;
	data[3]=8843337666562L;
	return data;
}
public static final BitSet _tokenSet_154 = new BitSet(mk_tokenSet_154());
private static final long[] mk_tokenSet_155() {
	long[] data = new long[10];
	data[0]=4548683901260946L;
	data[1]=-36521378093989888L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_155 = new BitSet(mk_tokenSet_155());
private static final long[] mk_tokenSet_156() {
	long[] data = new long[10];
	data[0]=4548683899098258L;
	data[1]=70368878395392L;
	data[2]=60129542147L;
	data[3]=79212216193020L;
	return data;
}
public static final BitSet _tokenSet_156 = new BitSet(mk_tokenSet_156());
private static final long[] mk_tokenSet_157() {
	long[] data = new long[10];
	data[0]=4548683899098128L;
	data[1]=-492581075025920L;
	data[2]=54043745284259839L;
	data[3]=144251458791141372L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_157 = new BitSet(mk_tokenSet_157());
private static final long[] mk_tokenSet_158() {
	long[] data = new long[10];
	data[0]=-9215086848622240206L;
	data[1]=-70368341475313L;
	data[2]=-1161937980990947329L;
	data[3]=-72339069015425025L;
	data[4]=15359L;
	return data;
}
public static final BitSet _tokenSet_158 = new BitSet(mk_tokenSet_158());
private static final long[] mk_tokenSet_159() {
	long[] data = new long[10];
	data[0]=-9215086848622371280L;
	data[1]=-70368341475313L;
	data[2]=-1161937980990947329L;
	data[3]=-72339069015425025L;
	data[4]=15359L;
	return data;
}
public static final BitSet _tokenSet_159 = new BitSet(mk_tokenSet_159());
private static final long[] mk_tokenSet_160() {
	long[] data = new long[10];
	data[2]=481036337152L;
	return data;
}
public static final BitSet _tokenSet_160 = new BitSet(mk_tokenSet_160());
private static final long[] mk_tokenSet_161() {
	long[] data = new long[10];
	data[0]=4503599627370624L;
	data[1]=2305843009347911680L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_161 = new BitSet(mk_tokenSet_161());
private static final long[] mk_tokenSet_162() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=70368878395392L;
	data[2]=60129542148L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_162 = new BitSet(mk_tokenSet_162());
private static final long[] mk_tokenSet_163() {
	long[] data = new long[10];
	data[1]=32768L;
	return data;
}
public static final BitSet _tokenSet_163 = new BitSet(mk_tokenSet_163());
private static final long[] mk_tokenSet_164() {
	long[] data = new long[10];
	data[0]=4548683909660114L;
	data[1]=-4996180702396416L;
	data[2]=1103381977425248255L;
	data[3]=216449790318145534L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_164 = new BitSet(mk_tokenSet_164());
private static final long[] mk_tokenSet_165() {
	long[] data = new long[10];
	data[0]=4548683899105296L;
	data[1]=-41024977721360384L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_165 = new BitSet(mk_tokenSet_165());
private static final long[] mk_tokenSet_166() {
	long[] data = new long[10];
	data[0]=4548683899173970L;
	data[1]=-4996180702396416L;
	data[2]=1103382527181062143L;
	data[3]=144396594325942268L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_166 = new BitSet(mk_tokenSet_166());
private static final long[] mk_tokenSet_167() {
	long[] data = new long[10];
	data[0]=9895604649984L;
	return data;
}
public static final BitSet _tokenSet_167 = new BitSet(mk_tokenSet_167());
private static final long[] mk_tokenSet_168() {
	long[] data = new long[10];
	data[0]=4548683907562962L;
	data[1]=-4996180702396416L;
	data[2]=1103382527181062143L;
	data[3]=144396594325942270L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_168 = new BitSet(mk_tokenSet_168());
private static final long[] mk_tokenSet_169() {
	long[] data = new long[10];
	data[0]=-9215086848622437840L;
	data[1]=23010579748798479L;
	data[2]=-2305842941299523697L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_169 = new BitSet(mk_tokenSet_169());
private static final long[] mk_tokenSet_170() {
	long[] data = new long[10];
	data[2]=549755813888L;
	data[3]=4398046511104L;
	return data;
}
public static final BitSet _tokenSet_170 = new BitSet(mk_tokenSet_170());
private static final long[] mk_tokenSet_171() {
	long[] data = new long[10];
	data[2]=9007199254740992L;
	data[3]=281474976710656L;
	return data;
}
public static final BitSet _tokenSet_171 = new BitSet(mk_tokenSet_171());
private static final long[] mk_tokenSet_172() {
	long[] data = new long[10];
	data[0]=4548683901259920L;
	data[1]=-36521378093989888L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_172 = new BitSet(mk_tokenSet_172());
private static final long[] mk_tokenSet_173() {
	long[] data = new long[10];
	data[0]=4503599627386880L;
	data[1]=-41095346465538048L;
	data[2]=18014407099416575L;
	data[3]=144251183913164800L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_173 = new BitSet(mk_tokenSet_173());
private static final long[] mk_tokenSet_174() {
	long[] data = new long[10];
	data[0]=4548683901194256L;
	data[1]=4573968505765888L;
	data[2]=60129558403L;
	data[3]=72136806254907388L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_174 = new BitSet(mk_tokenSet_174());
private static final long[] mk_tokenSet_175() {
	long[] data = new long[10];
	data[0]=4538783999479824L;
	data[1]=70368878395392L;
	data[2]=60129542144L;
	data[3]=8843472011276L;
	return data;
}
public static final BitSet _tokenSet_175 = new BitSet(mk_tokenSet_175());
private static final long[] mk_tokenSet_176() {
	long[] data = new long[10];
	data[0]=6755399440891346L;
	data[1]=4573968505798656L;
	data[2]=1080863970698461187L;
	data[3]=79212216197118L;
	return data;
}
public static final BitSet _tokenSet_176 = new BitSet(mk_tokenSet_176());
private static final long[] mk_tokenSet_177() {
	long[] data = new long[10];
	data[0]=8467922L;
	return data;
}
public static final BitSet _tokenSet_177 = new BitSet(mk_tokenSet_177());
private static final long[] mk_tokenSet_178() {
	long[] data = new long[10];
	data[0]=4548683899163664L;
	data[1]=-492581075025920L;
	data[2]=1134907174816841727L;
	data[3]=144251458791141372L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_178 = new BitSet(mk_tokenSet_178());
private static final long[] mk_tokenSet_179() {
	long[] data = new long[10];
	data[1]=2233785415309983744L;
	data[2]=15352L;
	data[3]=35355172536320L;
	data[4]=12288L;
	return data;
}
public static final BitSet _tokenSet_179 = new BitSet(mk_tokenSet_179());
private static final long[] mk_tokenSet_180() {
	long[] data = new long[10];
	data[0]=9899899617280L;
	data[1]=2233785415309983744L;
	data[2]=15355L;
	data[3]=105723916718076L;
	data[4]=12288L;
	return data;
}
public static final BitSet _tokenSet_180 = new BitSet(mk_tokenSet_180());
private static final long[] mk_tokenSet_181() {
	long[] data = new long[10];
	data[2]=15232L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_181 = new BitSet(mk_tokenSet_181());
private static final long[] mk_tokenSet_182() {
	long[] data = new long[10];
	data[0]=9899899617280L;
	data[2]=3L;
	data[3]=70368744181756L;
	return data;
}
public static final BitSet _tokenSet_182 = new BitSet(mk_tokenSet_182());
private static final long[] mk_tokenSet_183() {
	long[] data = new long[10];
	data[0]=4513499535397136L;
	data[1]=134217728L;
	data[2]=15235L;
	data[3]=79212081844220L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_183 = new BitSet(mk_tokenSet_183());
private static final long[] mk_tokenSet_184() {
	long[] data = new long[10];
	data[0]=4513499535397136L;
	data[1]=134217728L;
	data[2]=3L;
	data[3]=79212081844220L;
	return data;
}
public static final BitSet _tokenSet_184 = new BitSet(mk_tokenSet_184());
private static final long[] mk_tokenSet_185() {
	long[] data = new long[10];
	data[2]=3L;
	return data;
}
public static final BitSet _tokenSet_185 = new BitSet(mk_tokenSet_185());
private static final long[] mk_tokenSet_186() {
	long[] data = new long[10];
	data[0]=-9214364837600034830L;
	data[1]=-70368341475313L;
	data[2]=-1202461031788445697L;
	data[3]=-281474976710657L;
	data[4]=15359L;
	return data;
}
public static final BitSet _tokenSet_186 = new BitSet(mk_tokenSet_186());
private static final long[] mk_tokenSet_187() {
	long[] data = new long[10];
	data[1]=3940649673949184L;
	return data;
}
public static final BitSet _tokenSet_187 = new BitSet(mk_tokenSet_187());
private static final long[] mk_tokenSet_188() {
	long[] data = new long[10];
	data[0]=4513499529179280L;
	data[1]=-36521378093989888L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_188 = new BitSet(mk_tokenSet_188());
private static final long[] mk_tokenSet_189() {
	long[] data = new long[10];
	data[0]=-9215086848622437840L;
	data[1]=23010579748798479L;
	data[2]=-2305842391543709809L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_189 = new BitSet(mk_tokenSet_189());
private static final long[] mk_tokenSet_190() {
	long[] data = new long[20];
	data[0]=-1040L;
	for (int i = 1; i<=8; i++) { data[i]=-1L; }
	data[9]=134217727L;
	return data;
}
public static final BitSet _tokenSet_190 = new BitSet(mk_tokenSet_190());
private static final long[] mk_tokenSet_191() {
	long[] data = new long[10];
	data[0]=-9215086848622437840L;
	data[1]=-36099165360439281L;
	data[2]=-2305842390738403329L;
	data[3]=-72479806503780353L;
	data[4]=15359L;
	return data;
}
public static final BitSet _tokenSet_191 = new BitSet(mk_tokenSet_191());
private static final long[] mk_tokenSet_192() {
	long[] data = new long[10];
	data[0]=8192L;
	return data;
}
public static final BitSet _tokenSet_192 = new BitSet(mk_tokenSet_192());
private static final long[] mk_tokenSet_193() {
	long[] data = new long[10];
	data[0]=8400144L;
	return data;
}
public static final BitSet _tokenSet_193 = new BitSet(mk_tokenSet_193());
private static final long[] mk_tokenSet_194() {
	long[] data = new long[10];
	data[0]=9346L;
	return data;
}
public static final BitSet _tokenSet_194 = new BitSet(mk_tokenSet_194());
private static final long[] mk_tokenSet_195() {
	long[] data = new long[10];
	data[2]=896L;
	return data;
}
public static final BitSet _tokenSet_195 = new BitSet(mk_tokenSet_195());
private static final long[] mk_tokenSet_196() {
	long[] data = new long[10];
	data[0]=-9214364837600034830L;
	data[1]=-70368341475313L;
	data[2]=-1202460482032631809L;
	data[3]=-281474976710657L;
	data[4]=15359L;
	return data;
}
public static final BitSet _tokenSet_196 = new BitSet(mk_tokenSet_196());
private static final long[] mk_tokenSet_197() {
	long[] data = new long[10];
	data[2]=14336L;
	return data;
}
public static final BitSet _tokenSet_197 = new BitSet(mk_tokenSet_197());
private static final long[] mk_tokenSet_198() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=134217728L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_198 = new BitSet(mk_tokenSet_198());
private static final long[] mk_tokenSet_199() {
	long[] data = new long[10];
	data[0]=4548683909660114L;
	data[1]=-492581075025920L;
	data[2]=1103381977425248255L;
	data[3]=144392196279431166L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_199 = new BitSet(mk_tokenSet_199());
private static final long[] mk_tokenSet_200() {
	long[] data = new long[10];
	data[2]=268419072L;
	data[3]=20891577671680L;
	data[4]=2560L;
	return data;
}
public static final BitSet _tokenSet_200 = new BitSet(mk_tokenSet_200());
private static final long[] mk_tokenSet_201() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=134217728L;
	data[2]=268419072L;
	data[3]=29734915334144L;
	data[4]=2560L;
	return data;
}
public static final BitSet _tokenSet_201 = new BitSet(mk_tokenSet_201());
private static final long[] mk_tokenSet_202() {
	long[] data = new long[10];
	data[0]=4503599627452416L;
	data[1]=72127962916323328L;
	data[2]=60934848632L;
	data[3]=9533963501568L;
	data[4]=8192L;
	return data;
}
public static final BitSet _tokenSet_202 = new BitSet(mk_tokenSet_202());
private static final long[] mk_tokenSet_203() {
	long[] data = new long[10];
	data[0]=4503599627436032L;
	data[1]=72127962916323328L;
	data[2]=60129542264L;
	data[3]=8984073338880L;
	data[4]=8192L;
	return data;
}
public static final BitSet _tokenSet_203 = new BitSet(mk_tokenSet_203());
private static final long[] mk_tokenSet_204() {
	long[] data = new long[10];
	data[0]=4548683909660114L;
	data[1]=-62980025904791552L;
	data[2]=60934864891L;
	data[3]=115104259641340L;
	data[4]=12288L;
	return data;
}
public static final BitSet _tokenSet_204 = new BitSet(mk_tokenSet_204());
private static final long[] mk_tokenSet_205() {
	long[] data = new long[10];
	data[0]=4548683899229202L;
	data[1]=-492581075025920L;
	data[2]=54043745284259839L;
	data[3]=144251458791141372L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_205 = new BitSet(mk_tokenSet_205());
private static final long[] mk_tokenSet_206() {
	long[] data = new long[10];
	data[0]=4503599627436032L;
	data[1]=70368878395392L;
	data[2]=60129542144L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_206 = new BitSet(mk_tokenSet_206());
private static final long[] mk_tokenSet_207() {
	long[] data = new long[10];
	data[3]=24576L;
	return data;
}
public static final BitSet _tokenSet_207 = new BitSet(mk_tokenSet_207());
private static final long[] mk_tokenSet_208() {
	long[] data = new long[10];
	data[2]=7340032L;
	return data;
}
public static final BitSet _tokenSet_208 = new BitSet(mk_tokenSet_208());
private static final long[] mk_tokenSet_209() {
	long[] data = new long[10];
	data[2]=25165824L;
	return data;
}
public static final BitSet _tokenSet_209 = new BitSet(mk_tokenSet_209());
private static final long[] mk_tokenSet_210() {
	long[] data = new long[10];
	data[3]=17592220647424L;
	return data;
}
public static final BitSet _tokenSet_210 = new BitSet(mk_tokenSet_210());
private static final long[] mk_tokenSet_211() {
	long[] data = new long[10];
	data[0]=66832L;
	return data;
}
public static final BitSet _tokenSet_211 = new BitSet(mk_tokenSet_211());
private static final long[] mk_tokenSet_212() {
	long[] data = new long[10];
	data[0]=66560L;
	return data;
}
public static final BitSet _tokenSet_212 = new BitSet(mk_tokenSet_212());
private static final long[] mk_tokenSet_213() {
	long[] data = new long[20];
	data[0]=-65552L;
	for (int i = 1; i<=8; i++) { data[i]=-1L; }
	data[9]=134217727L;
	return data;
}
public static final BitSet _tokenSet_213 = new BitSet(mk_tokenSet_213());
private static final long[] mk_tokenSet_214() {
	long[] data = new long[10];
	data[0]=256L;
	data[1]=134217728L;
	data[3]=12884901888L;
	return data;
}
public static final BitSet _tokenSet_214 = new BitSet(mk_tokenSet_214());
private static final long[] mk_tokenSet_215() {
	long[] data = new long[10];
	data[0]=256L;
	return data;
}
public static final BitSet _tokenSet_215 = new BitSet(mk_tokenSet_215());
private static final long[] mk_tokenSet_216() {
	long[] data = new long[10];
	data[0]=131330L;
	return data;
}
public static final BitSet _tokenSet_216 = new BitSet(mk_tokenSet_216());
private static final long[] mk_tokenSet_217() {
	long[] data = new long[10];
	data[0]=131330L;
	data[1]=134217728L;
	data[3]=12884901888L;
	return data;
}
public static final BitSet _tokenSet_217 = new BitSet(mk_tokenSet_217());
private static final long[] mk_tokenSet_218() {
	long[] data = new long[10];
	data[0]=4548683909660114L;
	data[1]=-4670162444704808960L;
	data[2]=61203283967L;
	data[3]=135995837313020L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_218 = new BitSet(mk_tokenSet_218());
private static final long[] mk_tokenSet_219() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=134217728L;
	data[2]=268419076L;
	data[3]=29734915334144L;
	data[4]=2560L;
	return data;
}
public static final BitSet _tokenSet_219 = new BitSet(mk_tokenSet_219());
private static final long[] mk_tokenSet_220() {
	long[] data = new long[10];
	data[0]=4548683909660114L;
	data[1]=-4670162444704808960L;
	data[2]=61203283963L;
	data[3]=135995837313020L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_220 = new BitSet(mk_tokenSet_220());
private static final long[] mk_tokenSet_221() {
	long[] data = new long[10];
	data[0]=6755399440891346L;
	data[1]=-4670162444704776192L;
	data[2]=60934864891L;
	data[3]=115104259645438L;
	data[4]=12288L;
	return data;
}
public static final BitSet _tokenSet_221 = new BitSet(mk_tokenSet_221());
private static final long[] mk_tokenSet_222() {
	long[] data = new long[10];
	data[0]=131394L;
	return data;
}
public static final BitSet _tokenSet_222 = new BitSet(mk_tokenSet_222());
private static final long[] mk_tokenSet_223() {
	long[] data = new long[10];
	data[0]=173442L;
	return data;
}
public static final BitSet _tokenSet_223 = new BitSet(mk_tokenSet_223());
private static final long[] mk_tokenSet_224() {
	long[] data = new long[10];
	data[3]=12L;
	return data;
}
public static final BitSet _tokenSet_224 = new BitSet(mk_tokenSet_224());
private static final long[] mk_tokenSet_225() {
	long[] data = new long[10];
	data[0]=10544128L;
	return data;
}
public static final BitSet _tokenSet_225 = new BitSet(mk_tokenSet_225());
private static final long[] mk_tokenSet_226() {
	long[] data = new long[10];
	data[0]=4513499529172096L;
	data[1]=-36521378093989888L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_226 = new BitSet(mk_tokenSet_226());
private static final long[] mk_tokenSet_227() {
	long[] data = new long[10];
	data[0]=4513499529085952L;
	data[1]=134217728L;
	data[2]=3L;
	data[3]=79212081844220L;
	return data;
}
public static final BitSet _tokenSet_227 = new BitSet(mk_tokenSet_227());
private static final long[] mk_tokenSet_228() {
	long[] data = new long[10];
	data[0]=6755399440816448L;
	data[1]=-41095346465505280L;
	data[2]=8589934591L;
	data[3]=144251183913168898L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_228 = new BitSet(mk_tokenSet_228());
private static final long[] mk_tokenSet_229() {
	long[] data = new long[10];
	data[0]=1024L;
	return data;
}
public static final BitSet _tokenSet_229 = new BitSet(mk_tokenSet_229());
private static final long[] mk_tokenSet_230() {
	long[] data = new long[10];
	data[0]=71106L;
	return data;
}
public static final BitSet _tokenSet_230 = new BitSet(mk_tokenSet_230());
private static final long[] mk_tokenSet_231() {
	long[] data = new long[10];
	data[0]=1410L;
	return data;
}
public static final BitSet _tokenSet_231 = new BitSet(mk_tokenSet_231());
private static final long[] mk_tokenSet_232() {
	long[] data = new long[10];
	data[0]=8796093091840L;
	return data;
}
public static final BitSet _tokenSet_232 = new BitSet(mk_tokenSet_232());
private static final long[] mk_tokenSet_233() {
	long[] data = new long[10];
	data[0]=-9215086848622372304L;
	data[1]=23010579748798479L;
	data[2]=-2305842941299523697L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_233 = new BitSet(mk_tokenSet_233());
private static final long[] mk_tokenSet_234() {
	long[] data = new long[10];
	data[0]=132498L;
	return data;
}
public static final BitSet _tokenSet_234 = new BitSet(mk_tokenSet_234());
private static final long[] mk_tokenSet_235() {
	long[] data = new long[10];
	data[0]=-9215086848622239822L;
	data[1]=23010579748798479L;
	data[2]=-2305842941299523697L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_235 = new BitSet(mk_tokenSet_235());
private static final long[] mk_tokenSet_236() {
	long[] data = new long[10];
	data[0]=8796093026304L;
	data[3]=65536L;
	return data;
}
public static final BitSet _tokenSet_236 = new BitSet(mk_tokenSet_236());
private static final long[] mk_tokenSet_237() {
	long[] data = new long[10];
	data[0]=722011013907922L;
	return data;
}
public static final BitSet _tokenSet_237 = new BitSet(mk_tokenSet_237());
private static final long[] mk_tokenSet_238() {
	long[] data = new long[10];
	data[0]=-9214364837608529934L;
	data[1]=23010579748798479L;
	data[2]=-2305842941299523697L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_238 = new BitSet(mk_tokenSet_238());
private static final long[] mk_tokenSet_239() {
	long[] data = new long[10];
	data[0]=722011013775424L;
	return data;
}
public static final BitSet _tokenSet_239 = new BitSet(mk_tokenSet_239());
private static final long[] mk_tokenSet_240() {
	long[] data = new long[10];
	data[0]=131346L;
	return data;
}
public static final BitSet _tokenSet_240 = new BitSet(mk_tokenSet_240());
private static final long[] mk_tokenSet_241() {
	long[] data = new long[10];
	data[0]=-9214364837600034830L;
	data[1]=23010579748798479L;
	data[2]=-2305842941299523697L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_241 = new BitSet(mk_tokenSet_241());
private static final long[] mk_tokenSet_242() {
	long[] data = new long[10];
	data[0]=8796093026304L;
	return data;
}
public static final BitSet _tokenSet_242 = new BitSet(mk_tokenSet_242());
private static final long[] mk_tokenSet_243() {
	long[] data = new long[10];
	data[0]=-9214364837600100366L;
	data[1]=23010579748798479L;
	data[2]=-2305842941299523697L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_243 = new BitSet(mk_tokenSet_243());
private static final long[] mk_tokenSet_244() {
	long[] data = new long[10];
	data[0]=-9215086848622437712L;
	data[1]=23010579748798479L;
	data[2]=-2305842391543709809L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_244 = new BitSet(mk_tokenSet_244());
private static final long[] mk_tokenSet_245() {
	long[] data = new long[10];
	data[0]=88064L;
	data[2]=549755813952L;
	data[3]=4398180859904L;
	return data;
}
public static final BitSet _tokenSet_245 = new BitSet(mk_tokenSet_245());
private static final long[] mk_tokenSet_246() {
	long[] data = new long[10];
	data[0]=-9214364837600034830L;
	data[1]=23010579748798479L;
	data[2]=-2305842391543709745L;
	data[3]=-216630182248448001L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_246 = new BitSet(mk_tokenSet_246());
private static final long[] mk_tokenSet_247() {
	long[] data = new long[10];
	data[0]=2251799813425472L;
	return data;
}
public static final BitSet _tokenSet_247 = new BitSet(mk_tokenSet_247());
private static final long[] mk_tokenSet_248() {
	long[] data = new long[10];
	data[1]=18014398509481984L;
	data[2]=7516208000L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_248 = new BitSet(mk_tokenSet_248());
private static final long[] mk_tokenSet_249() {
	long[] data = new long[10];
	data[0]=4503599629467648L;
	data[1]=22517998271070208L;
	data[2]=7516208000L;
	data[3]=12884901888L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_249 = new BitSet(mk_tokenSet_249());
private static final long[] mk_tokenSet_250() {
	long[] data = new long[10];
	data[1]=18014398509481984L;
	data[2]=7516192768L;
	return data;
}
public static final BitSet _tokenSet_250 = new BitSet(mk_tokenSet_250());
private static final long[] mk_tokenSet_251() {
	long[] data = new long[10];
	data[0]=4503599629467648L;
	data[1]=4503599761588224L;
	data[3]=12884901888L;
	return data;
}
public static final BitSet _tokenSet_251 = new BitSet(mk_tokenSet_251());
private static final long[] mk_tokenSet_252() {
	long[] data = new long[10];
	data[2]=-4611686018427386880L;
	data[3]=1L;
	return data;
}
public static final BitSet _tokenSet_252 = new BitSet(mk_tokenSet_252());
private static final long[] mk_tokenSet_253() {
	long[] data = new long[10];
	data[0]=-9215086848614049232L;
	data[1]=23010579748798479L;
	data[2]=-2305842941299523697L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_253 = new BitSet(mk_tokenSet_253());
private static final long[] mk_tokenSet_254() {
	long[] data = new long[10];
	data[0]=163840L;
	return data;
}
public static final BitSet _tokenSet_254 = new BitSet(mk_tokenSet_254());
private static final long[] mk_tokenSet_255() {
	long[] data = new long[20];
	data[0]=-250896L;
	for (int i = 1; i<=8; i++) { data[i]=-1L; }
	data[9]=134217727L;
	return data;
}
public static final BitSet _tokenSet_255 = new BitSet(mk_tokenSet_255());
private static final long[] mk_tokenSet_256() {
	long[] data = new long[10];
	data[0]=4503599627453568L;
	data[1]=70368878395392L;
	data[2]=64156073984L;
	data[3]=9393227825164L;
	return data;
}
public static final BitSet _tokenSet_256 = new BitSet(mk_tokenSet_256());
private static final long[] mk_tokenSet_257() {
	long[] data = new long[10];
	data[0]=4503599627437184L;
	data[1]=70368878395392L;
	data[2]=63350767616L;
	data[3]=8843337662476L;
	return data;
}
public static final BitSet _tokenSet_257 = new BitSet(mk_tokenSet_257());
private static final long[] mk_tokenSet_258() {
	long[] data = new long[10];
	data[0]=4503599627437184L;
	data[1]=70368878395392L;
	data[2]=60129542144L;
	data[3]=8843337662476L;
	return data;
}
public static final BitSet _tokenSet_258 = new BitSet(mk_tokenSet_258());
private static final long[] mk_tokenSet_259() {
	long[] data = new long[10];
	data[0]=66688L;
	return data;
}
public static final BitSet _tokenSet_259 = new BitSet(mk_tokenSet_259());
private static final long[] mk_tokenSet_260() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=134217728L;
	data[2]=481036337152L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_260 = new BitSet(mk_tokenSet_260());
private static final long[] mk_tokenSet_261() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=2305843009347911680L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_261 = new BitSet(mk_tokenSet_261());
private static final long[] mk_tokenSet_262() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=2305843009347911680L;
	data[2]=481036337152L;
	data[3]=8843337662464L;
	return data;
}
public static final BitSet _tokenSet_262 = new BitSet(mk_tokenSet_262());
private static final long[] mk_tokenSet_263() {
	long[] data = new long[10];
	data[0]=128L;
	data[1]=134217728L;
	data[3]=12884901888L;
	return data;
}
public static final BitSet _tokenSet_263 = new BitSet(mk_tokenSet_263());
private static final long[] mk_tokenSet_264() {
	long[] data = new long[10];
	data[0]=-9215086848622437712L;
	data[1]=23010579748798479L;
	data[2]=-2305842941299523697L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_264 = new BitSet(mk_tokenSet_264());
private static final long[] mk_tokenSet_265() {
	long[] data = new long[10];
	data[0]=4548683899097232L;
	data[1]=70368878395392L;
	data[2]=60129542147L;
	data[3]=79212216193020L;
	return data;
}
public static final BitSet _tokenSet_265 = new BitSet(mk_tokenSet_265());
private static final long[] mk_tokenSet_266() {
	long[] data = new long[10];
	data[0]=1282L;
	return data;
}
public static final BitSet _tokenSet_266 = new BitSet(mk_tokenSet_266());
private static final long[] mk_tokenSet_267() {
	long[] data = new long[10];
	data[0]=2101248L;
	return data;
}
public static final BitSet _tokenSet_267 = new BitSet(mk_tokenSet_267());
private static final long[] mk_tokenSet_268() {
	long[] data = new long[10];
	data[0]=9895604716608L;
	data[2]=549755813888L;
	data[3]=4410931412992L;
	return data;
}
public static final BitSet _tokenSet_268 = new BitSet(mk_tokenSet_268());
private static final long[] mk_tokenSet_269() {
	long[] data = new long[10];
	data[0]=66624L;
	data[2]=549755813888L;
	data[3]=4410931412992L;
	return data;
}
public static final BitSet _tokenSet_269 = new BitSet(mk_tokenSet_269());
private static final long[] mk_tokenSet_270() {
	long[] data = new long[10];
	data[0]=66624L;
	data[3]=12884901888L;
	return data;
}
public static final BitSet _tokenSet_270 = new BitSet(mk_tokenSet_270());
private static final long[] mk_tokenSet_271() {
	long[] data = new long[10];
	data[0]=8208L;
	return data;
}
public static final BitSet _tokenSet_271 = new BitSet(mk_tokenSet_271());
private static final long[] mk_tokenSet_272() {
	long[] data = new long[10];
	data[3]=12884901888L;
	return data;
}
public static final BitSet _tokenSet_272 = new BitSet(mk_tokenSet_272());
private static final long[] mk_tokenSet_273() {
	long[] data = new long[10];
	data[0]=4548683907560914L;
	data[1]=-4996180702396416L;
	data[2]=1103381977425248255L;
	data[3]=144392196279431166L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_273 = new BitSet(mk_tokenSet_273());
private static final long[] mk_tokenSet_274() {
	long[] data = new long[10];
	data[1]=4L;
	data[3]=4096L;
	return data;
}
public static final BitSet _tokenSet_274 = new BitSet(mk_tokenSet_274());
private static final long[] mk_tokenSet_275() {
	long[] data = new long[10];
	data[0]=74818L;
	data[2]=4503599627370496L;
	data[3]=140737488355328L;
	return data;
}
public static final BitSet _tokenSet_275 = new BitSet(mk_tokenSet_275());
private static final long[] mk_tokenSet_276() {
	long[] data = new long[10];
	data[3]=134348800L;
	return data;
}
public static final BitSet _tokenSet_276 = new BitSet(mk_tokenSet_276());
private static final long[] mk_tokenSet_277() {
	long[] data = new long[10];
	data[0]=16384L;
	return data;
}
public static final BitSet _tokenSet_277 = new BitSet(mk_tokenSet_277());
private static final long[] mk_tokenSet_278() {
	long[] data = new long[10];
	data[0]=-9215086848613974030L;
	data[1]=-70368341475313L;
	data[2]=-1161937980990947329L;
	data[3]=-281474976710657L;
	data[4]=15359L;
	return data;
}
public static final BitSet _tokenSet_278 = new BitSet(mk_tokenSet_278());
private static final long[] mk_tokenSet_279() {
	long[] data = new long[10];
	data[0]=4538783999479824L;
	data[1]=70368878395392L;
	data[2]=60129542144L;
	data[3]=72066437510725644L;
	return data;
}
public static final BitSet _tokenSet_279 = new BitSet(mk_tokenSet_279());
private static final long[] mk_tokenSet_280() {
	long[] data = new long[10];
	data[0]=6755399440891346L;
	data[1]=4573968505798656L;
	data[2]=1080863970698477443L;
	data[3]=79212216197118L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_280 = new BitSet(mk_tokenSet_280());
private static final long[] mk_tokenSet_281() {
	long[] data = new long[10];
	data[0]=4548683899097104L;
	data[1]=70368878395392L;
	data[2]=60129542147L;
	data[3]=72136806254907388L;
	return data;
}
public static final BitSet _tokenSet_281 = new BitSet(mk_tokenSet_281());
private static final long[] mk_tokenSet_282() {
	long[] data = new long[10];
	data[0]=4503599627370512L;
	data[1]=70368878395392L;
	data[2]=60129542144L;
	data[3]=8843337662476L;
	return data;
}
public static final BitSet _tokenSet_282 = new BitSet(mk_tokenSet_282());
private static final long[] mk_tokenSet_283() {
	long[] data = new long[10];
	data[0]=20480L;
	data[3]=134348800L;
	return data;
}
public static final BitSet _tokenSet_283 = new BitSet(mk_tokenSet_283());
private static final long[] mk_tokenSet_284() {
	long[] data = new long[10];
	data[0]=-9215086848622372304L;
	data[1]=23010579748798479L;
	data[2]=-2305842391543709809L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_284 = new BitSet(mk_tokenSet_284());
private static final long[] mk_tokenSet_285() {
	long[] data = new long[10];
	data[0]=-9215086848622364112L;
	data[1]=23010579748798479L;
	data[2]=-2305842391543709809L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_285 = new BitSet(mk_tokenSet_285());
private static final long[] mk_tokenSet_286() {
	long[] data = new long[10];
	data[0]=4503599627386896L;
	data[1]=70368878395392L;
	data[2]=60129542144L;
	data[3]=8843472011276L;
	return data;
}
public static final BitSet _tokenSet_286 = new BitSet(mk_tokenSet_286());
private static final long[] mk_tokenSet_287() {
	long[] data = new long[10];
	data[0]=6755399440891346L;
	data[1]=4573968505798656L;
	data[2]=1080863970698461184L;
	data[3]=8843472015374L;
	return data;
}
public static final BitSet _tokenSet_287 = new BitSet(mk_tokenSet_287());
private static final long[] mk_tokenSet_288() {
	long[] data = new long[10];
	data[0]=6755399440816448L;
	data[1]=4573968505798656L;
	data[2]=60129542144L;
	data[3]=8843337666574L;
	return data;
}
public static final BitSet _tokenSet_288 = new BitSet(mk_tokenSet_288());
private static final long[] mk_tokenSet_289() {
	long[] data = new long[10];
	data[0]=-9215086848622405072L;
	data[1]=23010579748798479L;
	data[2]=-2305842941299523697L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_289 = new BitSet(mk_tokenSet_289());
private static final long[] mk_tokenSet_290() {
	long[] data = new long[10];
	data[0]=8484306L;
	data[2]=1080863910568919040L;
	data[3]=134348800L;
	return data;
}
public static final BitSet _tokenSet_290 = new BitSet(mk_tokenSet_290());
private static final long[] mk_tokenSet_291() {
	long[] data = new long[10];
	data[0]=8484306L;
	data[3]=134348800L;
	return data;
}
public static final BitSet _tokenSet_291 = new BitSet(mk_tokenSet_291());
private static final long[] mk_tokenSet_292() {
	long[] data = new long[10];
	data[0]=-9215086848622396880L;
	data[1]=-36099165360439281L;
	data[2]=-2305842940494217217L;
	data[3]=-72479806503780353L;
	data[4]=15359L;
	return data;
}
public static final BitSet _tokenSet_292 = new BitSet(mk_tokenSet_292());
private static final long[] mk_tokenSet_293() {
	long[] data = new long[10];
	data[3]=72057594038714368L;
	return data;
}
public static final BitSet _tokenSet_293 = new BitSet(mk_tokenSet_293());
private static final long[] mk_tokenSet_294() {
	long[] data = new long[10];
	data[0]=9895613136338L;
	data[2]=1080864460324749184L;
	data[3]=4411065761794L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_294 = new BitSet(mk_tokenSet_294());
private static final long[] mk_tokenSet_295() {
	long[] data = new long[10];
	data[0]=9895613136338L;
	data[2]=1080864460324732928L;
	data[3]=4411065761794L;
	return data;
}
public static final BitSet _tokenSet_295 = new BitSet(mk_tokenSet_295());
private static final long[] mk_tokenSet_296() {
	long[] data = new long[10];
	data[0]=8486354L;
	data[2]=1080864460324732928L;
	data[3]=4411065761794L;
	return data;
}
public static final BitSet _tokenSet_296 = new BitSet(mk_tokenSet_296());
private static final long[] mk_tokenSet_297() {
	long[] data = new long[10];
	data[0]=8486354L;
	data[2]=1080863910568919040L;
	data[3]=13019250690L;
	return data;
}
public static final BitSet _tokenSet_297 = new BitSet(mk_tokenSet_297());
private static final long[] mk_tokenSet_298() {
	long[] data = new long[10];
	data[0]=8484306L;
	data[2]=1080863910568919040L;
	data[3]=13019250690L;
	return data;
}
public static final BitSet _tokenSet_298 = new BitSet(mk_tokenSet_298());
private static final long[] mk_tokenSet_299() {
	long[] data = new long[10];
	data[0]=8484306L;
	data[3]=13019250690L;
	return data;
}
public static final BitSet _tokenSet_299 = new BitSet(mk_tokenSet_299());
private static final long[] mk_tokenSet_300() {
	long[] data = new long[10];
	data[0]=4503599635854802L;
	data[1]=70368878395392L;
	data[2]=1080863970698461184L;
	data[3]=8843472011276L;
	return data;
}
public static final BitSet _tokenSet_300 = new BitSet(mk_tokenSet_300());
private static final long[] mk_tokenSet_301() {
	long[] data = new long[10];
	data[0]=20480L;
	return data;
}
public static final BitSet _tokenSet_301 = new BitSet(mk_tokenSet_301());
private static final long[] mk_tokenSet_302() {
	long[] data = new long[10];
	data[0]=4503599627374592L;
	data[1]=70368878395392L;
	data[2]=60129542144L;
	data[3]=8843337662476L;
	return data;
}
public static final BitSet _tokenSet_302 = new BitSet(mk_tokenSet_302());
private static final long[] mk_tokenSet_303() {
	long[] data = new long[10];
	data[0]=28672L;
	data[3]=134348800L;
	return data;
}
public static final BitSet _tokenSet_303 = new BitSet(mk_tokenSet_303());
private static final long[] mk_tokenSet_304() {
	long[] data = new long[10];
	data[0]=4513499527008272L;
	data[1]=134217728L;
	data[2]=3L;
	data[3]=79212081844220L;
	return data;
}
public static final BitSet _tokenSet_304 = new BitSet(mk_tokenSet_304());
private static final long[] mk_tokenSet_305() {
	long[] data = new long[10];
	data[0]=-9215086848613941262L;
	data[1]=-70368341475313L;
	data[2]=-1202461031788445697L;
	data[3]=-281474976710657L;
	data[4]=15359L;
	return data;
}
public static final BitSet _tokenSet_305 = new BitSet(mk_tokenSet_305());
private static final long[] mk_tokenSet_306() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=18014398643699712L;
	data[2]=7784628108L;
	data[3]=29734915334144L;
	data[4]=6656L;
	return data;
}
public static final BitSet _tokenSet_306 = new BitSet(mk_tokenSet_306());
private static final long[] mk_tokenSet_307() {
	long[] data = new long[10];
	data[0]=4548683899173970L;
	data[1]=-4996180702396416L;
	data[2]=1103381977425248255L;
	data[3]=144392196279431164L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_307 = new BitSet(mk_tokenSet_307());
private static final long[] mk_tokenSet_308() {
	long[] data = new long[10];
	data[0]=4548683899171922L;
	data[1]=-4996180702396416L;
	data[2]=1103381977425248255L;
	data[3]=144392196279431164L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_308 = new BitSet(mk_tokenSet_308());
private static final long[] mk_tokenSet_309() {
	long[] data = new long[20];
	data[0]=-16L;
	data[1]=-1L;
	data[2]=-2199023255553L;
	data[3]=-4097L;
	for (int i = 4; i<=8; i++) { data[i]=-1L; }
	data[9]=134217727L;
	return data;
}
public static final BitSet _tokenSet_309 = new BitSet(mk_tokenSet_309());
private static final long[] mk_tokenSet_310() {
	long[] data = new long[10];
	data[1]=18014398509481984L;
	data[2]=7516192772L;
	return data;
}
public static final BitSet _tokenSet_310 = new BitSet(mk_tokenSet_310());
private static final long[] mk_tokenSet_311() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=18014398643699712L;
	data[2]=7784611852L;
	data[3]=29734915334144L;
	data[4]=2560L;
	return data;
}
public static final BitSet _tokenSet_311 = new BitSet(mk_tokenSet_311());
private static final long[] mk_tokenSet_312() {
	long[] data = new long[10];
	data[0]=4548683907562962L;
	data[1]=-4996180702396416L;
	data[2]=1103381977425248255L;
	data[3]=216449790318145534L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_312 = new BitSet(mk_tokenSet_312());
private static final long[] mk_tokenSet_313() {
	long[] data = new long[10];
	data[0]=6755399440891346L;
	data[1]=-492581074993152L;
	data[2]=1103382527181062143L;
	data[3]=216454188364660734L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_313 = new BitSet(mk_tokenSet_313());
private static final long[] mk_tokenSet_314() {
	long[] data = new long[10];
	data[0]=9895604741314L;
	data[2]=4504149383200640L;
	data[3]=145148554117120L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_314 = new BitSet(mk_tokenSet_314());
private static final long[] mk_tokenSet_315() {
	long[] data = new long[10];
	data[0]=9895604741314L;
	data[2]=4504149383184384L;
	data[3]=145148554117120L;
	return data;
}
public static final BitSet _tokenSet_315 = new BitSet(mk_tokenSet_315());
private static final long[] mk_tokenSet_316() {
	long[] data = new long[10];
	data[0]=91330L;
	data[2]=4504149383184384L;
	data[3]=145148554117120L;
	return data;
}
public static final BitSet _tokenSet_316 = new BitSet(mk_tokenSet_316());
private static final long[] mk_tokenSet_317() {
	long[] data = new long[10];
	data[0]=91330L;
	data[2]=4503599627370496L;
	data[3]=140750507606016L;
	return data;
}
public static final BitSet _tokenSet_317 = new BitSet(mk_tokenSet_317());
private static final long[] mk_tokenSet_318() {
	long[] data = new long[10];
	data[0]=91330L;
	data[2]=4503599627370496L;
	data[3]=140737622704128L;
	return data;
}
public static final BitSet _tokenSet_318 = new BitSet(mk_tokenSet_318());
private static final long[] mk_tokenSet_319() {
	long[] data = new long[10];
	data[0]=2109440L;
	return data;
}
public static final BitSet _tokenSet_319 = new BitSet(mk_tokenSet_319());
private static final long[] mk_tokenSet_320() {
	long[] data = new long[10];
	data[0]=65808L;
	return data;
}
public static final BitSet _tokenSet_320 = new BitSet(mk_tokenSet_320());
private static final long[] mk_tokenSet_321() {
	long[] data = new long[10];
	data[0]=69632L;
	return data;
}
public static final BitSet _tokenSet_321 = new BitSet(mk_tokenSet_321());
private static final long[] mk_tokenSet_322() {
	long[] data = new long[10];
	data[0]=8192L;
	data[2]=134217728L;
	return data;
}
public static final BitSet _tokenSet_322 = new BitSet(mk_tokenSet_322());
private static final long[] mk_tokenSet_323() {
	long[] data = new long[10];
	data[0]=9895604741186L;
	data[2]=549755830144L;
	data[3]=4411065761792L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_323 = new BitSet(mk_tokenSet_323());
private static final long[] mk_tokenSet_324() {
	long[] data = new long[10];
	data[0]=9895604741186L;
	data[2]=549755813888L;
	data[3]=4411065761792L;
	return data;
}
public static final BitSet _tokenSet_324 = new BitSet(mk_tokenSet_324());
private static final long[] mk_tokenSet_325() {
	long[] data = new long[10];
	data[0]=91202L;
	data[2]=549755813888L;
	data[3]=4411065761792L;
	return data;
}
public static final BitSet _tokenSet_325 = new BitSet(mk_tokenSet_325());
private static final long[] mk_tokenSet_326() {
	long[] data = new long[10];
	data[0]=91202L;
	data[3]=13019250688L;
	return data;
}
public static final BitSet _tokenSet_326 = new BitSet(mk_tokenSet_326());
private static final long[] mk_tokenSet_327() {
	long[] data = new long[10];
	data[0]=91202L;
	data[3]=134348800L;
	return data;
}
public static final BitSet _tokenSet_327 = new BitSet(mk_tokenSet_327());
private static final long[] mk_tokenSet_328() {
	long[] data = new long[10];
	data[0]=4548683899097104L;
	data[1]=-41024977721360384L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_328 = new BitSet(mk_tokenSet_328());
private static final long[] mk_tokenSet_329() {
	long[] data = new long[10];
	data[0]=4548683909657040L;
	data[1]=-36521378093989888L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_329 = new BitSet(mk_tokenSet_329());
private static final long[] mk_tokenSet_330() {
	long[] data = new long[10];
	data[0]=6755399440824656L;
	data[1]=4573968505798656L;
	data[2]=1080863970698477443L;
	data[3]=72136806254911486L;
	data[4]=4096L;
	return data;
}
public static final BitSet _tokenSet_330 = new BitSet(mk_tokenSet_330());
private static final long[] mk_tokenSet_331() {
	long[] data = new long[10];
	data[0]=4513499535405392L;
	data[1]=134217728L;
	data[2]=3L;
	data[3]=79212081844220L;
	return data;
}
public static final BitSet _tokenSet_331 = new BitSet(mk_tokenSet_331());
private static final long[] mk_tokenSet_332() {
	long[] data = new long[10];
	data[0]=-9215086848613941262L;
	data[1]=-70368341475313L;
	data[2]=-1166431685013667841L;
	data[3]=-281474976710657L;
	data[4]=15359L;
	return data;
}
public static final BitSet _tokenSet_332 = new BitSet(mk_tokenSet_332());
private static final long[] mk_tokenSet_333() {
	long[] data = new long[10];
	data[0]=4548683907494224L;
	data[1]=70368878395392L;
	data[2]=60129542147L;
	data[3]=79212216193020L;
	return data;
}
public static final BitSet _tokenSet_333 = new BitSet(mk_tokenSet_333());
private static final long[] mk_tokenSet_334() {
	long[] data = new long[10];
	data[0]=8397136L;
	return data;
}
public static final BitSet _tokenSet_334 = new BitSet(mk_tokenSet_334());
private static final long[] mk_tokenSet_335() {
	long[] data = new long[10];
	data[0]=8397072L;
	return data;
}
public static final BitSet _tokenSet_335 = new BitSet(mk_tokenSet_335());
private static final long[] mk_tokenSet_336() {
	long[] data = new long[10];
	data[0]=4513499535408464L;
	data[1]=134217728L;
	data[2]=3L;
	data[3]=72136806120558588L;
	return data;
}
public static final BitSet _tokenSet_336 = new BitSet(mk_tokenSet_336());
private static final long[] mk_tokenSet_337() {
	long[] data = new long[10];
	data[0]=8400208L;
	return data;
}
public static final BitSet _tokenSet_337 = new BitSet(mk_tokenSet_337());
private static final long[] mk_tokenSet_338() {
	long[] data = new long[10];
	data[0]=4513499535408464L;
	data[1]=134217728L;
	data[2]=3L;
	data[3]=79212081844220L;
	return data;
}
public static final BitSet _tokenSet_338 = new BitSet(mk_tokenSet_338());
private static final long[] mk_tokenSet_339() {
	long[] data = new long[10];
	data[0]=8397074L;
	return data;
}
public static final BitSet _tokenSet_339 = new BitSet(mk_tokenSet_339());
private static final long[] mk_tokenSet_340() {
	long[] data = new long[10];
	data[0]=258L;
	return data;
}
public static final BitSet _tokenSet_340 = new BitSet(mk_tokenSet_340());
private static final long[] mk_tokenSet_341() {
	long[] data = new long[10];
	data[0]=4513499527016464L;
	data[1]=134217728L;
	data[2]=3L;
	data[3]=79212081844220L;
	return data;
}
public static final BitSet _tokenSet_341 = new BitSet(mk_tokenSet_341());
private static final long[] mk_tokenSet_342() {
	long[] data = new long[10];
	data[0]=8448L;
	return data;
}
public static final BitSet _tokenSet_342 = new BitSet(mk_tokenSet_342());
private static final long[] mk_tokenSet_343() {
	long[] data = new long[10];
	data[2]=805306368L;
	return data;
}
public static final BitSet _tokenSet_343 = new BitSet(mk_tokenSet_343());
private static final long[] mk_tokenSet_344() {
	long[] data = new long[20];
	data[0]=-16L;
	for (int i = 1; i<=8; i++) { data[i]=-1L; }
	data[9]=134217727L;
	return data;
}
public static final BitSet _tokenSet_344 = new BitSet(mk_tokenSet_344());
private static final long[] mk_tokenSet_345() {
	long[] data = new long[10];
	data[0]=8388944L;
	data[1]=134217728L;
	data[3]=12884901888L;
	return data;
}
public static final BitSet _tokenSet_345 = new BitSet(mk_tokenSet_345());
private static final long[] mk_tokenSet_346() {
	long[] data = new long[10];
	data[2]=1073741828L;
	return data;
}
public static final BitSet _tokenSet_346 = new BitSet(mk_tokenSet_346());
private static final long[] mk_tokenSet_347() {
	long[] data = new long[10];
	data[0]=8388944L;
	return data;
}
public static final BitSet _tokenSet_347 = new BitSet(mk_tokenSet_347());
private static final long[] mk_tokenSet_348() {
	long[] data = new long[10];
	data[0]=8388928L;
	data[1]=134217728L;
	data[3]=12884901888L;
	return data;
}
public static final BitSet _tokenSet_348 = new BitSet(mk_tokenSet_348());
private static final long[] mk_tokenSet_349() {
	long[] data = new long[10];
	data[0]=8388928L;
	return data;
}
public static final BitSet _tokenSet_349 = new BitSet(mk_tokenSet_349());
private static final long[] mk_tokenSet_350() {
	long[] data = new long[10];
	data[0]=6755399440882128L;
	data[1]=-36521378093957120L;
	data[2]=1080863979288395775L;
	data[3]=216308777951887358L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_350 = new BitSet(mk_tokenSet_350());
private static final long[] mk_tokenSet_351() {
	long[] data = new long[10];
	data[0]=4548683899097104L;
	data[1]=-36521378093989888L;
	data[2]=36028865738440703L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_351 = new BitSet(mk_tokenSet_351());
private static final long[] mk_tokenSet_352() {
	long[] data = new long[10];
	data[0]=8388864L;
	return data;
}
public static final BitSet _tokenSet_352 = new BitSet(mk_tokenSet_352());
private static final long[] mk_tokenSet_353() {
	long[] data = new long[20];
	data[0]=-10682384L;
	for (int i = 1; i<=8; i++) { data[i]=-1L; }
	data[9]=134217727L;
	return data;
}
public static final BitSet _tokenSet_353 = new BitSet(mk_tokenSet_353());
private static final long[] mk_tokenSet_354() {
	long[] data = new long[20];
	data[0]=-10682656L;
	for (int i = 1; i<=8; i++) { data[i]=-1L; }
	data[9]=134217727L;
	return data;
}
public static final BitSet _tokenSet_354 = new BitSet(mk_tokenSet_354());
private static final long[] mk_tokenSet_355() {
	long[] data = new long[10];
	data[0]=2097152L;
	return data;
}
public static final BitSet _tokenSet_355 = new BitSet(mk_tokenSet_355());
private static final long[] mk_tokenSet_356() {
	long[] data = new long[10];
	data[0]=4503599627370496L;
	data[1]=134217728L;
	data[3]=12884901888L;
	return data;
}
public static final BitSet _tokenSet_356 = new BitSet(mk_tokenSet_356());
private static final long[] mk_tokenSet_357() {
	long[] data = new long[10];
	data[0]=4503599629467648L;
	data[1]=134217728L;
	data[3]=12884901888L;
	return data;
}
public static final BitSet _tokenSet_357 = new BitSet(mk_tokenSet_357());
private static final long[] mk_tokenSet_358() {
	long[] data = new long[10];
	data[0]=4513499537559952L;
	data[1]=-36521378093989888L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_358 = new BitSet(mk_tokenSet_358());
private static final long[] mk_tokenSet_359() {
	long[] data = new long[20];
	data[0]=-1038L;
	for (int i = 1; i<=8; i++) { data[i]=-1L; }
	data[9]=134217727L;
	return data;
}
public static final BitSet _tokenSet_359 = new BitSet(mk_tokenSet_359());
private static final long[] mk_tokenSet_360() {
	long[] data = new long[10];
	data[0]=10486016L;
	return data;
}
public static final BitSet _tokenSet_360 = new BitSet(mk_tokenSet_360());
private static final long[] mk_tokenSet_361() {
	long[] data = new long[10];
	data[0]=-9218868437219016448L;
	data[1]=402702351L;
	data[2]=51539607552L;
	data[3]=563031557799936L;
	return data;
}
public static final BitSet _tokenSet_361 = new BitSet(mk_tokenSet_361());
private static final long[] mk_tokenSet_362() {
	long[] data = new long[10];
	data[0]=-9218868437227405312L;
	data[1]=402702351L;
	data[2]=51539607552L;
	data[3]=563031557799936L;
	return data;
}
public static final BitSet _tokenSet_362 = new BitSet(mk_tokenSet_362());
private static final long[] mk_tokenSet_363() {
	long[] data = new long[10];
	data[1]=90071992547409920L;
	data[2]=120L;
	data[3]=140735676416L;
	data[4]=8192L;
	return data;
}
public static final BitSet _tokenSet_363 = new BitSet(mk_tokenSet_363());
private static final long[] mk_tokenSet_364() {
	long[] data = new long[10];
	data[0]=4503599627452544L;
	data[1]=18084767387877376L;
	data[2]=64156073984L;
	data[3]=9393227825164L;
	return data;
}
public static final BitSet _tokenSet_364 = new BitSet(mk_tokenSet_364());
private static final long[] mk_tokenSet_365() {
	long[] data = new long[10];
	data[0]=-9214364837600075790L;
	data[1]=-70368341475313L;
	data[2]=-1161929184897925121L;
	data[3]=-281474976710657L;
	data[4]=15359L;
	return data;
}
public static final BitSet _tokenSet_365 = new BitSet(mk_tokenSet_365());
private static final long[] mk_tokenSet_366() {
	long[] data = new long[10];
	data[0]=-9215086848622240206L;
	data[1]=-70368341475313L;
	data[2]=-1161929184897925121L;
	data[3]=-72339069015425025L;
	data[4]=15359L;
	return data;
}
public static final BitSet _tokenSet_366 = new BitSet(mk_tokenSet_366());
private static final long[] mk_tokenSet_367() {
	long[] data = new long[10];
	data[0]=69632L;
	data[2]=281474976724992L;
	return data;
}
public static final BitSet _tokenSet_367 = new BitSet(mk_tokenSet_367());
private static final long[] mk_tokenSet_368() {
	long[] data = new long[10];
	data[1]=134217728L;
	data[2]=268419072L;
	data[3]=20891577671680L;
	data[4]=2560L;
	return data;
}
public static final BitSet _tokenSet_368 = new BitSet(mk_tokenSet_368());
private static final long[] mk_tokenSet_369() {
	long[] data = new long[10];
	data[2]=21990232555520L;
	return data;
}
public static final BitSet _tokenSet_369 = new BitSet(mk_tokenSet_369());
private static final long[] mk_tokenSet_370() {
	long[] data = new long[10];
	data[2]=246290604621824L;
	return data;
}
public static final BitSet _tokenSet_370 = new BitSet(mk_tokenSet_370());
private static final long[] mk_tokenSet_371() {
	long[] data = new long[10];
	data[0]=-9215086848622371278L;
	data[1]=23010579748798479L;
	data[2]=-2305842391543709809L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_371 = new BitSet(mk_tokenSet_371());
private static final long[] mk_tokenSet_372() {
	long[] data = new long[10];
	data[2]=4222124650659840L;
	return data;
}
public static final BitSet _tokenSet_372 = new BitSet(mk_tokenSet_372());
private static final long[] mk_tokenSet_373() {
	long[] data = new long[10];
	data[0]=128L;
	return data;
}
public static final BitSet _tokenSet_373 = new BitSet(mk_tokenSet_373());
private static final long[] mk_tokenSet_374() {
	long[] data = new long[10];
	data[0]=9218L;
	return data;
}
public static final BitSet _tokenSet_374 = new BitSet(mk_tokenSet_374());
private static final long[] mk_tokenSet_375() {
	long[] data = new long[10];
	data[0]=-9215086848622436814L;
	data[1]=-70368341475313L;
	data[2]=-2287827992228921345L;
	data[3]=-72479806503780353L;
	data[4]=15359L;
	return data;
}
public static final BitSet _tokenSet_375 = new BitSet(mk_tokenSet_375());
private static final long[] mk_tokenSet_376() {
	long[] data = new long[10];
	data[0]=-9215086848622436814L;
	data[1]=-36099165360439281L;
	data[2]=-2305842390738403329L;
	data[3]=-72479806503780353L;
	data[4]=15359L;
	return data;
}
public static final BitSet _tokenSet_376 = new BitSet(mk_tokenSet_376());
private static final long[] mk_tokenSet_377() {
	long[] data = new long[10];
	data[0]=-9215086848622429648L;
	data[1]=23010579748798479L;
	data[2]=-2305842391543709809L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_377 = new BitSet(mk_tokenSet_377());
private static final long[] mk_tokenSet_378() {
	long[] data = new long[10];
	data[0]=-9215086848622428622L;
	data[1]=-36099165360439281L;
	data[2]=-2305842390738403329L;
	data[3]=-72479806503780353L;
	data[4]=15359L;
	return data;
}
public static final BitSet _tokenSet_378 = new BitSet(mk_tokenSet_378());
private static final long[] mk_tokenSet_379() {
	long[] data = new long[10];
	data[0]=-9214364837600100366L;
	data[1]=23010579748798479L;
	data[2]=-2305842391543709809L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_379 = new BitSet(mk_tokenSet_379());
private static final long[] mk_tokenSet_380() {
	long[] data = new long[10];
	data[0]=4513499529172112L;
	data[1]=-36521378093989888L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_380 = new BitSet(mk_tokenSet_380());
private static final long[] mk_tokenSet_381() {
	long[] data = new long[10];
	data[0]=4513499529174160L;
	data[1]=-36521378093989888L;
	data[2]=68719476735L;
	data[3]=144251183913168892L;
	data[4]=14848L;
	return data;
}
public static final BitSet _tokenSet_381 = new BitSet(mk_tokenSet_381());
private static final long[] mk_tokenSet_382() {
	long[] data = new long[10];
	data[0]=3072L;
	return data;
}
public static final BitSet _tokenSet_382 = new BitSet(mk_tokenSet_382());
private static final long[] mk_tokenSet_383() {
	long[] data = new long[10];
	data[0]=83968L;
	data[2]=549755813952L;
	data[3]=4398180859904L;
	return data;
}
public static final BitSet _tokenSet_383 = new BitSet(mk_tokenSet_383());
private static final long[] mk_tokenSet_384() {
	long[] data = new long[10];
	data[0]=83968L;
	data[2]=549755813888L;
	data[3]=4398180859904L;
	return data;
}
public static final BitSet _tokenSet_384 = new BitSet(mk_tokenSet_384());
private static final long[] mk_tokenSet_385() {
	long[] data = new long[10];
	data[0]=83968L;
	data[3]=134348800L;
	return data;
}
public static final BitSet _tokenSet_385 = new BitSet(mk_tokenSet_385());
private static final long[] mk_tokenSet_386() {
	long[] data = new long[10];
	data[0]=67584L;
	return data;
}
public static final BitSet _tokenSet_386 = new BitSet(mk_tokenSet_386());
private static final long[] mk_tokenSet_387() {
	long[] data = new long[10];
	data[0]=-9223372036854775808L;
	data[1]=268484623L;
	data[2]=51539607552L;
	data[3]=563018672898048L;
	return data;
}
public static final BitSet _tokenSet_387 = new BitSet(mk_tokenSet_387());
private static final long[] mk_tokenSet_388() {
	long[] data = new long[10];
	data[3]=48L;
	return data;
}
public static final BitSet _tokenSet_388 = new BitSet(mk_tokenSet_388());
private static final long[] mk_tokenSet_389() {
	long[] data = new long[10];
	data[3]=192L;
	return data;
}
public static final BitSet _tokenSet_389 = new BitSet(mk_tokenSet_389());
private static final long[] mk_tokenSet_390() {
	long[] data = new long[10];
	data[3]=3584L;
	return data;
}
public static final BitSet _tokenSet_390 = new BitSet(mk_tokenSet_390());
private static final long[] mk_tokenSet_391() {
	long[] data = new long[10];
	data[3]=-218424581927469056L;
	data[4]=511L;
	return data;
}
public static final BitSet _tokenSet_391 = new BitSet(mk_tokenSet_391());
private static final long[] mk_tokenSet_392() {
	long[] data = new long[10];
	data[0]=-9214364837600034830L;
	data[1]=-70368341475313L;
	data[2]=-1202461031788445697L;
	data[3]=-72339069015425025L;
	data[4]=15359L;
	return data;
}
public static final BitSet _tokenSet_392 = new BitSet(mk_tokenSet_392());
private static final long[] mk_tokenSet_393() {
	long[] data = new long[10];
	data[0]=-9215086848614048976L;
	data[1]=23010579748798479L;
	data[2]=-2305842941299523697L;
	data[3]=-216630182382796801L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_393 = new BitSet(mk_tokenSet_393());
private static final long[] mk_tokenSet_394() {
	long[] data = new long[10];
	data[0]=-9215086848614049248L;
	data[1]=4996181239316495L;
	data[2]=-2305842948815716469L;
	data[3]=-216639012835557377L;
	data[4]=7167L;
	return data;
}
public static final BitSet _tokenSet_394 = new BitSet(mk_tokenSet_394());
private static final long[] mk_tokenSet_395() {
	long[] data = new long[10];
	data[0]=8397056L;
	return data;
}
public static final BitSet _tokenSet_395 = new BitSet(mk_tokenSet_395());
private static final long[] mk_tokenSet_396() {
	long[] data = new long[10];
	data[0]=4503599629467648L;
	return data;
}
public static final BitSet _tokenSet_396 = new BitSet(mk_tokenSet_396());
private static final long[] mk_tokenSet_397() {
	long[] data = new long[10];
	data[3]=8830452760576L;
	return data;
}
public static final BitSet _tokenSet_397 = new BitSet(mk_tokenSet_397());

}
